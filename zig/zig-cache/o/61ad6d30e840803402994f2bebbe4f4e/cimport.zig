pub const __int8_t = i8;
pub const __uint8_t = u8;
pub const __int16_t = c_short;
pub const __uint16_t = c_ushort;
pub const __int32_t = c_int;
pub const __uint32_t = c_uint;
pub const __int64_t = c_longlong;
pub const __uint64_t = c_ulonglong;
pub const __int_least8_t = i8;
pub const __uint_least8_t = u8;
pub const __int_least16_t = c_short;
pub const __uint_least16_t = c_ushort;
pub const __int_least32_t = c_int;
pub const __uint_least32_t = c_uint;
pub const __int_least64_t = c_longlong;
pub const __uint_least64_t = c_ulonglong;
pub const __intmax_t = c_longlong;
pub const __uintmax_t = c_ulonglong;
pub const __intptr_t = c_int;
pub const __uintptr_t = c_uint;
pub const intmax_t = __intmax_t;
pub const uintmax_t = __uintmax_t;
pub const int_least8_t = __int_least8_t;
pub const uint_least8_t = __uint_least8_t;
pub const int_least16_t = __int_least16_t;
pub const uint_least16_t = __uint_least16_t;
pub const int_least32_t = __int_least32_t;
pub const uint_least32_t = __uint_least32_t;
pub const int_least64_t = __int_least64_t;
pub const uint_least64_t = __uint_least64_t;
pub const int_fast8_t = i8;
pub const uint_fast8_t = u8;
pub const int_fast16_t = c_short;
pub const uint_fast16_t = c_ushort;
pub const int_fast32_t = c_int;
pub const uint_fast32_t = c_uint;
pub const int_fast64_t = c_longlong;
pub const uint_fast64_t = c_ulonglong;
pub const ptrdiff_t = c_int;
pub const wchar_t = c_uint;
const struct_unnamed_1 = extern struct {
    __clang_max_align_nonce1: c_longlong align(8),
    __clang_max_align_nonce2: c_longdouble align(8),
};
pub const max_align_t = struct_unnamed_1;
pub const Reset_IRQn = @enumToInt(enum_unnamed_2.Reset_IRQn);
pub const NonMaskableInt_IRQn = @enumToInt(enum_unnamed_2.NonMaskableInt_IRQn);
pub const HardFault_IRQn = @enumToInt(enum_unnamed_2.HardFault_IRQn);
pub const MemoryManagement_IRQn = @enumToInt(enum_unnamed_2.MemoryManagement_IRQn);
pub const BusFault_IRQn = @enumToInt(enum_unnamed_2.BusFault_IRQn);
pub const UsageFault_IRQn = @enumToInt(enum_unnamed_2.UsageFault_IRQn);
pub const SVCall_IRQn = @enumToInt(enum_unnamed_2.SVCall_IRQn);
pub const DebugMonitor_IRQn = @enumToInt(enum_unnamed_2.DebugMonitor_IRQn);
pub const PendSV_IRQn = @enumToInt(enum_unnamed_2.PendSV_IRQn);
pub const SysTick_IRQn = @enumToInt(enum_unnamed_2.SysTick_IRQn);
pub const POWER_CLOCK_IRQn = @enumToInt(enum_unnamed_2.POWER_CLOCK_IRQn);
pub const RADIO_IRQn = @enumToInt(enum_unnamed_2.RADIO_IRQn);
pub const UARTE0_UART0_IRQn = @enumToInt(enum_unnamed_2.UARTE0_UART0_IRQn);
pub const SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn = @enumToInt(enum_unnamed_2.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn);
pub const SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQn = @enumToInt(enum_unnamed_2.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQn);
pub const NFCT_IRQn = @enumToInt(enum_unnamed_2.NFCT_IRQn);
pub const GPIOTE_IRQn = @enumToInt(enum_unnamed_2.GPIOTE_IRQn);
pub const SAADC_IRQn = @enumToInt(enum_unnamed_2.SAADC_IRQn);
pub const TIMER0_IRQn = @enumToInt(enum_unnamed_2.TIMER0_IRQn);
pub const TIMER1_IRQn = @enumToInt(enum_unnamed_2.TIMER1_IRQn);
pub const TIMER2_IRQn = @enumToInt(enum_unnamed_2.TIMER2_IRQn);
pub const RTC0_IRQn = @enumToInt(enum_unnamed_2.RTC0_IRQn);
pub const TEMP_IRQn = @enumToInt(enum_unnamed_2.TEMP_IRQn);
pub const RNG_IRQn = @enumToInt(enum_unnamed_2.RNG_IRQn);
pub const ECB_IRQn = @enumToInt(enum_unnamed_2.ECB_IRQn);
pub const CCM_AAR_IRQn = @enumToInt(enum_unnamed_2.CCM_AAR_IRQn);
pub const WDT_IRQn = @enumToInt(enum_unnamed_2.WDT_IRQn);
pub const RTC1_IRQn = @enumToInt(enum_unnamed_2.RTC1_IRQn);
pub const QDEC_IRQn = @enumToInt(enum_unnamed_2.QDEC_IRQn);
pub const COMP_LPCOMP_IRQn = @enumToInt(enum_unnamed_2.COMP_LPCOMP_IRQn);
pub const SWI0_EGU0_IRQn = @enumToInt(enum_unnamed_2.SWI0_EGU0_IRQn);
pub const SWI1_EGU1_IRQn = @enumToInt(enum_unnamed_2.SWI1_EGU1_IRQn);
pub const SWI2_EGU2_IRQn = @enumToInt(enum_unnamed_2.SWI2_EGU2_IRQn);
pub const SWI3_EGU3_IRQn = @enumToInt(enum_unnamed_2.SWI3_EGU3_IRQn);
pub const SWI4_EGU4_IRQn = @enumToInt(enum_unnamed_2.SWI4_EGU4_IRQn);
pub const SWI5_EGU5_IRQn = @enumToInt(enum_unnamed_2.SWI5_EGU5_IRQn);
pub const TIMER3_IRQn = @enumToInt(enum_unnamed_2.TIMER3_IRQn);
pub const TIMER4_IRQn = @enumToInt(enum_unnamed_2.TIMER4_IRQn);
pub const PWM0_IRQn = @enumToInt(enum_unnamed_2.PWM0_IRQn);
pub const PDM_IRQn = @enumToInt(enum_unnamed_2.PDM_IRQn);
pub const MWU_IRQn = @enumToInt(enum_unnamed_2.MWU_IRQn);
pub const PWM1_IRQn = @enumToInt(enum_unnamed_2.PWM1_IRQn);
pub const PWM2_IRQn = @enumToInt(enum_unnamed_2.PWM2_IRQn);
pub const SPIM2_SPIS2_SPI2_IRQn = @enumToInt(enum_unnamed_2.SPIM2_SPIS2_SPI2_IRQn);
pub const RTC2_IRQn = @enumToInt(enum_unnamed_2.RTC2_IRQn);
pub const I2S_IRQn = @enumToInt(enum_unnamed_2.I2S_IRQn);
pub const FPU_IRQn = @enumToInt(enum_unnamed_2.FPU_IRQn);
pub const USBD_IRQn = @enumToInt(enum_unnamed_2.USBD_IRQn);
pub const UARTE1_IRQn = @enumToInt(enum_unnamed_2.UARTE1_IRQn);
pub const QSPI_IRQn = @enumToInt(enum_unnamed_2.QSPI_IRQn);
pub const CRYPTOCELL_IRQn = @enumToInt(enum_unnamed_2.CRYPTOCELL_IRQn);
pub const PWM3_IRQn = @enumToInt(enum_unnamed_2.PWM3_IRQn);
pub const SPIM3_IRQn = @enumToInt(enum_unnamed_2.SPIM3_IRQn);
const enum_unnamed_2 = extern enum(c_int) {
    Reset_IRQn = -15,
    NonMaskableInt_IRQn = -14,
    HardFault_IRQn = -13,
    MemoryManagement_IRQn = -12,
    BusFault_IRQn = -11,
    UsageFault_IRQn = -10,
    SVCall_IRQn = -5,
    DebugMonitor_IRQn = -4,
    PendSV_IRQn = -2,
    SysTick_IRQn = -1,
    POWER_CLOCK_IRQn = 0,
    RADIO_IRQn = 1,
    UARTE0_UART0_IRQn = 2,
    SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn = 3,
    SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQn = 4,
    NFCT_IRQn = 5,
    GPIOTE_IRQn = 6,
    SAADC_IRQn = 7,
    TIMER0_IRQn = 8,
    TIMER1_IRQn = 9,
    TIMER2_IRQn = 10,
    RTC0_IRQn = 11,
    TEMP_IRQn = 12,
    RNG_IRQn = 13,
    ECB_IRQn = 14,
    CCM_AAR_IRQn = 15,
    WDT_IRQn = 16,
    RTC1_IRQn = 17,
    QDEC_IRQn = 18,
    COMP_LPCOMP_IRQn = 19,
    SWI0_EGU0_IRQn = 20,
    SWI1_EGU1_IRQn = 21,
    SWI2_EGU2_IRQn = 22,
    SWI3_EGU3_IRQn = 23,
    SWI4_EGU4_IRQn = 24,
    SWI5_EGU5_IRQn = 25,
    TIMER3_IRQn = 26,
    TIMER4_IRQn = 27,
    PWM0_IRQn = 28,
    PDM_IRQn = 29,
    MWU_IRQn = 32,
    PWM1_IRQn = 33,
    PWM2_IRQn = 34,
    SPIM2_SPIS2_SPI2_IRQn = 35,
    RTC2_IRQn = 36,
    I2S_IRQn = 37,
    FPU_IRQn = 38,
    USBD_IRQn = 39,
    UARTE1_IRQn = 40,
    QSPI_IRQn = 41,
    CRYPTOCELL_IRQn = 42,
    PWM3_IRQn = 45,
    SPIM3_IRQn = 47,
    _,
};
pub const IRQn_Type = enum_unnamed_2;
pub const struct_T_UINT32 = packed struct {
    v: u32,
};
pub const struct_T_UINT16_WRITE = packed struct {
    v: u16,
};
pub const struct_T_UINT16_READ = packed struct {
    v: u16,
};
pub const struct_T_UINT32_WRITE = packed struct {
    v: u32,
};
pub const struct_T_UINT32_READ = packed struct {
    v: u32,
};
pub const __cmsis_start = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:131:39
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __enable_irq = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:196:27
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __disable_irq = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:207:27
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __get_CONTROL = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:218:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __set_CONTROL = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:248:27
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __get_IPSR = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:272:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __get_APSR = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:286:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __get_xPSR = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:300:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __get_PSP = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:314:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __set_PSP = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:344:27
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __get_MSP = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:368:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __set_MSP = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:398:27
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __get_PRIMASK = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:449:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __set_PRIMASK = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:479:27
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __enable_fault_irq = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:506:27
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __disable_fault_irq = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:517:27
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __get_BASEPRI = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:528:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __set_BASEPRI = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:558:27
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __set_BASEPRI_MAX = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:583:27
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __get_FAULTMASK = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:594:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __set_FAULTMASK = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:624:27
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:841:10: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const __get_FPSCR = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:833:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:867:3: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const __set_FPSCR = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:859:27
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __ISB = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:933:27
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __DSB = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:944:27
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __DMB = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:955:27
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __REV = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:967:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __REV16 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:986:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __REVSH = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1001:30
pub fn __ROR(arg_op1: u32, arg_op2: u32) callconv(.C) u32 {
    var op1 = arg_op1;
    var op2 = arg_op2;
    op2 %= @as(c_uint, 32);
    if (op2 == @as(c_uint, 0)) {
        return op1;
    }
    return ((op1 >> @intCast(u5, op2)) | (op1 << @intCast(u5, (@as(c_uint, 32) -% op2))));
} // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __RBIT = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1048:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1093:10: warning: TODO implement translation of CastKind BuiltinFnToFnPtr
pub const __CLZ = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1078:30
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __LDREXB = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1107:30
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __LDREXH = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1129:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __LDREXW = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1151:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __STREXB = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1168:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __STREXH = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1185:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __STREXW = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1202:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __CLREX = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1215:27
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __RRX = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1268:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __LDRBT = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1283:30
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __LDRHT = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1305:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __LDRT = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1327:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __STRBT = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1342:27
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __STRHT = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1354:27
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __STRT = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1366:27
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __SADD8 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1621:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __QADD8 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1629:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __SHADD8 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1637:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __UADD8 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1645:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __UQADD8 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1653:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __UHADD8 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1661:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __SSUB8 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1670:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __QSUB8 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1678:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __SHSUB8 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1686:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __USUB8 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1694:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __UQSUB8 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1702:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __UHSUB8 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1710:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __SADD16 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1719:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __QADD16 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1727:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __SHADD16 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1735:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __UADD16 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1743:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __UQADD16 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1751:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __UHADD16 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1759:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __SSUB16 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1767:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __QSUB16 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1775:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __SHSUB16 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1783:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __USUB16 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1791:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __UQSUB16 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1799:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __UHSUB16 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1807:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __SASX = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1815:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __QASX = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1823:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __SHASX = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1831:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __UASX = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1839:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __UQASX = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1847:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __UHASX = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1855:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __SSAX = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1863:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __QSAX = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1871:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __SHSAX = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1879:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __USAX = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1887:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __UQSAX = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1895:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __UHSAX = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1903:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __USAD8 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1911:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __USADA8 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1919:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __UXTB16 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1941:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __UXTAB16 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1949:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __SXTB16 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1957:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __SXTAB16 = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1965:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __SMUAD = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1973:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __SMUADX = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1981:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __SMLAD = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1989:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __SMLADX = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1997:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:2007:9: warning: TODO implement translation of DeclStmt kind Record
pub const __SMLALD = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:2005:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:2024:9: warning: TODO implement translation of DeclStmt kind Record
pub const __SMLALDX = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:2022:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __SMUSD = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:2039:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __SMUSDX = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:2047:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __SMLSD = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:2055:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __SMLSDX = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:2063:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:2073:9: warning: TODO implement translation of DeclStmt kind Record
pub const __SMLSLD = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:2071:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:2090:9: warning: TODO implement translation of DeclStmt kind Record
pub const __SMLSLDX = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:2088:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __SEL = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:2105:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __QADD = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:2113:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __QSUB = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:2121:31
// /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __SMMLA = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:2154:30
const struct_unnamed_4 = opaque {}; // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/core_cm4.h:263:14: warning: struct demoted to opaque type - has bitfield
const union_unnamed_3 = extern union {
    b: struct_unnamed_4,
    w: u32,
};
pub const APSR_Type = union_unnamed_3;
const struct_unnamed_6 = opaque {}; // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/core_cm4.h:302:14: warning: struct demoted to opaque type - has bitfield
const union_unnamed_5 = extern union {
    b: struct_unnamed_6,
    w: u32,
};
pub const IPSR_Type = union_unnamed_5;
const struct_unnamed_8 = opaque {}; // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/core_cm4.h:320:14: warning: struct demoted to opaque type - has bitfield
const union_unnamed_7 = extern union {
    b: struct_unnamed_8,
    w: u32,
};
pub const xPSR_Type = union_unnamed_7;
const struct_unnamed_10 = opaque {}; // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/core_cm4.h:375:14: warning: struct demoted to opaque type - has bitfield
const union_unnamed_9 = extern union {
    b: struct_unnamed_10,
    w: u32,
};
pub const CONTROL_Type = union_unnamed_9;
const struct_unnamed_11 = extern struct {
    ISER: [8]u32,
    RESERVED0: [24]u32,
    ICER: [8]u32,
    RESERVED1: [24]u32,
    ISPR: [8]u32,
    RESERVED2: [24]u32,
    ICPR: [8]u32,
    RESERVED3: [24]u32,
    IABR: [8]u32,
    RESERVED4: [56]u32,
    IP: [240]u8,
    RESERVED5: [644]u32,
    STIR: u32,
};
pub const NVIC_Type = struct_unnamed_11;
const struct_unnamed_12 = extern struct {
    CPUID: u32,
    ICSR: u32,
    VTOR: u32,
    AIRCR: u32,
    SCR: u32,
    CCR: u32,
    SHP: [12]u8,
    SHCSR: u32,
    CFSR: u32,
    HFSR: u32,
    DFSR: u32,
    MMFAR: u32,
    BFAR: u32,
    AFSR: u32,
    PFR: [2]u32,
    DFR: u32,
    ADR: u32,
    MMFR: [4]u32,
    ISAR: [5]u32,
    RESERVED0: [5]u32,
    CPACR: u32,
};
pub const SCB_Type = struct_unnamed_12;
const struct_unnamed_13 = extern struct {
    RESERVED0: [1]u32,
    ICTR: u32,
    ACTLR: u32,
};
pub const SCnSCB_Type = struct_unnamed_13;
const struct_unnamed_14 = extern struct {
    CTRL: u32,
    LOAD: u32,
    VAL: u32,
    CALIB: u32,
};
pub const SysTick_Type = struct_unnamed_14;
const union_unnamed_16 = extern union {
    u8: u8,
    u16: u16,
    u32: u32,
};
const struct_unnamed_15 = extern struct {
    PORT: [32]union_unnamed_16,
    RESERVED0: [864]u32,
    TER: u32,
    RESERVED1: [15]u32,
    TPR: u32,
    RESERVED2: [15]u32,
    TCR: u32,
    RESERVED3: [32]u32,
    RESERVED4: [43]u32,
    LAR: u32,
    LSR: u32,
    RESERVED5: [6]u32,
    PID4: u32,
    PID5: u32,
    PID6: u32,
    PID7: u32,
    PID0: u32,
    PID1: u32,
    PID2: u32,
    PID3: u32,
    CID0: u32,
    CID1: u32,
    CID2: u32,
    CID3: u32,
};
pub const ITM_Type = struct_unnamed_15;
const struct_unnamed_17 = extern struct {
    CTRL: u32,
    CYCCNT: u32,
    CPICNT: u32,
    EXCCNT: u32,
    SLEEPCNT: u32,
    LSUCNT: u32,
    FOLDCNT: u32,
    PCSR: u32,
    COMP0: u32,
    MASK0: u32,
    FUNCTION0: u32,
    RESERVED0: [1]u32,
    COMP1: u32,
    MASK1: u32,
    FUNCTION1: u32,
    RESERVED1: [1]u32,
    COMP2: u32,
    MASK2: u32,
    FUNCTION2: u32,
    RESERVED2: [1]u32,
    COMP3: u32,
    MASK3: u32,
    FUNCTION3: u32,
};
pub const DWT_Type = struct_unnamed_17;
const struct_unnamed_18 = extern struct {
    SSPSR: u32,
    CSPSR: u32,
    RESERVED0: [2]u32,
    ACPR: u32,
    RESERVED1: [55]u32,
    SPPR: u32,
    RESERVED2: [131]u32,
    FFSR: u32,
    FFCR: u32,
    FSCR: u32,
    RESERVED3: [759]u32,
    TRIGGER: u32,
    FIFO0: u32,
    ITATBCTR2: u32,
    RESERVED4: [1]u32,
    ITATBCTR0: u32,
    FIFO1: u32,
    ITCTRL: u32,
    RESERVED5: [39]u32,
    CLAIMSET: u32,
    CLAIMCLR: u32,
    RESERVED7: [8]u32,
    DEVID: u32,
    DEVTYPE: u32,
};
pub const TPI_Type = struct_unnamed_18;
const struct_unnamed_19 = extern struct {
    TYPE: u32,
    CTRL: u32,
    RNR: u32,
    RBAR: u32,
    RASR: u32,
    RBAR_A1: u32,
    RASR_A1: u32,
    RBAR_A2: u32,
    RASR_A2: u32,
    RBAR_A3: u32,
    RASR_A3: u32,
};
pub const MPU_Type = struct_unnamed_19;
const struct_unnamed_20 = extern struct {
    RESERVED0: [1]u32,
    FPCCR: u32,
    FPCAR: u32,
    FPDSCR: u32,
    MVFR0: u32,
    MVFR1: u32,
    MVFR2: u32,
};
pub const FPU_Type = struct_unnamed_20;
const struct_unnamed_21 = extern struct {
    DHCSR: u32,
    DCRSR: u32,
    DCRDR: u32,
    DEMCR: u32,
};
pub const CoreDebug_Type = struct_unnamed_21;
pub fn __NVIC_SetPriorityGrouping(arg_PriorityGroup: u32) callconv(.C) void {
    var PriorityGroup = arg_PriorityGroup;
    var reg_value: u32 = undefined;
    var PriorityGroupTmp: u32 = (PriorityGroup & @bitCast(u32, @truncate(c_uint, @as(c_ulong, 7))));
    reg_value = (@intToPtr([*c]SCB_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 3328)))).*.AIRCR;
    reg_value &= ~(@bitCast(u32, @truncate(c_uint, ((@as(c_ulong, 65535) << @intCast(@import("std").math.Log2Int(c_ulong), 16)) | (@as(c_ulong, 7) << @intCast(@import("std").math.Log2Int(c_ulong), 8))))));
    reg_value = ((reg_value | (@bitCast(u32, @truncate(c_uint, @as(c_ulong, 1530))) << @intCast(u5, 16))) | (PriorityGroupTmp << @intCast(u5, 8)));
    (@intToPtr([*c]SCB_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 3328)))).*.AIRCR = reg_value;
}
pub fn __NVIC_GetPriorityGrouping() callconv(.C) u32 {
    return (@bitCast(u32, @truncate(c_uint, ((@bitCast(c_ulong, @as(c_ulong, (@intToPtr([*c]SCB_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 3328)))).*.AIRCR)) & (@as(c_ulong, 7) << @intCast(@import("std").math.Log2Int(c_ulong), 8))) >> @intCast(@import("std").math.Log2Int(c_ulong), 8)))));
} // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __NVIC_EnableIRQ = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/core_cm4.h:1679:22
pub fn __NVIC_GetEnableIRQ(arg_IRQn: IRQn_Type) callconv(.C) u32 {
    var IRQn = arg_IRQn;
    if (@enumToInt((IRQn)) >= @as(c_int, 0)) {
        return (@bitCast(u32, @truncate(c_uint, (if ((@bitCast(c_ulong, @as(c_ulong, (@intToPtr([*c]NVIC_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 256)))).*.ISER[((@enumToInt(IRQn)) >> @intCast(u5, 5))])) & (@as(c_ulong, 1) << @intCast(@import("std").math.Log2Int(c_ulong), (@bitCast(c_ulong, @as(c_ulong, (@enumToInt(IRQn)))) & @as(c_ulong, 31))))) != @as(c_ulong, 0)) @as(c_ulong, 1) else @as(c_ulong, 0)))));
    } else {
        return (@as(c_uint, 0));
    }
    return 0;
}
pub fn __NVIC_DisableIRQ(arg_IRQn: IRQn_Type) callconv(.C) void {
    var IRQn = arg_IRQn;
    if (@enumToInt((IRQn)) >= @as(c_int, 0)) {
        (@intToPtr([*c]NVIC_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 256)))).*.ICER[((@enumToInt(IRQn)) >> @intCast(u5, 5))] = @bitCast(u32, @truncate(c_uint, (@as(c_ulong, 1) << @intCast(@import("std").math.Log2Int(c_ulong), (@bitCast(c_ulong, @as(c_ulong, (@enumToInt(IRQn)))) & @as(c_ulong, 31))))));
        __DSB();
        __ISB();
    }
}
pub fn __NVIC_GetPendingIRQ(arg_IRQn: IRQn_Type) callconv(.C) u32 {
    var IRQn = arg_IRQn;
    if (@enumToInt((IRQn)) >= @as(c_int, 0)) {
        return (@bitCast(u32, @truncate(c_uint, (if ((@bitCast(c_ulong, @as(c_ulong, (@intToPtr([*c]NVIC_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 256)))).*.ISPR[((@enumToInt(IRQn)) >> @intCast(u5, 5))])) & (@as(c_ulong, 1) << @intCast(@import("std").math.Log2Int(c_ulong), (@bitCast(c_ulong, @as(c_ulong, (@enumToInt(IRQn)))) & @as(c_ulong, 31))))) != @as(c_ulong, 0)) @as(c_ulong, 1) else @as(c_ulong, 0)))));
    } else {
        return (@as(c_uint, 0));
    }
    return 0;
}
pub fn __NVIC_SetPendingIRQ(arg_IRQn: IRQn_Type) callconv(.C) void {
    var IRQn = arg_IRQn;
    if (@enumToInt((IRQn)) >= @as(c_int, 0)) {
        (@intToPtr([*c]NVIC_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 256)))).*.ISPR[((@enumToInt(IRQn)) >> @intCast(u5, 5))] = @bitCast(u32, @truncate(c_uint, (@as(c_ulong, 1) << @intCast(@import("std").math.Log2Int(c_ulong), (@bitCast(c_ulong, @as(c_ulong, (@enumToInt(IRQn)))) & @as(c_ulong, 31))))));
    }
}
pub fn __NVIC_ClearPendingIRQ(arg_IRQn: IRQn_Type) callconv(.C) void {
    var IRQn = arg_IRQn;
    if (@enumToInt((IRQn)) >= @as(c_int, 0)) {
        (@intToPtr([*c]NVIC_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 256)))).*.ICPR[((@enumToInt(IRQn)) >> @intCast(u5, 5))] = @bitCast(u32, @truncate(c_uint, (@as(c_ulong, 1) << @intCast(@import("std").math.Log2Int(c_ulong), (@bitCast(c_ulong, @as(c_ulong, (@enumToInt(IRQn)))) & @as(c_ulong, 31))))));
    }
}
pub fn __NVIC_GetActive(arg_IRQn: IRQn_Type) callconv(.C) u32 {
    var IRQn = arg_IRQn;
    if (@enumToInt((IRQn)) >= @as(c_int, 0)) {
        return (@bitCast(u32, @truncate(c_uint, (if ((@bitCast(c_ulong, @as(c_ulong, (@intToPtr([*c]NVIC_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 256)))).*.IABR[((@enumToInt(IRQn)) >> @intCast(u5, 5))])) & (@as(c_ulong, 1) << @intCast(@import("std").math.Log2Int(c_ulong), (@bitCast(c_ulong, @as(c_ulong, (@enumToInt(IRQn)))) & @as(c_ulong, 31))))) != @as(c_ulong, 0)) @as(c_ulong, 1) else @as(c_ulong, 0)))));
    } else {
        return (@as(c_uint, 0));
    }
    return 0;
}
pub fn __NVIC_SetPriority(arg_IRQn: IRQn_Type, arg_priority: u32) callconv(.C) void {
    var IRQn = arg_IRQn;
    var priority = arg_priority;
    if (@enumToInt((IRQn)) >= @as(c_int, 0)) {
        (@intToPtr([*c]NVIC_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 256)))).*.IP[(@enumToInt(IRQn))] = @bitCast(u8, @truncate(u8, ((priority << @intCast(u5, (@as(c_uint, 8) -% @bitCast(c_uint, @as(c_int, 3))))) & @bitCast(u32, @truncate(c_uint, @as(c_ulong, 255))))));
    } else {
        (@intToPtr([*c]SCB_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 3328)))).*.SHP[((@bitCast(c_ulong, @as(c_ulong, (@enumToInt(IRQn)))) & @as(c_ulong, 15)) -% @as(c_ulong, 4))] = @bitCast(u8, @truncate(u8, ((priority << @intCast(u5, (@as(c_uint, 8) -% @bitCast(c_uint, @as(c_int, 3))))) & @bitCast(u32, @truncate(c_uint, @as(c_ulong, 255))))));
    }
}
pub fn __NVIC_GetPriority(arg_IRQn: IRQn_Type) callconv(.C) u32 {
    var IRQn = arg_IRQn;
    if (@enumToInt((IRQn)) >= @as(c_int, 0)) {
        return (@bitCast(u32, @as(c_uint, (@intToPtr([*c]NVIC_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 256)))).*.IP[(@enumToInt(IRQn))])) >> @intCast(u5, (@as(c_uint, 8) -% @bitCast(c_uint, @as(c_int, 3)))));
    } else {
        return (@bitCast(u32, @as(c_uint, (@intToPtr([*c]SCB_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 3328)))).*.SHP[((@bitCast(c_ulong, @as(c_ulong, (@enumToInt(IRQn)))) & @as(c_ulong, 15)) -% @as(c_ulong, 4))])) >> @intCast(u5, (@as(c_uint, 8) -% @bitCast(c_uint, @as(c_int, 3)))));
    }
    return 0;
}
pub fn NVIC_EncodePriority(arg_PriorityGroup: u32, arg_PreemptPriority: u32, arg_SubPriority: u32) callconv(.C) u32 {
    var PriorityGroup = arg_PriorityGroup;
    var PreemptPriority = arg_PreemptPriority;
    var SubPriority = arg_SubPriority;
    var PriorityGroupTmp: u32 = (PriorityGroup & @bitCast(u32, @truncate(c_uint, @as(c_ulong, 7))));
    var PreemptPriorityBits: u32 = undefined;
    var SubPriorityBits: u32 = undefined;
    PreemptPriorityBits = if ((@as(c_ulong, 7) -% @bitCast(c_ulong, @as(c_ulong, PriorityGroupTmp))) > @bitCast(c_ulong, @as(c_ulong, @bitCast(u32, (@as(c_int, 3)))))) @bitCast(u32, (@as(c_int, 3))) else @bitCast(u32, @truncate(c_uint, (@as(c_ulong, 7) -% @bitCast(c_ulong, @as(c_ulong, PriorityGroupTmp)))));
    SubPriorityBits = if ((PriorityGroupTmp +% @bitCast(u32, (@as(c_int, 3)))) < @bitCast(u32, @truncate(c_uint, @as(c_ulong, 7)))) @bitCast(u32, @truncate(c_uint, @as(c_ulong, 0))) else @bitCast(u32, @truncate(c_uint, ((@bitCast(c_ulong, @as(c_ulong, PriorityGroupTmp)) -% @as(c_ulong, 7)) +% @bitCast(c_ulong, @as(c_ulong, @bitCast(u32, (@as(c_int, 3))))))));
    return (((PreemptPriority & @bitCast(u32, @truncate(c_uint, ((@as(c_ulong, 1) << @intCast(@import("std").math.Log2Int(c_ulong), (PreemptPriorityBits))) -% @as(c_ulong, 1))))) << @intCast(@import("std").math.Log2Int(c_uint), SubPriorityBits)) | (SubPriority & @bitCast(u32, @truncate(c_uint, ((@as(c_ulong, 1) << @intCast(@import("std").math.Log2Int(c_ulong), (SubPriorityBits))) -% @as(c_ulong, 1))))));
}
pub fn NVIC_DecodePriority(arg_Priority: u32, arg_PriorityGroup: u32, pPreemptPriority: [*c]u32, pSubPriority: [*c]u32) callconv(.C) void {
    var Priority = arg_Priority;
    var PriorityGroup = arg_PriorityGroup;
    var PriorityGroupTmp: u32 = (PriorityGroup & @bitCast(u32, @truncate(c_uint, @as(c_ulong, 7))));
    var PreemptPriorityBits: u32 = undefined;
    var SubPriorityBits: u32 = undefined;
    PreemptPriorityBits = if ((@as(c_ulong, 7) -% @bitCast(c_ulong, @as(c_ulong, PriorityGroupTmp))) > @bitCast(c_ulong, @as(c_ulong, @bitCast(u32, (@as(c_int, 3)))))) @bitCast(u32, (@as(c_int, 3))) else @bitCast(u32, @truncate(c_uint, (@as(c_ulong, 7) -% @bitCast(c_ulong, @as(c_ulong, PriorityGroupTmp)))));
    SubPriorityBits = if ((PriorityGroupTmp +% @bitCast(u32, (@as(c_int, 3)))) < @bitCast(u32, @truncate(c_uint, @as(c_ulong, 7)))) @bitCast(u32, @truncate(c_uint, @as(c_ulong, 0))) else @bitCast(u32, @truncate(c_uint, ((@bitCast(c_ulong, @as(c_ulong, PriorityGroupTmp)) -% @as(c_ulong, 7)) +% @bitCast(c_ulong, @as(c_ulong, @bitCast(u32, (@as(c_int, 3))))))));
    pPreemptPriority.?.* = ((Priority >> @intCast(u5, SubPriorityBits)) & @bitCast(u32, @truncate(c_uint, ((@as(c_ulong, 1) << @intCast(@import("std").math.Log2Int(c_ulong), (PreemptPriorityBits))) -% @as(c_ulong, 1)))));
    pSubPriority.?.* = ((Priority) & @bitCast(u32, @truncate(c_uint, ((@as(c_ulong, 1) << @intCast(@import("std").math.Log2Int(c_ulong), (SubPriorityBits))) -% @as(c_ulong, 1)))));
}
pub fn __NVIC_SetVector(arg_IRQn: IRQn_Type, arg_vector: u32) callconv(.C) void {
    var IRQn = arg_IRQn;
    var vector = arg_vector;
    var vectors: u32 = (@intToPtr([*c]SCB_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 3328)))).*.VTOR;
    (@intToPtr([*c]c_int, (vectors +% @bitCast(c_uint, ((@enumToInt(IRQn) + @as(c_int, 16)) * @as(c_int, 4))))).?.*) = @bitCast(c_int, vector);
}
pub fn __NVIC_GetVector(arg_IRQn: IRQn_Type) callconv(.C) u32 {
    var IRQn = arg_IRQn;
    var vectors: u32 = (@intToPtr([*c]SCB_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 3328)))).*.VTOR;
    return @bitCast(u32, (@intToPtr([*c]c_int, (vectors +% @bitCast(c_uint, ((@enumToInt(IRQn) + @as(c_int, 16)) * @as(c_int, 4))))).?.*));
} // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const __NVIC_SystemReset = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/core_cm4.h:1933:34
const struct_unnamed_22 = extern struct {
    RBAR: u32,
    RASR: u32,
};
pub const ARM_MPU_Region_t = struct_unnamed_22;
pub fn ARM_MPU_Enable(arg_MPU_Control: u32) callconv(.C) void {
    var MPU_Control = arg_MPU_Control;
    (@intToPtr([*c]MPU_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 3472)))).*.CTRL = @bitCast(u32, @truncate(c_uint, (@bitCast(c_ulong, @as(c_ulong, MPU_Control)) | (@as(c_ulong, 1)))));
    (@intToPtr([*c]SCB_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 3328)))).*.SHCSR |= (@as(c_ulong, 1) << @intCast(@import("std").math.Log2Int(c_ulong), 16));
    __DSB();
    __ISB();
}
pub fn ARM_MPU_Disable() callconv(.C) void {
    __DMB();
    (@intToPtr([*c]SCB_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 3328)))).*.SHCSR &= ~(@as(c_ulong, 1) << @intCast(@import("std").math.Log2Int(c_ulong), 16));
    (@intToPtr([*c]MPU_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 3472)))).*.CTRL &= ~(@as(c_ulong, 1));
}
pub fn ARM_MPU_ClrRegion(arg_rnr: u32) callconv(.C) void {
    var rnr = arg_rnr;
    (@intToPtr([*c]MPU_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 3472)))).*.RNR = rnr;
    (@intToPtr([*c]MPU_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 3472)))).*.RASR = 0;
}
pub fn ARM_MPU_SetRegion(arg_rbar: u32, arg_rasr: u32) callconv(.C) void {
    var rbar = arg_rbar;
    var rasr = arg_rasr;
    (@intToPtr([*c]MPU_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 3472)))).*.RBAR = rbar;
    (@intToPtr([*c]MPU_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 3472)))).*.RASR = rasr;
}
pub fn ARM_MPU_SetRegionEx(arg_rnr: u32, arg_rbar: u32, arg_rasr: u32) callconv(.C) void {
    var rnr = arg_rnr;
    var rbar = arg_rbar;
    var rasr = arg_rasr;
    (@intToPtr([*c]MPU_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 3472)))).*.RNR = rnr;
    (@intToPtr([*c]MPU_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 3472)))).*.RBAR = rbar;
    (@intToPtr([*c]MPU_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 3472)))).*.RASR = rasr;
}
pub fn ARM_MPU_OrderedMemcpy(arg_dst: [*c]volatile u32, noalias arg_src: [*c]const u32, arg_len: u32) callconv(.C) void {
    var dst = arg_dst;
    var src = arg_src;
    var len = arg_len;
    var i: u32 = undefined;
    {
        i = 0;
        while (i < len) : (i +%= 1) {
            dst[i] = src[i];
        }
    }
}
pub fn ARM_MPU_Load(arg_table: [*c]const ARM_MPU_Region_t, arg_cnt: u32) callconv(.C) void {
    var table = arg_table;
    var cnt = arg_cnt;
    const rowWordSize: u32 = (@sizeOf(ARM_MPU_Region_t) / @as(c_uint, 4));
    while (cnt > @as(c_uint, 4)) {
        ARM_MPU_OrderedMemcpy(&((@intToPtr([*c]MPU_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 3472)))).*.RBAR), &(table.*.RBAR), (@as(c_uint, 4) *% rowWordSize));
        table += @as(c_uint, 4);
        cnt -%= @as(c_uint, 4);
    }
    ARM_MPU_OrderedMemcpy(&((@intToPtr([*c]MPU_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 3472)))).*.RBAR), &(table.*.RBAR), (cnt *% rowWordSize));
}
pub fn SCB_GetFPUType() callconv(.C) u32 {
    var mvfr0: u32 = undefined;
    mvfr0 = (@intToPtr([*c]FPU_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 3888)))).*.MVFR0;
    if ((@bitCast(c_ulong, @as(c_ulong, mvfr0)) & ((@as(c_ulong, 15) << @intCast(@import("std").math.Log2Int(c_ulong), 4)) | (@as(c_ulong, 15) << @intCast(@import("std").math.Log2Int(c_ulong), 8)))) == @bitCast(c_ulong, @as(c_ulong, @as(c_uint, 32)))) {
        return 1;
    } else {
        return 0;
    }
    return 0;
}
pub fn SysTick_Config(arg_ticks: u32) callconv(.C) u32 {
    var ticks = arg_ticks;
    if ((@bitCast(c_ulong, @as(c_ulong, ticks)) -% @as(c_ulong, 1)) > (@as(c_ulong, 16777215))) {
        return @bitCast(u32, @truncate(c_uint, (@as(c_ulong, 1))));
    }
    (@intToPtr([*c]SysTick_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 16)))).*.LOAD = @bitCast(u32, @truncate(c_uint, (@bitCast(c_ulong, @as(c_ulong, ticks)) -% @as(c_ulong, 1))));
    __NVIC_SetPriority(@intToEnum(IRQn_Type, SysTick_IRQn), @bitCast(u32, @truncate(c_uint, ((@as(c_ulong, 1) << @intCast(@import("std").math.Log2Int(c_ulong), 3)) -% @as(c_ulong, 1)))));
    (@intToPtr([*c]SysTick_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 16)))).*.VAL = @bitCast(u32, @truncate(c_uint, @as(c_ulong, 0)));
    (@intToPtr([*c]SysTick_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 16)))).*.CTRL = @bitCast(u32, @truncate(c_uint, (((@as(c_ulong, 1) << @intCast(@import("std").math.Log2Int(c_ulong), 2)) | (@as(c_ulong, 1) << @intCast(@import("std").math.Log2Int(c_ulong), 1))) | (@as(c_ulong, 1)))));
    return @bitCast(u32, @truncate(c_uint, (@as(c_ulong, 0))));
}
pub extern var ITM_RxBuffer: i32; // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:41:50: warning: TODO implement translation of stmt class GCCAsmStmtClass
pub const ITM_SendChar = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/core_cm4.h:2059:26
pub fn ITM_ReceiveChar() callconv(.C) i32 {
    var ch: i32 = -@as(c_int, 1);
    if (ITM_RxBuffer != (@bitCast(i32, @as(c_uint, 1520786085)))) {
        ch = ITM_RxBuffer;
        ITM_RxBuffer = (@bitCast(i32, @as(c_uint, 1520786085)));
    }
    return (ch);
}
pub fn ITM_CheckChar() callconv(.C) i32 {
    if (ITM_RxBuffer == (@bitCast(i32, @as(c_uint, 1520786085)))) {
        return (@as(c_int, 0));
    } else {
        return (@as(c_int, 1));
    }
    return 0;
}
pub extern var SystemCoreClock: u32;
pub extern fn SystemInit() void;
pub extern fn SystemCoreClockUpdate() void;
const struct_unnamed_23 = extern struct {
    PART: u32,
    VARIANT: u32,
    PACKAGE: u32,
    RAM: u32,
    FLASH: u32,
};
pub const FICR_INFO_Type = struct_unnamed_23;
const struct_unnamed_24 = extern struct {
    A0: u32,
    A1: u32,
    A2: u32,
    A3: u32,
    A4: u32,
    A5: u32,
    B0: u32,
    B1: u32,
    B2: u32,
    B3: u32,
    B4: u32,
    B5: u32,
    T0: u32,
    T1: u32,
    T2: u32,
    T3: u32,
    T4: u32,
};
pub const FICR_TEMP_Type = struct_unnamed_24;
const struct_unnamed_25 = extern struct {
    TAGHEADER0: u32,
    TAGHEADER1: u32,
    TAGHEADER2: u32,
    TAGHEADER3: u32,
};
pub const FICR_NFC_Type = struct_unnamed_25;
const struct_unnamed_26 = extern struct {
    BYTES: u32,
    RCCUTOFF: u32,
    APCUTOFF: u32,
    STARTUP: u32,
    ROSC1: u32,
    ROSC2: u32,
    ROSC3: u32,
    ROSC4: u32,
};
pub const FICR_TRNG90B_Type = struct_unnamed_26;
const struct_unnamed_27 = extern struct {
    POWER: u32,
    POWERSET: u32,
    POWERCLR: u32,
    RESERVED: u32,
};
pub const POWER_RAM_Type = struct_unnamed_27;
const struct_unnamed_28 = extern struct {
    RTS: u32,
    TXD: u32,
    CTS: u32,
    RXD: u32,
};
pub const UART_PSEL_Type = struct_unnamed_28;
const struct_unnamed_29 = extern struct {
    RTS: u32,
    TXD: u32,
    CTS: u32,
    RXD: u32,
};
pub const UARTE_PSEL_Type = struct_unnamed_29;
const struct_unnamed_30 = extern struct {
    PTR: u32,
    MAXCNT: u32,
    AMOUNT: u32,
};
pub const UARTE_RXD_Type = struct_unnamed_30;
const struct_unnamed_31 = extern struct {
    PTR: u32,
    MAXCNT: u32,
    AMOUNT: u32,
};
pub const UARTE_TXD_Type = struct_unnamed_31;
const struct_unnamed_32 = extern struct {
    SCK: u32,
    MOSI: u32,
    MISO: u32,
};
pub const SPI_PSEL_Type = struct_unnamed_32;
const struct_unnamed_33 = extern struct {
    SCK: u32,
    MOSI: u32,
    MISO: u32,
    CSN: u32,
};
pub const SPIM_PSEL_Type = struct_unnamed_33;
const struct_unnamed_34 = extern struct {
    PTR: u32,
    MAXCNT: u32,
    AMOUNT: u32,
    LIST: u32,
};
pub const SPIM_RXD_Type = struct_unnamed_34;
const struct_unnamed_35 = extern struct {
    PTR: u32,
    MAXCNT: u32,
    AMOUNT: u32,
    LIST: u32,
};
pub const SPIM_TXD_Type = struct_unnamed_35;
const struct_unnamed_36 = extern struct {
    RXDELAY: u32,
    CSNDUR: u32,
};
pub const SPIM_IFTIMING_Type = struct_unnamed_36;
const struct_unnamed_37 = extern struct {
    SCK: u32,
    MISO: u32,
    MOSI: u32,
    CSN: u32,
};
pub const SPIS_PSEL_Type = struct_unnamed_37;
const struct_unnamed_38 = extern struct {
    PTR: u32,
    MAXCNT: u32,
    AMOUNT: u32,
    LIST: u32,
};
pub const SPIS_RXD_Type = struct_unnamed_38;
const struct_unnamed_39 = extern struct {
    PTR: u32,
    MAXCNT: u32,
    AMOUNT: u32,
    LIST: u32,
};
pub const SPIS_TXD_Type = struct_unnamed_39;
const struct_unnamed_40 = extern struct {
    SCL: u32,
    SDA: u32,
};
pub const TWI_PSEL_Type = struct_unnamed_40;
const struct_unnamed_41 = extern struct {
    SCL: u32,
    SDA: u32,
};
pub const TWIM_PSEL_Type = struct_unnamed_41;
const struct_unnamed_42 = extern struct {
    PTR: u32,
    MAXCNT: u32,
    AMOUNT: u32,
    LIST: u32,
};
pub const TWIM_RXD_Type = struct_unnamed_42;
const struct_unnamed_43 = extern struct {
    PTR: u32,
    MAXCNT: u32,
    AMOUNT: u32,
    LIST: u32,
};
pub const TWIM_TXD_Type = struct_unnamed_43;
const struct_unnamed_44 = extern struct {
    SCL: u32,
    SDA: u32,
};
pub const TWIS_PSEL_Type = struct_unnamed_44;
const struct_unnamed_45 = extern struct {
    PTR: u32,
    MAXCNT: u32,
    AMOUNT: u32,
    LIST: u32,
};
pub const TWIS_RXD_Type = struct_unnamed_45;
const struct_unnamed_46 = extern struct {
    PTR: u32,
    MAXCNT: u32,
    AMOUNT: u32,
    LIST: u32,
};
pub const TWIS_TXD_Type = struct_unnamed_46;
const struct_unnamed_47 = extern struct {
    RX: u32,
};
pub const NFCT_FRAMESTATUS_Type = struct_unnamed_47;
const struct_unnamed_48 = extern struct {
    FRAMECONFIG: u32,
    AMOUNT: u32,
};
pub const NFCT_TXD_Type = struct_unnamed_48;
const struct_unnamed_49 = extern struct {
    FRAMECONFIG: u32,
    AMOUNT: u32,
};
pub const NFCT_RXD_Type = struct_unnamed_49;
const struct_unnamed_50 = extern struct {
    LIMITH: u32,
    LIMITL: u32,
};
pub const SAADC_EVENTS_CH_Type = struct_unnamed_50;
const struct_unnamed_51 = extern struct {
    PSELP: u32,
    PSELN: u32,
    CONFIG: u32,
    LIMIT: u32,
};
pub const SAADC_CH_Type = struct_unnamed_51;
const struct_unnamed_52 = extern struct {
    PTR: u32,
    MAXCNT: u32,
    AMOUNT: u32,
};
pub const SAADC_RESULT_Type = struct_unnamed_52;
const struct_unnamed_53 = extern struct {
    LED: u32,
    A: u32,
    B: u32,
};
pub const QDEC_PSEL_Type = struct_unnamed_53;
const struct_unnamed_54 = extern struct {
    PTR: u32,
    CNT: u32,
    REFRESH: u32,
    ENDDELAY: u32,
    RESERVED: [4]u32,
};
pub const PWM_SEQ_Type = struct_unnamed_54;
const struct_unnamed_55 = extern struct {
    OUT: [4]u32,
};
pub const PWM_PSEL_Type = struct_unnamed_55;
const struct_unnamed_56 = extern struct {
    CLK: u32,
    DIN: u32,
};
pub const PDM_PSEL_Type = struct_unnamed_56;
const struct_unnamed_57 = extern struct {
    PTR: u32,
    MAXCNT: u32,
};
pub const PDM_SAMPLE_Type = struct_unnamed_57;
const struct_unnamed_58 = extern struct {
    ADDR: u32,
    SIZE: u32,
    PERM: u32,
    RESERVED: u32,
};
pub const ACL_ACL_Type = struct_unnamed_58;
const struct_unnamed_59 = extern struct {
    EN: u32,
    DIS: u32,
};
pub const PPI_TASKS_CHG_Type = struct_unnamed_59;
const struct_unnamed_60 = extern struct {
    EEP: u32,
    TEP: u32,
};
pub const PPI_CH_Type = struct_unnamed_60;
const struct_unnamed_61 = extern struct {
    TEP: u32,
};
pub const PPI_FORK_Type = struct_unnamed_61;
const struct_unnamed_62 = extern struct {
    WA: u32,
    RA: u32,
};
pub const MWU_EVENTS_REGION_Type = struct_unnamed_62;
const struct_unnamed_63 = extern struct {
    WA: u32,
    RA: u32,
};
pub const MWU_EVENTS_PREGION_Type = struct_unnamed_63;
const struct_unnamed_64 = extern struct {
    SUBSTATWA: u32,
    SUBSTATRA: u32,
};
pub const MWU_PERREGION_Type = struct_unnamed_64;
const struct_unnamed_65 = extern struct {
    START: u32,
    END: u32,
    RESERVED: [2]u32,
};
pub const MWU_REGION_Type = struct_unnamed_65;
const struct_unnamed_66 = extern struct {
    START: u32,
    END: u32,
    SUBS: u32,
    RESERVED: u32,
};
pub const MWU_PREGION_Type = struct_unnamed_66;
const struct_unnamed_67 = extern struct {
    MODE: u32,
    RXEN: u32,
    TXEN: u32,
    MCKEN: u32,
    MCKFREQ: u32,
    RATIO: u32,
    SWIDTH: u32,
    ALIGN: u32,
    FORMAT: u32,
    CHANNELS: u32,
};
pub const I2S_CONFIG_Type = struct_unnamed_67;
const struct_unnamed_68 = extern struct {
    PTR: u32,
};
pub const I2S_RXD_Type = struct_unnamed_68;
const struct_unnamed_69 = extern struct {
    PTR: u32,
};
pub const I2S_TXD_Type = struct_unnamed_69;
const struct_unnamed_70 = extern struct {
    MAXCNT: u32,
};
pub const I2S_RXTXD_Type = struct_unnamed_70;
const struct_unnamed_71 = extern struct {
    MCK: u32,
    SCK: u32,
    LRCK: u32,
    SDIN: u32,
    SDOUT: u32,
};
pub const I2S_PSEL_Type = struct_unnamed_71;
const struct_unnamed_72 = extern struct {
    EPIN: [8]u32,
    RESERVED: u32,
    EPOUT: [8]u32,
};
pub const USBD_HALTED_Type = struct_unnamed_72;
const struct_unnamed_73 = extern struct {
    EPOUT: [8]u32,
    ISOOUT: u32,
};
pub const USBD_SIZE_Type = struct_unnamed_73;
const struct_unnamed_74 = extern struct {
    PTR: u32,
    MAXCNT: u32,
    AMOUNT: u32,
    RESERVED: [2]u32,
};
pub const USBD_EPIN_Type = struct_unnamed_74;
const struct_unnamed_75 = extern struct {
    PTR: u32,
    MAXCNT: u32,
    AMOUNT: u32,
};
pub const USBD_ISOIN_Type = struct_unnamed_75;
const struct_unnamed_76 = extern struct {
    PTR: u32,
    MAXCNT: u32,
    AMOUNT: u32,
    RESERVED: [2]u32,
};
pub const USBD_EPOUT_Type = struct_unnamed_76;
const struct_unnamed_77 = extern struct {
    PTR: u32,
    MAXCNT: u32,
    AMOUNT: u32,
};
pub const USBD_ISOOUT_Type = struct_unnamed_77;
const struct_unnamed_78 = extern struct {
    SRC: u32,
    DST: u32,
    CNT: u32,
};
pub const QSPI_READ_Type = struct_unnamed_78;
const struct_unnamed_79 = extern struct {
    DST: u32,
    SRC: u32,
    CNT: u32,
};
pub const QSPI_WRITE_Type = struct_unnamed_79;
const struct_unnamed_80 = extern struct {
    PTR: u32,
    LEN: u32,
};
pub const QSPI_ERASE_Type = struct_unnamed_80;
const struct_unnamed_81 = extern struct {
    SCK: u32,
    CSN: u32,
    RESERVED: u32,
    IO0: u32,
    IO1: u32,
    IO2: u32,
    IO3: u32,
};
pub const QSPI_PSEL_Type = struct_unnamed_81;
const struct_unnamed_82 = extern struct {
    RESERVED: [4]u32,
    CODEPAGESIZE: u32,
    CODESIZE: u32,
    RESERVED1: [18]u32,
    DEVICEID: [2]u32,
    RESERVED2: [6]u32,
    ER: [4]u32,
    IR: [4]u32,
    DEVICEADDRTYPE: u32,
    DEVICEADDR: [2]u32,
    RESERVED3: [21]u32,
    INFO: FICR_INFO_Type,
    RESERVED4: [143]u32,
    PRODTEST: [3]u32,
    RESERVED5: [42]u32,
    TEMP: FICR_TEMP_Type,
    RESERVED6: [2]u32,
    NFC: FICR_NFC_Type,
    RESERVED7: [488]u32,
    TRNG90B: FICR_TRNG90B_Type,
};
pub const NRF_FICR_Type = struct_unnamed_82;
const struct_unnamed_83 = extern struct {
    RESERVED: [5]u32,
    NRFFW: [13]u32,
    RESERVED1: [2]u32,
    NRFHW: [12]u32,
    CUSTOMER: [32]u32,
    RESERVED2: [64]u32,
    PSELRESET: [2]u32,
    APPROTECT: u32,
    NFCPINS: u32,
    DEBUGCTRL: u32,
    RESERVED3: [60]u32,
    REGOUT0: u32,
};
pub const NRF_UICR_Type = struct_unnamed_83;
const struct_unnamed_84 = extern struct {
    TASKS_HFCLKSTART: u32,
    TASKS_HFCLKSTOP: u32,
    TASKS_LFCLKSTART: u32,
    TASKS_LFCLKSTOP: u32,
    TASKS_CAL: u32,
    TASKS_CTSTART: u32,
    TASKS_CTSTOP: u32,
    RESERVED: [57]u32,
    EVENTS_HFCLKSTARTED: u32,
    EVENTS_LFCLKSTARTED: u32,
    RESERVED1: u32,
    EVENTS_DONE: u32,
    EVENTS_CTTO: u32,
    RESERVED2: [5]u32,
    EVENTS_CTSTARTED: u32,
    EVENTS_CTSTOPPED: u32,
    RESERVED3: [117]u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED4: [63]u32,
    HFCLKRUN: u32,
    HFCLKSTAT: u32,
    RESERVED5: u32,
    LFCLKRUN: u32,
    LFCLKSTAT: u32,
    LFCLKSRCCOPY: u32,
    RESERVED6: [62]u32,
    LFCLKSRC: u32,
    RESERVED7: [3]u32,
    HFXODEBOUNCE: u32,
    RESERVED8: [3]u32,
    CTIV: u32,
    RESERVED9: [8]u32,
    TRACECONFIG: u32,
    RESERVED10: [21]u32,
    LFRCMODE: u32,
};
pub const NRF_CLOCK_Type = struct_unnamed_84;
const struct_unnamed_85 = extern struct {
    RESERVED: [30]u32,
    TASKS_CONSTLAT: u32,
    TASKS_LOWPWR: u32,
    RESERVED1: [34]u32,
    EVENTS_POFWARN: u32,
    RESERVED2: [2]u32,
    EVENTS_SLEEPENTER: u32,
    EVENTS_SLEEPEXIT: u32,
    EVENTS_USBDETECTED: u32,
    EVENTS_USBREMOVED: u32,
    EVENTS_USBPWRRDY: u32,
    RESERVED3: [119]u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED4: [61]u32,
    RESETREAS: u32,
    RESERVED5: [9]u32,
    RAMSTATUS: u32,
    RESERVED6: [3]u32,
    USBREGSTATUS: u32,
    RESERVED7: [49]u32,
    SYSTEMOFF: u32,
    RESERVED8: [3]u32,
    POFCON: u32,
    RESERVED9: [2]u32,
    GPREGRET: u32,
    GPREGRET2: u32,
    RESERVED10: [21]u32,
    DCDCEN: u32,
    RESERVED11: u32,
    DCDCEN0: u32,
    RESERVED12: [47]u32,
    MAINREGSTATUS: u32,
    RESERVED13: [175]u32,
    RAM: [9]POWER_RAM_Type,
};
pub const NRF_POWER_Type = struct_unnamed_85;
const struct_unnamed_86 = extern struct {
    RESERVED: [321]u32,
    OUT: u32,
    OUTSET: u32,
    OUTCLR: u32,
    IN: u32,
    DIR: u32,
    DIRSET: u32,
    DIRCLR: u32,
    LATCH: u32,
    DETECTMODE: u32,
    RESERVED1: [118]u32,
    PIN_CNF: [32]u32,
};
pub const NRF_GPIO_Type = struct_unnamed_86;
const struct_unnamed_87 = extern struct {
    TASKS_TXEN: u32,
    TASKS_RXEN: u32,
    TASKS_START: u32,
    TASKS_STOP: u32,
    TASKS_DISABLE: u32,
    TASKS_RSSISTART: u32,
    TASKS_RSSISTOP: u32,
    TASKS_BCSTART: u32,
    TASKS_BCSTOP: u32,
    TASKS_EDSTART: u32,
    TASKS_EDSTOP: u32,
    TASKS_CCASTART: u32,
    TASKS_CCASTOP: u32,
    RESERVED: [51]u32,
    EVENTS_READY: u32,
    EVENTS_ADDRESS: u32,
    EVENTS_PAYLOAD: u32,
    EVENTS_END: u32,
    EVENTS_DISABLED: u32,
    EVENTS_DEVMATCH: u32,
    EVENTS_DEVMISS: u32,
    EVENTS_RSSIEND: u32,
    RESERVED1: [2]u32,
    EVENTS_BCMATCH: u32,
    RESERVED2: u32,
    EVENTS_CRCOK: u32,
    EVENTS_CRCERROR: u32,
    EVENTS_FRAMESTART: u32,
    EVENTS_EDEND: u32,
    EVENTS_EDSTOPPED: u32,
    EVENTS_CCAIDLE: u32,
    EVENTS_CCABUSY: u32,
    EVENTS_CCASTOPPED: u32,
    EVENTS_RATEBOOST: u32,
    EVENTS_TXREADY: u32,
    EVENTS_RXREADY: u32,
    EVENTS_MHRMATCH: u32,
    RESERVED3: [3]u32,
    EVENTS_PHYEND: u32,
    RESERVED4: [36]u32,
    SHORTS: u32,
    RESERVED5: [64]u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED6: [61]u32,
    CRCSTATUS: u32,
    RESERVED7: u32,
    RXMATCH: u32,
    RXCRC: u32,
    DAI: u32,
    PDUSTAT: u32,
    RESERVED8: [59]u32,
    PACKETPTR: u32,
    FREQUENCY: u32,
    TXPOWER: u32,
    MODE: u32,
    PCNF0: u32,
    PCNF1: u32,
    BASE0: u32,
    BASE1: u32,
    PREFIX0: u32,
    PREFIX1: u32,
    TXADDRESS: u32,
    RXADDRESSES: u32,
    CRCCNF: u32,
    CRCPOLY: u32,
    CRCINIT: u32,
    RESERVED9: u32,
    TIFS: u32,
    RSSISAMPLE: u32,
    RESERVED10: u32,
    STATE: u32,
    DATAWHITEIV: u32,
    RESERVED11: [2]u32,
    BCC: u32,
    RESERVED12: [39]u32,
    DAB: [8]u32,
    DAP: [8]u32,
    DACNF: u32,
    MHRMATCHCONF: u32,
    MHRMATCHMAS: u32,
    RESERVED13: u32,
    MODECNF0: u32,
    RESERVED14: [3]u32,
    SFD: u32,
    EDCNT: u32,
    EDSAMPLE: u32,
    CCACTRL: u32,
    RESERVED15: [611]u32,
    POWER: u32,
};
pub const NRF_RADIO_Type = struct_unnamed_87;
const struct_unnamed_88 = extern struct {
    TASKS_STARTRX: u32,
    TASKS_STOPRX: u32,
    TASKS_STARTTX: u32,
    TASKS_STOPTX: u32,
    RESERVED: [3]u32,
    TASKS_SUSPEND: u32,
    RESERVED1: [56]u32,
    EVENTS_CTS: u32,
    EVENTS_NCTS: u32,
    EVENTS_RXDRDY: u32,
    RESERVED2: [4]u32,
    EVENTS_TXDRDY: u32,
    RESERVED3: u32,
    EVENTS_ERROR: u32,
    RESERVED4: [7]u32,
    EVENTS_RXTO: u32,
    RESERVED5: [46]u32,
    SHORTS: u32,
    RESERVED6: [64]u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED7: [93]u32,
    ERRORSRC: u32,
    RESERVED8: [31]u32,
    ENABLE: u32,
    RESERVED9: u32,
    PSEL: UART_PSEL_Type,
    RXD: u32,
    TXD: u32,
    RESERVED10: u32,
    BAUDRATE: u32,
    RESERVED11: [17]u32,
    CONFIG: u32,
};
pub const NRF_UART_Type = struct_unnamed_88;
const struct_unnamed_89 = extern struct {
    TASKS_STARTRX: u32,
    TASKS_STOPRX: u32,
    TASKS_STARTTX: u32,
    TASKS_STOPTX: u32,
    RESERVED: [7]u32,
    TASKS_FLUSHRX: u32,
    RESERVED1: [52]u32,
    EVENTS_CTS: u32,
    EVENTS_NCTS: u32,
    EVENTS_RXDRDY: u32,
    RESERVED2: u32,
    EVENTS_ENDRX: u32,
    RESERVED3: [2]u32,
    EVENTS_TXDRDY: u32,
    EVENTS_ENDTX: u32,
    EVENTS_ERROR: u32,
    RESERVED4: [7]u32,
    EVENTS_RXTO: u32,
    RESERVED5: u32,
    EVENTS_RXSTARTED: u32,
    EVENTS_TXSTARTED: u32,
    RESERVED6: u32,
    EVENTS_TXSTOPPED: u32,
    RESERVED7: [41]u32,
    SHORTS: u32,
    RESERVED8: [63]u32,
    INTEN: u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED9: [93]u32,
    ERRORSRC: u32,
    RESERVED10: [31]u32,
    ENABLE: u32,
    RESERVED11: u32,
    PSEL: UARTE_PSEL_Type,
    RESERVED12: [3]u32,
    BAUDRATE: u32,
    RESERVED13: [3]u32,
    RXD: UARTE_RXD_Type,
    RESERVED14: u32,
    TXD: UARTE_TXD_Type,
    RESERVED15: [7]u32,
    CONFIG: u32,
};
pub const NRF_UARTE_Type = struct_unnamed_89;
const struct_unnamed_90 = extern struct {
    RESERVED: [66]u32,
    EVENTS_READY: u32,
    RESERVED1: [126]u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED2: [125]u32,
    ENABLE: u32,
    RESERVED3: u32,
    PSEL: SPI_PSEL_Type,
    RESERVED4: u32,
    RXD: u32,
    TXD: u32,
    RESERVED5: u32,
    FREQUENCY: u32,
    RESERVED6: [11]u32,
    CONFIG: u32,
};
pub const NRF_SPI_Type = struct_unnamed_90;
const struct_unnamed_91 = extern struct {
    RESERVED: [4]u32,
    TASKS_START: u32,
    TASKS_STOP: u32,
    RESERVED1: u32,
    TASKS_SUSPEND: u32,
    TASKS_RESUME: u32,
    RESERVED2: [56]u32,
    EVENTS_STOPPED: u32,
    RESERVED3: [2]u32,
    EVENTS_ENDRX: u32,
    RESERVED4: u32,
    EVENTS_END: u32,
    RESERVED5: u32,
    EVENTS_ENDTX: u32,
    RESERVED6: [10]u32,
    EVENTS_STARTED: u32,
    RESERVED7: [44]u32,
    SHORTS: u32,
    RESERVED8: [64]u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED9: [61]u32,
    STALLSTAT: u32,
    RESERVED10: [63]u32,
    ENABLE: u32,
    RESERVED11: u32,
    PSEL: SPIM_PSEL_Type,
    RESERVED12: [3]u32,
    FREQUENCY: u32,
    RESERVED13: [3]u32,
    RXD: SPIM_RXD_Type,
    TXD: SPIM_TXD_Type,
    CONFIG: u32,
    RESERVED14: [2]u32,
    IFTIMING: SPIM_IFTIMING_Type,
    CSNPOL: u32,
    PSELDCX: u32,
    DCXCNT: u32,
    RESERVED15: [19]u32,
    ORC: u32,
};
pub const NRF_SPIM_Type = struct_unnamed_91;
const struct_unnamed_92 = extern struct {
    RESERVED: [9]u32,
    TASKS_ACQUIRE: u32,
    TASKS_RELEASE: u32,
    RESERVED1: [54]u32,
    EVENTS_END: u32,
    RESERVED2: [2]u32,
    EVENTS_ENDRX: u32,
    RESERVED3: [5]u32,
    EVENTS_ACQUIRED: u32,
    RESERVED4: [53]u32,
    SHORTS: u32,
    RESERVED5: [64]u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED6: [61]u32,
    SEMSTAT: u32,
    RESERVED7: [15]u32,
    STATUS: u32,
    RESERVED8: [47]u32,
    ENABLE: u32,
    RESERVED9: u32,
    PSEL: SPIS_PSEL_Type,
    RESERVED10: [7]u32,
    RXD: SPIS_RXD_Type,
    TXD: SPIS_TXD_Type,
    CONFIG: u32,
    RESERVED11: u32,
    DEF: u32,
    RESERVED12: [24]u32,
    ORC: u32,
};
pub const NRF_SPIS_Type = struct_unnamed_92;
const struct_unnamed_93 = extern struct {
    TASKS_STARTRX: u32,
    RESERVED: u32,
    TASKS_STARTTX: u32,
    RESERVED1: [2]u32,
    TASKS_STOP: u32,
    RESERVED2: u32,
    TASKS_SUSPEND: u32,
    TASKS_RESUME: u32,
    RESERVED3: [56]u32,
    EVENTS_STOPPED: u32,
    EVENTS_RXDREADY: u32,
    RESERVED4: [4]u32,
    EVENTS_TXDSENT: u32,
    RESERVED5: u32,
    EVENTS_ERROR: u32,
    RESERVED6: [4]u32,
    EVENTS_BB: u32,
    RESERVED7: [3]u32,
    EVENTS_SUSPENDED: u32,
    RESERVED8: [45]u32,
    SHORTS: u32,
    RESERVED9: [64]u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED10: [110]u32,
    ERRORSRC: u32,
    RESERVED11: [14]u32,
    ENABLE: u32,
    RESERVED12: u32,
    PSEL: TWI_PSEL_Type,
    RESERVED13: [2]u32,
    RXD: u32,
    TXD: u32,
    RESERVED14: u32,
    FREQUENCY: u32,
    RESERVED15: [24]u32,
    ADDRESS: u32,
};
pub const NRF_TWI_Type = struct_unnamed_93;
const struct_unnamed_94 = extern struct {
    TASKS_STARTRX: u32,
    RESERVED: u32,
    TASKS_STARTTX: u32,
    RESERVED1: [2]u32,
    TASKS_STOP: u32,
    RESERVED2: u32,
    TASKS_SUSPEND: u32,
    TASKS_RESUME: u32,
    RESERVED3: [56]u32,
    EVENTS_STOPPED: u32,
    RESERVED4: [7]u32,
    EVENTS_ERROR: u32,
    RESERVED5: [8]u32,
    EVENTS_SUSPENDED: u32,
    EVENTS_RXSTARTED: u32,
    EVENTS_TXSTARTED: u32,
    RESERVED6: [2]u32,
    EVENTS_LASTRX: u32,
    EVENTS_LASTTX: u32,
    RESERVED7: [39]u32,
    SHORTS: u32,
    RESERVED8: [63]u32,
    INTEN: u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED9: [110]u32,
    ERRORSRC: u32,
    RESERVED10: [14]u32,
    ENABLE: u32,
    RESERVED11: u32,
    PSEL: TWIM_PSEL_Type,
    RESERVED12: [5]u32,
    FREQUENCY: u32,
    RESERVED13: [3]u32,
    RXD: TWIM_RXD_Type,
    TXD: TWIM_TXD_Type,
    RESERVED14: [13]u32,
    ADDRESS: u32,
};
pub const NRF_TWIM_Type = struct_unnamed_94;
const struct_unnamed_95 = extern struct {
    RESERVED: [5]u32,
    TASKS_STOP: u32,
    RESERVED1: u32,
    TASKS_SUSPEND: u32,
    TASKS_RESUME: u32,
    RESERVED2: [3]u32,
    TASKS_PREPARERX: u32,
    TASKS_PREPARETX: u32,
    RESERVED3: [51]u32,
    EVENTS_STOPPED: u32,
    RESERVED4: [7]u32,
    EVENTS_ERROR: u32,
    RESERVED5: [9]u32,
    EVENTS_RXSTARTED: u32,
    EVENTS_TXSTARTED: u32,
    RESERVED6: [4]u32,
    EVENTS_WRITE: u32,
    EVENTS_READ: u32,
    RESERVED7: [37]u32,
    SHORTS: u32,
    RESERVED8: [63]u32,
    INTEN: u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED9: [113]u32,
    ERRORSRC: u32,
    MATCH: u32,
    RESERVED10: [10]u32,
    ENABLE: u32,
    RESERVED11: u32,
    PSEL: TWIS_PSEL_Type,
    RESERVED12: [9]u32,
    RXD: TWIS_RXD_Type,
    TXD: TWIS_TXD_Type,
    RESERVED13: [13]u32,
    ADDRESS: [2]u32,
    RESERVED14: u32,
    CONFIG: u32,
    RESERVED15: [10]u32,
    ORC: u32,
};
pub const NRF_TWIS_Type = struct_unnamed_95;
const struct_unnamed_96 = extern struct {
    TASKS_ACTIVATE: u32,
    TASKS_DISABLE: u32,
    TASKS_SENSE: u32,
    TASKS_STARTTX: u32,
    RESERVED: [3]u32,
    TASKS_ENABLERXDATA: u32,
    RESERVED1: u32,
    TASKS_GOIDLE: u32,
    TASKS_GOSLEEP: u32,
    RESERVED2: [53]u32,
    EVENTS_READY: u32,
    EVENTS_FIELDDETECTED: u32,
    EVENTS_FIELDLOST: u32,
    EVENTS_TXFRAMESTART: u32,
    EVENTS_TXFRAMEEND: u32,
    EVENTS_RXFRAMESTART: u32,
    EVENTS_RXFRAMEEND: u32,
    EVENTS_ERROR: u32,
    RESERVED3: [2]u32,
    EVENTS_RXERROR: u32,
    EVENTS_ENDRX: u32,
    EVENTS_ENDTX: u32,
    RESERVED4: u32,
    EVENTS_AUTOCOLRESSTARTED: u32,
    RESERVED5: [3]u32,
    EVENTS_COLLISION: u32,
    EVENTS_SELECTED: u32,
    EVENTS_STARTED: u32,
    RESERVED6: [43]u32,
    SHORTS: u32,
    RESERVED7: [63]u32,
    INTEN: u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED8: [62]u32,
    ERRORSTATUS: u32,
    RESERVED9: u32,
    FRAMESTATUS: NFCT_FRAMESTATUS_Type,
    NFCTAGSTATE: u32,
    RESERVED10: [3]u32,
    SLEEPSTATE: u32,
    RESERVED11: [6]u32,
    FIELDPRESENT: u32,
    RESERVED12: [49]u32,
    FRAMEDELAYMIN: u32,
    FRAMEDELAYMAX: u32,
    FRAMEDELAYMODE: u32,
    PACKETPTR: u32,
    MAXLEN: u32,
    TXD: NFCT_TXD_Type,
    RXD: NFCT_RXD_Type,
    RESERVED13: [26]u32,
    NFCID1_LAST: u32,
    NFCID1_2ND_LAST: u32,
    NFCID1_3RD_LAST: u32,
    AUTOCOLRESCONFIG: u32,
    SENSRES: u32,
    SELRES: u32,
};
pub const NRF_NFCT_Type = struct_unnamed_96;
const struct_unnamed_97 = extern struct {
    TASKS_OUT: [8]u32,
    RESERVED: [4]u32,
    TASKS_SET: [8]u32,
    RESERVED1: [4]u32,
    TASKS_CLR: [8]u32,
    RESERVED2: [32]u32,
    EVENTS_IN: [8]u32,
    RESERVED3: [23]u32,
    EVENTS_PORT: u32,
    RESERVED4: [97]u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED5: [129]u32,
    CONFIG: [8]u32,
};
pub const NRF_GPIOTE_Type = struct_unnamed_97;
const struct_unnamed_98 = extern struct {
    TASKS_START: u32,
    TASKS_SAMPLE: u32,
    TASKS_STOP: u32,
    TASKS_CALIBRATEOFFSET: u32,
    RESERVED: [60]u32,
    EVENTS_STARTED: u32,
    EVENTS_END: u32,
    EVENTS_DONE: u32,
    EVENTS_RESULTDONE: u32,
    EVENTS_CALIBRATEDONE: u32,
    EVENTS_STOPPED: u32,
    EVENTS_CH: [8]SAADC_EVENTS_CH_Type,
    RESERVED1: [106]u32,
    INTEN: u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED2: [61]u32,
    STATUS: u32,
    RESERVED3: [63]u32,
    ENABLE: u32,
    RESERVED4: [3]u32,
    CH: [8]SAADC_CH_Type,
    RESERVED5: [24]u32,
    RESOLUTION: u32,
    OVERSAMPLE: u32,
    SAMPLERATE: u32,
    RESERVED6: [12]u32,
    RESULT: SAADC_RESULT_Type,
};
pub const NRF_SAADC_Type = struct_unnamed_98;
const struct_unnamed_99 = extern struct {
    TASKS_START: u32,
    TASKS_STOP: u32,
    TASKS_COUNT: u32,
    TASKS_CLEAR: u32,
    TASKS_SHUTDOWN: u32,
    RESERVED: [11]u32,
    TASKS_CAPTURE: [6]u32,
    RESERVED1: [58]u32,
    EVENTS_COMPARE: [6]u32,
    RESERVED2: [42]u32,
    SHORTS: u32,
    RESERVED3: [64]u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED4: [126]u32,
    MODE: u32,
    BITMODE: u32,
    RESERVED5: u32,
    PRESCALER: u32,
    RESERVED6: [11]u32,
    CC: [6]u32,
};
pub const NRF_TIMER_Type = struct_unnamed_99;
const struct_unnamed_100 = extern struct {
    TASKS_START: u32,
    TASKS_STOP: u32,
    TASKS_CLEAR: u32,
    TASKS_TRIGOVRFLW: u32,
    RESERVED: [60]u32,
    EVENTS_TICK: u32,
    EVENTS_OVRFLW: u32,
    RESERVED1: [14]u32,
    EVENTS_COMPARE: [4]u32,
    RESERVED2: [109]u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED3: [13]u32,
    EVTEN: u32,
    EVTENSET: u32,
    EVTENCLR: u32,
    RESERVED4: [110]u32,
    COUNTER: u32,
    PRESCALER: u32,
    RESERVED5: [13]u32,
    CC: [4]u32,
};
pub const NRF_RTC_Type = struct_unnamed_100;
const struct_unnamed_101 = extern struct {
    TASKS_START: u32,
    TASKS_STOP: u32,
    RESERVED: [62]u32,
    EVENTS_DATARDY: u32,
    RESERVED1: [128]u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED2: [127]u32,
    TEMP: i32,
    RESERVED3: [5]u32,
    A0: u32,
    A1: u32,
    A2: u32,
    A3: u32,
    A4: u32,
    A5: u32,
    RESERVED4: [2]u32,
    B0: u32,
    B1: u32,
    B2: u32,
    B3: u32,
    B4: u32,
    B5: u32,
    RESERVED5: [2]u32,
    T0: u32,
    T1: u32,
    T2: u32,
    T3: u32,
    T4: u32,
};
pub const NRF_TEMP_Type = struct_unnamed_101;
const struct_unnamed_102 = extern struct {
    TASKS_START: u32,
    TASKS_STOP: u32,
    RESERVED: [62]u32,
    EVENTS_VALRDY: u32,
    RESERVED1: [63]u32,
    SHORTS: u32,
    RESERVED2: [64]u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED3: [126]u32,
    CONFIG: u32,
    VALUE: u32,
};
pub const NRF_RNG_Type = struct_unnamed_102;
const struct_unnamed_103 = extern struct {
    TASKS_STARTECB: u32,
    TASKS_STOPECB: u32,
    RESERVED: [62]u32,
    EVENTS_ENDECB: u32,
    EVENTS_ERRORECB: u32,
    RESERVED1: [127]u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED2: [126]u32,
    ECBDATAPTR: u32,
};
pub const NRF_ECB_Type = struct_unnamed_103;
const struct_unnamed_104 = extern struct {
    TASKS_START: u32,
    RESERVED: u32,
    TASKS_STOP: u32,
    RESERVED1: [61]u32,
    EVENTS_END: u32,
    EVENTS_RESOLVED: u32,
    EVENTS_NOTRESOLVED: u32,
    RESERVED2: [126]u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED3: [61]u32,
    STATUS: u32,
    RESERVED4: [63]u32,
    ENABLE: u32,
    NIRK: u32,
    IRKPTR: u32,
    RESERVED5: u32,
    ADDRPTR: u32,
    SCRATCHPTR: u32,
};
pub const NRF_AAR_Type = struct_unnamed_104;
const struct_unnamed_105 = extern struct {
    TASKS_KSGEN: u32,
    TASKS_CRYPT: u32,
    TASKS_STOP: u32,
    TASKS_RATEOVERRIDE: u32,
    RESERVED: [60]u32,
    EVENTS_ENDKSGEN: u32,
    EVENTS_ENDCRYPT: u32,
    EVENTS_ERROR: u32,
    RESERVED1: [61]u32,
    SHORTS: u32,
    RESERVED2: [64]u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED3: [61]u32,
    MICSTATUS: u32,
    RESERVED4: [63]u32,
    ENABLE: u32,
    MODE: u32,
    CNFPTR: u32,
    INPTR: u32,
    OUTPTR: u32,
    SCRATCHPTR: u32,
    MAXPACKETSIZE: u32,
    RATEOVERRIDE: u32,
};
pub const NRF_CCM_Type = struct_unnamed_105;
const struct_unnamed_106 = extern struct {
    TASKS_START: u32,
    RESERVED: [63]u32,
    EVENTS_TIMEOUT: u32,
    RESERVED1: [128]u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED2: [61]u32,
    RUNSTATUS: u32,
    REQSTATUS: u32,
    RESERVED3: [63]u32,
    CRV: u32,
    RREN: u32,
    CONFIG: u32,
    RESERVED4: [60]u32,
    RR: [8]u32,
};
pub const NRF_WDT_Type = struct_unnamed_106;
const struct_unnamed_107 = extern struct {
    TASKS_START: u32,
    TASKS_STOP: u32,
    TASKS_READCLRACC: u32,
    TASKS_RDCLRACC: u32,
    TASKS_RDCLRDBL: u32,
    RESERVED: [59]u32,
    EVENTS_SAMPLERDY: u32,
    EVENTS_REPORTRDY: u32,
    EVENTS_ACCOF: u32,
    EVENTS_DBLRDY: u32,
    EVENTS_STOPPED: u32,
    RESERVED1: [59]u32,
    SHORTS: u32,
    RESERVED2: [64]u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED3: [125]u32,
    ENABLE: u32,
    LEDPOL: u32,
    SAMPLEPER: u32,
    SAMPLE: i32,
    REPORTPER: u32,
    ACC: i32,
    ACCREAD: i32,
    PSEL: QDEC_PSEL_Type,
    DBFEN: u32,
    RESERVED4: [5]u32,
    LEDPRE: u32,
    ACCDBL: u32,
    ACCDBLREAD: u32,
};
pub const NRF_QDEC_Type = struct_unnamed_107;
const struct_unnamed_108 = extern struct {
    TASKS_START: u32,
    TASKS_STOP: u32,
    TASKS_SAMPLE: u32,
    RESERVED: [61]u32,
    EVENTS_READY: u32,
    EVENTS_DOWN: u32,
    EVENTS_UP: u32,
    EVENTS_CROSS: u32,
    RESERVED1: [60]u32,
    SHORTS: u32,
    RESERVED2: [63]u32,
    INTEN: u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED3: [61]u32,
    RESULT: u32,
    RESERVED4: [63]u32,
    ENABLE: u32,
    PSEL: u32,
    REFSEL: u32,
    EXTREFSEL: u32,
    RESERVED5: [8]u32,
    TH: u32,
    MODE: u32,
    HYST: u32,
};
pub const NRF_COMP_Type = struct_unnamed_108;
const struct_unnamed_109 = extern struct {
    TASKS_START: u32,
    TASKS_STOP: u32,
    TASKS_SAMPLE: u32,
    RESERVED: [61]u32,
    EVENTS_READY: u32,
    EVENTS_DOWN: u32,
    EVENTS_UP: u32,
    EVENTS_CROSS: u32,
    RESERVED1: [60]u32,
    SHORTS: u32,
    RESERVED2: [64]u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED3: [61]u32,
    RESULT: u32,
    RESERVED4: [63]u32,
    ENABLE: u32,
    PSEL: u32,
    REFSEL: u32,
    EXTREFSEL: u32,
    RESERVED5: [4]u32,
    ANADETECT: u32,
    RESERVED6: [5]u32,
    HYST: u32,
};
pub const NRF_LPCOMP_Type = struct_unnamed_109;
const struct_unnamed_110 = extern struct {
    TASKS_TRIGGER: [16]u32,
    RESERVED: [48]u32,
    EVENTS_TRIGGERED: [16]u32,
    RESERVED1: [112]u32,
    INTEN: u32,
    INTENSET: u32,
    INTENCLR: u32,
};
pub const NRF_EGU_Type = struct_unnamed_110;
const struct_unnamed_111 = extern struct {
    UNUSED: u32,
};
pub const NRF_SWI_Type = struct_unnamed_111;
const struct_unnamed_112 = extern struct {
    RESERVED: u32,
    TASKS_STOP: u32,
    TASKS_SEQSTART: [2]u32,
    TASKS_NEXTSTEP: u32,
    RESERVED1: [60]u32,
    EVENTS_STOPPED: u32,
    EVENTS_SEQSTARTED: [2]u32,
    EVENTS_SEQEND: [2]u32,
    EVENTS_PWMPERIODEND: u32,
    EVENTS_LOOPSDONE: u32,
    RESERVED2: [56]u32,
    SHORTS: u32,
    RESERVED3: [63]u32,
    INTEN: u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED4: [125]u32,
    ENABLE: u32,
    MODE: u32,
    COUNTERTOP: u32,
    PRESCALER: u32,
    DECODER: u32,
    LOOP: u32,
    RESERVED5: [2]u32,
    SEQ: [2]PWM_SEQ_Type,
    PSEL: PWM_PSEL_Type,
};
pub const NRF_PWM_Type = struct_unnamed_112;
const struct_unnamed_113 = extern struct {
    TASKS_START: u32,
    TASKS_STOP: u32,
    RESERVED: [62]u32,
    EVENTS_STARTED: u32,
    EVENTS_STOPPED: u32,
    EVENTS_END: u32,
    RESERVED1: [125]u32,
    INTEN: u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED2: [125]u32,
    ENABLE: u32,
    PDMCLKCTRL: u32,
    MODE: u32,
    RESERVED3: [3]u32,
    GAINL: u32,
    GAINR: u32,
    RATIO: u32,
    RESERVED4: [7]u32,
    PSEL: PDM_PSEL_Type,
    RESERVED5: [6]u32,
    SAMPLE: PDM_SAMPLE_Type,
};
pub const NRF_PDM_Type = struct_unnamed_113;
const struct_unnamed_114 = extern struct {
    RESERVED: [512]u32,
    ACL: [8]ACL_ACL_Type,
};
pub const NRF_ACL_Type = struct_unnamed_114;
const union_unnamed_116 = extern union {
    ERASEPAGE: u32,
    ERASEPCR1: u32,
};
const struct_unnamed_115 = extern struct {
    RESERVED: [256]u32,
    READY: u32,
    RESERVED1: u32,
    READYNEXT: u32,
    RESERVED2: [62]u32,
    CONFIG: u32,
    unnamed_0: union_unnamed_116,
    ERASEALL: u32,
    ERASEPCR0: u32,
    ERASEUICR: u32,
    ERASEPAGEPARTIAL: u32,
    ERASEPAGEPARTIALCFG: u32,
    RESERVED3: [8]u32,
    ICACHECNF: u32,
    RESERVED4: u32,
    IHIT: u32,
    IMISS: u32,
};
pub const NRF_NVMC_Type = struct_unnamed_115;
const struct_unnamed_117 = extern struct {
    TASKS_CHG: [6]PPI_TASKS_CHG_Type,
    RESERVED: [308]u32,
    CHEN: u32,
    CHENSET: u32,
    CHENCLR: u32,
    RESERVED1: u32,
    CH: [20]PPI_CH_Type,
    RESERVED2: [148]u32,
    CHG: [6]u32,
    RESERVED3: [62]u32,
    FORK: [32]PPI_FORK_Type,
};
pub const NRF_PPI_Type = struct_unnamed_117;
const struct_unnamed_118 = extern struct {
    RESERVED: [64]u32,
    EVENTS_REGION: [4]MWU_EVENTS_REGION_Type,
    RESERVED1: [16]u32,
    EVENTS_PREGION: [2]MWU_EVENTS_PREGION_Type,
    RESERVED2: [100]u32,
    INTEN: u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED3: [5]u32,
    NMIEN: u32,
    NMIENSET: u32,
    NMIENCLR: u32,
    RESERVED4: [53]u32,
    PERREGION: [2]MWU_PERREGION_Type,
    RESERVED5: [64]u32,
    REGIONEN: u32,
    REGIONENSET: u32,
    REGIONENCLR: u32,
    RESERVED6: [57]u32,
    REGION: [4]MWU_REGION_Type,
    RESERVED7: [32]u32,
    PREGION: [2]MWU_PREGION_Type,
};
pub const NRF_MWU_Type = struct_unnamed_118;
const struct_unnamed_119 = extern struct {
    TASKS_START: u32,
    TASKS_STOP: u32,
    RESERVED: [63]u32,
    EVENTS_RXPTRUPD: u32,
    EVENTS_STOPPED: u32,
    RESERVED1: [2]u32,
    EVENTS_TXPTRUPD: u32,
    RESERVED2: [122]u32,
    INTEN: u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED3: [125]u32,
    ENABLE: u32,
    CONFIG: I2S_CONFIG_Type,
    RESERVED4: [3]u32,
    RXD: I2S_RXD_Type,
    RESERVED5: u32,
    TXD: I2S_TXD_Type,
    RESERVED6: [3]u32,
    RXTXD: I2S_RXTXD_Type,
    RESERVED7: [3]u32,
    PSEL: I2S_PSEL_Type,
};
pub const NRF_I2S_Type = struct_unnamed_119;
const struct_unnamed_120 = extern struct {
    UNUSED: u32,
};
pub const NRF_FPU_Type = struct_unnamed_120;
const struct_unnamed_121 = extern struct {
    RESERVED: u32,
    TASKS_STARTEPIN: [8]u32,
    TASKS_STARTISOIN: u32,
    TASKS_STARTEPOUT: [8]u32,
    TASKS_STARTISOOUT: u32,
    TASKS_EP0RCVOUT: u32,
    TASKS_EP0STATUS: u32,
    TASKS_EP0STALL: u32,
    TASKS_DPDMDRIVE: u32,
    TASKS_DPDMNODRIVE: u32,
    RESERVED1: [40]u32,
    EVENTS_USBRESET: u32,
    EVENTS_STARTED: u32,
    EVENTS_ENDEPIN: [8]u32,
    EVENTS_EP0DATADONE: u32,
    EVENTS_ENDISOIN: u32,
    EVENTS_ENDEPOUT: [8]u32,
    EVENTS_ENDISOOUT: u32,
    EVENTS_SOF: u32,
    EVENTS_USBEVENT: u32,
    EVENTS_EP0SETUP: u32,
    EVENTS_EPDATA: u32,
    RESERVED2: [39]u32,
    SHORTS: u32,
    RESERVED3: [63]u32,
    INTEN: u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED4: [61]u32,
    EVENTCAUSE: u32,
    RESERVED5: [7]u32,
    HALTED: USBD_HALTED_Type,
    RESERVED6: u32,
    EPSTATUS: u32,
    EPDATASTATUS: u32,
    USBADDR: u32,
    RESERVED7: [3]u32,
    BMREQUESTTYPE: u32,
    BREQUEST: u32,
    WVALUEL: u32,
    WVALUEH: u32,
    WINDEXL: u32,
    WINDEXH: u32,
    WLENGTHL: u32,
    WLENGTHH: u32,
    SIZE: USBD_SIZE_Type,
    RESERVED8: [15]u32,
    ENABLE: u32,
    USBPULLUP: u32,
    DPDMVALUE: u32,
    DTOGGLE: u32,
    EPINEN: u32,
    EPOUTEN: u32,
    EPSTALL: u32,
    ISOSPLIT: u32,
    FRAMECNTR: u32,
    RESERVED9: [2]u32,
    LOWPOWER: u32,
    ISOINCONFIG: u32,
    RESERVED10: [51]u32,
    EPIN: [8]USBD_EPIN_Type,
    ISOIN: USBD_ISOIN_Type,
    RESERVED11: [21]u32,
    EPOUT: [8]USBD_EPOUT_Type,
    ISOOUT: USBD_ISOOUT_Type,
};
pub const NRF_USBD_Type = struct_unnamed_121;
const struct_unnamed_122 = extern struct {
    TASKS_ACTIVATE: u32,
    TASKS_READSTART: u32,
    TASKS_WRITESTART: u32,
    TASKS_ERASESTART: u32,
    TASKS_DEACTIVATE: u32,
    RESERVED: [59]u32,
    EVENTS_READY: u32,
    RESERVED1: [127]u32,
    INTEN: u32,
    INTENSET: u32,
    INTENCLR: u32,
    RESERVED2: [125]u32,
    ENABLE: u32,
    READ: QSPI_READ_Type,
    WRITE: QSPI_WRITE_Type,
    ERASE: QSPI_ERASE_Type,
    PSEL: QSPI_PSEL_Type,
    XIPOFFSET: u32,
    IFCONFIG0: u32,
    RESERVED3: [46]u32,
    IFCONFIG1: u32,
    STATUS: u32,
    RESERVED4: [3]u32,
    DPMDUR: u32,
    RESERVED5: [3]u32,
    ADDRCONF: u32,
    RESERVED6: [3]u32,
    CINSTRCONF: u32,
    CINSTRDAT0: u32,
    CINSTRDAT1: u32,
    IFTIMING: u32,
};
pub const NRF_QSPI_Type = struct_unnamed_122;
const struct_unnamed_123 = extern struct {
    RESERVED: [1678]u32,
    HOST_CRYPTOKEY_SEL: u32,
    RESERVED1: [4]u32,
    HOST_IOT_KPRTL_LOCK: u32,
    HOST_IOT_KDR0: u32,
    HOST_IOT_KDR1: u32,
    HOST_IOT_KDR2: u32,
    HOST_IOT_KDR3: u32,
    HOST_IOT_LCS: u32,
};
pub const NRF_CC_HOST_RGF_Type = struct_unnamed_123;
const struct_unnamed_124 = extern struct {
    RESERVED: [320]u32,
    ENABLE: u32,
};
pub const NRF_CRYPTOCELL_Type = struct_unnamed_124;
pub const gcc_current_sp = @compileError("unable to translate function"); // /github/workspace/nRF5_SDK_17/modules/nrfx/mdk/compiler_abstraction.h:160:32
pub const nrfx_irq_handler_t = ?fn () callconv(.C) void;
pub const NRFX_DRV_STATE_UNINITIALIZED = @enumToInt(enum_unnamed_125.NRFX_DRV_STATE_UNINITIALIZED);
pub const NRFX_DRV_STATE_INITIALIZED = @enumToInt(enum_unnamed_125.NRFX_DRV_STATE_INITIALIZED);
pub const NRFX_DRV_STATE_POWERED_ON = @enumToInt(enum_unnamed_125.NRFX_DRV_STATE_POWERED_ON);
const enum_unnamed_125 = extern enum(c_int) {
    NRFX_DRV_STATE_UNINITIALIZED,
    NRFX_DRV_STATE_INITIALIZED,
    NRFX_DRV_STATE_POWERED_ON,
    _,
};
pub const nrfx_drv_state_t = enum_unnamed_125;
pub fn nrfx_is_in_ram(arg_p_object: ?*const c_void) callconv(.C) bool {
    var p_object = arg_p_object;
    return (((@intCast(u32, @ptrToInt(p_object))) & @as(c_uint, 3758096384)) == @as(c_uint, 536870912));
}
pub fn nrfx_is_word_aligned(arg_p_object: ?*const c_void) callconv(.C) bool {
    var p_object = arg_p_object;
    return (((@intCast(u32, @ptrToInt(p_object))) & @as(c_uint, 3)) == @as(c_uint, 0));
}
pub fn nrfx_get_irq_number(arg_p_reg: ?*const c_void) callconv(.C) IRQn_Type {
    var p_reg = arg_p_reg;
    return @intToEnum(IRQn_Type, @bitCast(u8, @truncate(u8, (@intCast(u32, @ptrToInt((p_reg))) >> @intCast(u5, 12)))));
}
const event_reg_offset: u32 = 256;
pub fn nrfx_bitpos_to_event(arg_bit: u32) callconv(.C) u32 {
    var bit = arg_bit;
    _ = event_reg_offset;
    return (event_reg_offset +% (bit *% @sizeOf(u32)));
}
const event_reg_offset_1: u32 = 256;
pub fn nrfx_event_to_bitpos(arg_event: u32) callconv(.C) u32 {
    var event = arg_event;
    _ = event_reg_offset_1;
    return ((event -% event_reg_offset_1) / @sizeOf(u32));
}
pub extern fn assert_nrf_callback(line_num: u16, file_name: [*c]const u8) void;
pub extern var __StackTop: u32;
pub extern var __StackLimit: u32;
pub extern var __isr_vector: u32;
pub extern var __etext: u32;
pub const UNIT_0_625_MS = @enumToInt(enum_unnamed_126.UNIT_0_625_MS);
pub const UNIT_1_25_MS = @enumToInt(enum_unnamed_126.UNIT_1_25_MS);
pub const UNIT_10_MS = @enumToInt(enum_unnamed_126.UNIT_10_MS);
const enum_unnamed_126 = extern enum(c_int) {
    UNIT_0_625_MS = 625,
    UNIT_1_25_MS = 1250,
    UNIT_10_MS = 10000,
    _,
};
pub const uint16_le_t = [2]u8;
pub const uint32_le_t = [4]u8;
const struct_unnamed_127 = extern struct {
    size: u16,
    p_data: [*c]u8,
};
pub const uint8_array_t = struct_unnamed_127;
pub fn value_rescale(arg_value: u32, arg_old_unit_reversal: u32, arg_new_unit_reversal: u16) callconv(.C) u64 {
    var value = arg_value;
    var old_unit_reversal = arg_old_unit_reversal;
    var new_unit_reversal = arg_new_unit_reversal;
    return @bitCast(u64, (((@bitCast(u64, @as(c_ulonglong, value)) *% @bitCast(c_ulonglong, @as(c_ulonglong, new_unit_reversal))) +% @bitCast(c_ulonglong, @as(c_ulonglong, ((old_unit_reversal) / @bitCast(c_uint, @as(c_int, 2)))))) / @bitCast(c_ulonglong, @as(c_ulonglong, (old_unit_reversal)))));
}
pub fn uint16_encode(arg_value: u16, arg_p_encoded_data: [*c]u8) callconv(.C) u8 {
    var value = arg_value;
    var p_encoded_data = arg_p_encoded_data;
    p_encoded_data[@intCast(c_uint, @as(c_int, 0))] = @bitCast(u8, @truncate(i8, ((@bitCast(c_int, @as(c_uint, value)) & @as(c_int, 255)) >> @intCast(@import("std").math.Log2Int(c_int), 0))));
    p_encoded_data[@intCast(c_uint, @as(c_int, 1))] = @bitCast(u8, @truncate(i8, ((@bitCast(c_int, @as(c_uint, value)) & @as(c_int, 65280)) >> @intCast(@import("std").math.Log2Int(c_int), 8))));
    return @bitCast(u8, @truncate(u8, @sizeOf(u16)));
}
pub fn uint24_encode(arg_value: u32, arg_p_encoded_data: [*c]u8) callconv(.C) u8 {
    var value = arg_value;
    var p_encoded_data = arg_p_encoded_data;
    p_encoded_data[@intCast(c_uint, @as(c_int, 0))] = @bitCast(u8, @truncate(u8, ((value & @bitCast(c_uint, @as(c_int, 255))) >> @intCast(@import("std").math.Log2Int(c_uint), 0))));
    p_encoded_data[@intCast(c_uint, @as(c_int, 1))] = @bitCast(u8, @truncate(u8, ((value & @bitCast(c_uint, @as(c_int, 65280))) >> @intCast(@import("std").math.Log2Int(c_uint), 8))));
    p_encoded_data[@intCast(c_uint, @as(c_int, 2))] = @bitCast(u8, @truncate(u8, ((value & @bitCast(c_uint, @as(c_int, 16711680))) >> @intCast(@import("std").math.Log2Int(c_uint), 16))));
    return @bitCast(u8, @truncate(i8, @as(c_int, 3)));
}
pub fn uint32_encode(arg_value: u32, arg_p_encoded_data: [*c]u8) callconv(.C) u8 {
    var value = arg_value;
    var p_encoded_data = arg_p_encoded_data;
    p_encoded_data[@intCast(c_uint, @as(c_int, 0))] = @bitCast(u8, @truncate(u8, ((value & @bitCast(c_uint, @as(c_int, 255))) >> @intCast(@import("std").math.Log2Int(c_uint), 0))));
    p_encoded_data[@intCast(c_uint, @as(c_int, 1))] = @bitCast(u8, @truncate(u8, ((value & @bitCast(c_uint, @as(c_int, 65280))) >> @intCast(@import("std").math.Log2Int(c_uint), 8))));
    p_encoded_data[@intCast(c_uint, @as(c_int, 2))] = @bitCast(u8, @truncate(u8, ((value & @bitCast(c_uint, @as(c_int, 16711680))) >> @intCast(@import("std").math.Log2Int(c_uint), 16))));
    p_encoded_data[@intCast(c_uint, @as(c_int, 3))] = @bitCast(u8, @truncate(u8, ((value & @as(c_uint, 4278190080)) >> @intCast(@import("std").math.Log2Int(c_uint), 24))));
    return @bitCast(u8, @truncate(u8, @sizeOf(u32)));
}
pub fn uint40_encode(arg_value: u64, arg_p_encoded_data: [*c]u8) callconv(.C) u8 {
    var value = arg_value;
    var p_encoded_data = arg_p_encoded_data;
    p_encoded_data[@intCast(c_uint, @as(c_int, 0))] = @bitCast(u8, @truncate(u8, ((value & @bitCast(c_ulonglong, @as(c_longlong, @as(c_int, 255)))) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 0))));
    p_encoded_data[@intCast(c_uint, @as(c_int, 1))] = @bitCast(u8, @truncate(u8, ((value & @bitCast(c_ulonglong, @as(c_longlong, @as(c_int, 65280)))) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 8))));
    p_encoded_data[@intCast(c_uint, @as(c_int, 2))] = @bitCast(u8, @truncate(u8, ((value & @bitCast(c_ulonglong, @as(c_longlong, @as(c_int, 16711680)))) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 16))));
    p_encoded_data[@intCast(c_uint, @as(c_int, 3))] = @bitCast(u8, @truncate(u8, ((value & @bitCast(c_ulonglong, @as(c_ulonglong, @as(c_uint, 4278190080)))) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 24))));
    p_encoded_data[@intCast(c_uint, @as(c_int, 4))] = @bitCast(u8, @truncate(u8, ((value & @bitCast(c_ulonglong, @as(c_longlong, 1095216660480))) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 32))));
    return @bitCast(u8, @truncate(i8, @as(c_int, 5)));
}
pub fn uint48_encode(arg_value: u64, arg_p_encoded_data: [*c]u8) callconv(.C) u8 {
    var value = arg_value;
    var p_encoded_data = arg_p_encoded_data;
    p_encoded_data[@intCast(c_uint, @as(c_int, 0))] = @bitCast(u8, @truncate(u8, ((value & @bitCast(c_ulonglong, @as(c_longlong, @as(c_int, 255)))) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 0))));
    p_encoded_data[@intCast(c_uint, @as(c_int, 1))] = @bitCast(u8, @truncate(u8, ((value & @bitCast(c_ulonglong, @as(c_longlong, @as(c_int, 65280)))) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 8))));
    p_encoded_data[@intCast(c_uint, @as(c_int, 2))] = @bitCast(u8, @truncate(u8, ((value & @bitCast(c_ulonglong, @as(c_longlong, @as(c_int, 16711680)))) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 16))));
    p_encoded_data[@intCast(c_uint, @as(c_int, 3))] = @bitCast(u8, @truncate(u8, ((value & @bitCast(c_ulonglong, @as(c_ulonglong, @as(c_uint, 4278190080)))) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 24))));
    p_encoded_data[@intCast(c_uint, @as(c_int, 4))] = @bitCast(u8, @truncate(u8, ((value & @bitCast(c_ulonglong, @as(c_longlong, 1095216660480))) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 32))));
    p_encoded_data[@intCast(c_uint, @as(c_int, 5))] = @bitCast(u8, @truncate(u8, ((value & @bitCast(c_ulonglong, @as(c_longlong, 280375465082880))) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 40))));
    return @bitCast(u8, @truncate(i8, @as(c_int, 6)));
}
pub fn uint16_decode(arg_p_encoded_data: [*c]const u8) callconv(.C) u16 {
    var p_encoded_data = arg_p_encoded_data;
    return @bitCast(u16, @truncate(c_short, (@bitCast(c_int, @as(c_uint, (@bitCast(u16, @as(c_ushort, (@intToPtr([*c]u8, @ptrToInt(p_encoded_data)))[@intCast(c_uint, @as(c_int, 0))]))))) | (@bitCast(c_int, @as(c_uint, (@bitCast(u16, @as(c_ushort, (@intToPtr([*c]u8, @ptrToInt(p_encoded_data)))[@intCast(c_uint, @as(c_int, 1))]))))) << @intCast(@import("std").math.Log2Int(c_int), 8)))));
}
pub fn uint16_big_decode(arg_p_encoded_data: [*c]const u8) callconv(.C) u16 {
    var p_encoded_data = arg_p_encoded_data;
    return @bitCast(u16, @truncate(c_short, ((@bitCast(c_int, @as(c_uint, (@bitCast(u16, @as(c_ushort, (@intToPtr([*c]u8, @ptrToInt(p_encoded_data)))[@intCast(c_uint, @as(c_int, 0))]))))) << @intCast(@import("std").math.Log2Int(c_int), 8)) | @bitCast(c_int, @as(c_uint, (@bitCast(u16, @as(c_ushort, (@intToPtr([*c]u8, @ptrToInt(p_encoded_data)))[@intCast(c_uint, @as(c_int, 1))]))))))));
}
pub fn uint24_decode(arg_p_encoded_data: [*c]const u8) callconv(.C) u32 {
    var p_encoded_data = arg_p_encoded_data;
    return ((((@bitCast(u32, @as(c_uint, (@intToPtr([*c]u8, @ptrToInt(p_encoded_data)))[@intCast(c_uint, @as(c_int, 0))]))) << @intCast(u5, 0)) | ((@bitCast(u32, @as(c_uint, (@intToPtr([*c]u8, @ptrToInt(p_encoded_data)))[@intCast(c_uint, @as(c_int, 1))]))) << @intCast(u5, 8))) | ((@bitCast(u32, @as(c_uint, (@intToPtr([*c]u8, @ptrToInt(p_encoded_data)))[@intCast(c_uint, @as(c_int, 2))]))) << @intCast(u5, 16)));
}
pub fn uint32_decode(arg_p_encoded_data: [*c]const u8) callconv(.C) u32 {
    var p_encoded_data = arg_p_encoded_data;
    return (((((@bitCast(u32, @as(c_uint, (@intToPtr([*c]u8, @ptrToInt(p_encoded_data)))[@intCast(c_uint, @as(c_int, 0))]))) << @intCast(u5, 0)) | ((@bitCast(u32, @as(c_uint, (@intToPtr([*c]u8, @ptrToInt(p_encoded_data)))[@intCast(c_uint, @as(c_int, 1))]))) << @intCast(u5, 8))) | ((@bitCast(u32, @as(c_uint, (@intToPtr([*c]u8, @ptrToInt(p_encoded_data)))[@intCast(c_uint, @as(c_int, 2))]))) << @intCast(u5, 16))) | ((@bitCast(u32, @as(c_uint, (@intToPtr([*c]u8, @ptrToInt(p_encoded_data)))[@intCast(c_uint, @as(c_int, 3))]))) << @intCast(u5, 24)));
}
pub fn uint32_big_decode(arg_p_encoded_data: [*c]const u8) callconv(.C) u32 {
    var p_encoded_data = arg_p_encoded_data;
    return (((((@bitCast(u32, @as(c_uint, (@intToPtr([*c]u8, @ptrToInt(p_encoded_data)))[@intCast(c_uint, @as(c_int, 0))]))) << @intCast(u5, 24)) | ((@bitCast(u32, @as(c_uint, (@intToPtr([*c]u8, @ptrToInt(p_encoded_data)))[@intCast(c_uint, @as(c_int, 1))]))) << @intCast(u5, 16))) | ((@bitCast(u32, @as(c_uint, (@intToPtr([*c]u8, @ptrToInt(p_encoded_data)))[@intCast(c_uint, @as(c_int, 2))]))) << @intCast(u5, 8))) | ((@bitCast(u32, @as(c_uint, (@intToPtr([*c]u8, @ptrToInt(p_encoded_data)))[@intCast(c_uint, @as(c_int, 3))]))) << @intCast(u5, 0)));
}
pub fn uint16_big_encode(arg_value: u16, arg_p_encoded_data: [*c]u8) callconv(.C) u8 {
    var value = arg_value;
    var p_encoded_data = arg_p_encoded_data;
    p_encoded_data[@intCast(c_uint, @as(c_int, 0))] = @bitCast(u8, @truncate(i8, (@bitCast(c_int, @as(c_uint, value)) >> @intCast(@import("std").math.Log2Int(c_int), 8))));
    p_encoded_data[@intCast(c_uint, @as(c_int, 1))] = @bitCast(u8, @truncate(i8, (@bitCast(c_int, @as(c_uint, value)) & @as(c_int, 255))));
    return @bitCast(u8, @truncate(u8, @sizeOf(u16)));
}
pub fn uint32_big_encode(arg_value: u32, arg_p_encoded_data: [*c]u8) callconv(.C) u8 {
    var value = arg_value;
    var p_encoded_data = arg_p_encoded_data;
    @ptrCast([*c]u32, @alignCast(@alignOf(u32), p_encoded_data)).?.* = __REV(value);
    return @bitCast(u8, @truncate(u8, @sizeOf(u32)));
}
pub fn uint40_decode(arg_p_encoded_data: [*c]const u8) callconv(.C) u64 {
    var p_encoded_data = arg_p_encoded_data;
    return ((((((@bitCast(u64, @as(c_ulonglong, (@intToPtr([*c]u8, @ptrToInt(p_encoded_data)))[@intCast(c_uint, @as(c_int, 0))]))) << @intCast(u6, 0)) | ((@bitCast(u64, @as(c_ulonglong, (@intToPtr([*c]u8, @ptrToInt(p_encoded_data)))[@intCast(c_uint, @as(c_int, 1))]))) << @intCast(u6, 8))) | ((@bitCast(u64, @as(c_ulonglong, (@intToPtr([*c]u8, @ptrToInt(p_encoded_data)))[@intCast(c_uint, @as(c_int, 2))]))) << @intCast(u6, 16))) | ((@bitCast(u64, @as(c_ulonglong, (@intToPtr([*c]u8, @ptrToInt(p_encoded_data)))[@intCast(c_uint, @as(c_int, 3))]))) << @intCast(u6, 24))) | ((@bitCast(u64, @as(c_ulonglong, (@intToPtr([*c]u8, @ptrToInt(p_encoded_data)))[@intCast(c_uint, @as(c_int, 4))]))) << @intCast(u6, 32)));
}
pub fn uint48_decode(arg_p_encoded_data: [*c]const u8) callconv(.C) u64 {
    var p_encoded_data = arg_p_encoded_data;
    return (((((((@bitCast(u64, @as(c_ulonglong, (@intToPtr([*c]u8, @ptrToInt(p_encoded_data)))[@intCast(c_uint, @as(c_int, 0))]))) << @intCast(u6, 0)) | ((@bitCast(u64, @as(c_ulonglong, (@intToPtr([*c]u8, @ptrToInt(p_encoded_data)))[@intCast(c_uint, @as(c_int, 1))]))) << @intCast(u6, 8))) | ((@bitCast(u64, @as(c_ulonglong, (@intToPtr([*c]u8, @ptrToInt(p_encoded_data)))[@intCast(c_uint, @as(c_int, 2))]))) << @intCast(u6, 16))) | ((@bitCast(u64, @as(c_ulonglong, (@intToPtr([*c]u8, @ptrToInt(p_encoded_data)))[@intCast(c_uint, @as(c_int, 3))]))) << @intCast(u6, 24))) | ((@bitCast(u64, @as(c_ulonglong, (@intToPtr([*c]u8, @ptrToInt(p_encoded_data)))[@intCast(c_uint, @as(c_int, 4))]))) << @intCast(u6, 32))) | ((@bitCast(u64, @as(c_ulonglong, (@intToPtr([*c]u8, @ptrToInt(p_encoded_data)))[@intCast(c_uint, @as(c_int, 5))]))) << @intCast(u6, 40)));
}
pub fn battery_level_in_percent(mvolts: u16) callconv(.C) u8 {
    var battery_level: u8 = undefined;
    if (@bitCast(c_int, @as(c_uint, mvolts)) >= @as(c_int, 3000)) {
        battery_level = @bitCast(u8, @truncate(i8, @as(c_int, 100)));
    } else if (@bitCast(c_int, @as(c_uint, mvolts)) > @as(c_int, 2900)) {
        battery_level = @bitCast(u8, @truncate(i8, (@as(c_int, 100) - @divTrunc(((@as(c_int, 3000) - @bitCast(c_int, @as(c_uint, mvolts))) * @as(c_int, 58)), @as(c_int, 100)))));
    } else if (@bitCast(c_int, @as(c_uint, mvolts)) > @as(c_int, 2740)) {
        battery_level = @bitCast(u8, @truncate(i8, (@as(c_int, 42) - @divTrunc(((@as(c_int, 2900) - @bitCast(c_int, @as(c_uint, mvolts))) * @as(c_int, 24)), @as(c_int, 160)))));
    } else if (@bitCast(c_int, @as(c_uint, mvolts)) > @as(c_int, 2440)) {
        battery_level = @bitCast(u8, @truncate(i8, (@as(c_int, 18) - @divTrunc(((@as(c_int, 2740) - @bitCast(c_int, @as(c_uint, mvolts))) * @as(c_int, 12)), @as(c_int, 300)))));
    } else if (@bitCast(c_int, @as(c_uint, mvolts)) > @as(c_int, 2100)) {
        battery_level = @bitCast(u8, @truncate(i8, (@as(c_int, 6) - @divTrunc(((@as(c_int, 2440) - @bitCast(c_int, @as(c_uint, mvolts))) * @as(c_int, 6)), @as(c_int, 340)))));
    } else {
        battery_level = @bitCast(u8, @truncate(i8, @as(c_int, 0)));
    }
    return battery_level;
}
pub fn is_word_aligned(arg_p: ?*const c_void) callconv(.C) bool {
    var p = arg_p;
    return ((@intCast(usize, @ptrToInt(p)) & @bitCast(c_uint, @as(c_int, 3))) == @bitCast(c_uint, @as(c_int, 0)));
}
pub fn is_address_from_stack(arg_ptr: ?*c_void) callconv(.C) bool {
    var ptr = arg_ptr;
    if ((@intCast(u32, @ptrToInt(ptr)) >= @intCast(u32, @ptrToInt(&__StackLimit))) and (@intCast(u32, @ptrToInt(ptr)) < @intCast(u32, @ptrToInt(&__StackTop)))) {
        return @as(c_int, 1) != 0;
    } else {
        return @as(c_int, 0) != 0;
    }
    return false;
}
pub fn _NRFX_IRQ_PRIORITY_SET(arg_irq_number: IRQn_Type, arg_priority: u8) callconv(.C) void {
    var irq_number = arg_irq_number;
    var priority = arg_priority;
    if (false) {
        if (@bitCast(c_int, @as(c_uint, (priority))) < @as(c_int, 8)) {} else {
            assert_nrf_callback(@bitCast(u16, @truncate(c_short, @as(c_int, 107))), @ptrCast([*c]u8, @alignCast(@alignOf(u8), "/github/workspace/nRF5_SDK_17/integration/nrfx/nrfx_glue.h")));
        }
    }
    {}
    __NVIC_SetPriority(irq_number, @bitCast(u32, @as(c_uint, priority)));
}
pub fn _NRFX_IRQ_ENABLE(arg_irq_number: IRQn_Type) callconv(.C) void {
    var irq_number = arg_irq_number;
    __NVIC_EnableIRQ(irq_number);
}
pub fn _NRFX_IRQ_IS_ENABLED(arg_irq_number: IRQn_Type) callconv(.C) bool {
    var irq_number = arg_irq_number;
    return (@bitCast(c_ulong, @as(c_long, @as(c_int, 0))) != (@bitCast(c_ulong, @as(c_ulong, (@intToPtr([*c]NVIC_Type, ((@as(c_ulong, 3758153728)) +% @as(c_ulong, 256)))).*.ISER[@intCast(c_uint, @divTrunc(@enumToInt(irq_number), @as(c_int, 32)))])) & (@as(c_ulong, 1) << @intCast(@import("std").math.Log2Int(c_ulong), (@rem(@enumToInt(irq_number), @as(c_int, 32)))))));
}
pub fn _NRFX_IRQ_DISABLE(arg_irq_number: IRQn_Type) callconv(.C) void {
    var irq_number = arg_irq_number;
    __NVIC_DisableIRQ(irq_number);
}
pub fn _NRFX_IRQ_PENDING_SET(arg_irq_number: IRQn_Type) callconv(.C) void {
    var irq_number = arg_irq_number;
    __NVIC_SetPendingIRQ(irq_number);
}
pub fn _NRFX_IRQ_PENDING_CLEAR(arg_irq_number: IRQn_Type) callconv(.C) void {
    var irq_number = arg_irq_number;
    __NVIC_ClearPendingIRQ(irq_number);
}
pub fn _NRFX_IRQ_IS_PENDING(arg_irq_number: IRQn_Type) callconv(.C) bool {
    var irq_number = arg_irq_number;
    return (__NVIC_GetPendingIRQ(irq_number) == @bitCast(c_uint, @as(c_int, 1)));
}
pub const va_list = __builtin_va_list;
pub const __gnuc_va_list = __builtin_va_list;
pub const wint_t = c_int;
pub const __blkcnt_t = c_long;
pub const __blksize_t = c_long;
pub const __fsblkcnt_t = __uint64_t;
pub const __fsfilcnt_t = __uint32_t;
pub const _off_t = c_long;
pub const __pid_t = c_int;
pub const __dev_t = c_short;
pub const __uid_t = c_ushort;
pub const __gid_t = c_ushort;
pub const __id_t = __uint32_t;
pub const __ino_t = c_ushort;
pub const __mode_t = __uint32_t;
pub const _off64_t = c_longlong;
pub const __off_t = _off_t;
pub const __loff_t = _off64_t;
pub const __key_t = c_long;
pub const _fpos_t = c_long;
pub const __size_t = c_uint;
pub const _ssize_t = c_int;
pub const __ssize_t = _ssize_t;
const union_unnamed_129 = extern union {
    __wch: wint_t,
    __wchb: [4]u8,
};
const struct_unnamed_128 = extern struct {
    __count: c_int,
    __value: union_unnamed_129,
};
pub const _mbstate_t = struct_unnamed_128;
pub const _iconv_t = ?*c_void;
pub const __clock_t = c_ulong;
pub const __time_t = __int_least64_t;
pub const __clockid_t = c_ulong;
pub const __timer_t = c_ulong;
pub const __sa_family_t = __uint8_t;
pub const __socklen_t = __uint32_t;
pub const __nl_item = c_int;
pub const __nlink_t = c_ushort;
pub const __suseconds_t = c_long;
pub const __useconds_t = c_ulong;
pub const __va_list = __builtin_va_list;
pub const __ULong = c_ulong;
pub const struct___lock = opaque {};
pub const _LOCK_T = ?*struct___lock;
pub extern fn __retarget_lock_init(lock: [*c]_LOCK_T) void;
pub extern fn __retarget_lock_init_recursive(lock: [*c]_LOCK_T) void;
pub extern fn __retarget_lock_close(lock: _LOCK_T) void;
pub extern fn __retarget_lock_close_recursive(lock: _LOCK_T) void;
pub extern fn __retarget_lock_acquire(lock: _LOCK_T) void;
pub extern fn __retarget_lock_acquire_recursive(lock: _LOCK_T) void;
pub extern fn __retarget_lock_try_acquire(lock: _LOCK_T) c_int;
pub extern fn __retarget_lock_try_acquire_recursive(lock: _LOCK_T) c_int;
pub extern fn __retarget_lock_release(lock: _LOCK_T) void;
pub extern fn __retarget_lock_release_recursive(lock: _LOCK_T) void;
pub const _flock_t = _LOCK_T;
pub const struct___locale_t = opaque {};
pub const struct__Bigint = extern struct {
    _next: [*c]struct__Bigint,
    _k: c_int,
    _maxwds: c_int,
    _sign: c_int,
    _wds: c_int,
    _x: [1]__ULong,
};
pub const struct___tm = extern struct {
    __tm_sec: c_int,
    __tm_min: c_int,
    __tm_hour: c_int,
    __tm_mday: c_int,
    __tm_mon: c_int,
    __tm_year: c_int,
    __tm_wday: c_int,
    __tm_yday: c_int,
    __tm_isdst: c_int,
};
pub const struct__rand48 = extern struct {
    _seed: [3]c_ushort,
    _mult: [3]c_ushort,
    _add: c_ushort,
};
const struct_unnamed_131 = extern struct {
    _unused_rand: c_uint,
    _strtok_last: [*c]u8,
    _asctime_buf: [26]u8,
    _localtime_buf: struct___tm,
    _gamma_signgam: c_int,
    _rand_next: c_ulonglong,
    _r48: struct__rand48,
    _mblen_state: _mbstate_t,
    _mbtowc_state: _mbstate_t,
    _wctomb_state: _mbstate_t,
    _l64a_buf: [8]u8,
    _signal_buf: [24]u8,
    _getdate_err: c_int,
    _mbrlen_state: _mbstate_t,
    _mbrtowc_state: _mbstate_t,
    _mbsrtowcs_state: _mbstate_t,
    _wcrtomb_state: _mbstate_t,
    _wcsrtombs_state: _mbstate_t,
    _h_errno: c_int,
};
const struct_unnamed_132 = extern struct {
    _nextf: [30][*c]u8,
    _nmalloc: [30]c_uint,
};
const union_unnamed_130 = extern union {
    _reent: struct_unnamed_131,
    _unused: struct_unnamed_132,
};
pub const struct__on_exit_args = extern struct {
    _fnargs: [32]?*c_void,
    _dso_handle: [32]?*c_void,
    _fntypes: __ULong,
    _is_cxa: __ULong,
};
pub const struct__atexit = extern struct {
    _next: [*c]struct__atexit,
    _ind: c_int,
    _fns: [32]?fn () callconv(.C) void,
    _on_exit_args: struct__on_exit_args,
};
pub const struct__glue = extern struct {
    _next: [*c]struct__glue,
    _niobs: c_int,
    _iobs: [*c]__FILE,
};
pub const struct__reent = extern struct {
    _errno: c_int,
    _stdin: [*c]__FILE,
    _stdout: [*c]__FILE,
    _stderr: [*c]__FILE,
    _inc: c_int,
    _emergency: [25]u8,
    _unspecified_locale_info: c_int,
    _locale: ?*struct___locale_t,
    __sdidinit: c_int,
    __cleanup: ?fn ([*c]struct__reent) callconv(.C) void,
    _result: [*c]struct__Bigint,
    _result_k: c_int,
    _p5s: [*c]struct__Bigint,
    _freelist: [*c][*c]struct__Bigint,
    _cvtlen: c_int,
    _cvtbuf: [*c]u8,
    _new: union_unnamed_130,
    _atexit: [*c]struct__atexit,
    _atexit0: struct__atexit,
    _sig_func: [*c]?fn (c_int) callconv(.C) void,
    __sglue: struct__glue,
    __sf: [3]__FILE,
};
pub const struct___sbuf = extern struct {
    _base: [*c]u8,
    _size: c_int,
};
pub const struct___sFILE = extern struct {
    _p: [*c]u8,
    _r: c_int,
    _w: c_int,
    _flags: c_short,
    _file: c_short,
    _bf: struct___sbuf,
    _lbfsize: c_int,
    _cookie: ?*c_void,
    _read: ?fn ([*c]struct__reent, ?*c_void, [*c]u8, c_int) callconv(.C) c_int,
    _write: ?fn ([*c]struct__reent, ?*c_void, [*c]const u8, c_int) callconv(.C) c_int,
    _seek: ?fn ([*c]struct__reent, ?*c_void, _fpos_t, c_int) callconv(.C) _fpos_t,
    _close: ?fn ([*c]struct__reent, ?*c_void) callconv(.C) c_int,
    _ub: struct___sbuf,
    _up: [*c]u8,
    _ur: c_int,
    _ubuf: [3]u8,
    _nbuf: [1]u8,
    _lb: struct___sbuf,
    _blksize: c_int,
    _offset: _off_t,
    _data: [*c]struct__reent,
    _lock: _flock_t,
    _mbstate: _mbstate_t,
    _flags2: c_int,
};
pub const __FILE = struct___sFILE;
pub extern var _impure_ptr: [*c]struct__reent;
pub extern const _global_impure_ptr: [*c]struct__reent;
pub extern fn _reclaim_reent([*c]struct__reent) void;
pub const u_int8_t = __uint8_t;
pub const u_int16_t = __uint16_t;
pub const u_int32_t = __uint32_t;
pub const u_int64_t = __uint64_t;
pub const register_t = __intptr_t;
pub const __sigset_t = c_ulong;
pub const suseconds_t = __suseconds_t;
pub const time_t = __int_least64_t;
pub const struct_timeval = extern struct {
    tv_sec: time_t,
    tv_usec: suseconds_t,
};
pub const struct_timespec = extern struct {
    tv_sec: time_t,
    tv_nsec: c_long,
};
pub const struct_itimerspec = extern struct {
    it_interval: struct_timespec,
    it_value: struct_timespec,
};
pub const sigset_t = __sigset_t;
pub const fd_mask = c_ulong;
pub const struct__types_fd_set = extern struct {
    fds_bits: [2]fd_mask,
};
pub const _types_fd_set = struct__types_fd_set;
pub extern fn select(__n: c_int, __readfds: [*c]_types_fd_set, __writefds: [*c]_types_fd_set, __exceptfds: [*c]_types_fd_set, __timeout: [*c]struct_timeval) c_int;
pub extern fn pselect(__n: c_int, __readfds: [*c]_types_fd_set, __writefds: [*c]_types_fd_set, __exceptfds: [*c]_types_fd_set, __timeout: [*c]const struct_timespec, __set: [*c]const sigset_t) c_int;
pub const in_addr_t = __uint32_t;
pub const in_port_t = __uint16_t;
pub const u_register_t = __uintptr_t;
pub const u_char = u8;
pub const u_short = c_ushort;
pub const u_int = c_uint;
pub const u_long = c_ulong;
pub const ushort = c_ushort;
pub const uint = c_uint;
pub const ulong = c_ulong;
pub const blkcnt_t = __blkcnt_t;
pub const blksize_t = __blksize_t;
pub const clock_t = c_ulong;
pub const daddr_t = c_long;
pub const caddr_t = [*c]u8;
pub const fsblkcnt_t = __fsblkcnt_t;
pub const fsfilcnt_t = __fsfilcnt_t;
pub const id_t = __id_t;
pub const ino_t = __ino_t;
pub const off_t = __off_t;
pub const dev_t = __dev_t;
pub const uid_t = __uid_t;
pub const gid_t = __gid_t;
pub const pid_t = __pid_t;
pub const key_t = __key_t;
pub const mode_t = __mode_t;
pub const nlink_t = __nlink_t;
pub const clockid_t = __clockid_t;
pub const timer_t = __timer_t;
pub const useconds_t = __useconds_t;
pub const sbintime_t = __int64_t;
pub const struct_sched_param = extern struct {
    sched_priority: c_int,
};
pub const pthread_t = __uint32_t;
const struct_unnamed_133 = extern struct {
    is_initialized: c_int,
    stackaddr: ?*c_void,
    stacksize: c_int,
    contentionscope: c_int,
    inheritsched: c_int,
    schedpolicy: c_int,
    schedparam: struct_sched_param,
    detachstate: c_int,
};
pub const pthread_attr_t = struct_unnamed_133;
pub const pthread_mutex_t = __uint32_t;
const struct_unnamed_134 = extern struct {
    is_initialized: c_int,
    recursive: c_int,
};
pub const pthread_mutexattr_t = struct_unnamed_134;
pub const pthread_cond_t = __uint32_t;
const struct_unnamed_135 = extern struct {
    is_initialized: c_int,
    clock: clock_t,
};
pub const pthread_condattr_t = struct_unnamed_135;
pub const pthread_key_t = __uint32_t;
const struct_unnamed_136 = extern struct {
    is_initialized: c_int,
    init_executed: c_int,
};
pub const pthread_once_t = struct_unnamed_136;
pub const FILE = __FILE;
pub const fpos_t = _fpos_t;
pub extern fn ctermid([*c]u8) [*c]u8;
pub extern fn tmpfile() [*c]FILE;
pub extern fn tmpnam([*c]u8) [*c]u8;
pub extern fn tempnam([*c]const u8, [*c]const u8) [*c]u8;
pub extern fn fclose([*c]FILE) c_int;
pub extern fn fflush([*c]FILE) c_int;
pub extern fn freopen(noalias [*c]const u8, noalias [*c]const u8, noalias [*c]FILE) [*c]FILE;
pub extern fn setbuf(noalias [*c]FILE, noalias [*c]u8) void;
pub extern fn setvbuf(noalias [*c]FILE, noalias [*c]u8, c_int, usize) c_int;
pub extern fn fprintf(noalias [*c]FILE, noalias [*c]const u8, ...) c_int;
pub extern fn fscanf(noalias [*c]FILE, noalias [*c]const u8, ...) c_int;
pub extern fn printf(noalias [*c]const u8, ...) c_int;
pub extern fn scanf(noalias [*c]const u8, ...) c_int;
pub extern fn sscanf(noalias [*c]const u8, noalias [*c]const u8, ...) c_int;
pub extern fn vfprintf(noalias [*c]FILE, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn vprintf([*c]const u8, __gnuc_va_list) c_int;
pub extern fn vsprintf(noalias [*c]u8, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn fgetc([*c]FILE) c_int;
pub extern fn fgets(noalias [*c]u8, c_int, noalias [*c]FILE) [*c]u8;
pub extern fn fputc(c_int, [*c]FILE) c_int;
pub extern fn fputs(noalias [*c]const u8, noalias [*c]FILE) c_int;
pub extern fn getc([*c]FILE) c_int;
pub extern fn getchar() c_int;
pub extern fn gets([*c]u8) [*c]u8;
pub extern fn putc(c_int, [*c]FILE) c_int;
pub extern fn putchar(c_int) c_int;
pub extern fn puts([*c]const u8) c_int;
pub extern fn ungetc(c_int, [*c]FILE) c_int;
pub extern fn fread(noalias ?*c_void, _size: usize, _n: usize, noalias [*c]FILE) usize;
pub extern fn fwrite(noalias ?*const c_void, _size: usize, _n: usize, [*c]FILE) usize;
pub extern fn fgetpos(noalias [*c]FILE, noalias [*c]fpos_t) c_int;
pub extern fn fseek([*c]FILE, c_long, c_int) c_int;
pub extern fn fsetpos([*c]FILE, [*c]const fpos_t) c_int;
pub extern fn ftell([*c]FILE) c_long;
pub extern fn rewind([*c]FILE) void;
pub extern fn clearerr([*c]FILE) void;
pub extern fn feof([*c]FILE) c_int;
pub extern fn ferror([*c]FILE) c_int;
pub extern fn perror([*c]const u8) void;
pub extern fn fopen(noalias _name: [*c]const u8, noalias _type: [*c]const u8) [*c]FILE;
pub extern fn sprintf(noalias [*c]u8, noalias [*c]const u8, ...) c_int;
pub extern fn remove([*c]const u8) c_int;
pub extern fn rename([*c]const u8, [*c]const u8) c_int;
pub extern fn fseeko([*c]FILE, off_t, c_int) c_int;
pub extern fn ftello([*c]FILE) off_t;
pub extern fn snprintf(noalias [*c]u8, usize, noalias [*c]const u8, ...) c_int;
pub extern fn vsnprintf(noalias [*c]u8, usize, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn vfscanf(noalias [*c]FILE, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn vscanf([*c]const u8, __gnuc_va_list) c_int;
pub extern fn vsscanf(noalias [*c]const u8, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn asiprintf([*c][*c]u8, [*c]const u8, ...) c_int;
pub extern fn asniprintf([*c]u8, [*c]usize, [*c]const u8, ...) [*c]u8;
pub extern fn asnprintf(noalias [*c]u8, noalias [*c]usize, noalias [*c]const u8, ...) [*c]u8;
pub extern fn diprintf(c_int, [*c]const u8, ...) c_int;
pub extern fn fiprintf([*c]FILE, [*c]const u8, ...) c_int;
pub extern fn fiscanf([*c]FILE, [*c]const u8, ...) c_int;
pub extern fn iprintf([*c]const u8, ...) c_int;
pub extern fn iscanf([*c]const u8, ...) c_int;
pub extern fn siprintf([*c]u8, [*c]const u8, ...) c_int;
pub extern fn siscanf([*c]const u8, [*c]const u8, ...) c_int;
pub extern fn sniprintf([*c]u8, usize, [*c]const u8, ...) c_int;
pub extern fn vasiprintf([*c][*c]u8, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn vasniprintf([*c]u8, [*c]usize, [*c]const u8, __gnuc_va_list) [*c]u8;
pub extern fn vasnprintf([*c]u8, [*c]usize, [*c]const u8, __gnuc_va_list) [*c]u8;
pub extern fn vdiprintf(c_int, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn vfiprintf([*c]FILE, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn vfiscanf([*c]FILE, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn viprintf([*c]const u8, __gnuc_va_list) c_int;
pub extern fn viscanf([*c]const u8, __gnuc_va_list) c_int;
pub extern fn vsiprintf([*c]u8, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn vsiscanf([*c]const u8, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn vsniprintf([*c]u8, usize, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn fdopen(c_int, [*c]const u8) [*c]FILE;
pub extern fn fileno([*c]FILE) c_int;
pub extern fn pclose([*c]FILE) c_int;
pub extern fn popen([*c]const u8, [*c]const u8) [*c]FILE;
pub extern fn setbuffer([*c]FILE, [*c]u8, c_int) void;
pub extern fn setlinebuf([*c]FILE) c_int;
pub extern fn getw([*c]FILE) c_int;
pub extern fn putw(c_int, [*c]FILE) c_int;
pub extern fn getc_unlocked([*c]FILE) c_int;
pub extern fn getchar_unlocked() c_int;
pub extern fn flockfile([*c]FILE) void;
pub extern fn ftrylockfile([*c]FILE) c_int;
pub extern fn funlockfile([*c]FILE) void;
pub extern fn putc_unlocked(c_int, [*c]FILE) c_int;
pub extern fn putchar_unlocked(c_int) c_int;
pub extern fn dprintf(c_int, noalias [*c]const u8, ...) c_int;
pub extern fn fmemopen(noalias ?*c_void, usize, noalias [*c]const u8) [*c]FILE;
pub extern fn open_memstream([*c][*c]u8, [*c]usize) [*c]FILE;
pub extern fn vdprintf(c_int, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn renameat(c_int, [*c]const u8, c_int, [*c]const u8) c_int;
pub extern fn _asiprintf_r([*c]struct__reent, [*c][*c]u8, [*c]const u8, ...) c_int;
pub extern fn _asniprintf_r([*c]struct__reent, [*c]u8, [*c]usize, [*c]const u8, ...) [*c]u8;
pub extern fn _asnprintf_r([*c]struct__reent, noalias [*c]u8, noalias [*c]usize, noalias [*c]const u8, ...) [*c]u8;
pub extern fn _asprintf_r([*c]struct__reent, noalias [*c][*c]u8, noalias [*c]const u8, ...) c_int;
pub extern fn _diprintf_r([*c]struct__reent, c_int, [*c]const u8, ...) c_int;
pub extern fn _dprintf_r([*c]struct__reent, c_int, noalias [*c]const u8, ...) c_int;
pub extern fn _fclose_r([*c]struct__reent, [*c]FILE) c_int;
pub extern fn _fcloseall_r([*c]struct__reent) c_int;
pub extern fn _fdopen_r([*c]struct__reent, c_int, [*c]const u8) [*c]FILE;
pub extern fn _fflush_r([*c]struct__reent, [*c]FILE) c_int;
pub extern fn _fgetc_r([*c]struct__reent, [*c]FILE) c_int;
pub extern fn _fgetc_unlocked_r([*c]struct__reent, [*c]FILE) c_int;
pub extern fn _fgets_r([*c]struct__reent, noalias [*c]u8, c_int, noalias [*c]FILE) [*c]u8;
pub extern fn _fgets_unlocked_r([*c]struct__reent, noalias [*c]u8, c_int, noalias [*c]FILE) [*c]u8;
pub extern fn _fgetpos_r([*c]struct__reent, [*c]FILE, [*c]fpos_t) c_int;
pub extern fn _fsetpos_r([*c]struct__reent, [*c]FILE, [*c]const fpos_t) c_int;
pub extern fn _fiprintf_r([*c]struct__reent, [*c]FILE, [*c]const u8, ...) c_int;
pub extern fn _fiscanf_r([*c]struct__reent, [*c]FILE, [*c]const u8, ...) c_int;
pub extern fn _fmemopen_r([*c]struct__reent, noalias ?*c_void, usize, noalias [*c]const u8) [*c]FILE;
pub extern fn _fopen_r([*c]struct__reent, noalias [*c]const u8, noalias [*c]const u8) [*c]FILE;
pub extern fn _freopen_r([*c]struct__reent, noalias [*c]const u8, noalias [*c]const u8, noalias [*c]FILE) [*c]FILE;
pub extern fn _fprintf_r([*c]struct__reent, noalias [*c]FILE, noalias [*c]const u8, ...) c_int;
pub extern fn _fpurge_r([*c]struct__reent, [*c]FILE) c_int;
pub extern fn _fputc_r([*c]struct__reent, c_int, [*c]FILE) c_int;
pub extern fn _fputc_unlocked_r([*c]struct__reent, c_int, [*c]FILE) c_int;
pub extern fn _fputs_r([*c]struct__reent, noalias [*c]const u8, noalias [*c]FILE) c_int;
pub extern fn _fputs_unlocked_r([*c]struct__reent, noalias [*c]const u8, noalias [*c]FILE) c_int;
pub extern fn _fread_r([*c]struct__reent, noalias ?*c_void, _size: usize, _n: usize, noalias [*c]FILE) usize;
pub extern fn _fread_unlocked_r([*c]struct__reent, noalias ?*c_void, _size: usize, _n: usize, noalias [*c]FILE) usize;
pub extern fn _fscanf_r([*c]struct__reent, noalias [*c]FILE, noalias [*c]const u8, ...) c_int;
pub extern fn _fseek_r([*c]struct__reent, [*c]FILE, c_long, c_int) c_int;
pub extern fn _fseeko_r([*c]struct__reent, [*c]FILE, _off_t, c_int) c_int;
pub extern fn _ftell_r([*c]struct__reent, [*c]FILE) c_long;
pub extern fn _ftello_r([*c]struct__reent, [*c]FILE) _off_t;
pub extern fn _rewind_r([*c]struct__reent, [*c]FILE) void;
pub extern fn _fwrite_r([*c]struct__reent, noalias ?*const c_void, _size: usize, _n: usize, noalias [*c]FILE) usize;
pub extern fn _fwrite_unlocked_r([*c]struct__reent, noalias ?*const c_void, _size: usize, _n: usize, noalias [*c]FILE) usize;
pub extern fn _getc_r([*c]struct__reent, [*c]FILE) c_int;
pub extern fn _getc_unlocked_r([*c]struct__reent, [*c]FILE) c_int;
pub extern fn _getchar_r([*c]struct__reent) c_int;
pub extern fn _getchar_unlocked_r([*c]struct__reent) c_int;
pub extern fn _gets_r([*c]struct__reent, [*c]u8) [*c]u8;
pub extern fn _iprintf_r([*c]struct__reent, [*c]const u8, ...) c_int;
pub extern fn _iscanf_r([*c]struct__reent, [*c]const u8, ...) c_int;
pub extern fn _open_memstream_r([*c]struct__reent, [*c][*c]u8, [*c]usize) [*c]FILE;
pub extern fn _perror_r([*c]struct__reent, [*c]const u8) void;
pub extern fn _printf_r([*c]struct__reent, noalias [*c]const u8, ...) c_int;
pub extern fn _putc_r([*c]struct__reent, c_int, [*c]FILE) c_int;
pub extern fn _putc_unlocked_r([*c]struct__reent, c_int, [*c]FILE) c_int;
pub extern fn _putchar_unlocked_r([*c]struct__reent, c_int) c_int;
pub extern fn _putchar_r([*c]struct__reent, c_int) c_int;
pub extern fn _puts_r([*c]struct__reent, [*c]const u8) c_int;
pub extern fn _remove_r([*c]struct__reent, [*c]const u8) c_int;
pub extern fn _rename_r([*c]struct__reent, _old: [*c]const u8, _new: [*c]const u8) c_int;
pub extern fn _scanf_r([*c]struct__reent, noalias [*c]const u8, ...) c_int;
pub extern fn _siprintf_r([*c]struct__reent, [*c]u8, [*c]const u8, ...) c_int;
pub extern fn _siscanf_r([*c]struct__reent, [*c]const u8, [*c]const u8, ...) c_int;
pub extern fn _sniprintf_r([*c]struct__reent, [*c]u8, usize, [*c]const u8, ...) c_int;
pub extern fn _snprintf_r([*c]struct__reent, noalias [*c]u8, usize, noalias [*c]const u8, ...) c_int;
pub extern fn _sprintf_r([*c]struct__reent, noalias [*c]u8, noalias [*c]const u8, ...) c_int;
pub extern fn _sscanf_r([*c]struct__reent, noalias [*c]const u8, noalias [*c]const u8, ...) c_int;
pub extern fn _tempnam_r([*c]struct__reent, [*c]const u8, [*c]const u8) [*c]u8;
pub extern fn _tmpfile_r([*c]struct__reent) [*c]FILE;
pub extern fn _tmpnam_r([*c]struct__reent, [*c]u8) [*c]u8;
pub extern fn _ungetc_r([*c]struct__reent, c_int, [*c]FILE) c_int;
pub extern fn _vasiprintf_r([*c]struct__reent, [*c][*c]u8, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vasniprintf_r([*c]struct__reent, [*c]u8, [*c]usize, [*c]const u8, __gnuc_va_list) [*c]u8;
pub extern fn _vasnprintf_r([*c]struct__reent, [*c]u8, [*c]usize, [*c]const u8, __gnuc_va_list) [*c]u8;
pub extern fn _vasprintf_r([*c]struct__reent, [*c][*c]u8, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vdiprintf_r([*c]struct__reent, c_int, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vdprintf_r([*c]struct__reent, c_int, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vfiprintf_r([*c]struct__reent, [*c]FILE, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vfiscanf_r([*c]struct__reent, [*c]FILE, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vfprintf_r([*c]struct__reent, noalias [*c]FILE, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vfscanf_r([*c]struct__reent, noalias [*c]FILE, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _viprintf_r([*c]struct__reent, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _viscanf_r([*c]struct__reent, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vprintf_r([*c]struct__reent, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vscanf_r([*c]struct__reent, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vsiprintf_r([*c]struct__reent, [*c]u8, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vsiscanf_r([*c]struct__reent, [*c]const u8, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vsniprintf_r([*c]struct__reent, [*c]u8, usize, [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vsnprintf_r([*c]struct__reent, noalias [*c]u8, usize, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vsprintf_r([*c]struct__reent, noalias [*c]u8, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn _vsscanf_r([*c]struct__reent, noalias [*c]const u8, noalias [*c]const u8, __gnuc_va_list) c_int;
pub extern fn fpurge([*c]FILE) c_int;
pub extern fn __getdelim([*c][*c]u8, [*c]usize, c_int, [*c]FILE) isize;
pub extern fn __getline([*c][*c]u8, [*c]usize, [*c]FILE) isize;
pub extern fn clearerr_unlocked([*c]FILE) void;
pub extern fn feof_unlocked([*c]FILE) c_int;
pub extern fn ferror_unlocked([*c]FILE) c_int;
pub extern fn fileno_unlocked([*c]FILE) c_int;
pub extern fn fflush_unlocked([*c]FILE) c_int;
pub extern fn fgetc_unlocked([*c]FILE) c_int;
pub extern fn fputc_unlocked(c_int, [*c]FILE) c_int;
pub extern fn fread_unlocked(noalias ?*c_void, _size: usize, _n: usize, noalias [*c]FILE) usize;
pub extern fn fwrite_unlocked(noalias ?*const c_void, _size: usize, _n: usize, [*c]FILE) usize;
pub extern fn __srget_r([*c]struct__reent, [*c]FILE) c_int;
pub extern fn __swbuf_r([*c]struct__reent, c_int, [*c]FILE) c_int;
pub extern fn funopen(__cookie: ?*const c_void, __readfn: ?fn (?*c_void, [*c]u8, c_int) callconv(.C) c_int, __writefn: ?fn (?*c_void, [*c]const u8, c_int) callconv(.C) c_int, __seekfn: ?fn (?*c_void, fpos_t, c_int) callconv(.C) fpos_t, __closefn: ?fn (?*c_void) callconv(.C) c_int) [*c]FILE;
pub extern fn _funopen_r([*c]struct__reent, __cookie: ?*const c_void, __readfn: ?fn (?*c_void, [*c]u8, c_int) callconv(.C) c_int, __writefn: ?fn (?*c_void, [*c]const u8, c_int) callconv(.C) c_int, __seekfn: ?fn (?*c_void, fpos_t, c_int) callconv(.C) fpos_t, __closefn: ?fn (?*c_void) callconv(.C) c_int) [*c]FILE;
pub fn __sputc_r(arg__ptr: [*c]struct__reent, arg__c: c_int, arg__p: [*c]FILE) callconv(.C) c_int {
    var _ptr = arg__ptr;
    var _c = arg__c;
    var _p = arg__p;
    if (((blk: {
        const ref = &_p.*._w;
        ref.* -= 1;
        break :blk ref.*;
    }) >= @as(c_int, 0)) or ((_p.*._w >= _p.*._lbfsize) and (@bitCast(c_int, @as(c_uint, @bitCast(u8, @truncate(i8, _c)))) != @as(c_int, '\n')))) return @bitCast(c_int, @as(c_uint, (blk: {
        const tmp = @bitCast(u8, @truncate(i8, _c));
        (blk_1: {
            const ref = &_p.*._p;
            const tmp_2 = ref.*;
            ref.* += 1;
            break :blk_1 tmp_2;
        }).?.* = tmp;
        break :blk tmp;
    }))) else return (__swbuf_r(_ptr, _c, _p));
    return 0;
}
pub fn _getchar_unlocked() callconv(.C) c_int {
    var _ptr: [*c]struct__reent = undefined;
    _ptr = _impure_ptr;
    return (if ((blk: {
        const ref = &((_ptr).*._stdin).*._r;
        ref.* -= 1;
        break :blk ref.*;
    }) < @as(c_int, 0)) __srget_r(_ptr, ((_ptr).*._stdin)) else @bitCast(c_int, @as(c_uint, ((blk: {
        const ref = &((_ptr).*._stdin).*._p;
        const tmp = ref.*;
        ref.* += 1;
        break :blk tmp;
    }).?.*))));
}
pub fn _putchar_unlocked(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    var _ptr: [*c]struct__reent = undefined;
    _ptr = _impure_ptr;
    return (__sputc_r(_ptr, _c, ((_ptr).*._stdout)));
}
pub const ret_code_t = u32;
pub extern fn app_error_fault_handler(id: u32, pc: u32, info: u32) void;
const struct_unnamed_137 = extern struct {
    line_num: u32,
    p_file_name: [*c]const u8,
    err_code: u32,
};
pub const error_info_t = struct_unnamed_137;
const struct_unnamed_138 = extern struct {
    line_num: u32,
    p_file_name: [*c]const u8,
};
pub const assert_info_t = struct_unnamed_138;
pub extern fn app_error_handler(error_code: u32, line_num: u32, p_file_name: [*c]const u8) void;
pub extern fn app_error_handler_bare(error_code: ret_code_t) void;
pub extern fn app_error_save_and_stop(id: u32, pc: u32, info: u32) void;
pub extern fn app_error_log_handle(id: u32, pc: u32, info: u32) void;
pub const APP_IRQ_PRIORITY_HIGHEST = @enumToInt(enum_unnamed_139.APP_IRQ_PRIORITY_HIGHEST);
pub const APP_IRQ_PRIORITY_HIGH = @enumToInt(enum_unnamed_139.APP_IRQ_PRIORITY_HIGH);
pub const APP_IRQ_PRIORITY_MID = @enumToInt(enum_unnamed_139.APP_IRQ_PRIORITY_MID);
pub const APP_IRQ_PRIORITY_LOW_MID = @enumToInt(enum_unnamed_139.APP_IRQ_PRIORITY_LOW_MID);
pub const APP_IRQ_PRIORITY_LOW = @enumToInt(enum_unnamed_139.APP_IRQ_PRIORITY_LOW);
pub const APP_IRQ_PRIORITY_LOWEST = @enumToInt(enum_unnamed_139.APP_IRQ_PRIORITY_LOWEST);
pub const APP_IRQ_PRIORITY_THREAD = @enumToInt(enum_unnamed_139.APP_IRQ_PRIORITY_THREAD);
const enum_unnamed_139 = extern enum(c_int) {
    APP_IRQ_PRIORITY_HIGHEST = 0,
    APP_IRQ_PRIORITY_HIGH = 2,
    APP_IRQ_PRIORITY_MID = 4,
    APP_IRQ_PRIORITY_LOW_MID = 5,
    APP_IRQ_PRIORITY_LOW = 6,
    APP_IRQ_PRIORITY_LOWEST = 7,
    APP_IRQ_PRIORITY_THREAD = 15,
    _,
};
pub const app_irq_priority_t = enum_unnamed_139;
pub const APP_LEVEL_UNPRIVILEGED = @enumToInt(enum_unnamed_140.APP_LEVEL_UNPRIVILEGED);
pub const APP_LEVEL_PRIVILEGED = @enumToInt(enum_unnamed_140.APP_LEVEL_PRIVILEGED);
const enum_unnamed_140 = extern enum(c_int) {
    APP_LEVEL_UNPRIVILEGED,
    APP_LEVEL_PRIVILEGED,
    _,
};
pub const app_level_t = enum_unnamed_140;
pub extern fn app_util_critical_region_enter(p_nested: [*c]u8) void;
pub extern fn app_util_critical_region_exit(nested: u8) void;
pub extern fn current_int_priority_get() u8;
pub extern fn privilege_level_get() u8;
const delay_machine_code: [*c]const u16 align(16) = [3]u16{
    @bitCast(u16, @truncate(c_short, (@as(c_int, 14336) + @as(c_int, 3)))),
    @bitCast(u16, @truncate(c_short, @as(c_int, 55549))),
    @bitCast(u16, @truncate(c_short, @as(c_int, 18288))),
};
pub fn nrfx_coredep_delay_us(arg_time_us: u32) callconv(.C) void {
    var time_us = arg_time_us;
    if (time_us == @bitCast(c_uint, @as(c_int, 0))) {
        return;
    }
    _ = delay_machine_code;
    const delay_func_t = ?fn (u32) callconv(.C) void;
    const delay_cycles: delay_func_t = @intToPtr(delay_func_t, ((@intCast(u32, @ptrToInt(&delay_machine_code))) | @bitCast(c_uint, @as(c_int, 1))));
    var cycles: u32 = (time_us *% @bitCast(c_uint, @as(c_int, 64)));
    delay_cycles.?(cycles);
}
pub const nrfx_atomic_u32_t = u32;
pub const nrfx_atomic_flag_t = u32;
pub extern fn nrfx_atomic_u32_fetch_store(p_data: [*c]volatile nrfx_atomic_u32_t, value: u32) u32;
pub extern fn nrfx_atomic_u32_store(p_data: [*c]volatile nrfx_atomic_u32_t, value: u32) u32;
pub extern fn nrfx_atomic_u32_fetch_or(p_data: [*c]volatile nrfx_atomic_u32_t, value: u32) u32;
pub extern fn nrfx_atomic_u32_or(p_data: [*c]volatile nrfx_atomic_u32_t, value: u32) u32;
pub extern fn nrfx_atomic_u32_fetch_and(p_data: [*c]volatile nrfx_atomic_u32_t, value: u32) u32;
pub extern fn nrfx_atomic_u32_and(p_data: [*c]volatile nrfx_atomic_u32_t, value: u32) u32;
pub extern fn nrfx_atomic_u32_fetch_xor(p_data: [*c]volatile nrfx_atomic_u32_t, value: u32) u32;
pub extern fn nrfx_atomic_u32_xor(p_data: [*c]volatile nrfx_atomic_u32_t, value: u32) u32;
pub extern fn nrfx_atomic_u32_fetch_add(p_data: [*c]volatile nrfx_atomic_u32_t, value: u32) u32;
pub extern fn nrfx_atomic_u32_add(p_data: [*c]volatile nrfx_atomic_u32_t, value: u32) u32;
pub extern fn nrfx_atomic_u32_fetch_sub(p_data: [*c]volatile nrfx_atomic_u32_t, value: u32) u32;
pub extern fn nrfx_atomic_u32_sub(p_data: [*c]volatile nrfx_atomic_u32_t, value: u32) u32;
pub extern fn nrfx_atomic_u32_cmp_exch(p_data: [*c]volatile nrfx_atomic_u32_t, p_expected: [*c]u32, desired: u32) bool;
pub extern fn nrfx_atomic_u32_fetch_sub_hs(p_data: [*c]volatile nrfx_atomic_u32_t, value: u32) u32;
pub extern fn nrfx_atomic_u32_sub_hs(p_data: [*c]volatile nrfx_atomic_u32_t, value: u32) u32;
pub extern fn nrfx_atomic_flag_set_fetch(p_data: [*c]volatile nrfx_atomic_flag_t) u32;
pub extern fn nrfx_atomic_flag_set(p_data: [*c]volatile nrfx_atomic_flag_t) u32;
pub extern fn nrfx_atomic_flag_clear_fetch(p_data: [*c]volatile nrfx_atomic_flag_t) u32;
pub extern fn nrfx_atomic_flag_clear(p_data: [*c]volatile nrfx_atomic_flag_t) u32;
pub const nrfx_err_t = ret_code_t;
pub const NRF_UART_TASK_STARTRX = @enumToInt(enum_unnamed_141.NRF_UART_TASK_STARTRX);
pub const NRF_UART_TASK_STOPRX = @enumToInt(enum_unnamed_141.NRF_UART_TASK_STOPRX);
pub const NRF_UART_TASK_STARTTX = @enumToInt(enum_unnamed_141.NRF_UART_TASK_STARTTX);
pub const NRF_UART_TASK_STOPTX = @enumToInt(enum_unnamed_141.NRF_UART_TASK_STOPTX);
pub const NRF_UART_TASK_SUSPEND = @enumToInt(enum_unnamed_141.NRF_UART_TASK_SUSPEND);
const enum_unnamed_141 = extern enum(c_int) {
    NRF_UART_TASK_STARTRX = 0,
    NRF_UART_TASK_STOPRX = 4,
    NRF_UART_TASK_STARTTX = 8,
    NRF_UART_TASK_STOPTX = 12,
    NRF_UART_TASK_SUSPEND = 28,
    _,
};
pub const nrf_uart_task_t = enum_unnamed_141;
pub const NRF_UART_EVENT_CTS = @enumToInt(enum_unnamed_142.NRF_UART_EVENT_CTS);
pub const NRF_UART_EVENT_NCTS = @enumToInt(enum_unnamed_142.NRF_UART_EVENT_NCTS);
pub const NRF_UART_EVENT_RXDRDY = @enumToInt(enum_unnamed_142.NRF_UART_EVENT_RXDRDY);
pub const NRF_UART_EVENT_TXDRDY = @enumToInt(enum_unnamed_142.NRF_UART_EVENT_TXDRDY);
pub const NRF_UART_EVENT_ERROR = @enumToInt(enum_unnamed_142.NRF_UART_EVENT_ERROR);
pub const NRF_UART_EVENT_RXTO = @enumToInt(enum_unnamed_142.NRF_UART_EVENT_RXTO);
const enum_unnamed_142 = extern enum(c_int) {
    NRF_UART_EVENT_CTS = 256,
    NRF_UART_EVENT_NCTS = 260,
    NRF_UART_EVENT_RXDRDY = 264,
    NRF_UART_EVENT_TXDRDY = 284,
    NRF_UART_EVENT_ERROR = 292,
    NRF_UART_EVENT_RXTO = 324,
    _,
};
pub const nrf_uart_event_t = enum_unnamed_142;
pub const NRF_UART_INT_MASK_CTS = @enumToInt(enum_unnamed_143.NRF_UART_INT_MASK_CTS);
pub const NRF_UART_INT_MASK_NCTS = @enumToInt(enum_unnamed_143.NRF_UART_INT_MASK_NCTS);
pub const NRF_UART_INT_MASK_RXDRDY = @enumToInt(enum_unnamed_143.NRF_UART_INT_MASK_RXDRDY);
pub const NRF_UART_INT_MASK_TXDRDY = @enumToInt(enum_unnamed_143.NRF_UART_INT_MASK_TXDRDY);
pub const NRF_UART_INT_MASK_ERROR = @enumToInt(enum_unnamed_143.NRF_UART_INT_MASK_ERROR);
pub const NRF_UART_INT_MASK_RXTO = @enumToInt(enum_unnamed_143.NRF_UART_INT_MASK_RXTO);
const enum_unnamed_143 = extern enum(c_int) {
    NRF_UART_INT_MASK_CTS = 1,
    NRF_UART_INT_MASK_NCTS = 2,
    NRF_UART_INT_MASK_RXDRDY = 4,
    NRF_UART_INT_MASK_TXDRDY = 128,
    NRF_UART_INT_MASK_ERROR = 512,
    NRF_UART_INT_MASK_RXTO = 131072,
    _,
};
pub const nrf_uart_int_mask_t = enum_unnamed_143;
pub const NRF_UART_BAUDRATE_1200 = @enumToInt(enum_unnamed_144.NRF_UART_BAUDRATE_1200);
pub const NRF_UART_BAUDRATE_2400 = @enumToInt(enum_unnamed_144.NRF_UART_BAUDRATE_2400);
pub const NRF_UART_BAUDRATE_4800 = @enumToInt(enum_unnamed_144.NRF_UART_BAUDRATE_4800);
pub const NRF_UART_BAUDRATE_9600 = @enumToInt(enum_unnamed_144.NRF_UART_BAUDRATE_9600);
pub const NRF_UART_BAUDRATE_14400 = @enumToInt(enum_unnamed_144.NRF_UART_BAUDRATE_14400);
pub const NRF_UART_BAUDRATE_19200 = @enumToInt(enum_unnamed_144.NRF_UART_BAUDRATE_19200);
pub const NRF_UART_BAUDRATE_28800 = @enumToInt(enum_unnamed_144.NRF_UART_BAUDRATE_28800);
pub const NRF_UART_BAUDRATE_31250 = @enumToInt(enum_unnamed_144.NRF_UART_BAUDRATE_31250);
pub const NRF_UART_BAUDRATE_38400 = @enumToInt(enum_unnamed_144.NRF_UART_BAUDRATE_38400);
pub const NRF_UART_BAUDRATE_56000 = @enumToInt(enum_unnamed_144.NRF_UART_BAUDRATE_56000);
pub const NRF_UART_BAUDRATE_57600 = @enumToInt(enum_unnamed_144.NRF_UART_BAUDRATE_57600);
pub const NRF_UART_BAUDRATE_76800 = @enumToInt(enum_unnamed_144.NRF_UART_BAUDRATE_76800);
pub const NRF_UART_BAUDRATE_115200 = @enumToInt(enum_unnamed_144.NRF_UART_BAUDRATE_115200);
pub const NRF_UART_BAUDRATE_230400 = @enumToInt(enum_unnamed_144.NRF_UART_BAUDRATE_230400);
pub const NRF_UART_BAUDRATE_250000 = @enumToInt(enum_unnamed_144.NRF_UART_BAUDRATE_250000);
pub const NRF_UART_BAUDRATE_460800 = @enumToInt(enum_unnamed_144.NRF_UART_BAUDRATE_460800);
pub const NRF_UART_BAUDRATE_921600 = @enumToInt(enum_unnamed_144.NRF_UART_BAUDRATE_921600);
pub const NRF_UART_BAUDRATE_1000000 = @enumToInt(enum_unnamed_144.NRF_UART_BAUDRATE_1000000);
const enum_unnamed_144 = extern enum(c_int) {
    NRF_UART_BAUDRATE_1200 = 323584,
    NRF_UART_BAUDRATE_2400 = 643072,
    NRF_UART_BAUDRATE_4800 = 1290240,
    NRF_UART_BAUDRATE_9600 = 2576384,
    NRF_UART_BAUDRATE_14400 = 3866624,
    NRF_UART_BAUDRATE_19200 = 5152768,
    NRF_UART_BAUDRATE_28800 = 7729152,
    NRF_UART_BAUDRATE_31250 = 8388608,
    NRF_UART_BAUDRATE_38400 = 10309632,
    NRF_UART_BAUDRATE_56000 = 15007744,
    NRF_UART_BAUDRATE_57600 = 15462400,
    NRF_UART_BAUDRATE_76800 = 20615168,
    NRF_UART_BAUDRATE_115200 = 30924800,
    NRF_UART_BAUDRATE_230400 = 61845504,
    NRF_UART_BAUDRATE_250000 = 67108864,
    NRF_UART_BAUDRATE_460800 = 123695104,
    NRF_UART_BAUDRATE_921600 = 247386112,
    NRF_UART_BAUDRATE_1000000 = 268435456,
    _,
};
pub const nrf_uart_baudrate_t = enum_unnamed_144;
pub const NRF_UART_ERROR_OVERRUN_MASK = @enumToInt(enum_unnamed_145.NRF_UART_ERROR_OVERRUN_MASK);
pub const NRF_UART_ERROR_PARITY_MASK = @enumToInt(enum_unnamed_145.NRF_UART_ERROR_PARITY_MASK);
pub const NRF_UART_ERROR_FRAMING_MASK = @enumToInt(enum_unnamed_145.NRF_UART_ERROR_FRAMING_MASK);
pub const NRF_UART_ERROR_BREAK_MASK = @enumToInt(enum_unnamed_145.NRF_UART_ERROR_BREAK_MASK);
const enum_unnamed_145 = extern enum(c_int) {
    NRF_UART_ERROR_OVERRUN_MASK = 1,
    NRF_UART_ERROR_PARITY_MASK = 2,
    NRF_UART_ERROR_FRAMING_MASK = 4,
    NRF_UART_ERROR_BREAK_MASK = 8,
    _,
};
pub const nrf_uart_error_mask_t = enum_unnamed_145;
pub const NRF_UART_PARITY_EXCLUDED = @enumToInt(enum_unnamed_146.NRF_UART_PARITY_EXCLUDED);
pub const NRF_UART_PARITY_INCLUDED = @enumToInt(enum_unnamed_146.NRF_UART_PARITY_INCLUDED);
const enum_unnamed_146 = extern enum(c_int) {
    NRF_UART_PARITY_EXCLUDED = 0,
    NRF_UART_PARITY_INCLUDED = 14,
    _,
};
pub const nrf_uart_parity_t = enum_unnamed_146;
pub const NRF_UART_HWFC_DISABLED = @enumToInt(enum_unnamed_147.NRF_UART_HWFC_DISABLED);
pub const NRF_UART_HWFC_ENABLED = @enumToInt(enum_unnamed_147.NRF_UART_HWFC_ENABLED);
const enum_unnamed_147 = extern enum(c_int) {
    NRF_UART_HWFC_DISABLED = 0,
    NRF_UART_HWFC_ENABLED = 1,
    _,
};
pub const nrf_uart_hwfc_t = enum_unnamed_147;
pub fn nrf_uart_event_clear(arg_p_reg: [*c]NRF_UART_Type, arg_event: nrf_uart_event_t) callconv(.C) void {
    var p_reg = arg_p_reg;
    var event = arg_event;
    (@ptrCast([*c]volatile u32, @alignCast(@alignOf(u32), (@ptrCast([*c]u8, @alignCast(@alignOf(u8), p_reg)) + @enumToInt(event))))).?.* = @bitCast(u32, @truncate(c_uint, @as(c_ulong, 0)));
    var dummy: u32 = (@ptrCast([*c]volatile u32, @alignCast(@alignOf(u32), (@ptrCast([*c]u8, @alignCast(@alignOf(u8), p_reg)) + @enumToInt(event))))).?.*;
    _ = dummy;
}
pub fn nrf_uart_event_check(arg_p_reg: [*c]NRF_UART_Type, arg_event: nrf_uart_event_t) callconv(.C) bool {
    var p_reg = arg_p_reg;
    var event = arg_event;
    return @as(bool, @ptrCast([*c]volatile u32, @alignCast(@alignOf(u32), (@ptrCast([*c]u8, @alignCast(@alignOf(u8), p_reg)) + @enumToInt(event)))).?.*);
}
pub fn nrf_uart_event_address_get(arg_p_reg: [*c]NRF_UART_Type, arg_event: nrf_uart_event_t) callconv(.C) u32 {
    var p_reg = arg_p_reg;
    var event = arg_event;
    return @intCast(u32, @ptrToInt((@ptrCast([*c]u8, @alignCast(@alignOf(u8), p_reg)) + @enumToInt(event))));
}
pub fn nrf_uart_int_enable(arg_p_reg: [*c]NRF_UART_Type, arg_mask: u32) callconv(.C) void {
    var p_reg = arg_p_reg;
    var mask = arg_mask;
    p_reg.*.INTENSET = mask;
}
pub fn nrf_uart_int_enable_check(arg_p_reg: [*c]NRF_UART_Type, arg_mask: u32) callconv(.C) bool {
    var p_reg = arg_p_reg;
    var mask = arg_mask;
    return @as(bool, (p_reg.*.INTENSET & mask));
}
pub fn nrf_uart_int_disable(arg_p_reg: [*c]NRF_UART_Type, arg_mask: u32) callconv(.C) void {
    var p_reg = arg_p_reg;
    var mask = arg_mask;
    p_reg.*.INTENCLR = mask;
}
pub fn nrf_uart_errorsrc_get_and_clear(arg_p_reg: [*c]NRF_UART_Type) callconv(.C) u32 {
    var p_reg = arg_p_reg;
    var errsrc_mask: u32 = p_reg.*.ERRORSRC;
    p_reg.*.ERRORSRC = errsrc_mask;
    return errsrc_mask;
}
pub fn nrf_uart_enable(arg_p_reg: [*c]NRF_UART_Type) callconv(.C) void {
    var p_reg = arg_p_reg;
    p_reg.*.ENABLE = @bitCast(u32, @truncate(c_uint, (@as(c_ulong, 4))));
}
pub fn nrf_uart_disable(arg_p_reg: [*c]NRF_UART_Type) callconv(.C) void {
    var p_reg = arg_p_reg;
    p_reg.*.ENABLE = @bitCast(u32, @truncate(c_uint, (@as(c_ulong, 0))));
}
pub fn nrf_uart_txrx_pins_set(arg_p_reg: [*c]NRF_UART_Type, arg_pseltxd: u32, arg_pselrxd: u32) callconv(.C) void {
    var p_reg = arg_p_reg;
    var pseltxd = arg_pseltxd;
    var pselrxd = arg_pselrxd;
    p_reg.*.PSEL.RXD = pselrxd;
    p_reg.*.PSEL.TXD = pseltxd;
}
pub fn nrf_uart_txrx_pins_disconnect(arg_p_reg: [*c]NRF_UART_Type) callconv(.C) void {
    var p_reg = arg_p_reg;
    nrf_uart_txrx_pins_set(p_reg, @as(c_uint, 4294967295), @as(c_uint, 4294967295));
}
pub fn nrf_uart_tx_pin_get(arg_p_reg: [*c]NRF_UART_Type) callconv(.C) u32 {
    var p_reg = arg_p_reg;
    return p_reg.*.PSEL.TXD;
}
pub fn nrf_uart_rx_pin_get(arg_p_reg: [*c]NRF_UART_Type) callconv(.C) u32 {
    var p_reg = arg_p_reg;
    return p_reg.*.PSEL.RXD;
}
pub fn nrf_uart_rts_pin_get(arg_p_reg: [*c]NRF_UART_Type) callconv(.C) u32 {
    var p_reg = arg_p_reg;
    return p_reg.*.PSEL.RTS;
}
pub fn nrf_uart_cts_pin_get(arg_p_reg: [*c]NRF_UART_Type) callconv(.C) u32 {
    var p_reg = arg_p_reg;
    return p_reg.*.PSEL.CTS;
}
pub fn nrf_uart_hwfc_pins_set(arg_p_reg: [*c]NRF_UART_Type, arg_pselrts: u32, arg_pselcts: u32) callconv(.C) void {
    var p_reg = arg_p_reg;
    var pselrts = arg_pselrts;
    var pselcts = arg_pselcts;
    p_reg.*.PSEL.RTS = pselrts;
    p_reg.*.PSEL.CTS = pselcts;
}
pub fn nrf_uart_hwfc_pins_disconnect(arg_p_reg: [*c]NRF_UART_Type) callconv(.C) void {
    var p_reg = arg_p_reg;
    nrf_uart_hwfc_pins_set(p_reg, @as(c_uint, 4294967295), @as(c_uint, 4294967295));
}
pub fn nrf_uart_rxd_get(arg_p_reg: [*c]NRF_UART_Type) callconv(.C) u8 {
    var p_reg = arg_p_reg;
    return @bitCast(u8, @truncate(u8, p_reg.*.RXD));
}
pub fn nrf_uart_txd_set(arg_p_reg: [*c]NRF_UART_Type, arg_txd: u8) callconv(.C) void {
    var p_reg = arg_p_reg;
    var txd = arg_txd;
    p_reg.*.TXD = @bitCast(u32, @as(c_uint, txd));
}
pub fn nrf_uart_task_trigger(arg_p_reg: [*c]NRF_UART_Type, arg_task: nrf_uart_task_t) callconv(.C) void {
    var p_reg = arg_p_reg;
    var task = arg_task;
    (@ptrCast([*c]volatile u32, @alignCast(@alignOf(u32), (@ptrCast([*c]u8, @alignCast(@alignOf(u8), p_reg)) + @enumToInt(task))))).?.* = @bitCast(u32, @truncate(c_uint, @as(c_ulong, 1)));
}
pub fn nrf_uart_task_address_get(arg_p_reg: [*c]NRF_UART_Type, arg_task: nrf_uart_task_t) callconv(.C) u32 {
    var p_reg = arg_p_reg;
    var task = arg_task;
    return (@intCast(u32, @ptrToInt(p_reg)) +% @enumToInt(task));
}
pub fn nrf_uart_configure(arg_p_reg: [*c]NRF_UART_Type, arg_parity: nrf_uart_parity_t, arg_hwfc: nrf_uart_hwfc_t) callconv(.C) void {
    var p_reg = arg_p_reg;
    var parity = arg_parity;
    var hwfc = arg_hwfc;
    p_reg.*.CONFIG = (@enumToInt(parity) | @enumToInt(hwfc));
}
pub fn nrf_uart_baudrate_set(arg_p_reg: [*c]NRF_UART_Type, arg_baudrate: nrf_uart_baudrate_t) callconv(.C) void {
    var p_reg = arg_p_reg;
    var baudrate = arg_baudrate;
    p_reg.*.BAUDRATE = @enumToInt(baudrate);
}
const struct_unnamed_148 = extern struct {
    p_reg: [*c]NRF_UART_Type,
    drv_inst_idx: u8,
};
pub const nrfx_uart_t = struct_unnamed_148;
pub const NRFX_UART0_INST_IDX = @enumToInt(enum_unnamed_149.NRFX_UART0_INST_IDX);
pub const NRFX_UART_ENABLED_COUNT = @enumToInt(enum_unnamed_149.NRFX_UART_ENABLED_COUNT);
const enum_unnamed_149 = extern enum(c_int) {
    NRFX_UART0_INST_IDX,
    NRFX_UART_ENABLED_COUNT,
    _,
};
pub const NRFX_UART_EVT_TX_DONE = @enumToInt(enum_unnamed_150.NRFX_UART_EVT_TX_DONE);
pub const NRFX_UART_EVT_RX_DONE = @enumToInt(enum_unnamed_150.NRFX_UART_EVT_RX_DONE);
pub const NRFX_UART_EVT_ERROR = @enumToInt(enum_unnamed_150.NRFX_UART_EVT_ERROR);
const enum_unnamed_150 = extern enum(c_int) {
    NRFX_UART_EVT_TX_DONE,
    NRFX_UART_EVT_RX_DONE,
    NRFX_UART_EVT_ERROR,
    _,
};
pub const nrfx_uart_evt_type_t = enum_unnamed_150;
const struct_unnamed_151 = extern struct {
    pseltxd: u32,
    pselrxd: u32,
    pselcts: u32,
    pselrts: u32,
    p_context: ?*c_void,
    hwfc: nrf_uart_hwfc_t,
    parity: nrf_uart_parity_t,
    baudrate: nrf_uart_baudrate_t,
    interrupt_priority: u8,
};
pub const nrfx_uart_config_t = struct_unnamed_151;
const struct_unnamed_152 = extern struct {
    p_data: [*c]u8,
    bytes: u32,
};
pub const nrfx_uart_xfer_evt_t = struct_unnamed_152;
const struct_unnamed_153 = extern struct {
    rxtx: nrfx_uart_xfer_evt_t,
    error_mask: u32,
};
pub const nrfx_uart_error_evt_t = struct_unnamed_153;
const union_unnamed_155 = extern union {
    rxtx: nrfx_uart_xfer_evt_t,
    @"error": nrfx_uart_error_evt_t,
};
const struct_unnamed_154 = extern struct {
    type: nrfx_uart_evt_type_t,
    data: union_unnamed_155,
};
pub const nrfx_uart_event_t = struct_unnamed_154;
pub const nrfx_uart_event_handler_t = ?fn ([*c]const nrfx_uart_event_t, ?*c_void) callconv(.C) void;
pub extern fn nrfx_uart_init(p_instance: [*c]const nrfx_uart_t, p_config: [*c]const nrfx_uart_config_t, event_handler: nrfx_uart_event_handler_t) nrfx_err_t;
pub extern fn nrfx_uart_uninit(p_instance: [*c]const nrfx_uart_t) void;
pub fn nrfx_uart_task_address_get(arg_p_instance: [*c]const nrfx_uart_t, arg_task: nrf_uart_task_t) callconv(.C) u32 {
    var p_instance = arg_p_instance;
    var task = arg_task;
    return nrf_uart_task_address_get(p_instance.*.p_reg, task);
}
pub fn nrfx_uart_event_address_get(arg_p_instance: [*c]const nrfx_uart_t, arg_event: nrf_uart_event_t) callconv(.C) u32 {
    var p_instance = arg_p_instance;
    var event = arg_event;
    return nrf_uart_event_address_get(p_instance.*.p_reg, event);
}
pub extern fn nrfx_uart_tx(p_instance: [*c]const nrfx_uart_t, p_data: [*c]const u8, length: usize) nrfx_err_t;
pub extern fn nrfx_uart_tx_in_progress(p_instance: [*c]const nrfx_uart_t) bool;
pub extern fn nrfx_uart_tx_abort(p_instance: [*c]const nrfx_uart_t) void;
pub extern fn nrfx_uart_rx(p_instance: [*c]const nrfx_uart_t, p_data: [*c]u8, length: usize) nrfx_err_t;
pub extern fn nrfx_uart_rx_ready(p_instance: [*c]const nrfx_uart_t) bool;
pub extern fn nrfx_uart_rx_enable(p_instance: [*c]const nrfx_uart_t) void;
pub extern fn nrfx_uart_rx_disable(p_instance: [*c]const nrfx_uart_t) void;
pub extern fn nrfx_uart_rx_abort(p_instance: [*c]const nrfx_uart_t) void;
pub extern fn nrfx_uart_errorsrc_get(p_instance: [*c]const nrfx_uart_t) u32;
pub extern fn UARTE0_UART0_IRQHandler() void;
pub const locale_t = ?*struct___locale_t;
pub extern fn bcmp(?*const c_void, ?*const c_void, usize) c_int;
pub extern fn bcopy(?*const c_void, ?*c_void, usize) void;
pub extern fn bzero(?*c_void, usize) void;
pub extern fn explicit_bzero(?*c_void, usize) void;
pub extern fn ffs(c_int) c_int;
pub extern fn ffsl(c_long) c_int;
pub extern fn ffsll(c_longlong) c_int;
pub extern fn fls(c_int) c_int;
pub extern fn flsl(c_long) c_int;
pub extern fn flsll(c_longlong) c_int;
pub extern fn index([*c]const u8, c_int) [*c]u8;
pub extern fn rindex([*c]const u8, c_int) [*c]u8;
pub extern fn strcasecmp([*c]const u8, [*c]const u8) c_int;
pub extern fn strncasecmp([*c]const u8, [*c]const u8, usize) c_int;
pub extern fn strcasecmp_l([*c]const u8, [*c]const u8, locale_t) c_int;
pub extern fn strncasecmp_l([*c]const u8, [*c]const u8, usize, locale_t) c_int;
pub extern fn memchr(?*const c_void, c_int, usize) ?*c_void;
pub extern fn memcmp(?*const c_void, ?*const c_void, usize) c_int;
pub extern fn memcpy(noalias ?*c_void, noalias ?*const c_void, usize) ?*c_void;
pub extern fn memmove(?*c_void, ?*const c_void, usize) ?*c_void;
pub extern fn memset(?*c_void, c_int, usize) ?*c_void;
pub extern fn strcat(noalias [*c]u8, noalias [*c]const u8) [*c]u8;
pub extern fn strchr([*c]const u8, c_int) [*c]u8;
pub extern fn strcmp([*c]const u8, [*c]const u8) c_int;
pub extern fn strcoll([*c]const u8, [*c]const u8) c_int;
pub extern fn strcpy(noalias [*c]u8, noalias [*c]const u8) [*c]u8;
pub extern fn strcspn([*c]const u8, [*c]const u8) usize;
pub extern fn strerror(c_int) [*c]u8;
pub extern fn strlen([*c]const u8) usize;
pub extern fn strncat(noalias [*c]u8, noalias [*c]const u8, usize) [*c]u8;
pub extern fn strncmp([*c]const u8, [*c]const u8, usize) c_int;
pub extern fn strncpy(noalias [*c]u8, noalias [*c]const u8, usize) [*c]u8;
pub extern fn strpbrk([*c]const u8, [*c]const u8) [*c]u8;
pub extern fn strrchr([*c]const u8, c_int) [*c]u8;
pub extern fn strspn([*c]const u8, [*c]const u8) usize;
pub extern fn strstr([*c]const u8, [*c]const u8) [*c]u8;
pub extern fn strtok(noalias [*c]u8, noalias [*c]const u8) [*c]u8;
pub extern fn strxfrm(noalias [*c]u8, noalias [*c]const u8, usize) usize;
pub extern fn strcoll_l([*c]const u8, [*c]const u8, locale_t) c_int;
pub extern fn strerror_l(c_int, locale_t) [*c]u8;
pub extern fn strxfrm_l(noalias [*c]u8, noalias [*c]const u8, usize, locale_t) usize;
pub extern fn strtok_r(noalias [*c]u8, noalias [*c]const u8, noalias [*c][*c]u8) [*c]u8;
pub extern fn timingsafe_bcmp(?*const c_void, ?*const c_void, usize) c_int;
pub extern fn timingsafe_memcmp(?*const c_void, ?*const c_void, usize) c_int;
pub extern fn memccpy(noalias ?*c_void, noalias ?*const c_void, c_int, usize) ?*c_void;
pub extern fn stpcpy(noalias [*c]u8, noalias [*c]const u8) [*c]u8;
pub extern fn stpncpy(noalias [*c]u8, noalias [*c]const u8, usize) [*c]u8;
pub extern fn strdup([*c]const u8) [*c]u8;
pub extern fn _strdup_r([*c]struct__reent, [*c]const u8) [*c]u8;
pub extern fn strndup([*c]const u8, usize) [*c]u8;
pub extern fn _strndup_r([*c]struct__reent, [*c]const u8, usize) [*c]u8;
pub extern fn strerror_r(c_int, [*c]u8, usize) c_int;
pub extern fn _strerror_r([*c]struct__reent, c_int, c_int, [*c]c_int) [*c]u8;
pub extern fn strlcat([*c]u8, [*c]const u8, usize) usize;
pub extern fn strlcpy([*c]u8, [*c]const u8, usize) usize;
pub extern fn strnlen([*c]const u8, usize) usize;
pub extern fn strsep([*c][*c]u8, [*c]const u8) [*c]u8;
pub extern fn strnstr([*c]const u8, [*c]const u8, usize) [*c]u8;
pub extern fn strlwr([*c]u8) [*c]u8;
pub extern fn strupr([*c]u8) [*c]u8;
pub extern fn strsignal(__signo: c_int) [*c]u8;
const struct_unnamed_156 = extern struct {
    x: f32,
    y: f32,
    z: f32,
    raw_x: u16,
    raw_y: u16,
    raw_z: u16,
};
pub const MPU9250_gyro_val = struct_unnamed_156;
const struct_unnamed_157 = extern struct {
    x: f32,
    y: f32,
    z: f32,
    raw_x: u16,
    raw_y: u16,
    raw_z: u16,
};
pub const MPU9250_accel_val = struct_unnamed_157;
const struct_unnamed_158 = extern struct {
    x: f32,
    y: f32,
    z: f32,
    raw_x: u16,
    raw_y: u16,
    raw_z: u16,
};
pub const MPU9250_magnetometer_val = struct_unnamed_158;
pub const MPU9250_BIT_ACCEL_FS_SEL_2G = @enumToInt(enum_unnamed_159.MPU9250_BIT_ACCEL_FS_SEL_2G);
pub const MPU9250_BIT_ACCEL_FS_SEL_4G = @enumToInt(enum_unnamed_159.MPU9250_BIT_ACCEL_FS_SEL_4G);
pub const MPU9250_BIT_ACCEL_FS_SEL_8G = @enumToInt(enum_unnamed_159.MPU9250_BIT_ACCEL_FS_SEL_8G);
pub const MPU9250_BIT_ACCEL_FS_SEL_16G = @enumToInt(enum_unnamed_159.MPU9250_BIT_ACCEL_FS_SEL_16G);
pub const MPU9250_BIT_ACCEL_FS_SEL_MASK = @enumToInt(enum_unnamed_159.MPU9250_BIT_ACCEL_FS_SEL_MASK);
const enum_unnamed_159 = extern enum(c_int) {
    MPU9250_BIT_ACCEL_FS_SEL_2G = 0,
    MPU9250_BIT_ACCEL_FS_SEL_4G = 8,
    MPU9250_BIT_ACCEL_FS_SEL_8G = 16,
    MPU9250_BIT_ACCEL_FS_SEL_16G = 24,
    MPU9250_BIT_ACCEL_FS_SEL_MASK = 24,
    _,
};
pub const MPU9250_BIT_ACCEL_FS_SEL = enum_unnamed_159;
pub const MPU9250_BIT_GYRO_FS_SEL_250DPS = @enumToInt(enum_unnamed_160.MPU9250_BIT_GYRO_FS_SEL_250DPS);
pub const MPU9250_BIT_GYRO_FS_SEL_500DPS = @enumToInt(enum_unnamed_160.MPU9250_BIT_GYRO_FS_SEL_500DPS);
pub const MPU9250_BIT_GYRO_FS_SEL_1000DPS = @enumToInt(enum_unnamed_160.MPU9250_BIT_GYRO_FS_SEL_1000DPS);
pub const MPU9250_BIT_GYRO_FS_SEL_2000DPS = @enumToInt(enum_unnamed_160.MPU9250_BIT_GYRO_FS_SEL_2000DPS);
pub const MPU9250_BIT_GYRO_FS_SEL_MASK = @enumToInt(enum_unnamed_160.MPU9250_BIT_GYRO_FS_SEL_MASK);
const enum_unnamed_160 = extern enum(c_int) {
    MPU9250_BIT_GYRO_FS_SEL_250DPS = 0,
    MPU9250_BIT_GYRO_FS_SEL_500DPS = 8,
    MPU9250_BIT_GYRO_FS_SEL_1000DPS = 16,
    MPU9250_BIT_GYRO_FS_SEL_2000DPS = 24,
    MPU9250_BIT_GYRO_FS_SEL_MASK = 24,
    _,
};
pub const MPU9250_BIT_GYRO_FS_SEL = enum_unnamed_160;
pub const MPU9250_BIT_DLPF_CFG_250HZ = @enumToInt(enum_unnamed_161.MPU9250_BIT_DLPF_CFG_250HZ);
pub const MPU9250_BIT_DLPF_CFG_184HZ = @enumToInt(enum_unnamed_161.MPU9250_BIT_DLPF_CFG_184HZ);
pub const MPU9250_BIT_DLPF_CFG_92HZ = @enumToInt(enum_unnamed_161.MPU9250_BIT_DLPF_CFG_92HZ);
pub const MPU9250_BIT_DLPF_CFG_41HZ = @enumToInt(enum_unnamed_161.MPU9250_BIT_DLPF_CFG_41HZ);
pub const MPU9250_BIT_DLPF_CFG_20HZ = @enumToInt(enum_unnamed_161.MPU9250_BIT_DLPF_CFG_20HZ);
pub const MPU9250_BIT_DLPF_CFG_10HZ = @enumToInt(enum_unnamed_161.MPU9250_BIT_DLPF_CFG_10HZ);
pub const MPU9250_BIT_DLPF_CFG_5HZ = @enumToInt(enum_unnamed_161.MPU9250_BIT_DLPF_CFG_5HZ);
pub const MPU9250_BIT_DLPF_CFG_3600HZ = @enumToInt(enum_unnamed_161.MPU9250_BIT_DLPF_CFG_3600HZ);
pub const MPU9250_BIT_DLPF_CFG_MASK = @enumToInt(enum_unnamed_161.MPU9250_BIT_DLPF_CFG_MASK);
const enum_unnamed_161 = extern enum(c_int) {
    MPU9250_BIT_DLPF_CFG_250HZ = 0,
    MPU9250_BIT_DLPF_CFG_184HZ = 1,
    MPU9250_BIT_DLPF_CFG_92HZ = 2,
    MPU9250_BIT_DLPF_CFG_41HZ = 3,
    MPU9250_BIT_DLPF_CFG_20HZ = 4,
    MPU9250_BIT_DLPF_CFG_10HZ = 5,
    MPU9250_BIT_DLPF_CFG_5HZ = 6,
    MPU9250_BIT_DLPF_CFG_3600HZ = 7,
    MPU9250_BIT_DLPF_CFG_MASK = 7,
    _,
};
pub const MPU9250_BIT_DLPF_CFG = enum_unnamed_161;
pub const MPU9250_BIT_A_DLPFCFG_460HZ = @enumToInt(enum_unnamed_162.MPU9250_BIT_A_DLPFCFG_460HZ);
pub const MPU9250_BIT_A_DLPFCFG_184HZ = @enumToInt(enum_unnamed_162.MPU9250_BIT_A_DLPFCFG_184HZ);
pub const MPU9250_BIT_A_DLPFCFG_92HZ = @enumToInt(enum_unnamed_162.MPU9250_BIT_A_DLPFCFG_92HZ);
pub const MPU9250_BIT_A_DLPFCFG_41HZ = @enumToInt(enum_unnamed_162.MPU9250_BIT_A_DLPFCFG_41HZ);
pub const MPU9250_BIT_A_DLPFCFG_20HZ = @enumToInt(enum_unnamed_162.MPU9250_BIT_A_DLPFCFG_20HZ);
pub const MPU9250_BIT_A_DLPFCFG_10HZ = @enumToInt(enum_unnamed_162.MPU9250_BIT_A_DLPFCFG_10HZ);
pub const MPU9250_BIT_A_DLPFCFG_5HZ = @enumToInt(enum_unnamed_162.MPU9250_BIT_A_DLPFCFG_5HZ);
pub const MPU9250_BIT_A_DLPFCFG_460HZ_2 = @enumToInt(enum_unnamed_162.MPU9250_BIT_A_DLPFCFG_460HZ_2);
pub const MPU9250_BIT_A_DLPFCFG_MASK = @enumToInt(enum_unnamed_162.MPU9250_BIT_A_DLPFCFG_MASK);
const enum_unnamed_162 = extern enum(c_int) {
    MPU9250_BIT_A_DLPFCFG_460HZ = 0,
    MPU9250_BIT_A_DLPFCFG_184HZ = 1,
    MPU9250_BIT_A_DLPFCFG_92HZ = 2,
    MPU9250_BIT_A_DLPFCFG_41HZ = 3,
    MPU9250_BIT_A_DLPFCFG_20HZ = 4,
    MPU9250_BIT_A_DLPFCFG_10HZ = 5,
    MPU9250_BIT_A_DLPFCFG_5HZ = 6,
    MPU9250_BIT_A_DLPFCFG_460HZ_2 = 7,
    MPU9250_BIT_A_DLPFCFG_MASK = 7,
    _,
};
pub const MPU9250_BIT_A_DLPFCFG = enum_unnamed_162;
pub extern fn mpu9250_init() i32;
pub extern fn mpu9250_drv_write(reg_addr: u8, p_write_buf: [*c]const u8, len: usize) i32;
pub extern fn mpu9250_drv_write_blocking(reg_addr: u8, p_write_buf: [*c]const u8, len: usize) i32;
pub extern fn mpu9250_drv_read(reg_addr: u8, p_read_buf: [*c]u8, len: usize) i32;
pub extern fn mpu9250_drv_read_blocking(reg_addr: u8, p_read_buf: [*c]u8, len: usize) i32;
pub extern fn mpu9250_start_measure(gyro_fs: MPU9250_BIT_GYRO_FS_SEL, accel_fs: MPU9250_BIT_ACCEL_FS_SEL, dlpf_cfg: MPU9250_BIT_DLPF_CFG, a_dlpfcfg: MPU9250_BIT_A_DLPFCFG) i32;
pub extern fn mpu9250_drv_stop_measuring() i32;
pub extern fn mpu9250_drv_read_gyro(p_gyro_buf: [*c][6]u8) i32;
pub extern fn mpu9250_drv_process_raw_gyro(p_gyro_val: [*c]MPU9250_accel_val, p_gyro_raw_buf: [*c][6]u8) void;
pub extern fn mpu9250_drv_read_accel(p_accel_buf: [*c][6]u8) i32;
pub extern fn mpu9250_drv_process_raw_accel(p_accel_val: [*c]MPU9250_accel_val, p_accel_raw_buf: [*c][6]u8) void;
pub const __INTMAX_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_long"); // (no file):61:9
pub const __UINTMAX_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_long"); // (no file):65:9
pub const __FLT16_DENORM_MIN__ = @compileError("unable to translate C expr: unexpected token .IntegerLiteral"); // (no file):101:9
pub const __FLT16_EPSILON__ = @compileError("unable to translate C expr: unexpected token .IntegerLiteral"); // (no file):105:9
pub const __FLT16_MAX__ = @compileError("unable to translate C expr: unexpected token .IntegerLiteral"); // (no file):111:9
pub const __FLT16_MIN__ = @compileError("unable to translate C expr: unexpected token .IntegerLiteral"); // (no file):114:9
pub const __INT64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_long"); // (no file):173:9
pub const __UINT64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_long"); // (no file):201:9
pub const __INT_LEAST64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_long"); // (no file):239:9
pub const __UINT_LEAST64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_long"); // (no file):243:9
pub const __INT_FAST64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_long"); // (no file):279:9
pub const __UINT_FAST64_TYPE__ = @compileError("unable to translate C expr: unexpected token .Keyword_long"); // (no file):283:9
pub const __EXP = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/arm-none-eabi/include/machine/_default_types.h:15:9
pub const __STDINT_EXP = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/arm-none-eabi/include/sys/_intsup.h:16:9
pub const UINT32_C = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/arm-none-eabi/include/stdint.h:428:9
pub const INT64_C = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/arm-none-eabi/include/stdint.h:441:9
pub const UINT64_C = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/arm-none-eabi/include/stdint.h:442:9
pub const INTMAX_C = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/arm-none-eabi/include/stdint.h:456:9
pub const UINTMAX_C = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/arm-none-eabi/include/stdint.h:457:9
pub const __INLINE = @compileError("unable to translate C expr: unexpected token .Keyword_inline"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:44:11
pub const __STATIC_INLINE = @compileError("unable to translate C expr: unexpected token .Keyword_static"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:47:11
pub const __STATIC_FORCEINLINE = @compileError("unable to translate C expr: unexpected token .Keyword_static"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:50:11
pub const __PACKED_STRUCT = @compileError("unable to translate C expr: unexpected token .Keyword_struct"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:65:11
pub const __PACKED_UNION = @compileError("unable to translate C expr: unexpected token .Keyword_union"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:68:11
pub const __UNALIGNED_UINT32 = @compileError("unable to translate C expr: unexpected token .Keyword_struct"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:76:11
pub const __UNALIGNED_UINT16_WRITE = @compileError("unable to translate C expr: unexpected token .Keyword_struct"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:84:11
pub const __UNALIGNED_UINT16_READ = @compileError("unable to translate C expr: unexpected token .Keyword_const"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:92:11
pub const __UNALIGNED_UINT32_WRITE = @compileError("unable to translate C expr: unexpected token .Keyword_struct"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:100:11
pub const __UNALIGNED_UINT32_READ = @compileError("unable to translate C expr: unexpected token .Keyword_const"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:108:11
pub const __COMPILER_BARRIER = @compileError("unable to translate C expr: unexpected token .Keyword_volatile"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:117:11
pub const __NOP = @compileError("unable to translate C expr: unexpected token .Keyword_volatile"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:903:9
pub const __WFI = @compileError("unable to translate C expr: unexpected token .Keyword_volatile"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:909:9
pub const __WFE = @compileError("unable to translate C expr: unexpected token .Keyword_volatile"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:917:9
pub const __SEV = @compileError("unable to translate C expr: unexpected token .Keyword_volatile"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:924:9
pub const __BKPT = @compileError("unable to translate C expr: unexpected token .Keyword_volatile"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1039:9
pub const __SSAT = @compileError("unable to translate C expr: unexpected token .LBrace"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1236:9
pub const __USAT = @compileError("unable to translate C expr: unexpected token .LBrace"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1252:9
pub const __SSAT16 = @compileError("unable to translate C expr: unexpected token .LBrace"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1927:9
pub const __USAT16 = @compileError("unable to translate C expr: unexpected token .LBrace"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/cmsis_gcc.h:1934:9
pub const __I = @compileError("unable to translate C expr: unexpected token .Keyword_volatile"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/core_cm4.h:219:13
pub const __O = @compileError("unable to translate C expr: unexpected token .Keyword_volatile"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/core_cm4.h:221:13
pub const __IO = @compileError("unable to translate C expr: unexpected token .Keyword_volatile"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/core_cm4.h:222:13
pub const __IM = @compileError("unable to translate C expr: unexpected token .Keyword_volatile"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/core_cm4.h:225:13
pub const __OM = @compileError("unable to translate C expr: unexpected token .Keyword_volatile"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/core_cm4.h:226:13
pub const __IOM = @compileError("unable to translate C expr: unexpected token .Keyword_volatile"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/core_cm4.h:227:13
pub const _VAL2FLD = @compileError("unable to translate C expr: expected ')'' instead got: HashHash"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/core_cm4.h:1524:9
pub const _FLD2VAL = @compileError("unable to translate C expr: expected ')'' instead got: HashHash"); // /github/workspace/nRF5_SDK_17/components/toolchain/cmsis/include/core_cm4.h:1532:9
pub const GET_SP = @compileError("unable to translate C expr: unexpected token .RParen"); // /github/workspace/nRF5_SDK_17/modules/nrfx/mdk/compiler_abstraction.h:158:13
pub const NRFX_CONCAT_2_ = @compileError("unable to translate C expr: unexpected token .HashHash"); // /github/workspace/nRF5_SDK_17/modules/nrfx/drivers/nrfx_common.h:92:9
pub const NRFX_CONCAT_3_ = @compileError("unable to translate C expr: unexpected token .HashHash"); // /github/workspace/nRF5_SDK_17/modules/nrfx/drivers/nrfx_common.h:113:9
pub const NRFX_WAIT_FOR = @compileError("unable to translate C expr: unexpected token .Keyword_do"); // /github/workspace/nRF5_SDK_17/modules/nrfx/drivers/nrfx_common.h:182:9
pub const ASSERT = @compileError("unable to translate C expr: unexpected token .Keyword_if"); // /github/workspace/nRF5_SDK_17/components/libraries/util/nrf_assert.h:103:9
pub const NRF_MODULE_ENABLED = @compileError("unable to translate C expr: expected ',' or ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/nordic_common.h:80:9
pub const CONCAT_2_ = @compileError("unable to translate C expr: unexpected token .HashHash"); // /github/workspace/nRF5_SDK_17/components/libraries/util/nordic_common.h:118:9
pub const CONCAT_3_ = @compileError("unable to translate C expr: unexpected token .HashHash"); // /github/workspace/nRF5_SDK_17/components/libraries/util/nordic_common.h:137:9
pub const STRINGIFY_ = @compileError("unable to translate C expr: unexpected token .Hash"); // /github/workspace/nRF5_SDK_17/components/libraries/util/nordic_common.h:139:9
pub const SET_BIT = @compileError("unable to translate C expr: expected ')'' instead got: PipeEqual"); // /github/workspace/nRF5_SDK_17/components/libraries/util/nordic_common.h:153:9
pub const CLR_BIT = @compileError("unable to translate C expr: expected ')'' instead got: AmpersandEqual"); // /github/workspace/nRF5_SDK_17/components/libraries/util/nordic_common.h:161:9
pub const STRING_CONCATENATE_IMPL = @compileError("unable to translate C expr: unexpected token .HashHash"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:199:9
pub const STATIC_ASSERT_SIMPLE = @compileError("unable to translate C expr: unexpected token .Keyword_static_assert"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:219:9
pub const STATIC_ASSERT_MSG = @compileError("unable to translate C expr: unexpected token .Keyword_static_assert"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:220:9
pub const _SELECT_ASSERT_FUNC = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:242:9
pub const STATIC_ASSERT = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:256:9
pub const NUM_VA_ARGS_IMPL = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:264:9
pub const NUM_VA_ARGS = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:280:9
pub const NUM_VA_ARGS_LESS_1_IMPL = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:289:9
pub const NUM_VA_ARGS_LESS_1 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:306:9
pub const WORD_ALIGNED_MEM_BUFF = @compileError("unable to translate C expr: unexpected token .Keyword_static"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:376:9
pub const BRACKET_EXTRACT__ = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:586:9
pub const NUM_VA_ARGS_IS_MORE_THAN_1 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:600:9
pub const NUM_IS_MORE_THAN_1_ = @compileError("unable to translate C expr: expected ',' or ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:619:9
pub const NUM_IS_MORE_THAN_1_PROBE_ = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:620:9
pub const NUM_IS_MORE_THAN_1_PROBE_0 = @compileError("unable to translate C expr: unexpected token .Comma"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:621:9
pub const NUM_IS_MORE_THAN_1_PROBE_1 = @compileError("unable to translate C expr: unexpected token .Comma"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:622:9
pub const GET_VA_ARG_1 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:631:9
pub const GET_VA_ARG_1_ = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:632:9
pub const GET_ARGS_AFTER_1 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:641:9
pub const GET_ARGS_AFTER_1_ = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:642:9
pub const FIELD_SIZE = @compileError("unable to translate C expr: unexpected token .Keyword_struct"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:653:9
pub const MACRO_MAP = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:678:9
pub const MACRO_MAP_ = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:679:9
pub const MACRO_MAP_REC = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:686:9
pub const MACRO_MAP_REC_ = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:687:9
pub const MACRO_MAP_N = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:700:9
pub const MACRO_MAP_N_ = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:701:9
pub const MACRO_MAP_REC_N = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:708:9
pub const MACRO_MAP_REC_N_ = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:709:9
pub const MACRO_MAP_0 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:711:9
pub const MACRO_MAP_1 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:712:9
pub const MACRO_MAP_2 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:713:9
pub const MACRO_MAP_3 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:714:9
pub const MACRO_MAP_4 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:715:9
pub const MACRO_MAP_5 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:716:9
pub const MACRO_MAP_6 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:717:9
pub const MACRO_MAP_7 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:718:9
pub const MACRO_MAP_8 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:719:9
pub const MACRO_MAP_9 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:720:9
pub const MACRO_MAP_10 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:721:9
pub const MACRO_MAP_11 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:722:9
pub const MACRO_MAP_12 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:723:9
pub const MACRO_MAP_13 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:724:9
pub const MACRO_MAP_14 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:725:9
pub const MACRO_MAP_15 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:726:9
pub const MACRO_MAP_16 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:727:9
pub const MACRO_MAP_17 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:728:9
pub const MACRO_MAP_18 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:729:9
pub const MACRO_MAP_19 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:730:9
pub const MACRO_MAP_20 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:731:9
pub const MACRO_MAP_21 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:732:9
pub const MACRO_MAP_22 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:733:9
pub const MACRO_MAP_23 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:734:9
pub const MACRO_MAP_24 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:735:9
pub const MACRO_MAP_25 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:736:9
pub const MACRO_MAP_26 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:737:9
pub const MACRO_MAP_27 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:738:9
pub const MACRO_MAP_28 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:739:9
pub const MACRO_MAP_29 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:740:9
pub const MACRO_MAP_30 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:741:9
pub const MACRO_MAP_31 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:742:9
pub const MACRO_MAP_32 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:743:9
pub const MACRO_MAP_REC_0 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:746:9
pub const MACRO_MAP_REC_1 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:747:9
pub const MACRO_MAP_REC_2 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:748:9
pub const MACRO_MAP_REC_3 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:749:9
pub const MACRO_MAP_REC_4 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:750:9
pub const MACRO_MAP_REC_5 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:751:9
pub const MACRO_MAP_REC_6 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:752:9
pub const MACRO_MAP_REC_7 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:753:9
pub const MACRO_MAP_REC_8 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:754:9
pub const MACRO_MAP_REC_9 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:755:9
pub const MACRO_MAP_REC_10 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:756:9
pub const MACRO_MAP_REC_11 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:757:9
pub const MACRO_MAP_REC_12 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:758:9
pub const MACRO_MAP_REC_13 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:759:9
pub const MACRO_MAP_REC_14 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:760:9
pub const MACRO_MAP_REC_15 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:761:9
pub const MACRO_MAP_REC_16 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:762:9
pub const MACRO_MAP_REC_17 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:763:9
pub const MACRO_MAP_REC_18 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:764:9
pub const MACRO_MAP_REC_19 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:765:9
pub const MACRO_MAP_REC_20 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:766:9
pub const MACRO_MAP_REC_21 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:767:9
pub const MACRO_MAP_REC_22 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:768:9
pub const MACRO_MAP_REC_23 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:769:9
pub const MACRO_MAP_REC_24 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:770:9
pub const MACRO_MAP_REC_25 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:771:9
pub const MACRO_MAP_REC_26 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:772:9
pub const MACRO_MAP_REC_27 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:773:9
pub const MACRO_MAP_REC_28 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:774:9
pub const MACRO_MAP_REC_29 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:775:9
pub const MACRO_MAP_REC_30 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:776:9
pub const MACRO_MAP_REC_31 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:777:9
pub const MACRO_MAP_REC_32 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:778:9
pub const MACRO_MAP_FOR = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:791:9
pub const MACRO_MAP_FOR_ = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:794:9
pub const MACRO_MAP_FOR_N = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:808:9
pub const MACRO_MAP_FOR_N_ = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:809:9
pub const MACRO_MAP_FOR_0 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:811:9
pub const MACRO_MAP_FOR_1 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:812:9
pub const MACRO_MAP_FOR_2 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:813:9
pub const MACRO_MAP_FOR_3 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:814:9
pub const MACRO_MAP_FOR_4 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:815:9
pub const MACRO_MAP_FOR_5 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:816:9
pub const MACRO_MAP_FOR_6 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:817:9
pub const MACRO_MAP_FOR_7 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:818:9
pub const MACRO_MAP_FOR_8 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:819:9
pub const MACRO_MAP_FOR_9 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:820:9
pub const MACRO_MAP_FOR_10 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:821:9
pub const MACRO_MAP_FOR_11 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:822:9
pub const MACRO_MAP_FOR_12 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:823:9
pub const MACRO_MAP_FOR_13 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:824:9
pub const MACRO_MAP_FOR_14 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:825:9
pub const MACRO_MAP_FOR_15 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:826:9
pub const MACRO_MAP_FOR_16 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:827:9
pub const MACRO_MAP_FOR_17 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:828:9
pub const MACRO_MAP_FOR_18 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:829:9
pub const MACRO_MAP_FOR_19 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:830:9
pub const MACRO_MAP_FOR_20 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:831:9
pub const MACRO_MAP_FOR_21 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:832:9
pub const MACRO_MAP_FOR_22 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:833:9
pub const MACRO_MAP_FOR_23 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:834:9
pub const MACRO_MAP_FOR_24 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:835:9
pub const MACRO_MAP_FOR_25 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:836:9
pub const MACRO_MAP_FOR_26 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:837:9
pub const MACRO_MAP_FOR_27 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:838:9
pub const MACRO_MAP_FOR_28 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:839:9
pub const MACRO_MAP_FOR_29 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:840:9
pub const MACRO_MAP_FOR_30 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:841:9
pub const MACRO_MAP_FOR_31 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:842:9
pub const MACRO_MAP_FOR_32 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:843:9
pub const MACRO_MAP_FOR_PARAM = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:857:9
pub const MACRO_MAP_FOR_PARAM_ = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:858:9
pub const MACRO_MAP_FOR_PARAM_N = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:870:9
pub const MACRO_MAP_FOR_PARAM_N_ = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:871:9
pub const MACRO_MAP_FOR_PARAM_0 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:874:9
pub const MACRO_MAP_FOR_PARAM_1 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:875:9
pub const MACRO_MAP_FOR_PARAM_2 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:876:9
pub const MACRO_MAP_FOR_PARAM_3 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:877:9
pub const MACRO_MAP_FOR_PARAM_4 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:878:9
pub const MACRO_MAP_FOR_PARAM_5 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:879:9
pub const MACRO_MAP_FOR_PARAM_6 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:880:9
pub const MACRO_MAP_FOR_PARAM_7 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:881:9
pub const MACRO_MAP_FOR_PARAM_8 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:882:9
pub const MACRO_MAP_FOR_PARAM_9 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:883:9
pub const MACRO_MAP_FOR_PARAM_10 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:884:9
pub const MACRO_MAP_FOR_PARAM_11 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:885:9
pub const MACRO_MAP_FOR_PARAM_12 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:886:9
pub const MACRO_MAP_FOR_PARAM_13 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:887:9
pub const MACRO_MAP_FOR_PARAM_14 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:888:9
pub const MACRO_MAP_FOR_PARAM_15 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:889:9
pub const MACRO_MAP_FOR_PARAM_16 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:890:9
pub const MACRO_MAP_FOR_PARAM_17 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:891:9
pub const MACRO_MAP_FOR_PARAM_18 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:892:9
pub const MACRO_MAP_FOR_PARAM_19 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:893:9
pub const MACRO_MAP_FOR_PARAM_20 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:894:9
pub const MACRO_MAP_FOR_PARAM_21 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:895:9
pub const MACRO_MAP_FOR_PARAM_22 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:896:9
pub const MACRO_MAP_FOR_PARAM_23 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:897:9
pub const MACRO_MAP_FOR_PARAM_24 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:898:9
pub const MACRO_MAP_FOR_PARAM_25 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:899:9
pub const MACRO_MAP_FOR_PARAM_26 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:900:9
pub const MACRO_MAP_FOR_PARAM_27 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:901:9
pub const MACRO_MAP_FOR_PARAM_28 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:902:9
pub const MACRO_MAP_FOR_PARAM_29 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:903:9
pub const MACRO_MAP_FOR_PARAM_30 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:904:9
pub const MACRO_MAP_FOR_PARAM_31 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:905:9
pub const MACRO_MAP_FOR_PARAM_32 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:906:9
pub const MACRO_REPEAT = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:919:9
pub const MACRO_REPEAT_ = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:920:9
pub const MACRO_REPEAT_0 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:922:9
pub const MACRO_REPEAT_1 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:923:9
pub const MACRO_REPEAT_2 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:924:9
pub const MACRO_REPEAT_3 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:925:9
pub const MACRO_REPEAT_4 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:926:9
pub const MACRO_REPEAT_5 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:927:9
pub const MACRO_REPEAT_6 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:928:9
pub const MACRO_REPEAT_7 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:929:9
pub const MACRO_REPEAT_8 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:930:9
pub const MACRO_REPEAT_9 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:931:9
pub const MACRO_REPEAT_10 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:932:9
pub const MACRO_REPEAT_11 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:933:9
pub const MACRO_REPEAT_12 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:934:9
pub const MACRO_REPEAT_13 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:935:9
pub const MACRO_REPEAT_14 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:936:9
pub const MACRO_REPEAT_15 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:937:9
pub const MACRO_REPEAT_16 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:938:9
pub const MACRO_REPEAT_17 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:939:9
pub const MACRO_REPEAT_18 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:940:9
pub const MACRO_REPEAT_19 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:941:9
pub const MACRO_REPEAT_20 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:942:9
pub const MACRO_REPEAT_21 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:943:9
pub const MACRO_REPEAT_22 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:944:9
pub const MACRO_REPEAT_23 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:945:9
pub const MACRO_REPEAT_24 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:946:9
pub const MACRO_REPEAT_25 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:947:9
pub const MACRO_REPEAT_26 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:948:9
pub const MACRO_REPEAT_27 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:949:9
pub const MACRO_REPEAT_28 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:950:9
pub const MACRO_REPEAT_29 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:951:9
pub const MACRO_REPEAT_30 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:952:9
pub const MACRO_REPEAT_31 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:953:9
pub const MACRO_REPEAT_32 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:954:9
pub const MACRO_REPEAT_FOR = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:969:9
pub const MACRO_REPEAT_FOR_ = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:970:9
pub const MACRO_REPEAT_FOR_0 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:972:9
pub const MACRO_REPEAT_FOR_1 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:973:9
pub const MACRO_REPEAT_FOR_2 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:974:9
pub const MACRO_REPEAT_FOR_3 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:975:9
pub const MACRO_REPEAT_FOR_4 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:976:9
pub const MACRO_REPEAT_FOR_5 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:977:9
pub const MACRO_REPEAT_FOR_6 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:978:9
pub const MACRO_REPEAT_FOR_7 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:979:9
pub const MACRO_REPEAT_FOR_8 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:980:9
pub const MACRO_REPEAT_FOR_9 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:981:9
pub const MACRO_REPEAT_FOR_10 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:982:9
pub const MACRO_REPEAT_FOR_11 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:983:9
pub const MACRO_REPEAT_FOR_12 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:984:9
pub const MACRO_REPEAT_FOR_13 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:985:9
pub const MACRO_REPEAT_FOR_14 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:986:9
pub const MACRO_REPEAT_FOR_15 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:987:9
pub const MACRO_REPEAT_FOR_16 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:988:9
pub const MACRO_REPEAT_FOR_17 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:989:9
pub const MACRO_REPEAT_FOR_18 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:990:9
pub const MACRO_REPEAT_FOR_19 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:991:9
pub const MACRO_REPEAT_FOR_20 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:992:9
pub const MACRO_REPEAT_FOR_21 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:993:9
pub const MACRO_REPEAT_FOR_22 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:994:9
pub const MACRO_REPEAT_FOR_23 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:995:9
pub const MACRO_REPEAT_FOR_24 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:996:9
pub const MACRO_REPEAT_FOR_25 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:997:9
pub const MACRO_REPEAT_FOR_26 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:998:9
pub const MACRO_REPEAT_FOR_27 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:999:9
pub const MACRO_REPEAT_FOR_28 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:1000:9
pub const MACRO_REPEAT_FOR_29 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:1001:9
pub const MACRO_REPEAT_FOR_30 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:1002:9
pub const MACRO_REPEAT_FOR_31 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:1003:9
pub const MACRO_REPEAT_FOR_32 = @compileError("unable to translate C expr: expected ')'"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:1004:9
pub const PARAM_CBRACE = @compileError("unable to translate C expr: unexpected token .LBrace"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util.h:1012:9
pub const _LONG_DOUBLE = @compileError("unable to translate C expr: unexpected token .Keyword_double"); // /usr/arm-none-eabi/include/_ansi.h:37:9
pub const _ELIDABLE_INLINE = @compileError("unable to translate C expr: unexpected token .Keyword_static"); // /usr/arm-none-eabi/include/_ansi.h:69:9
pub const _NOINLINE_STATIC = @compileError("unable to translate C expr: unexpected token .Keyword_static"); // /usr/arm-none-eabi/include/_ansi.h:74:9
pub const __DOTS = @compileError("unable to translate C expr: unexpected token .Comma"); // /usr/arm-none-eabi/include/sys/cdefs.h:50:9
pub const __ASMNAME = @compileError("unable to translate C expr: unexpected token .Identifier"); // /usr/arm-none-eabi/include/sys/cdefs.h:54:10
pub const __ptr_t = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/arm-none-eabi/include/sys/cdefs.h:57:9
pub const __long_double_t = @compileError("unable to translate C expr: unexpected token .Keyword_double"); // /usr/arm-none-eabi/include/sys/cdefs.h:58:9
pub const __attribute_format_strfmon__ = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/arm-none-eabi/include/sys/cdefs.h:62:9
pub const __flexarr = @compileError("unable to translate C expr: unexpected token .LBracket"); // /usr/arm-none-eabi/include/sys/cdefs.h:63:9
pub const __compiler_membar = @compileError("unable to translate C expr: expected ',' or ')'"); // /usr/arm-none-eabi/include/sys/cdefs.h:140:9
pub const __CONCAT1 = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/arm-none-eabi/include/sys/cdefs.h:178:9
pub const __STRING = @compileError("unable to translate C expr: unexpected token .Hash"); // /usr/arm-none-eabi/include/sys/cdefs.h:180:9
pub const __const = @compileError("unable to translate C expr: unexpected token .Keyword_const"); // /usr/arm-none-eabi/include/sys/cdefs.h:183:9
pub const __volatile = @compileError("unable to translate C expr: unexpected token .Keyword_volatile"); // /usr/arm-none-eabi/include/sys/cdefs.h:185:9
pub const __generic = @compileError("unable to translate C expr: unexpected token .Keyword_generic"); // /usr/arm-none-eabi/include/sys/cdefs.h:348:9
pub const __min_size = @compileError("unable to translate C expr: unexpected token .Keyword_static"); // /usr/arm-none-eabi/include/sys/cdefs.h:366:9
pub const __unreachable = @compileError("unable to translate C expr: unexpected token .RParen"); // /usr/arm-none-eabi/include/sys/cdefs.h:414:9
pub const __restrict = @compileError("unable to translate C expr: unexpected token .Keyword_restrict"); // /usr/arm-none-eabi/include/sys/cdefs.h:434:9
pub const __containerof = @compileError("unable to translate C expr: unexpected token .LBrace"); // /usr/arm-none-eabi/include/sys/cdefs.h:500:9
pub const __printf0like = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/arm-none-eabi/include/sys/cdefs.h:539:9
pub const __strong_reference = @compileError("unable to translate C expr: unexpected token .Keyword_extern"); // /usr/arm-none-eabi/include/sys/cdefs.h:544:9
pub const __weak_reference = @compileError("unable to translate C expr: expected ',' or ')'"); // /usr/arm-none-eabi/include/sys/cdefs.h:575:9
pub const __warn_references = @compileError("unable to translate C expr: unexpected token .Semicolon"); // /usr/arm-none-eabi/include/sys/cdefs.h:578:9
pub const __FBSDID = @compileError("unable to translate C expr: unexpected token .Keyword_struct"); // /usr/arm-none-eabi/include/sys/cdefs.h:593:9
pub const __RCSID = @compileError("unable to translate C expr: unexpected token .Keyword_struct"); // /usr/arm-none-eabi/include/sys/cdefs.h:597:9
pub const __RCSID_SOURCE = @compileError("unable to translate C expr: unexpected token .Keyword_struct"); // /usr/arm-none-eabi/include/sys/cdefs.h:601:9
pub const __SCCSID = @compileError("unable to translate C expr: unexpected token .Keyword_struct"); // /usr/arm-none-eabi/include/sys/cdefs.h:605:9
pub const __COPYRIGHT = @compileError("unable to translate C expr: unexpected token .Keyword_struct"); // /usr/arm-none-eabi/include/sys/cdefs.h:609:9
pub const __DECONST = @compileError("unable to translate C expr: unexpected token .Keyword_const"); // /usr/arm-none-eabi/include/sys/cdefs.h:613:9
pub const __DEVOLATILE = @compileError("unable to translate C expr: unexpected token .Keyword_volatile"); // /usr/arm-none-eabi/include/sys/cdefs.h:617:9
pub const __DEQUALIFY = @compileError("unable to translate C expr: unexpected token .Keyword_const"); // /usr/arm-none-eabi/include/sys/cdefs.h:621:9
pub const __NULLABILITY_PRAGMA_PUSH = @compileError("unable to translate C expr: unexpected token .Identifier"); // /usr/arm-none-eabi/include/sys/cdefs.h:634:9
pub const __locks_exclusive = @compileError("unable to translate C expr: expected ')'"); // /usr/arm-none-eabi/include/sys/cdefs.h:681:9
pub const __locks_shared = @compileError("unable to translate C expr: expected ')'"); // /usr/arm-none-eabi/include/sys/cdefs.h:683:9
pub const __trylocks_exclusive = @compileError("unable to translate C expr: expected ')'"); // /usr/arm-none-eabi/include/sys/cdefs.h:687:9
pub const __trylocks_shared = @compileError("unable to translate C expr: expected ')'"); // /usr/arm-none-eabi/include/sys/cdefs.h:689:9
pub const __unlocks = @compileError("unable to translate C expr: expected ')'"); // /usr/arm-none-eabi/include/sys/cdefs.h:693:9
pub const __asserts_exclusive = @compileError("unable to translate C expr: expected ')'"); // /usr/arm-none-eabi/include/sys/cdefs.h:696:9
pub const __asserts_shared = @compileError("unable to translate C expr: expected ')'"); // /usr/arm-none-eabi/include/sys/cdefs.h:698:9
pub const __requires_exclusive = @compileError("unable to translate C expr: expected ')'"); // /usr/arm-none-eabi/include/sys/cdefs.h:702:9
pub const __requires_shared = @compileError("unable to translate C expr: expected ')'"); // /usr/arm-none-eabi/include/sys/cdefs.h:704:9
pub const __requires_unlocked = @compileError("unable to translate C expr: expected ')'"); // /usr/arm-none-eabi/include/sys/cdefs.h:706:9
pub const __LOCK_INIT = @compileError("unable to translate C expr: unexpected token .Keyword_extern"); // /usr/arm-none-eabi/include/sys/lock.h:37:9
pub const _ATEXIT_INIT = @compileError("unable to translate C expr: unexpected token .LBrace"); // /usr/arm-none-eabi/include/sys/reent.h:105:10
pub const _REENT_INIT_ATEXIT = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/arm-none-eabi/include/sys/reent.h:111:10
pub const _REENT_SMALL_CHECK_INIT = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/arm-none-eabi/include/sys/reent.h:183:10
pub const _REENT_INIT = @compileError("unable to translate C expr: unexpected token .LBrace"); // /usr/arm-none-eabi/include/sys/reent.h:703:9
pub const _REENT_INIT_PTR_ZEROED = @compileError("unable to translate C expr: unexpected token .LBrace"); // /usr/arm-none-eabi/include/sys/reent.h:751:9
pub const _REENT_CHECK_RAND48 = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/arm-none-eabi/include/sys/reent.h:765:9
pub const _REENT_CHECK_MP = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/arm-none-eabi/include/sys/reent.h:766:9
pub const _REENT_CHECK_TM = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/arm-none-eabi/include/sys/reent.h:767:9
pub const _REENT_CHECK_ASCTIME_BUF = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/arm-none-eabi/include/sys/reent.h:768:9
pub const _REENT_CHECK_EMERGENCY = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/arm-none-eabi/include/sys/reent.h:769:9
pub const _REENT_CHECK_MISC = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/arm-none-eabi/include/sys/reent.h:770:9
pub const _REENT_CHECK_SIGNAL_BUF = @compileError("unable to translate C expr: unexpected token .Nl"); // /usr/arm-none-eabi/include/sys/reent.h:771:9
pub const _REENT_INIT_PTR = @compileError("unable to translate C expr: unexpected token .LBrace"); // /usr/arm-none-eabi/include/sys/reent.h:800:9
pub const TIMEVAL_TO_TIMESPEC = @compileError("unable to translate C expr: unexpected token .Keyword_do"); // /usr/arm-none-eabi/include/sys/timespec.h:41:9
pub const TIMESPEC_TO_TIMEVAL = @compileError("unable to translate C expr: unexpected token .Keyword_do"); // /usr/arm-none-eabi/include/sys/timespec.h:46:9
pub const FD_SET = @compileError("unable to translate C expr: expected ')'' instead got: PipeEqual"); // /usr/arm-none-eabi/include/sys/select.h:48:11
pub const FD_CLR = @compileError("unable to translate C expr: expected ')'' instead got: AmpersandEqual"); // /usr/arm-none-eabi/include/sys/select.h:49:11
pub const FD_ZERO = @compileError("unable to translate C expr: unexpected token .LBrace"); // /usr/arm-none-eabi/include/sys/select.h:51:11
pub const _PTHREAD_ONCE_INIT = @compileError("unable to translate C expr: unexpected token .LBrace"); // /usr/arm-none-eabi/include/sys/_pthreadtypes.h:197:9
pub const fropen = @compileError("unable to translate C expr: unexpected token .RParen"); // /usr/arm-none-eabi/include/stdio.h:617:10
pub const fwopen = @compileError("unable to translate C expr: unexpected token .RParen"); // /usr/arm-none-eabi/include/stdio.h:619:10
pub const __sgetc_raw_r = @compileError("TODO unary inc/dec expr"); // /usr/arm-none-eabi/include/stdio.h:654:15
pub const __sclearerr = @compileError("unable to translate C expr: expected ')''"); // /usr/arm-none-eabi/include/stdio.h:721:9
pub const fast_putc = @compileError("TODO unary inc/dec expr"); // /usr/arm-none-eabi/include/stdio.h:774:9
pub const APP_ERROR_HANDLER = @compileError("unable to translate C expr: unexpected token .Keyword_do"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_error.h:151:9
pub const APP_ERROR_CHECK = @compileError("unable to translate C expr: unexpected token .Keyword_do"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_error.h:161:9
pub const APP_ERROR_CHECK_BOOL = @compileError("unable to translate C expr: unexpected token .Keyword_do"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_error.h:175:9
pub const NRF_BREAKPOINT = @compileError("unable to translate C expr: unexpected token .Semicolon"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util_platform.h:127:9
pub const NRF_BREAKPOINT_COND = @compileError("unable to translate C expr: unexpected token .Keyword_do"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util_platform.h:138:9
pub const PACKED_STRUCT = @compileError("unable to translate C expr: unexpected token .Keyword_struct"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util_platform.h:155:9
pub const PRAGMA_OPTIMIZATION_FORCE_START = @compileError("unable to translate C expr: unexpected token .Identifier"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util_platform.h:165:9
pub const ANON_UNIONS_ENABLE = @compileError("unable to translate C expr: unexpected token .Keyword_struct"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util_platform.h:223:13
pub const ANON_UNIONS_DISABLE = @compileError("unable to translate C expr: unexpected token .Keyword_struct"); // /github/workspace/nRF5_SDK_17/components/libraries/util/app_util_platform.h:238:13
pub const NRFX_CRITICAL_SECTION_ENTER = @compileError("unable to translate C expr: unexpected token .RParen"); // /github/workspace/nRF5_SDK_17/integration/nrfx/nrfx_glue.h:186:9
pub const NRFX_CRITICAL_SECTION_EXIT = @compileError("unable to translate C expr: unexpected token .RParen"); // /github/workspace/nRF5_SDK_17/integration/nrfx/nrfx_glue.h:191:9
pub const NRFX_UART_INSTANCE = @compileError("unable to translate C expr: unexpected token .LBrace"); // /github/workspace/nRF5_SDK_17/modules/nrfx/drivers/include/nrfx_uart.h:75:9
pub const NRFX_UART_DEFAULT_CONFIG = @compileError("unable to translate C expr: unexpected token .LBrace"); // /github/workspace/nRF5_SDK_17/modules/nrfx/drivers/include/nrfx_uart.h:104:9
pub const __llvm__ = 1;
pub const __clang__ = 1;
pub const __clang_major__ = 11;
pub const __clang_minor__ = 0;
pub const __clang_patchlevel__ = 0;
pub const __clang_version__ = "11.0.0 ";
pub const __GNUC__ = 4;
pub const __GNUC_MINOR__ = 2;
pub const __GNUC_PATCHLEVEL__ = 1;
pub const __GXX_ABI_VERSION = 1002;
pub const __ATOMIC_RELAXED = 0;
pub const __ATOMIC_CONSUME = 1;
pub const __ATOMIC_ACQUIRE = 2;
pub const __ATOMIC_RELEASE = 3;
pub const __ATOMIC_ACQ_REL = 4;
pub const __ATOMIC_SEQ_CST = 5;
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = 0;
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = 1;
pub const __OPENCL_MEMORY_SCOPE_DEVICE = 2;
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = 3;
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = 4;
pub const __PRAGMA_REDEFINE_EXTNAME = 1;
pub const __VERSION__ = "Clang 11.0.0";
pub const __OBJC_BOOL_IS_BOOL = 0;
pub const __CONSTANT_CFSTRINGS__ = 1;
pub const __OPTIMIZE__ = 1;
pub const __ORDER_LITTLE_ENDIAN__ = 1234;
pub const __ORDER_BIG_ENDIAN__ = 4321;
pub const __ORDER_PDP_ENDIAN__ = 3412;
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = 1;
pub const _ILP32 = 1;
pub const __ILP32__ = 1;
pub const __CHAR_BIT__ = 8;
pub const __SCHAR_MAX__ = 127;
pub const __SHRT_MAX__ = 32767;
pub const __INT_MAX__ = 2147483647;
pub const __LONG_MAX__ = @as(c_long, 2147483647);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @as(c_uint, 4294967295);
pub const __WINT_MAX__ = 2147483647;
pub const __INTMAX_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __SIZE_MAX__ = @as(c_uint, 4294967295);
pub const __UINTMAX_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __PTRDIFF_MAX__ = 2147483647;
pub const __INTPTR_MAX__ = 2147483647;
pub const __UINTPTR_MAX__ = @as(c_uint, 4294967295);
pub const __SIZEOF_DOUBLE__ = 8;
pub const __SIZEOF_FLOAT__ = 4;
pub const __SIZEOF_INT__ = 4;
pub const __SIZEOF_LONG__ = 4;
pub const __SIZEOF_LONG_DOUBLE__ = 8;
pub const __SIZEOF_LONG_LONG__ = 8;
pub const __SIZEOF_POINTER__ = 4;
pub const __SIZEOF_SHORT__ = 2;
pub const __SIZEOF_PTRDIFF_T__ = 4;
pub const __SIZEOF_SIZE_T__ = 4;
pub const __SIZEOF_WCHAR_T__ = 4;
pub const __SIZEOF_WINT_T__ = 4;
pub const __INTMAX_FMTd__ = "lld";
pub const __INTMAX_FMTi__ = "lli";
pub const __INTMAX_C_SUFFIX__ = LL;
pub const __UINTMAX_FMTo__ = "llo";
pub const __UINTMAX_FMTu__ = "llu";
pub const __UINTMAX_FMTx__ = "llx";
pub const __UINTMAX_FMTX__ = "llX";
pub const __UINTMAX_C_SUFFIX__ = ULL;
pub const __INTMAX_WIDTH__ = 64;
pub const __PTRDIFF_TYPE__ = c_int;
pub const __PTRDIFF_FMTd__ = "d";
pub const __PTRDIFF_FMTi__ = "i";
pub const __PTRDIFF_WIDTH__ = 32;
pub const __INTPTR_TYPE__ = c_int;
pub const __INTPTR_FMTd__ = "d";
pub const __INTPTR_FMTi__ = "i";
pub const __INTPTR_WIDTH__ = 32;
pub const __SIZE_TYPE__ = c_uint;
pub const __SIZE_FMTo__ = "o";
pub const __SIZE_FMTu__ = "u";
pub const __SIZE_FMTx__ = "x";
pub const __SIZE_FMTX__ = "X";
pub const __SIZE_WIDTH__ = 32;
pub const __WCHAR_TYPE__ = c_uint;
pub const __WCHAR_WIDTH__ = 32;
pub const __WINT_TYPE__ = c_int;
pub const __WINT_WIDTH__ = 32;
pub const __SIG_ATOMIC_WIDTH__ = 32;
pub const __SIG_ATOMIC_MAX__ = 2147483647;
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTMAX_WIDTH__ = 64;
pub const __UINTPTR_TYPE__ = c_uint;
pub const __UINTPTR_FMTo__ = "o";
pub const __UINTPTR_FMTu__ = "u";
pub const __UINTPTR_FMTx__ = "x";
pub const __UINTPTR_FMTX__ = "X";
pub const __UINTPTR_WIDTH__ = 32;
pub const __FLT16_HAS_DENORM__ = 1;
pub const __FLT16_DIG__ = 3;
pub const __FLT16_DECIMAL_DIG__ = 5;
pub const __FLT16_HAS_INFINITY__ = 1;
pub const __FLT16_HAS_QUIET_NAN__ = 1;
pub const __FLT16_MANT_DIG__ = 11;
pub const __FLT16_MAX_10_EXP__ = 4;
pub const __FLT16_MAX_EXP__ = 16;
pub const __FLT16_MIN_10_EXP__ = -4;
pub const __FLT16_MIN_EXP__ = -13;
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_HAS_DENORM__ = 1;
pub const __FLT_DIG__ = 6;
pub const __FLT_DECIMAL_DIG__ = 9;
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = 1;
pub const __FLT_HAS_QUIET_NAN__ = 1;
pub const __FLT_MANT_DIG__ = 24;
pub const __FLT_MAX_10_EXP__ = 38;
pub const __FLT_MAX_EXP__ = 128;
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -37;
pub const __FLT_MIN_EXP__ = -125;
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = 4.9406564584124654e-324;
pub const __DBL_HAS_DENORM__ = 1;
pub const __DBL_DIG__ = 15;
pub const __DBL_DECIMAL_DIG__ = 17;
pub const __DBL_EPSILON__ = 2.2204460492503131e-16;
pub const __DBL_HAS_INFINITY__ = 1;
pub const __DBL_HAS_QUIET_NAN__ = 1;
pub const __DBL_MANT_DIG__ = 53;
pub const __DBL_MAX_10_EXP__ = 308;
pub const __DBL_MAX_EXP__ = 1024;
pub const __DBL_MAX__ = 1.7976931348623157e+308;
pub const __DBL_MIN_10_EXP__ = -307;
pub const __DBL_MIN_EXP__ = -1021;
pub const __DBL_MIN__ = 2.2250738585072014e-308;
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 4.9406564584124654e-324);
pub const __LDBL_HAS_DENORM__ = 1;
pub const __LDBL_DIG__ = 15;
pub const __LDBL_DECIMAL_DIG__ = 17;
pub const __LDBL_EPSILON__ = @as(c_longdouble, 2.2204460492503131e-16);
pub const __LDBL_HAS_INFINITY__ = 1;
pub const __LDBL_HAS_QUIET_NAN__ = 1;
pub const __LDBL_MANT_DIG__ = 53;
pub const __LDBL_MAX_10_EXP__ = 308;
pub const __LDBL_MAX_EXP__ = 1024;
pub const __LDBL_MAX__ = @as(c_longdouble, 1.7976931348623157e+308);
pub const __LDBL_MIN_10_EXP__ = -307;
pub const __LDBL_MIN_EXP__ = -1021;
pub const __LDBL_MIN__ = @as(c_longdouble, 2.2250738585072014e-308);
pub const __POINTER_WIDTH__ = 32;
pub const __BIGGEST_ALIGNMENT__ = 8;
pub const __CHAR_UNSIGNED__ = 1;
pub const __WCHAR_UNSIGNED__ = 1;
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT64_FMTd__ = "lld";
pub const __INT64_FMTi__ = "lli";
pub const __INT64_C_SUFFIX__ = LL;
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_MAX__ = 255;
pub const __INT8_MAX__ = 127;
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_MAX__ = 65535;
pub const __INT16_MAX__ = 32767;
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_C_SUFFIX__ = U;
pub const __UINT32_MAX__ = @as(c_uint, 4294967295);
pub const __INT32_MAX__ = 2147483647;
pub const __UINT64_FMTo__ = "llo";
pub const __UINT64_FMTu__ = "llu";
pub const __UINT64_FMTx__ = "llx";
pub const __UINT64_FMTX__ = "llX";
pub const __UINT64_C_SUFFIX__ = ULL;
pub const __UINT64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __INT64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = 127;
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = 255;
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = 32767;
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = 65535;
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = 2147483647;
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @as(c_uint, 4294967295);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST64_FMTd__ = "lld";
pub const __INT_LEAST64_FMTi__ = "lli";
pub const __UINT_LEAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_LEAST64_FMTo__ = "llo";
pub const __UINT_LEAST64_FMTu__ = "llu";
pub const __UINT_LEAST64_FMTx__ = "llx";
pub const __UINT_LEAST64_FMTX__ = "llX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = 127;
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = 255;
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = 32767;
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = 65535;
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = 2147483647;
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @as(c_uint, 4294967295);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_FAST64_FMTd__ = "lld";
pub const __INT_FAST64_FMTi__ = "lli";
pub const __UINT_FAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_FAST64_FMTo__ = "llo";
pub const __UINT_FAST64_FMTu__ = "llu";
pub const __UINT_FAST64_FMTx__ = "llx";
pub const __UINT_FAST64_FMTX__ = "llX";
pub const __FINITE_MATH_ONLY__ = 0;
pub const __GNUC_STDC_INLINE__ = 1;
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = 1;
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_INT_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = 2;
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = 1;
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = 2;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = 2;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = 2;
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = 2;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = 2;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = 2;
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = 2;
pub const __GCC_ATOMIC_INT_LOCK_FREE = 2;
pub const __GCC_ATOMIC_LONG_LOCK_FREE = 2;
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = 1;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = 2;
pub const __FLT_EVAL_METHOD__ = 0;
pub const __FLT_RADIX__ = 2;
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __ARMEL__ = 1;
pub const __arm = 1;
pub const __arm__ = 1;
pub const __ARM_ARCH_7EM__ = 1;
pub const __ARM_ARCH = 7;
pub const __ARM_ARCH_ISA_THUMB = 2;
pub const __ARM_32BIT_STATE = 1;
pub const __ARM_ARCH_PROFILE = 'M';
pub const __ARM_FEATURE_UNALIGNED = 1;
pub const __ARM_FEATURE_LDREX = 0x7;
pub const __ARM_FEATURE_CLZ = 1;
pub const __ARM_FP = 0x6;
pub const __ARM_ACLE = 200;
pub const __ARM_FP16_FORMAT_IEEE = 1;
pub const __ARM_FP16_ARGS = 1;
pub const __ARM_FEATURE_FMA = 1;
pub const __THUMB_INTERWORK__ = 1;
pub const __ARM_EABI__ = 1;
pub const __ARM_PCS = 1;
pub const __ARM_PCS_VFP = 1;
pub const __ARM_FEATURE_SIMD32 = 1;
pub const __APCS_32__ = 1;
pub const __VFP_FP__ = 1;
pub const __ARM_VFPV2__ = 1;
pub const __ARM_VFPV3__ = 1;
pub const __ARM_VFPV4__ = 1;
pub const __ARM_SIZEOF_WCHAR_T = 4;
pub const __ARM_SIZEOF_MINIMAL_ENUM = 4;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = 1;
pub const __ARM_FEATURE_DSP = 1;
pub const __ARM_FEATURE_SAT = 1;
pub const __ARM_FEATURE_QBIT = 1;
pub const __STDC__ = 1;
pub const __STDC_HOSTED__ = 0;
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = 1;
pub const __STDC_UTF_32__ = 1;
pub const _DEBUG = 1;
pub const NRFX_TIMER_ENABLED = 1;
pub const NRFX_TIMER0_ENABLED = 1;
pub const NRFX_TIMER1_ENABLED = 1;
pub const NRFX_TIMER2_ENABLED = 1;
pub const NRFX_TIMER3_ENABLED = 1;
pub const NRFX_TIMER4_ENABLED = 0;
pub const NRFX_TIMER_DEFAULT_CONFIG_FREQUENCY = 0;
pub const NRFX_TIMER_DEFAULT_CONFIG_MODE = 0;
pub const NRFX_TIMER_DEFAULT_CONFIG_BIT_WIDTH = 0;
pub const NRFX_TIMER_DEFAULT_CONFIG_IRQ_PRIORITY = 6;
pub const NRFX_TIMER_CONFIG_LOG_ENABLED = 0;
pub const NRFX_TIMER_CONFIG_LOG_LEVEL = 3;
pub const NRFX_TIMER_CONFIG_INFO_COLOR = 0;
pub const NRFX_TIMER_CONFIG_DEBUG_COLOR = 0;
pub const TIMER_ENABLED = 1;
pub const TIMER_DEFAULT_CONFIG_FREQUENCY = 0;
pub const TIMER_DEFAULT_CONFIG_MODE = 0;
pub const TIMER_DEFAULT_CONFIG_BIT_WIDTH = 3;
pub const TIMER_DEFAULT_CONFIG_IRQ_PRIORITY = 6;
pub const TIMER0_ENABLED = 1;
pub const TIMER1_ENABLED = 1;
pub const TIMER2_ENABLED = 1;
pub const TIMER3_ENABLED = 1;
pub const TIMER4_ENABLED = 1;
pub const NRF_BALLOC_ENABLED = 1;
pub const NRF_BALLOC_CONFIG_DEBUG_ENABLED = 0;
pub const NRF_BALLOC_CONFIG_HEAD_GUARD_WORDS = 1;
pub const NRF_BALLOC_CONFIG_TAIL_GUARD_WORDS = 1;
pub const NRF_BALLOC_CONFIG_BASIC_CHECKS_ENABLED = 0;
pub const NRF_BALLOC_CONFIG_DOUBLE_FREE_CHECK_ENABLED = 0;
pub const NRF_BALLOC_CONFIG_DATA_TRASHING_CHECK_ENABLED = 0;
pub const NRF_BALLOC_CLI_CMDS = 0;
pub const NRF_MEMOBJ_ENABLED = 1;
pub const NRF_STRERROR_ENABLED = 1;
pub const NRF_FPRINTF_ENABLED = 1;
pub const NRF_FPRINTF_FLAG_AUTOMATIC_CR_ON_LF_ENABLED = 1;
pub const NRF_FPRINTF_DOUBLE_ENABLED = 0;
pub const NRF_LOG_ENABLED = 0;
pub const NRF_LOG_MSGPOOL_ELEMENT_SIZE = 20;
pub const NRF_LOG_MSGPOOL_ELEMENT_COUNT = 8;
pub const NRF_LOG_ALLOW_OVERFLOW = 1;
pub const NRF_LOG_BUFSIZE = 1024;
pub const NRF_LOG_CLI_CMDS = 0;
pub const NRF_LOG_DEFAULT_LEVEL = 3;
pub const NRF_LOG_DEFERRED = 1;
pub const NRF_LOG_FILTERS_ENABLED = 0;
pub const NRF_LOG_NON_DEFFERED_CRITICAL_REGION_ENABLED = 0;
pub const NRF_LOG_STR_PUSH_BUFFER_SIZE = 128;
pub const NRF_LOG_USES_COLORS = 0;
pub const NRF_LOG_COLOR_DEFAULT = 0;
pub const NRF_LOG_ERROR_COLOR = 2;
pub const NRF_LOG_WARNING_COLOR = 4;
pub const NRF_LOG_USES_TIMESTAMP = 0;
pub const NRF_LOG_TIMESTAMP_DEFAULT_FREQUENCY = 0;
pub const NRF_MPU_LIB_CONFIG_LOG_ENABLED = 0;
pub const NRF_MPU_LIB_CONFIG_LOG_LEVEL = 3;
pub const NRF_MPU_LIB_CONFIG_INFO_COLOR = 0;
pub const NRF_MPU_LIB_CONFIG_DEBUG_COLOR = 0;
pub const NRF_STACK_GUARD_CONFIG_LOG_ENABLED = 0;
pub const NRF_STACK_GUARD_CONFIG_LOG_LEVEL = 3;
pub const NRF_STACK_GUARD_CONFIG_INFO_COLOR = 0;
pub const NRF_STACK_GUARD_CONFIG_DEBUG_COLOR = 0;
pub const TASK_MANAGER_CONFIG_LOG_ENABLED = 0;
pub const TASK_MANAGER_CONFIG_LOG_LEVEL = 3;
pub const TASK_MANAGER_CONFIG_INFO_COLOR = 0;
pub const TASK_MANAGER_CONFIG_DEBUG_COLOR = 0;
pub const CLOCK_CONFIG_LOG_ENABLED = 0;
pub const CLOCK_CONFIG_LOG_LEVEL = 3;
pub const CLOCK_CONFIG_INFO_COLOR = 0;
pub const CLOCK_CONFIG_DEBUG_COLOR = 0;
pub const COMP_CONFIG_LOG_ENABLED = 0;
pub const COMP_CONFIG_LOG_LEVEL = 3;
pub const COMP_CONFIG_INFO_COLOR = 0;
pub const COMP_CONFIG_DEBUG_COLOR = 0;
pub const GPIOTE_CONFIG_LOG_ENABLED = 0;
pub const GPIOTE_CONFIG_LOG_LEVEL = 3;
pub const GPIOTE_CONFIG_INFO_COLOR = 0;
pub const GPIOTE_CONFIG_DEBUG_COLOR = 0;
pub const LPCOMP_CONFIG_LOG_ENABLED = 0;
pub const LPCOMP_CONFIG_LOG_LEVEL = 3;
pub const LPCOMP_CONFIG_INFO_COLOR = 0;
pub const LPCOMP_CONFIG_DEBUG_COLOR = 0;
pub const MAX3421E_HOST_CONFIG_LOG_ENABLED = 0;
pub const MAX3421E_HOST_CONFIG_LOG_LEVEL = 3;
pub const MAX3421E_HOST_CONFIG_INFO_COLOR = 0;
pub const MAX3421E_HOST_CONFIG_DEBUG_COLOR = 0;
pub const NRFX_USBD_CONFIG_LOG_ENABLED = 0;
pub const NRFX_USBD_CONFIG_LOG_LEVEL = 3;
pub const NRFX_USBD_CONFIG_INFO_COLOR = 0;
pub const NRFX_USBD_CONFIG_DEBUG_COLOR = 0;
pub const PDM_CONFIG_LOG_ENABLED = 0;
pub const PDM_CONFIG_LOG_LEVEL = 3;
pub const PDM_CONFIG_INFO_COLOR = 0;
pub const PDM_CONFIG_DEBUG_COLOR = 0;
pub const PPI_CONFIG_LOG_ENABLED = 0;
pub const PPI_CONFIG_LOG_LEVEL = 3;
pub const PPI_CONFIG_INFO_COLOR = 0;
pub const PPI_CONFIG_DEBUG_COLOR = 0;
pub const PWM_CONFIG_LOG_ENABLED = 0;
pub const PWM_CONFIG_LOG_LEVEL = 3;
pub const PWM_CONFIG_INFO_COLOR = 0;
pub const PWM_CONFIG_DEBUG_COLOR = 0;
pub const QDEC_CONFIG_LOG_ENABLED = 0;
pub const QDEC_CONFIG_LOG_LEVEL = 3;
pub const QDEC_CONFIG_INFO_COLOR = 0;
pub const QDEC_CONFIG_DEBUG_COLOR = 0;
pub const RNG_CONFIG_LOG_ENABLED = 0;
pub const RNG_CONFIG_LOG_LEVEL = 3;
pub const RNG_CONFIG_INFO_COLOR = 0;
pub const RNG_CONFIG_DEBUG_COLOR = 0;
pub const RNG_CONFIG_RANDOM_NUMBER_LOG_ENABLED = 0;
pub const RTC_CONFIG_LOG_ENABLED = 0;
pub const RTC_CONFIG_LOG_LEVEL = 3;
pub const RTC_CONFIG_INFO_COLOR = 0;
pub const RTC_CONFIG_DEBUG_COLOR = 0;
pub const SAADC_CONFIG_LOG_ENABLED = 0;
pub const SAADC_CONFIG_LOG_LEVEL = 3;
pub const SAADC_CONFIG_INFO_COLOR = 0;
pub const SAADC_CONFIG_DEBUG_COLOR = 0;
pub const SPIS_CONFIG_LOG_ENABLED = 0;
pub const SPIS_CONFIG_LOG_LEVEL = 3;
pub const SPIS_CONFIG_INFO_COLOR = 0;
pub const SPIS_CONFIG_DEBUG_COLOR = 0;
pub const SPI_CONFIG_LOG_ENABLED = 0;
pub const SPI_CONFIG_LOG_LEVEL = 3;
pub const SPI_CONFIG_INFO_COLOR = 0;
pub const SPI_CONFIG_DEBUG_COLOR = 0;
pub const TIMER_CONFIG_LOG_ENABLED = 0;
pub const TIMER_CONFIG_LOG_LEVEL = 3;
pub const TIMER_CONFIG_INFO_COLOR = 0;
pub const TIMER_CONFIG_DEBUG_COLOR = 0;
pub const TWIS_CONFIG_LOG_ENABLED = 0;
pub const TWIS_CONFIG_LOG_LEVEL = 3;
pub const TWIS_CONFIG_INFO_COLOR = 0;
pub const TWIS_CONFIG_DEBUG_COLOR = 0;
pub const TWI_CONFIG_LOG_ENABLED = 0;
pub const TWI_CONFIG_LOG_LEVEL = 3;
pub const TWI_CONFIG_INFO_COLOR = 0;
pub const TWI_CONFIG_DEBUG_COLOR = 0;
pub const UART_CONFIG_LOG_ENABLED = 0;
pub const UART_CONFIG_LOG_LEVEL = 3;
pub const UART_CONFIG_INFO_COLOR = 0;
pub const UART_CONFIG_DEBUG_COLOR = 0;
pub const USBD_CONFIG_LOG_ENABLED = 0;
pub const USBD_CONFIG_LOG_LEVEL = 3;
pub const USBD_CONFIG_INFO_COLOR = 0;
pub const USBD_CONFIG_DEBUG_COLOR = 0;
pub const WDT_CONFIG_LOG_ENABLED = 0;
pub const WDT_CONFIG_LOG_LEVEL = 3;
pub const WDT_CONFIG_INFO_COLOR = 0;
pub const WDT_CONFIG_DEBUG_COLOR = 0;
pub const APP_BUTTON_CONFIG_LOG_ENABLED = 0;
pub const APP_BUTTON_CONFIG_LOG_LEVEL = 3;
pub const APP_BUTTON_CONFIG_INITIAL_LOG_LEVEL = 3;
pub const APP_BUTTON_CONFIG_INFO_COLOR = 0;
pub const APP_BUTTON_CONFIG_DEBUG_COLOR = 0;
pub const APP_TIMER_CONFIG_LOG_ENABLED = 0;
pub const APP_TIMER_CONFIG_LOG_LEVEL = 3;
pub const APP_TIMER_CONFIG_INITIAL_LOG_LEVEL = 3;
pub const APP_TIMER_CONFIG_INFO_COLOR = 0;
pub const APP_TIMER_CONFIG_DEBUG_COLOR = 0;
pub const APP_USBD_CDC_ACM_CONFIG_LOG_ENABLED = 0;
pub const APP_USBD_CDC_ACM_CONFIG_LOG_LEVEL = 3;
pub const APP_USBD_CDC_ACM_CONFIG_INFO_COLOR = 0;
pub const APP_USBD_CDC_ACM_CONFIG_DEBUG_COLOR = 0;
pub const APP_USBD_CONFIG_LOG_ENABLED = 0;
pub const APP_USBD_CONFIG_LOG_LEVEL = 3;
pub const APP_USBD_CONFIG_INFO_COLOR = 0;
pub const APP_USBD_CONFIG_DEBUG_COLOR = 0;
pub const APP_USBD_DUMMY_CONFIG_LOG_ENABLED = 0;
pub const APP_USBD_DUMMY_CONFIG_LOG_LEVEL = 3;
pub const APP_USBD_DUMMY_CONFIG_INFO_COLOR = 0;
pub const APP_USBD_DUMMY_CONFIG_DEBUG_COLOR = 0;
pub const APP_USBD_MSC_CONFIG_LOG_ENABLED = 0;
pub const APP_USBD_MSC_CONFIG_LOG_LEVEL = 3;
pub const APP_USBD_MSC_CONFIG_INFO_COLOR = 0;
pub const APP_USBD_MSC_CONFIG_DEBUG_COLOR = 0;
pub const APP_USBD_NRF_DFU_TRIGGER_CONFIG_LOG_ENABLED = 0;
pub const APP_USBD_NRF_DFU_TRIGGER_CONFIG_LOG_LEVEL = 3;
pub const APP_USBD_NRF_DFU_TRIGGER_CONFIG_INFO_COLOR = 0;
pub const APP_USBD_NRF_DFU_TRIGGER_CONFIG_DEBUG_COLOR = 0;
pub const NRF_ATFIFO_CONFIG_LOG_ENABLED = 0;
pub const NRF_ATFIFO_CONFIG_LOG_LEVEL = 3;
pub const NRF_ATFIFO_CONFIG_LOG_INIT_FILTER_LEVEL = 3;
pub const NRF_ATFIFO_CONFIG_INFO_COLOR = 0;
pub const NRF_ATFIFO_CONFIG_DEBUG_COLOR = 0;
pub const NRF_BALLOC_CONFIG_LOG_ENABLED = 0;
pub const NRF_BALLOC_CONFIG_LOG_LEVEL = 3;
pub const NRF_BALLOC_CONFIG_INITIAL_LOG_LEVEL = 3;
pub const NRF_BALLOC_CONFIG_INFO_COLOR = 0;
pub const NRF_BALLOC_CONFIG_DEBUG_COLOR = 0;
pub const NRF_BLOCK_DEV_EMPTY_CONFIG_LOG_ENABLED = 0;
pub const NRF_BLOCK_DEV_EMPTY_CONFIG_LOG_LEVEL = 3;
pub const NRF_BLOCK_DEV_EMPTY_CONFIG_LOG_INIT_FILTER_LEVEL = 3;
pub const NRF_BLOCK_DEV_EMPTY_CONFIG_INFO_COLOR = 0;
pub const NRF_BLOCK_DEV_EMPTY_CONFIG_DEBUG_COLOR = 0;
pub const NRF_BLOCK_DEV_QSPI_CONFIG_LOG_ENABLED = 0;
pub const NRF_BLOCK_DEV_QSPI_CONFIG_LOG_LEVEL = 3;
pub const NRF_BLOCK_DEV_QSPI_CONFIG_LOG_INIT_FILTER_LEVEL = 3;
pub const NRF_BLOCK_DEV_QSPI_CONFIG_INFO_COLOR = 0;
pub const NRF_BLOCK_DEV_QSPI_CONFIG_DEBUG_COLOR = 0;
pub const NRF_BLOCK_DEV_RAM_CONFIG_LOG_ENABLED = 0;
pub const NRF_BLOCK_DEV_RAM_CONFIG_LOG_LEVEL = 3;
pub const NRF_BLOCK_DEV_RAM_CONFIG_LOG_INIT_FILTER_LEVEL = 3;
pub const NRF_BLOCK_DEV_RAM_CONFIG_INFO_COLOR = 0;
pub const NRF_BLOCK_DEV_RAM_CONFIG_DEBUG_COLOR = 0;
pub const NRF_CLI_BLE_UART_CONFIG_LOG_ENABLED = 0;
pub const NRF_CLI_BLE_UART_CONFIG_LOG_LEVEL = 3;
pub const NRF_CLI_BLE_UART_CONFIG_INFO_COLOR = 0;
pub const NRF_CLI_BLE_UART_CONFIG_DEBUG_COLOR = 0;
pub const NRF_CLI_LIBUARTE_CONFIG_LOG_ENABLED = 0;
pub const NRF_CLI_LIBUARTE_CONFIG_LOG_LEVEL = 3;
pub const NRF_CLI_LIBUARTE_CONFIG_INFO_COLOR = 0;
pub const NRF_CLI_LIBUARTE_CONFIG_DEBUG_COLOR = 0;
pub const NRF_CLI_UART_CONFIG_LOG_ENABLED = 0;
pub const NRF_CLI_UART_CONFIG_LOG_LEVEL = 3;
pub const NRF_CLI_UART_CONFIG_INFO_COLOR = 0;
pub const NRF_CLI_UART_CONFIG_DEBUG_COLOR = 0;
pub const NRF_LIBUARTE_CONFIG_LOG_ENABLED = 0;
pub const NRF_LIBUARTE_CONFIG_LOG_LEVEL = 3;
pub const NRF_LIBUARTE_CONFIG_INFO_COLOR = 0;
pub const NRF_LIBUARTE_CONFIG_DEBUG_COLOR = 0;
pub const NRF_MEMOBJ_CONFIG_LOG_ENABLED = 0;
pub const NRF_MEMOBJ_CONFIG_LOG_LEVEL = 3;
pub const NRF_MEMOBJ_CONFIG_INFO_COLOR = 0;
pub const NRF_MEMOBJ_CONFIG_DEBUG_COLOR = 0;
pub const NRF_PWR_MGMT_CONFIG_LOG_ENABLED = 0;
pub const NRF_PWR_MGMT_CONFIG_LOG_LEVEL = 3;
pub const NRF_PWR_MGMT_CONFIG_INFO_COLOR = 0;
pub const NRF_PWR_MGMT_CONFIG_DEBUG_COLOR = 0;
pub const NRF_QUEUE_CONFIG_LOG_ENABLED = 0;
pub const NRF_QUEUE_CONFIG_LOG_LEVEL = 3;
pub const NRF_QUEUE_CONFIG_LOG_INIT_FILTER_LEVEL = 3;
pub const NRF_QUEUE_CONFIG_INFO_COLOR = 0;
pub const NRF_QUEUE_CONFIG_DEBUG_COLOR = 0;
pub const NRF_SDH_ANT_LOG_ENABLED = 0;
pub const NRF_SDH_ANT_LOG_LEVEL = 3;
pub const NRF_SDH_ANT_INFO_COLOR = 0;
pub const NRF_SDH_ANT_DEBUG_COLOR = 0;
pub const NRF_SDH_BLE_LOG_ENABLED = 0;
pub const NRF_SDH_BLE_LOG_LEVEL = 3;
pub const NRF_SDH_BLE_INFO_COLOR = 0;
pub const NRF_SDH_BLE_DEBUG_COLOR = 0;
pub const NRF_SDH_LOG_ENABLED = 0;
pub const NRF_SDH_LOG_LEVEL = 3;
pub const NRF_SDH_INFO_COLOR = 0;
pub const NRF_SDH_DEBUG_COLOR = 0;
pub const NRF_SDH_SOC_LOG_ENABLED = 0;
pub const NRF_SDH_SOC_LOG_LEVEL = 3;
pub const NRF_SDH_SOC_INFO_COLOR = 0;
pub const NRF_SDH_SOC_DEBUG_COLOR = 0;
pub const NRF_SORTLIST_CONFIG_LOG_ENABLED = 0;
pub const NRF_SORTLIST_CONFIG_LOG_LEVEL = 3;
pub const NRF_SORTLIST_CONFIG_INFO_COLOR = 0;
pub const NRF_SORTLIST_CONFIG_DEBUG_COLOR = 0;
pub const NRF_TWI_SENSOR_CONFIG_LOG_ENABLED = 0;
pub const NRF_TWI_SENSOR_CONFIG_LOG_LEVEL = 3;
pub const NRF_TWI_SENSOR_CONFIG_INFO_COLOR = 0;
pub const NRF_TWI_SENSOR_CONFIG_DEBUG_COLOR = 0;
pub const PM_LOG_ENABLED = 1;
pub const PM_LOG_LEVEL = 3;
pub const PM_LOG_INFO_COLOR = 0;
pub const PM_LOG_DEBUG_COLOR = 0;
pub const SER_HAL_TRANSPORT_CONFIG_LOG_ENABLED = 0;
pub const SER_HAL_TRANSPORT_CONFIG_LOG_LEVEL = 3;
pub const SER_HAL_TRANSPORT_CONFIG_INFO_COLOR = 0;
pub const SER_HAL_TRANSPORT_CONFIG_DEBUG_COLOR = 0;
pub const NRF_LOG_STR_FORMATTER_TIMESTAMP_FORMAT_ENABLED = 1;
pub const NRFX_UARTE_ENABLED = 1;
pub const NRFX_UARTE0_ENABLED = 0;
pub const NRFX_UARTE1_ENABLED = 0;
pub const NRFX_UARTE_DEFAULT_CONFIG_HWFC = 0;
pub const NRFX_UARTE_DEFAULT_CONFIG_PARITY = 0;
pub const NRFX_UARTE_DEFAULT_CONFIG_BAUDRATE = 30801920;
pub const NRFX_UARTE_DEFAULT_CONFIG_IRQ_PRIORITY = 6;
pub const NRFX_UARTE_CONFIG_LOG_ENABLED = 0;
pub const NRFX_UARTE_CONFIG_LOG_LEVEL = 3;
pub const NRFX_UARTE_CONFIG_INFO_COLOR = 0;
pub const NRFX_UARTE_CONFIG_DEBUG_COLOR = 0;
pub const NRFX_UART_ENABLED = 1;
pub const NRFX_UART0_ENABLED = 0;
pub const NRFX_UART_DEFAULT_CONFIG_HWFC = 0;
pub const NRFX_UART_DEFAULT_CONFIG_PARITY = 0;
pub const NRFX_UART_DEFAULT_CONFIG_BAUDRATE = 30924800;
pub const NRFX_UART_DEFAULT_CONFIG_IRQ_PRIORITY = 6;
pub const NRFX_UART_CONFIG_LOG_ENABLED = 0;
pub const NRFX_UART_CONFIG_LOG_LEVEL = 3;
pub const NRFX_UART_CONFIG_INFO_COLOR = 0;
pub const NRFX_UART_CONFIG_DEBUG_COLOR = 0;
pub const UART_ENABLED = 1;
pub const UART_DEFAULT_CONFIG_HWFC = 0;
pub const UART_DEFAULT_CONFIG_PARITY = 0;
pub const UART_DEFAULT_CONFIG_BAUDRATE = 30801920;
pub const UART_DEFAULT_CONFIG_IRQ_PRIORITY = 6;
pub const UART_EASY_DMA_SUPPORT = 1;
pub const UART_LEGACY_SUPPORT = 1;
pub const UART0_ENABLED = 1;
pub const UART0_CONFIG_USE_EASY_DMA = 1;
pub const UART1_ENABLED = 0;
pub const NRFX_SPIM_ENABLED = 1;
pub const NRFX_SPIM0_ENABLED = 0;
pub const NRFX_SPIM1_ENABLED = 0;
pub const NRFX_SPIM2_ENABLED = 0;
pub const NRFX_SPIM3_ENABLED = 0;
pub const NRFX_SPIM_EXTENDED_ENABLED = 0;
pub const NRFX_SPIM_MISO_PULL_CFG = 1;
pub const NRFX_SPIM_DEFAULT_CONFIG_IRQ_PRIORITY = 6;
pub const NRFX_SPIM_CONFIG_LOG_ENABLED = 0;
pub const NRFX_SPIM_CONFIG_LOG_LEVEL = 3;
pub const NRFX_SPIM_CONFIG_INFO_COLOR = 0;
pub const NRFX_SPIM_CONFIG_DEBUG_COLOR = 0;
pub const NRFX_SPI_ENABLED = 1;
pub const NRFX_SPI0_ENABLED = 1;
pub const NRFX_SPI1_ENABLED = 1;
pub const NRFX_SPI2_ENABLED = 1;
pub const NRFX_SPI_MISO_PULL_CFG = 1;
pub const NRFX_SPI_DEFAULT_CONFIG_IRQ_PRIORITY = 6;
pub const NRFX_SPI_CONFIG_LOG_ENABLED = 0;
pub const NRFX_SPI_CONFIG_LOG_LEVEL = 3;
pub const NRFX_SPI_CONFIG_INFO_COLOR = 0;
pub const NRFX_SPI_CONFIG_DEBUG_COLOR = 0;
pub const _NEWLIB_VERSION_H__ = 1;
pub const _NEWLIB_VERSION = "3.3.0";
pub const __NEWLIB__ = 3;
pub const __NEWLIB_MINOR__ = 3;
pub const __NEWLIB_PATCHLEVEL__ = 0;
pub inline fn __GNUC_PREREQ(maj: anytype, min: anytype) @TypeOf(((__GNUC__ << 16) + __GNUC_MINOR__) >= ((maj << 16) + min)) {
    return ((__GNUC__ << 16) + __GNUC_MINOR__) >= ((maj << 16) + min);
}
pub inline fn __GNUC_PREREQ__(ma: anytype, mi: anytype) @TypeOf(__GNUC_PREREQ(ma, mi)) {
    return __GNUC_PREREQ(ma, mi);
}
pub const _DEFAULT_SOURCE = 1;
pub const _POSIX_SOURCE = 1;
pub const _POSIX_C_SOURCE = @as(c_long, 200809);
pub const _ATFILE_SOURCE = 1;
pub const __ATFILE_VISIBLE = 1;
pub const __BSD_VISIBLE = 1;
pub const __GNU_VISIBLE = 0;
pub const __ISO_C_VISIBLE = 2011;
pub const __LARGEFILE_VISIBLE = 0;
pub const __MISC_VISIBLE = 1;
pub const __POSIX_VISIBLE = 200809;
pub const __SVID_VISIBLE = 1;
pub const __XSI_VISIBLE = 0;
pub const __SSP_FORTIFY_LEVEL = 0;
pub const __have_longlong64 = 1;
pub const __have_long32 = 1;
pub const ___int8_t_defined = 1;
pub const ___int16_t_defined = 1;
pub const ___int32_t_defined = 1;
pub const ___int64_t_defined = 1;
pub const ___int_least8_t_defined = 1;
pub const ___int_least16_t_defined = 1;
pub const ___int_least32_t_defined = 1;
pub const ___int_least64_t_defined = 1;
pub const signed = 0;
pub const unsigned = 0;
pub const char = 0;
pub const short = 1;
pub const __int20 = 2;
pub const __int20__ = 2;
pub const int = 2;
pub const long = 4;
pub const __INT8 = "hh";
pub const __INT16 = "h";
pub const __INT64 = "ll";
pub const __FAST8 = "hh";
pub const __FAST16 = "h";
pub const __FAST64 = "ll";
pub const __LEAST8 = "hh";
pub const __LEAST16 = "h";
pub const __LEAST64 = "ll";
pub const __int8_t_defined = 1;
pub const __int16_t_defined = 1;
pub const __int32_t_defined = 1;
pub const __int64_t_defined = 1;
pub const __int_least8_t_defined = 1;
pub const __int_least16_t_defined = 1;
pub const __int_least32_t_defined = 1;
pub const __int_least64_t_defined = 1;
pub const __int_fast8_t_defined = 1;
pub const __int_fast16_t_defined = 1;
pub const __int_fast32_t_defined = 1;
pub const __int_fast64_t_defined = 1;
pub const INTPTR_MIN = -__INTPTR_MAX__ - 1;
pub const INTPTR_MAX = __INTPTR_MAX__;
pub const UINTPTR_MAX = __UINTPTR_MAX__;
pub const INT8_MIN = -__INT8_MAX__ - 1;
pub const INT8_MAX = __INT8_MAX__;
pub const UINT8_MAX = __UINT8_MAX__;
pub const INT_LEAST8_MIN = -__INT_LEAST8_MAX__ - 1;
pub const INT_LEAST8_MAX = __INT_LEAST8_MAX__;
pub const UINT_LEAST8_MAX = __UINT_LEAST8_MAX__;
pub const INT16_MIN = -__INT16_MAX__ - 1;
pub const INT16_MAX = __INT16_MAX__;
pub const UINT16_MAX = __UINT16_MAX__;
pub const INT_LEAST16_MIN = -__INT_LEAST16_MAX__ - 1;
pub const INT_LEAST16_MAX = __INT_LEAST16_MAX__;
pub const UINT_LEAST16_MAX = __UINT_LEAST16_MAX__;
pub const INT32_MIN = -__INT32_MAX__ - 1;
pub const INT32_MAX = __INT32_MAX__;
pub const UINT32_MAX = __UINT32_MAX__;
pub const INT_LEAST32_MIN = -__INT_LEAST32_MAX__ - 1;
pub const INT_LEAST32_MAX = __INT_LEAST32_MAX__;
pub const UINT_LEAST32_MAX = __UINT_LEAST32_MAX__;
pub const INT64_MIN = -__INT64_MAX__ - 1;
pub const INT64_MAX = __INT64_MAX__;
pub const UINT64_MAX = __UINT64_MAX__;
pub const INT_LEAST64_MIN = -__INT_LEAST64_MAX__ - 1;
pub const INT_LEAST64_MAX = __INT_LEAST64_MAX__;
pub const UINT_LEAST64_MAX = __UINT_LEAST64_MAX__;
pub const INT_FAST8_MIN = -__INT_FAST8_MAX__ - 1;
pub const INT_FAST8_MAX = __INT_FAST8_MAX__;
pub const UINT_FAST8_MAX = __UINT_FAST8_MAX__;
pub const INT_FAST16_MIN = -__INT_FAST16_MAX__ - 1;
pub const INT_FAST16_MAX = __INT_FAST16_MAX__;
pub const UINT_FAST16_MAX = __UINT_FAST16_MAX__;
pub const INT_FAST32_MIN = -__INT_FAST32_MAX__ - 1;
pub const INT_FAST32_MAX = __INT_FAST32_MAX__;
pub const UINT_FAST32_MAX = __UINT_FAST32_MAX__;
pub const INT_FAST64_MIN = -__INT_FAST64_MAX__ - 1;
pub const INT_FAST64_MAX = __INT_FAST64_MAX__;
pub const UINT_FAST64_MAX = __UINT_FAST64_MAX__;
pub const INTMAX_MAX = __INTMAX_MAX__;
pub const INTMAX_MIN = -INTMAX_MAX - 1;
pub const UINTMAX_MAX = __UINTMAX_MAX__;
pub const SIZE_MAX = __SIZE_MAX__;
pub const SIG_ATOMIC_MIN = -__STDINT_EXP(INT_MAX) - 1;
pub const SIG_ATOMIC_MAX = __STDINT_EXP(INT_MAX);
pub const PTRDIFF_MAX = __PTRDIFF_MAX__;
pub const PTRDIFF_MIN = -PTRDIFF_MAX - 1;
pub const WCHAR_MIN = 0 + '\x00';
pub const WCHAR_MAX = __WCHAR_MAX__;
pub const WINT_MAX = __WINT_MAX__;
pub const WINT_MIN = @as(c_uint, 0);
pub inline fn INT8_C(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn UINT8_C(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn INT16_C(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn UINT16_C(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn INT32_C(x: anytype) @TypeOf(x) {
    return x;
}
pub const NULL = (@import("std").meta.cast(?*c_void, 0));
pub inline fn offsetof(t: anytype, d: anytype) @TypeOf(__builtin_offsetof(t, d)) {
    return __builtin_offsetof(t, d);
}
pub const bool_163 = bool;
pub const @"true" = 1;
pub const @"false" = 0;
pub const __bool_true_false_are_defined = 1;
pub const MDK_MAJOR_VERSION = 8;
pub const MDK_MINOR_VERSION = 32;
pub const MDK_MICRO_VERSION = 1;
pub const __CM4_REV = @as(c_uint, 0x0001);
pub const __DSP_PRESENT = 1;
pub const __VTOR_PRESENT = 1;
pub const __NVIC_PRIO_BITS = 3;
pub const __Vendor_SysTickConfig = 0;
pub const __MPU_PRESENT = 1;
pub const __FPU_PRESENT = 1;
pub const __CM_CMSIS_VERSION_MAIN = @as(c_uint, 5);
pub const __CM_CMSIS_VERSION_SUB = @as(c_uint, 3);
pub const __CM_CMSIS_VERSION = (__CM_CMSIS_VERSION_MAIN << @as(c_uint, 16)) | __CM_CMSIS_VERSION_SUB;
pub const __CM4_CMSIS_VERSION_MAIN = __CM_CMSIS_VERSION_MAIN;
pub const __CM4_CMSIS_VERSION_SUB = __CM_CMSIS_VERSION_SUB;
pub const __CM4_CMSIS_VERSION = (__CM4_CMSIS_VERSION_MAIN << @as(c_uint, 16)) | __CM4_CMSIS_VERSION_SUB;
pub const __CORTEX_M = @as(c_uint, 4);
pub const __FPU_USED = @as(c_uint, 1);
pub const __ASM = __asm;
pub const __NO_RETURN = __attribute__(__noreturn__);
pub const __USED = __attribute__(used);
pub const __WEAK = __attribute__(weak);
pub const __PACKED = __attribute__(blk: {
    _ = @"packed";
    break :blk aligned(1);
});
pub inline fn __ALIGNED(x: anytype) @TypeOf(__attribute__(aligned(x))) {
    return __attribute__(aligned(x));
}
pub const __RESTRICT = __restrict;
pub const __PROGRAM_START = __cmsis_start;
pub const __INITIAL_SP = __StackTop;
pub const __STACK_LIMIT = __StackLimit;
pub const __VECTOR_TABLE = __Vectors;
pub const __VECTOR_TABLE_ATTRIBUTE = __attribute(blk: {
    _ = used;
    break :blk section(".vectors");
});
pub inline fn __CMSIS_GCC_OUT_REG(r: anytype) @TypeOf("=r"(r)) {
    return "=r"(r);
}
pub inline fn __CMSIS_GCC_RW_REG(r: anytype) @TypeOf("+r"(r)) {
    return "+r"(r);
}
pub inline fn __CMSIS_GCC_USE_REG(r: anytype) @TypeOf("r"(r)) {
    return "r"(r);
}
pub inline fn __PKHBT(ARG1: anytype, ARG2: anytype, ARG3: anytype) @TypeOf(((@import("std").meta.cast(u32, ARG1)) & @as(c_ulong, 0x0000FFFF)) | (((@import("std").meta.cast(u32, ARG2)) << ARG3) & @as(c_ulong, 0xFFFF0000))) {
    return ((@import("std").meta.cast(u32, ARG1)) & @as(c_ulong, 0x0000FFFF)) | (((@import("std").meta.cast(u32, ARG2)) << ARG3) & @as(c_ulong, 0xFFFF0000));
}
pub inline fn __PKHTB(ARG1: anytype, ARG2: anytype, ARG3: anytype) @TypeOf(((@import("std").meta.cast(u32, ARG1)) & @as(c_ulong, 0xFFFF0000)) | (((@import("std").meta.cast(u32, ARG2)) >> ARG3) & @as(c_ulong, 0x0000FFFF))) {
    return ((@import("std").meta.cast(u32, ARG1)) & @as(c_ulong, 0xFFFF0000)) | (((@import("std").meta.cast(u32, ARG2)) >> ARG3) & @as(c_ulong, 0x0000FFFF));
}
pub const APSR_N_Pos = @as(c_uint, 31);
pub const APSR_N_Msk = @as(c_ulong, 1) << APSR_N_Pos;
pub const APSR_Z_Pos = @as(c_uint, 30);
pub const APSR_Z_Msk = @as(c_ulong, 1) << APSR_Z_Pos;
pub const APSR_C_Pos = @as(c_uint, 29);
pub const APSR_C_Msk = @as(c_ulong, 1) << APSR_C_Pos;
pub const APSR_V_Pos = @as(c_uint, 28);
pub const APSR_V_Msk = @as(c_ulong, 1) << APSR_V_Pos;
pub const APSR_Q_Pos = @as(c_uint, 27);
pub const APSR_Q_Msk = @as(c_ulong, 1) << APSR_Q_Pos;
pub const APSR_GE_Pos = @as(c_uint, 16);
pub const APSR_GE_Msk = @as(c_ulong, 0xF) << APSR_GE_Pos;
pub const IPSR_ISR_Pos = @as(c_uint, 0);
pub const IPSR_ISR_Msk = @as(c_ulong, 0x1FF);
pub const xPSR_N_Pos = @as(c_uint, 31);
pub const xPSR_N_Msk = @as(c_ulong, 1) << xPSR_N_Pos;
pub const xPSR_Z_Pos = @as(c_uint, 30);
pub const xPSR_Z_Msk = @as(c_ulong, 1) << xPSR_Z_Pos;
pub const xPSR_C_Pos = @as(c_uint, 29);
pub const xPSR_C_Msk = @as(c_ulong, 1) << xPSR_C_Pos;
pub const xPSR_V_Pos = @as(c_uint, 28);
pub const xPSR_V_Msk = @as(c_ulong, 1) << xPSR_V_Pos;
pub const xPSR_Q_Pos = @as(c_uint, 27);
pub const xPSR_Q_Msk = @as(c_ulong, 1) << xPSR_Q_Pos;
pub const xPSR_ICI_IT_2_Pos = @as(c_uint, 25);
pub const xPSR_ICI_IT_2_Msk = @as(c_ulong, 3) << xPSR_ICI_IT_2_Pos;
pub const xPSR_T_Pos = @as(c_uint, 24);
pub const xPSR_T_Msk = @as(c_ulong, 1) << xPSR_T_Pos;
pub const xPSR_GE_Pos = @as(c_uint, 16);
pub const xPSR_GE_Msk = @as(c_ulong, 0xF) << xPSR_GE_Pos;
pub const xPSR_ICI_IT_1_Pos = @as(c_uint, 10);
pub const xPSR_ICI_IT_1_Msk = @as(c_ulong, 0x3F) << xPSR_ICI_IT_1_Pos;
pub const xPSR_ISR_Pos = @as(c_uint, 0);
pub const xPSR_ISR_Msk = @as(c_ulong, 0x1FF);
pub const CONTROL_FPCA_Pos = @as(c_uint, 2);
pub const CONTROL_FPCA_Msk = @as(c_ulong, 1) << CONTROL_FPCA_Pos;
pub const CONTROL_SPSEL_Pos = @as(c_uint, 1);
pub const CONTROL_SPSEL_Msk = @as(c_ulong, 1) << CONTROL_SPSEL_Pos;
pub const CONTROL_nPRIV_Pos = @as(c_uint, 0);
pub const CONTROL_nPRIV_Msk = @as(c_ulong, 1);
pub const NVIC_STIR_INTID_Pos = @as(c_uint, 0);
pub const NVIC_STIR_INTID_Msk = @as(c_ulong, 0x1FF);
pub const SCB_CPUID_IMPLEMENTER_Pos = @as(c_uint, 24);
pub const SCB_CPUID_IMPLEMENTER_Msk = @as(c_ulong, 0xFF) << SCB_CPUID_IMPLEMENTER_Pos;
pub const SCB_CPUID_VARIANT_Pos = @as(c_uint, 20);
pub const SCB_CPUID_VARIANT_Msk = @as(c_ulong, 0xF) << SCB_CPUID_VARIANT_Pos;
pub const SCB_CPUID_ARCHITECTURE_Pos = @as(c_uint, 16);
pub const SCB_CPUID_ARCHITECTURE_Msk = @as(c_ulong, 0xF) << SCB_CPUID_ARCHITECTURE_Pos;
pub const SCB_CPUID_PARTNO_Pos = @as(c_uint, 4);
pub const SCB_CPUID_PARTNO_Msk = @as(c_ulong, 0xFFF) << SCB_CPUID_PARTNO_Pos;
pub const SCB_CPUID_REVISION_Pos = @as(c_uint, 0);
pub const SCB_CPUID_REVISION_Msk = @as(c_ulong, 0xF);
pub const SCB_ICSR_NMIPENDSET_Pos = @as(c_uint, 31);
pub const SCB_ICSR_NMIPENDSET_Msk = @as(c_ulong, 1) << SCB_ICSR_NMIPENDSET_Pos;
pub const SCB_ICSR_PENDSVSET_Pos = @as(c_uint, 28);
pub const SCB_ICSR_PENDSVSET_Msk = @as(c_ulong, 1) << SCB_ICSR_PENDSVSET_Pos;
pub const SCB_ICSR_PENDSVCLR_Pos = @as(c_uint, 27);
pub const SCB_ICSR_PENDSVCLR_Msk = @as(c_ulong, 1) << SCB_ICSR_PENDSVCLR_Pos;
pub const SCB_ICSR_PENDSTSET_Pos = @as(c_uint, 26);
pub const SCB_ICSR_PENDSTSET_Msk = @as(c_ulong, 1) << SCB_ICSR_PENDSTSET_Pos;
pub const SCB_ICSR_PENDSTCLR_Pos = @as(c_uint, 25);
pub const SCB_ICSR_PENDSTCLR_Msk = @as(c_ulong, 1) << SCB_ICSR_PENDSTCLR_Pos;
pub const SCB_ICSR_ISRPREEMPT_Pos = @as(c_uint, 23);
pub const SCB_ICSR_ISRPREEMPT_Msk = @as(c_ulong, 1) << SCB_ICSR_ISRPREEMPT_Pos;
pub const SCB_ICSR_ISRPENDING_Pos = @as(c_uint, 22);
pub const SCB_ICSR_ISRPENDING_Msk = @as(c_ulong, 1) << SCB_ICSR_ISRPENDING_Pos;
pub const SCB_ICSR_VECTPENDING_Pos = @as(c_uint, 12);
pub const SCB_ICSR_VECTPENDING_Msk = @as(c_ulong, 0x1FF) << SCB_ICSR_VECTPENDING_Pos;
pub const SCB_ICSR_RETTOBASE_Pos = @as(c_uint, 11);
pub const SCB_ICSR_RETTOBASE_Msk = @as(c_ulong, 1) << SCB_ICSR_RETTOBASE_Pos;
pub const SCB_ICSR_VECTACTIVE_Pos = @as(c_uint, 0);
pub const SCB_ICSR_VECTACTIVE_Msk = @as(c_ulong, 0x1FF);
pub const SCB_VTOR_TBLOFF_Pos = @as(c_uint, 7);
pub const SCB_VTOR_TBLOFF_Msk = @as(c_ulong, 0x1FFFFFF) << SCB_VTOR_TBLOFF_Pos;
pub const SCB_AIRCR_VECTKEY_Pos = @as(c_uint, 16);
pub const SCB_AIRCR_VECTKEY_Msk = @as(c_ulong, 0xFFFF) << SCB_AIRCR_VECTKEY_Pos;
pub const SCB_AIRCR_VECTKEYSTAT_Pos = @as(c_uint, 16);
pub const SCB_AIRCR_VECTKEYSTAT_Msk = @as(c_ulong, 0xFFFF) << SCB_AIRCR_VECTKEYSTAT_Pos;
pub const SCB_AIRCR_ENDIANESS_Pos = @as(c_uint, 15);
pub const SCB_AIRCR_ENDIANESS_Msk = @as(c_ulong, 1) << SCB_AIRCR_ENDIANESS_Pos;
pub const SCB_AIRCR_PRIGROUP_Pos = @as(c_uint, 8);
pub const SCB_AIRCR_PRIGROUP_Msk = @as(c_ulong, 7) << SCB_AIRCR_PRIGROUP_Pos;
pub const SCB_AIRCR_SYSRESETREQ_Pos = @as(c_uint, 2);
pub const SCB_AIRCR_SYSRESETREQ_Msk = @as(c_ulong, 1) << SCB_AIRCR_SYSRESETREQ_Pos;
pub const SCB_AIRCR_VECTCLRACTIVE_Pos = @as(c_uint, 1);
pub const SCB_AIRCR_VECTCLRACTIVE_Msk = @as(c_ulong, 1) << SCB_AIRCR_VECTCLRACTIVE_Pos;
pub const SCB_AIRCR_VECTRESET_Pos = @as(c_uint, 0);
pub const SCB_AIRCR_VECTRESET_Msk = @as(c_ulong, 1);
pub const SCB_SCR_SEVONPEND_Pos = @as(c_uint, 4);
pub const SCB_SCR_SEVONPEND_Msk = @as(c_ulong, 1) << SCB_SCR_SEVONPEND_Pos;
pub const SCB_SCR_SLEEPDEEP_Pos = @as(c_uint, 2);
pub const SCB_SCR_SLEEPDEEP_Msk = @as(c_ulong, 1) << SCB_SCR_SLEEPDEEP_Pos;
pub const SCB_SCR_SLEEPONEXIT_Pos = @as(c_uint, 1);
pub const SCB_SCR_SLEEPONEXIT_Msk = @as(c_ulong, 1) << SCB_SCR_SLEEPONEXIT_Pos;
pub const SCB_CCR_STKALIGN_Pos = @as(c_uint, 9);
pub const SCB_CCR_STKALIGN_Msk = @as(c_ulong, 1) << SCB_CCR_STKALIGN_Pos;
pub const SCB_CCR_BFHFNMIGN_Pos = @as(c_uint, 8);
pub const SCB_CCR_BFHFNMIGN_Msk = @as(c_ulong, 1) << SCB_CCR_BFHFNMIGN_Pos;
pub const SCB_CCR_DIV_0_TRP_Pos = @as(c_uint, 4);
pub const SCB_CCR_DIV_0_TRP_Msk = @as(c_ulong, 1) << SCB_CCR_DIV_0_TRP_Pos;
pub const SCB_CCR_UNALIGN_TRP_Pos = @as(c_uint, 3);
pub const SCB_CCR_UNALIGN_TRP_Msk = @as(c_ulong, 1) << SCB_CCR_UNALIGN_TRP_Pos;
pub const SCB_CCR_USERSETMPEND_Pos = @as(c_uint, 1);
pub const SCB_CCR_USERSETMPEND_Msk = @as(c_ulong, 1) << SCB_CCR_USERSETMPEND_Pos;
pub const SCB_CCR_NONBASETHRDENA_Pos = @as(c_uint, 0);
pub const SCB_CCR_NONBASETHRDENA_Msk = @as(c_ulong, 1);
pub const SCB_SHCSR_USGFAULTENA_Pos = @as(c_uint, 18);
pub const SCB_SHCSR_USGFAULTENA_Msk = @as(c_ulong, 1) << SCB_SHCSR_USGFAULTENA_Pos;
pub const SCB_SHCSR_BUSFAULTENA_Pos = @as(c_uint, 17);
pub const SCB_SHCSR_BUSFAULTENA_Msk = @as(c_ulong, 1) << SCB_SHCSR_BUSFAULTENA_Pos;
pub const SCB_SHCSR_MEMFAULTENA_Pos = @as(c_uint, 16);
pub const SCB_SHCSR_MEMFAULTENA_Msk = @as(c_ulong, 1) << SCB_SHCSR_MEMFAULTENA_Pos;
pub const SCB_SHCSR_SVCALLPENDED_Pos = @as(c_uint, 15);
pub const SCB_SHCSR_SVCALLPENDED_Msk = @as(c_ulong, 1) << SCB_SHCSR_SVCALLPENDED_Pos;
pub const SCB_SHCSR_BUSFAULTPENDED_Pos = @as(c_uint, 14);
pub const SCB_SHCSR_BUSFAULTPENDED_Msk = @as(c_ulong, 1) << SCB_SHCSR_BUSFAULTPENDED_Pos;
pub const SCB_SHCSR_MEMFAULTPENDED_Pos = @as(c_uint, 13);
pub const SCB_SHCSR_MEMFAULTPENDED_Msk = @as(c_ulong, 1) << SCB_SHCSR_MEMFAULTPENDED_Pos;
pub const SCB_SHCSR_USGFAULTPENDED_Pos = @as(c_uint, 12);
pub const SCB_SHCSR_USGFAULTPENDED_Msk = @as(c_ulong, 1) << SCB_SHCSR_USGFAULTPENDED_Pos;
pub const SCB_SHCSR_SYSTICKACT_Pos = @as(c_uint, 11);
pub const SCB_SHCSR_SYSTICKACT_Msk = @as(c_ulong, 1) << SCB_SHCSR_SYSTICKACT_Pos;
pub const SCB_SHCSR_PENDSVACT_Pos = @as(c_uint, 10);
pub const SCB_SHCSR_PENDSVACT_Msk = @as(c_ulong, 1) << SCB_SHCSR_PENDSVACT_Pos;
pub const SCB_SHCSR_MONITORACT_Pos = @as(c_uint, 8);
pub const SCB_SHCSR_MONITORACT_Msk = @as(c_ulong, 1) << SCB_SHCSR_MONITORACT_Pos;
pub const SCB_SHCSR_SVCALLACT_Pos = @as(c_uint, 7);
pub const SCB_SHCSR_SVCALLACT_Msk = @as(c_ulong, 1) << SCB_SHCSR_SVCALLACT_Pos;
pub const SCB_SHCSR_USGFAULTACT_Pos = @as(c_uint, 3);
pub const SCB_SHCSR_USGFAULTACT_Msk = @as(c_ulong, 1) << SCB_SHCSR_USGFAULTACT_Pos;
pub const SCB_SHCSR_BUSFAULTACT_Pos = @as(c_uint, 1);
pub const SCB_SHCSR_BUSFAULTACT_Msk = @as(c_ulong, 1) << SCB_SHCSR_BUSFAULTACT_Pos;
pub const SCB_SHCSR_MEMFAULTACT_Pos = @as(c_uint, 0);
pub const SCB_SHCSR_MEMFAULTACT_Msk = @as(c_ulong, 1);
pub const SCB_CFSR_USGFAULTSR_Pos = @as(c_uint, 16);
pub const SCB_CFSR_USGFAULTSR_Msk = @as(c_ulong, 0xFFFF) << SCB_CFSR_USGFAULTSR_Pos;
pub const SCB_CFSR_BUSFAULTSR_Pos = @as(c_uint, 8);
pub const SCB_CFSR_BUSFAULTSR_Msk = @as(c_ulong, 0xFF) << SCB_CFSR_BUSFAULTSR_Pos;
pub const SCB_CFSR_MEMFAULTSR_Pos = @as(c_uint, 0);
pub const SCB_CFSR_MEMFAULTSR_Msk = @as(c_ulong, 0xFF);
pub const SCB_CFSR_MMARVALID_Pos = SCB_SHCSR_MEMFAULTACT_Pos + @as(c_uint, 7);
pub const SCB_CFSR_MMARVALID_Msk = @as(c_ulong, 1) << SCB_CFSR_MMARVALID_Pos;
pub const SCB_CFSR_MLSPERR_Pos = SCB_SHCSR_MEMFAULTACT_Pos + @as(c_uint, 5);
pub const SCB_CFSR_MLSPERR_Msk = @as(c_ulong, 1) << SCB_CFSR_MLSPERR_Pos;
pub const SCB_CFSR_MSTKERR_Pos = SCB_SHCSR_MEMFAULTACT_Pos + @as(c_uint, 4);
pub const SCB_CFSR_MSTKERR_Msk = @as(c_ulong, 1) << SCB_CFSR_MSTKERR_Pos;
pub const SCB_CFSR_MUNSTKERR_Pos = SCB_SHCSR_MEMFAULTACT_Pos + @as(c_uint, 3);
pub const SCB_CFSR_MUNSTKERR_Msk = @as(c_ulong, 1) << SCB_CFSR_MUNSTKERR_Pos;
pub const SCB_CFSR_DACCVIOL_Pos = SCB_SHCSR_MEMFAULTACT_Pos + @as(c_uint, 1);
pub const SCB_CFSR_DACCVIOL_Msk = @as(c_ulong, 1) << SCB_CFSR_DACCVIOL_Pos;
pub const SCB_CFSR_IACCVIOL_Pos = SCB_SHCSR_MEMFAULTACT_Pos + @as(c_uint, 0);
pub const SCB_CFSR_IACCVIOL_Msk = @as(c_ulong, 1);
pub const SCB_CFSR_BFARVALID_Pos = SCB_CFSR_BUSFAULTSR_Pos + @as(c_uint, 7);
pub const SCB_CFSR_BFARVALID_Msk = @as(c_ulong, 1) << SCB_CFSR_BFARVALID_Pos;
pub const SCB_CFSR_LSPERR_Pos = SCB_CFSR_BUSFAULTSR_Pos + @as(c_uint, 5);
pub const SCB_CFSR_LSPERR_Msk = @as(c_ulong, 1) << SCB_CFSR_LSPERR_Pos;
pub const SCB_CFSR_STKERR_Pos = SCB_CFSR_BUSFAULTSR_Pos + @as(c_uint, 4);
pub const SCB_CFSR_STKERR_Msk = @as(c_ulong, 1) << SCB_CFSR_STKERR_Pos;
pub const SCB_CFSR_UNSTKERR_Pos = SCB_CFSR_BUSFAULTSR_Pos + @as(c_uint, 3);
pub const SCB_CFSR_UNSTKERR_Msk = @as(c_ulong, 1) << SCB_CFSR_UNSTKERR_Pos;
pub const SCB_CFSR_IMPRECISERR_Pos = SCB_CFSR_BUSFAULTSR_Pos + @as(c_uint, 2);
pub const SCB_CFSR_IMPRECISERR_Msk = @as(c_ulong, 1) << SCB_CFSR_IMPRECISERR_Pos;
pub const SCB_CFSR_PRECISERR_Pos = SCB_CFSR_BUSFAULTSR_Pos + @as(c_uint, 1);
pub const SCB_CFSR_PRECISERR_Msk = @as(c_ulong, 1) << SCB_CFSR_PRECISERR_Pos;
pub const SCB_CFSR_IBUSERR_Pos = SCB_CFSR_BUSFAULTSR_Pos + @as(c_uint, 0);
pub const SCB_CFSR_IBUSERR_Msk = @as(c_ulong, 1) << SCB_CFSR_IBUSERR_Pos;
pub const SCB_CFSR_DIVBYZERO_Pos = SCB_CFSR_USGFAULTSR_Pos + @as(c_uint, 9);
pub const SCB_CFSR_DIVBYZERO_Msk = @as(c_ulong, 1) << SCB_CFSR_DIVBYZERO_Pos;
pub const SCB_CFSR_UNALIGNED_Pos = SCB_CFSR_USGFAULTSR_Pos + @as(c_uint, 8);
pub const SCB_CFSR_UNALIGNED_Msk = @as(c_ulong, 1) << SCB_CFSR_UNALIGNED_Pos;
pub const SCB_CFSR_NOCP_Pos = SCB_CFSR_USGFAULTSR_Pos + @as(c_uint, 3);
pub const SCB_CFSR_NOCP_Msk = @as(c_ulong, 1) << SCB_CFSR_NOCP_Pos;
pub const SCB_CFSR_INVPC_Pos = SCB_CFSR_USGFAULTSR_Pos + @as(c_uint, 2);
pub const SCB_CFSR_INVPC_Msk = @as(c_ulong, 1) << SCB_CFSR_INVPC_Pos;
pub const SCB_CFSR_INVSTATE_Pos = SCB_CFSR_USGFAULTSR_Pos + @as(c_uint, 1);
pub const SCB_CFSR_INVSTATE_Msk = @as(c_ulong, 1) << SCB_CFSR_INVSTATE_Pos;
pub const SCB_CFSR_UNDEFINSTR_Pos = SCB_CFSR_USGFAULTSR_Pos + @as(c_uint, 0);
pub const SCB_CFSR_UNDEFINSTR_Msk = @as(c_ulong, 1) << SCB_CFSR_UNDEFINSTR_Pos;
pub const SCB_HFSR_DEBUGEVT_Pos = @as(c_uint, 31);
pub const SCB_HFSR_DEBUGEVT_Msk = @as(c_ulong, 1) << SCB_HFSR_DEBUGEVT_Pos;
pub const SCB_HFSR_FORCED_Pos = @as(c_uint, 30);
pub const SCB_HFSR_FORCED_Msk = @as(c_ulong, 1) << SCB_HFSR_FORCED_Pos;
pub const SCB_HFSR_VECTTBL_Pos = @as(c_uint, 1);
pub const SCB_HFSR_VECTTBL_Msk = @as(c_ulong, 1) << SCB_HFSR_VECTTBL_Pos;
pub const SCB_DFSR_EXTERNAL_Pos = @as(c_uint, 4);
pub const SCB_DFSR_EXTERNAL_Msk = @as(c_ulong, 1) << SCB_DFSR_EXTERNAL_Pos;
pub const SCB_DFSR_VCATCH_Pos = @as(c_uint, 3);
pub const SCB_DFSR_VCATCH_Msk = @as(c_ulong, 1) << SCB_DFSR_VCATCH_Pos;
pub const SCB_DFSR_DWTTRAP_Pos = @as(c_uint, 2);
pub const SCB_DFSR_DWTTRAP_Msk = @as(c_ulong, 1) << SCB_DFSR_DWTTRAP_Pos;
pub const SCB_DFSR_BKPT_Pos = @as(c_uint, 1);
pub const SCB_DFSR_BKPT_Msk = @as(c_ulong, 1) << SCB_DFSR_BKPT_Pos;
pub const SCB_DFSR_HALTED_Pos = @as(c_uint, 0);
pub const SCB_DFSR_HALTED_Msk = @as(c_ulong, 1);
pub const SCnSCB_ICTR_INTLINESNUM_Pos = @as(c_uint, 0);
pub const SCnSCB_ICTR_INTLINESNUM_Msk = @as(c_ulong, 0xF);
pub const SCnSCB_ACTLR_DISOOFP_Pos = @as(c_uint, 9);
pub const SCnSCB_ACTLR_DISOOFP_Msk = @as(c_ulong, 1) << SCnSCB_ACTLR_DISOOFP_Pos;
pub const SCnSCB_ACTLR_DISFPCA_Pos = @as(c_uint, 8);
pub const SCnSCB_ACTLR_DISFPCA_Msk = @as(c_ulong, 1) << SCnSCB_ACTLR_DISFPCA_Pos;
pub const SCnSCB_ACTLR_DISFOLD_Pos = @as(c_uint, 2);
pub const SCnSCB_ACTLR_DISFOLD_Msk = @as(c_ulong, 1) << SCnSCB_ACTLR_DISFOLD_Pos;
pub const SCnSCB_ACTLR_DISDEFWBUF_Pos = @as(c_uint, 1);
pub const SCnSCB_ACTLR_DISDEFWBUF_Msk = @as(c_ulong, 1) << SCnSCB_ACTLR_DISDEFWBUF_Pos;
pub const SCnSCB_ACTLR_DISMCYCINT_Pos = @as(c_uint, 0);
pub const SCnSCB_ACTLR_DISMCYCINT_Msk = @as(c_ulong, 1);
pub const SysTick_CTRL_COUNTFLAG_Pos = @as(c_uint, 16);
pub const SysTick_CTRL_COUNTFLAG_Msk = @as(c_ulong, 1) << SysTick_CTRL_COUNTFLAG_Pos;
pub const SysTick_CTRL_CLKSOURCE_Pos = @as(c_uint, 2);
pub const SysTick_CTRL_CLKSOURCE_Msk = @as(c_ulong, 1) << SysTick_CTRL_CLKSOURCE_Pos;
pub const SysTick_CTRL_TICKINT_Pos = @as(c_uint, 1);
pub const SysTick_CTRL_TICKINT_Msk = @as(c_ulong, 1) << SysTick_CTRL_TICKINT_Pos;
pub const SysTick_CTRL_ENABLE_Pos = @as(c_uint, 0);
pub const SysTick_CTRL_ENABLE_Msk = @as(c_ulong, 1);
pub const SysTick_LOAD_RELOAD_Pos = @as(c_uint, 0);
pub const SysTick_LOAD_RELOAD_Msk = @as(c_ulong, 0xFFFFFF);
pub const SysTick_VAL_CURRENT_Pos = @as(c_uint, 0);
pub const SysTick_VAL_CURRENT_Msk = @as(c_ulong, 0xFFFFFF);
pub const SysTick_CALIB_NOREF_Pos = @as(c_uint, 31);
pub const SysTick_CALIB_NOREF_Msk = @as(c_ulong, 1) << SysTick_CALIB_NOREF_Pos;
pub const SysTick_CALIB_SKEW_Pos = @as(c_uint, 30);
pub const SysTick_CALIB_SKEW_Msk = @as(c_ulong, 1) << SysTick_CALIB_SKEW_Pos;
pub const SysTick_CALIB_TENMS_Pos = @as(c_uint, 0);
pub const SysTick_CALIB_TENMS_Msk = @as(c_ulong, 0xFFFFFF);
pub const ITM_TPR_PRIVMASK_Pos = @as(c_uint, 0);
pub const ITM_TPR_PRIVMASK_Msk = @as(c_ulong, 0xFFFFFFFF);
pub const ITM_TCR_BUSY_Pos = @as(c_uint, 23);
pub const ITM_TCR_BUSY_Msk = @as(c_ulong, 1) << ITM_TCR_BUSY_Pos;
pub const ITM_TCR_TraceBusID_Pos = @as(c_uint, 16);
pub const ITM_TCR_TraceBusID_Msk = @as(c_ulong, 0x7F) << ITM_TCR_TraceBusID_Pos;
pub const ITM_TCR_GTSFREQ_Pos = @as(c_uint, 10);
pub const ITM_TCR_GTSFREQ_Msk = @as(c_ulong, 3) << ITM_TCR_GTSFREQ_Pos;
pub const ITM_TCR_TSPrescale_Pos = @as(c_uint, 8);
pub const ITM_TCR_TSPrescale_Msk = @as(c_ulong, 3) << ITM_TCR_TSPrescale_Pos;
pub const ITM_TCR_SWOENA_Pos = @as(c_uint, 4);
pub const ITM_TCR_SWOENA_Msk = @as(c_ulong, 1) << ITM_TCR_SWOENA_Pos;
pub const ITM_TCR_DWTENA_Pos = @as(c_uint, 3);
pub const ITM_TCR_DWTENA_Msk = @as(c_ulong, 1) << ITM_TCR_DWTENA_Pos;
pub const ITM_TCR_SYNCENA_Pos = @as(c_uint, 2);
pub const ITM_TCR_SYNCENA_Msk = @as(c_ulong, 1) << ITM_TCR_SYNCENA_Pos;
pub const ITM_TCR_TSENA_Pos = @as(c_uint, 1);
pub const ITM_TCR_TSENA_Msk = @as(c_ulong, 1) << ITM_TCR_TSENA_Pos;
pub const ITM_TCR_ITMENA_Pos = @as(c_uint, 0);
pub const ITM_TCR_ITMENA_Msk = @as(c_ulong, 1);
pub const ITM_LSR_ByteAcc_Pos = @as(c_uint, 2);
pub const ITM_LSR_ByteAcc_Msk = @as(c_ulong, 1) << ITM_LSR_ByteAcc_Pos;
pub const ITM_LSR_Access_Pos = @as(c_uint, 1);
pub const ITM_LSR_Access_Msk = @as(c_ulong, 1) << ITM_LSR_Access_Pos;
pub const ITM_LSR_Present_Pos = @as(c_uint, 0);
pub const ITM_LSR_Present_Msk = @as(c_ulong, 1);
pub const DWT_CTRL_NUMCOMP_Pos = @as(c_uint, 28);
pub const DWT_CTRL_NUMCOMP_Msk = @as(c_ulong, 0xF) << DWT_CTRL_NUMCOMP_Pos;
pub const DWT_CTRL_NOTRCPKT_Pos = @as(c_uint, 27);
pub const DWT_CTRL_NOTRCPKT_Msk = @as(c_ulong, 0x1) << DWT_CTRL_NOTRCPKT_Pos;
pub const DWT_CTRL_NOEXTTRIG_Pos = @as(c_uint, 26);
pub const DWT_CTRL_NOEXTTRIG_Msk = @as(c_ulong, 0x1) << DWT_CTRL_NOEXTTRIG_Pos;
pub const DWT_CTRL_NOCYCCNT_Pos = @as(c_uint, 25);
pub const DWT_CTRL_NOCYCCNT_Msk = @as(c_ulong, 0x1) << DWT_CTRL_NOCYCCNT_Pos;
pub const DWT_CTRL_NOPRFCNT_Pos = @as(c_uint, 24);
pub const DWT_CTRL_NOPRFCNT_Msk = @as(c_ulong, 0x1) << DWT_CTRL_NOPRFCNT_Pos;
pub const DWT_CTRL_CYCEVTENA_Pos = @as(c_uint, 22);
pub const DWT_CTRL_CYCEVTENA_Msk = @as(c_ulong, 0x1) << DWT_CTRL_CYCEVTENA_Pos;
pub const DWT_CTRL_FOLDEVTENA_Pos = @as(c_uint, 21);
pub const DWT_CTRL_FOLDEVTENA_Msk = @as(c_ulong, 0x1) << DWT_CTRL_FOLDEVTENA_Pos;
pub const DWT_CTRL_LSUEVTENA_Pos = @as(c_uint, 20);
pub const DWT_CTRL_LSUEVTENA_Msk = @as(c_ulong, 0x1) << DWT_CTRL_LSUEVTENA_Pos;
pub const DWT_CTRL_SLEEPEVTENA_Pos = @as(c_uint, 19);
pub const DWT_CTRL_SLEEPEVTENA_Msk = @as(c_ulong, 0x1) << DWT_CTRL_SLEEPEVTENA_Pos;
pub const DWT_CTRL_EXCEVTENA_Pos = @as(c_uint, 18);
pub const DWT_CTRL_EXCEVTENA_Msk = @as(c_ulong, 0x1) << DWT_CTRL_EXCEVTENA_Pos;
pub const DWT_CTRL_CPIEVTENA_Pos = @as(c_uint, 17);
pub const DWT_CTRL_CPIEVTENA_Msk = @as(c_ulong, 0x1) << DWT_CTRL_CPIEVTENA_Pos;
pub const DWT_CTRL_EXCTRCENA_Pos = @as(c_uint, 16);
pub const DWT_CTRL_EXCTRCENA_Msk = @as(c_ulong, 0x1) << DWT_CTRL_EXCTRCENA_Pos;
pub const DWT_CTRL_PCSAMPLENA_Pos = @as(c_uint, 12);
pub const DWT_CTRL_PCSAMPLENA_Msk = @as(c_ulong, 0x1) << DWT_CTRL_PCSAMPLENA_Pos;
pub const DWT_CTRL_SYNCTAP_Pos = @as(c_uint, 10);
pub const DWT_CTRL_SYNCTAP_Msk = @as(c_ulong, 0x3) << DWT_CTRL_SYNCTAP_Pos;
pub const DWT_CTRL_CYCTAP_Pos = @as(c_uint, 9);
pub const DWT_CTRL_CYCTAP_Msk = @as(c_ulong, 0x1) << DWT_CTRL_CYCTAP_Pos;
pub const DWT_CTRL_POSTINIT_Pos = @as(c_uint, 5);
pub const DWT_CTRL_POSTINIT_Msk = @as(c_ulong, 0xF) << DWT_CTRL_POSTINIT_Pos;
pub const DWT_CTRL_POSTPRESET_Pos = @as(c_uint, 1);
pub const DWT_CTRL_POSTPRESET_Msk = @as(c_ulong, 0xF) << DWT_CTRL_POSTPRESET_Pos;
pub const DWT_CTRL_CYCCNTENA_Pos = @as(c_uint, 0);
pub const DWT_CTRL_CYCCNTENA_Msk = @as(c_ulong, 0x1);
pub const DWT_CPICNT_CPICNT_Pos = @as(c_uint, 0);
pub const DWT_CPICNT_CPICNT_Msk = @as(c_ulong, 0xFF);
pub const DWT_EXCCNT_EXCCNT_Pos = @as(c_uint, 0);
pub const DWT_EXCCNT_EXCCNT_Msk = @as(c_ulong, 0xFF);
pub const DWT_SLEEPCNT_SLEEPCNT_Pos = @as(c_uint, 0);
pub const DWT_SLEEPCNT_SLEEPCNT_Msk = @as(c_ulong, 0xFF);
pub const DWT_LSUCNT_LSUCNT_Pos = @as(c_uint, 0);
pub const DWT_LSUCNT_LSUCNT_Msk = @as(c_ulong, 0xFF);
pub const DWT_FOLDCNT_FOLDCNT_Pos = @as(c_uint, 0);
pub const DWT_FOLDCNT_FOLDCNT_Msk = @as(c_ulong, 0xFF);
pub const DWT_MASK_MASK_Pos = @as(c_uint, 0);
pub const DWT_MASK_MASK_Msk = @as(c_ulong, 0x1F);
pub const DWT_FUNCTION_MATCHED_Pos = @as(c_uint, 24);
pub const DWT_FUNCTION_MATCHED_Msk = @as(c_ulong, 0x1) << DWT_FUNCTION_MATCHED_Pos;
pub const DWT_FUNCTION_DATAVADDR1_Pos = @as(c_uint, 16);
pub const DWT_FUNCTION_DATAVADDR1_Msk = @as(c_ulong, 0xF) << DWT_FUNCTION_DATAVADDR1_Pos;
pub const DWT_FUNCTION_DATAVADDR0_Pos = @as(c_uint, 12);
pub const DWT_FUNCTION_DATAVADDR0_Msk = @as(c_ulong, 0xF) << DWT_FUNCTION_DATAVADDR0_Pos;
pub const DWT_FUNCTION_DATAVSIZE_Pos = @as(c_uint, 10);
pub const DWT_FUNCTION_DATAVSIZE_Msk = @as(c_ulong, 0x3) << DWT_FUNCTION_DATAVSIZE_Pos;
pub const DWT_FUNCTION_LNK1ENA_Pos = @as(c_uint, 9);
pub const DWT_FUNCTION_LNK1ENA_Msk = @as(c_ulong, 0x1) << DWT_FUNCTION_LNK1ENA_Pos;
pub const DWT_FUNCTION_DATAVMATCH_Pos = @as(c_uint, 8);
pub const DWT_FUNCTION_DATAVMATCH_Msk = @as(c_ulong, 0x1) << DWT_FUNCTION_DATAVMATCH_Pos;
pub const DWT_FUNCTION_CYCMATCH_Pos = @as(c_uint, 7);
pub const DWT_FUNCTION_CYCMATCH_Msk = @as(c_ulong, 0x1) << DWT_FUNCTION_CYCMATCH_Pos;
pub const DWT_FUNCTION_EMITRANGE_Pos = @as(c_uint, 5);
pub const DWT_FUNCTION_EMITRANGE_Msk = @as(c_ulong, 0x1) << DWT_FUNCTION_EMITRANGE_Pos;
pub const DWT_FUNCTION_FUNCTION_Pos = @as(c_uint, 0);
pub const DWT_FUNCTION_FUNCTION_Msk = @as(c_ulong, 0xF);
pub const TPI_ACPR_PRESCALER_Pos = @as(c_uint, 0);
pub const TPI_ACPR_PRESCALER_Msk = @as(c_ulong, 0x1FFF);
pub const TPI_SPPR_TXMODE_Pos = @as(c_uint, 0);
pub const TPI_SPPR_TXMODE_Msk = @as(c_ulong, 0x3);
pub const TPI_FFSR_FtNonStop_Pos = @as(c_uint, 3);
pub const TPI_FFSR_FtNonStop_Msk = @as(c_ulong, 0x1) << TPI_FFSR_FtNonStop_Pos;
pub const TPI_FFSR_TCPresent_Pos = @as(c_uint, 2);
pub const TPI_FFSR_TCPresent_Msk = @as(c_ulong, 0x1) << TPI_FFSR_TCPresent_Pos;
pub const TPI_FFSR_FtStopped_Pos = @as(c_uint, 1);
pub const TPI_FFSR_FtStopped_Msk = @as(c_ulong, 0x1) << TPI_FFSR_FtStopped_Pos;
pub const TPI_FFSR_FlInProg_Pos = @as(c_uint, 0);
pub const TPI_FFSR_FlInProg_Msk = @as(c_ulong, 0x1);
pub const TPI_FFCR_TrigIn_Pos = @as(c_uint, 8);
pub const TPI_FFCR_TrigIn_Msk = @as(c_ulong, 0x1) << TPI_FFCR_TrigIn_Pos;
pub const TPI_FFCR_EnFCont_Pos = @as(c_uint, 1);
pub const TPI_FFCR_EnFCont_Msk = @as(c_ulong, 0x1) << TPI_FFCR_EnFCont_Pos;
pub const TPI_TRIGGER_TRIGGER_Pos = @as(c_uint, 0);
pub const TPI_TRIGGER_TRIGGER_Msk = @as(c_ulong, 0x1);
pub const TPI_FIFO0_ITM_ATVALID_Pos = @as(c_uint, 29);
pub const TPI_FIFO0_ITM_ATVALID_Msk = @as(c_ulong, 0x1) << TPI_FIFO0_ITM_ATVALID_Pos;
pub const TPI_FIFO0_ITM_bytecount_Pos = @as(c_uint, 27);
pub const TPI_FIFO0_ITM_bytecount_Msk = @as(c_ulong, 0x3) << TPI_FIFO0_ITM_bytecount_Pos;
pub const TPI_FIFO0_ETM_ATVALID_Pos = @as(c_uint, 26);
pub const TPI_FIFO0_ETM_ATVALID_Msk = @as(c_ulong, 0x1) << TPI_FIFO0_ETM_ATVALID_Pos;
pub const TPI_FIFO0_ETM_bytecount_Pos = @as(c_uint, 24);
pub const TPI_FIFO0_ETM_bytecount_Msk = @as(c_ulong, 0x3) << TPI_FIFO0_ETM_bytecount_Pos;
pub const TPI_FIFO0_ETM2_Pos = @as(c_uint, 16);
pub const TPI_FIFO0_ETM2_Msk = @as(c_ulong, 0xFF) << TPI_FIFO0_ETM2_Pos;
pub const TPI_FIFO0_ETM1_Pos = @as(c_uint, 8);
pub const TPI_FIFO0_ETM1_Msk = @as(c_ulong, 0xFF) << TPI_FIFO0_ETM1_Pos;
pub const TPI_FIFO0_ETM0_Pos = @as(c_uint, 0);
pub const TPI_FIFO0_ETM0_Msk = @as(c_ulong, 0xFF);
pub const TPI_ITATBCTR2_ATREADY2_Pos = @as(c_uint, 0);
pub const TPI_ITATBCTR2_ATREADY2_Msk = @as(c_ulong, 0x1);
pub const TPI_ITATBCTR2_ATREADY1_Pos = @as(c_uint, 0);
pub const TPI_ITATBCTR2_ATREADY1_Msk = @as(c_ulong, 0x1);
pub const TPI_FIFO1_ITM_ATVALID_Pos = @as(c_uint, 29);
pub const TPI_FIFO1_ITM_ATVALID_Msk = @as(c_ulong, 0x1) << TPI_FIFO1_ITM_ATVALID_Pos;
pub const TPI_FIFO1_ITM_bytecount_Pos = @as(c_uint, 27);
pub const TPI_FIFO1_ITM_bytecount_Msk = @as(c_ulong, 0x3) << TPI_FIFO1_ITM_bytecount_Pos;
pub const TPI_FIFO1_ETM_ATVALID_Pos = @as(c_uint, 26);
pub const TPI_FIFO1_ETM_ATVALID_Msk = @as(c_ulong, 0x1) << TPI_FIFO1_ETM_ATVALID_Pos;
pub const TPI_FIFO1_ETM_bytecount_Pos = @as(c_uint, 24);
pub const TPI_FIFO1_ETM_bytecount_Msk = @as(c_ulong, 0x3) << TPI_FIFO1_ETM_bytecount_Pos;
pub const TPI_FIFO1_ITM2_Pos = @as(c_uint, 16);
pub const TPI_FIFO1_ITM2_Msk = @as(c_ulong, 0xFF) << TPI_FIFO1_ITM2_Pos;
pub const TPI_FIFO1_ITM1_Pos = @as(c_uint, 8);
pub const TPI_FIFO1_ITM1_Msk = @as(c_ulong, 0xFF) << TPI_FIFO1_ITM1_Pos;
pub const TPI_FIFO1_ITM0_Pos = @as(c_uint, 0);
pub const TPI_FIFO1_ITM0_Msk = @as(c_ulong, 0xFF);
pub const TPI_ITATBCTR0_ATREADY2_Pos = @as(c_uint, 0);
pub const TPI_ITATBCTR0_ATREADY2_Msk = @as(c_ulong, 0x1);
pub const TPI_ITATBCTR0_ATREADY1_Pos = @as(c_uint, 0);
pub const TPI_ITATBCTR0_ATREADY1_Msk = @as(c_ulong, 0x1);
pub const TPI_ITCTRL_Mode_Pos = @as(c_uint, 0);
pub const TPI_ITCTRL_Mode_Msk = @as(c_ulong, 0x3);
pub const TPI_DEVID_NRZVALID_Pos = @as(c_uint, 11);
pub const TPI_DEVID_NRZVALID_Msk = @as(c_ulong, 0x1) << TPI_DEVID_NRZVALID_Pos;
pub const TPI_DEVID_MANCVALID_Pos = @as(c_uint, 10);
pub const TPI_DEVID_MANCVALID_Msk = @as(c_ulong, 0x1) << TPI_DEVID_MANCVALID_Pos;
pub const TPI_DEVID_PTINVALID_Pos = @as(c_uint, 9);
pub const TPI_DEVID_PTINVALID_Msk = @as(c_ulong, 0x1) << TPI_DEVID_PTINVALID_Pos;
pub const TPI_DEVID_MinBufSz_Pos = @as(c_uint, 6);
pub const TPI_DEVID_MinBufSz_Msk = @as(c_ulong, 0x7) << TPI_DEVID_MinBufSz_Pos;
pub const TPI_DEVID_AsynClkIn_Pos = @as(c_uint, 5);
pub const TPI_DEVID_AsynClkIn_Msk = @as(c_ulong, 0x1) << TPI_DEVID_AsynClkIn_Pos;
pub const TPI_DEVID_NrTraceInput_Pos = @as(c_uint, 0);
pub const TPI_DEVID_NrTraceInput_Msk = @as(c_ulong, 0x1F);
pub const TPI_DEVTYPE_SubType_Pos = @as(c_uint, 4);
pub const TPI_DEVTYPE_SubType_Msk = @as(c_ulong, 0xF);
pub const TPI_DEVTYPE_MajorType_Pos = @as(c_uint, 0);
pub const TPI_DEVTYPE_MajorType_Msk = @as(c_ulong, 0xF) << TPI_DEVTYPE_MajorType_Pos;
pub const MPU_TYPE_RALIASES = @as(c_uint, 4);
pub const MPU_TYPE_IREGION_Pos = @as(c_uint, 16);
pub const MPU_TYPE_IREGION_Msk = @as(c_ulong, 0xFF) << MPU_TYPE_IREGION_Pos;
pub const MPU_TYPE_DREGION_Pos = @as(c_uint, 8);
pub const MPU_TYPE_DREGION_Msk = @as(c_ulong, 0xFF) << MPU_TYPE_DREGION_Pos;
pub const MPU_TYPE_SEPARATE_Pos = @as(c_uint, 0);
pub const MPU_TYPE_SEPARATE_Msk = @as(c_ulong, 1);
pub const MPU_CTRL_PRIVDEFENA_Pos = @as(c_uint, 2);
pub const MPU_CTRL_PRIVDEFENA_Msk = @as(c_ulong, 1) << MPU_CTRL_PRIVDEFENA_Pos;
pub const MPU_CTRL_HFNMIENA_Pos = @as(c_uint, 1);
pub const MPU_CTRL_HFNMIENA_Msk = @as(c_ulong, 1) << MPU_CTRL_HFNMIENA_Pos;
pub const MPU_CTRL_ENABLE_Pos = @as(c_uint, 0);
pub const MPU_CTRL_ENABLE_Msk = @as(c_ulong, 1);
pub const MPU_RNR_REGION_Pos = @as(c_uint, 0);
pub const MPU_RNR_REGION_Msk = @as(c_ulong, 0xFF);
pub const MPU_RBAR_ADDR_Pos = @as(c_uint, 5);
pub const MPU_RBAR_ADDR_Msk = @as(c_ulong, 0x7FFFFFF) << MPU_RBAR_ADDR_Pos;
pub const MPU_RBAR_VALID_Pos = @as(c_uint, 4);
pub const MPU_RBAR_VALID_Msk = @as(c_ulong, 1) << MPU_RBAR_VALID_Pos;
pub const MPU_RBAR_REGION_Pos = @as(c_uint, 0);
pub const MPU_RBAR_REGION_Msk = @as(c_ulong, 0xF);
pub const MPU_RASR_ATTRS_Pos = @as(c_uint, 16);
pub const MPU_RASR_ATTRS_Msk = @as(c_ulong, 0xFFFF) << MPU_RASR_ATTRS_Pos;
pub const MPU_RASR_XN_Pos = @as(c_uint, 28);
pub const MPU_RASR_XN_Msk = @as(c_ulong, 1) << MPU_RASR_XN_Pos;
pub const MPU_RASR_AP_Pos = @as(c_uint, 24);
pub const MPU_RASR_AP_Msk = @as(c_ulong, 0x7) << MPU_RASR_AP_Pos;
pub const MPU_RASR_TEX_Pos = @as(c_uint, 19);
pub const MPU_RASR_TEX_Msk = @as(c_ulong, 0x7) << MPU_RASR_TEX_Pos;
pub const MPU_RASR_S_Pos = @as(c_uint, 18);
pub const MPU_RASR_S_Msk = @as(c_ulong, 1) << MPU_RASR_S_Pos;
pub const MPU_RASR_C_Pos = @as(c_uint, 17);
pub const MPU_RASR_C_Msk = @as(c_ulong, 1) << MPU_RASR_C_Pos;
pub const MPU_RASR_B_Pos = @as(c_uint, 16);
pub const MPU_RASR_B_Msk = @as(c_ulong, 1) << MPU_RASR_B_Pos;
pub const MPU_RASR_SRD_Pos = @as(c_uint, 8);
pub const MPU_RASR_SRD_Msk = @as(c_ulong, 0xFF) << MPU_RASR_SRD_Pos;
pub const MPU_RASR_SIZE_Pos = @as(c_uint, 1);
pub const MPU_RASR_SIZE_Msk = @as(c_ulong, 0x1F) << MPU_RASR_SIZE_Pos;
pub const MPU_RASR_ENABLE_Pos = @as(c_uint, 0);
pub const MPU_RASR_ENABLE_Msk = @as(c_ulong, 1);
pub const FPU_FPCCR_ASPEN_Pos = @as(c_uint, 31);
pub const FPU_FPCCR_ASPEN_Msk = @as(c_ulong, 1) << FPU_FPCCR_ASPEN_Pos;
pub const FPU_FPCCR_LSPEN_Pos = @as(c_uint, 30);
pub const FPU_FPCCR_LSPEN_Msk = @as(c_ulong, 1) << FPU_FPCCR_LSPEN_Pos;
pub const FPU_FPCCR_MONRDY_Pos = @as(c_uint, 8);
pub const FPU_FPCCR_MONRDY_Msk = @as(c_ulong, 1) << FPU_FPCCR_MONRDY_Pos;
pub const FPU_FPCCR_BFRDY_Pos = @as(c_uint, 6);
pub const FPU_FPCCR_BFRDY_Msk = @as(c_ulong, 1) << FPU_FPCCR_BFRDY_Pos;
pub const FPU_FPCCR_MMRDY_Pos = @as(c_uint, 5);
pub const FPU_FPCCR_MMRDY_Msk = @as(c_ulong, 1) << FPU_FPCCR_MMRDY_Pos;
pub const FPU_FPCCR_HFRDY_Pos = @as(c_uint, 4);
pub const FPU_FPCCR_HFRDY_Msk = @as(c_ulong, 1) << FPU_FPCCR_HFRDY_Pos;
pub const FPU_FPCCR_THREAD_Pos = @as(c_uint, 3);
pub const FPU_FPCCR_THREAD_Msk = @as(c_ulong, 1) << FPU_FPCCR_THREAD_Pos;
pub const FPU_FPCCR_USER_Pos = @as(c_uint, 1);
pub const FPU_FPCCR_USER_Msk = @as(c_ulong, 1) << FPU_FPCCR_USER_Pos;
pub const FPU_FPCCR_LSPACT_Pos = @as(c_uint, 0);
pub const FPU_FPCCR_LSPACT_Msk = @as(c_ulong, 1);
pub const FPU_FPCAR_ADDRESS_Pos = @as(c_uint, 3);
pub const FPU_FPCAR_ADDRESS_Msk = @as(c_ulong, 0x1FFFFFFF) << FPU_FPCAR_ADDRESS_Pos;
pub const FPU_FPDSCR_AHP_Pos = @as(c_uint, 26);
pub const FPU_FPDSCR_AHP_Msk = @as(c_ulong, 1) << FPU_FPDSCR_AHP_Pos;
pub const FPU_FPDSCR_DN_Pos = @as(c_uint, 25);
pub const FPU_FPDSCR_DN_Msk = @as(c_ulong, 1) << FPU_FPDSCR_DN_Pos;
pub const FPU_FPDSCR_FZ_Pos = @as(c_uint, 24);
pub const FPU_FPDSCR_FZ_Msk = @as(c_ulong, 1) << FPU_FPDSCR_FZ_Pos;
pub const FPU_FPDSCR_RMode_Pos = @as(c_uint, 22);
pub const FPU_FPDSCR_RMode_Msk = @as(c_ulong, 3) << FPU_FPDSCR_RMode_Pos;
pub const FPU_MVFR0_FP_rounding_modes_Pos = @as(c_uint, 28);
pub const FPU_MVFR0_FP_rounding_modes_Msk = @as(c_ulong, 0xF) << FPU_MVFR0_FP_rounding_modes_Pos;
pub const FPU_MVFR0_Short_vectors_Pos = @as(c_uint, 24);
pub const FPU_MVFR0_Short_vectors_Msk = @as(c_ulong, 0xF) << FPU_MVFR0_Short_vectors_Pos;
pub const FPU_MVFR0_Square_root_Pos = @as(c_uint, 20);
pub const FPU_MVFR0_Square_root_Msk = @as(c_ulong, 0xF) << FPU_MVFR0_Square_root_Pos;
pub const FPU_MVFR0_Divide_Pos = @as(c_uint, 16);
pub const FPU_MVFR0_Divide_Msk = @as(c_ulong, 0xF) << FPU_MVFR0_Divide_Pos;
pub const FPU_MVFR0_FP_excep_trapping_Pos = @as(c_uint, 12);
pub const FPU_MVFR0_FP_excep_trapping_Msk = @as(c_ulong, 0xF) << FPU_MVFR0_FP_excep_trapping_Pos;
pub const FPU_MVFR0_Double_precision_Pos = @as(c_uint, 8);
pub const FPU_MVFR0_Double_precision_Msk = @as(c_ulong, 0xF) << FPU_MVFR0_Double_precision_Pos;
pub const FPU_MVFR0_Single_precision_Pos = @as(c_uint, 4);
pub const FPU_MVFR0_Single_precision_Msk = @as(c_ulong, 0xF) << FPU_MVFR0_Single_precision_Pos;
pub const FPU_MVFR0_A_SIMD_registers_Pos = @as(c_uint, 0);
pub const FPU_MVFR0_A_SIMD_registers_Msk = @as(c_ulong, 0xF);
pub const FPU_MVFR1_FP_fused_MAC_Pos = @as(c_uint, 28);
pub const FPU_MVFR1_FP_fused_MAC_Msk = @as(c_ulong, 0xF) << FPU_MVFR1_FP_fused_MAC_Pos;
pub const FPU_MVFR1_FP_HPFP_Pos = @as(c_uint, 24);
pub const FPU_MVFR1_FP_HPFP_Msk = @as(c_ulong, 0xF) << FPU_MVFR1_FP_HPFP_Pos;
pub const FPU_MVFR1_D_NaN_mode_Pos = @as(c_uint, 4);
pub const FPU_MVFR1_D_NaN_mode_Msk = @as(c_ulong, 0xF) << FPU_MVFR1_D_NaN_mode_Pos;
pub const FPU_MVFR1_FtZ_mode_Pos = @as(c_uint, 0);
pub const FPU_MVFR1_FtZ_mode_Msk = @as(c_ulong, 0xF);
pub const FPU_MVFR2_VFP_Misc_Pos = @as(c_uint, 4);
pub const FPU_MVFR2_VFP_Misc_Msk = @as(c_ulong, 0xF) << FPU_MVFR2_VFP_Misc_Pos;
pub const CoreDebug_DHCSR_DBGKEY_Pos = @as(c_uint, 16);
pub const CoreDebug_DHCSR_DBGKEY_Msk = @as(c_ulong, 0xFFFF) << CoreDebug_DHCSR_DBGKEY_Pos;
pub const CoreDebug_DHCSR_S_RESET_ST_Pos = @as(c_uint, 25);
pub const CoreDebug_DHCSR_S_RESET_ST_Msk = @as(c_ulong, 1) << CoreDebug_DHCSR_S_RESET_ST_Pos;
pub const CoreDebug_DHCSR_S_RETIRE_ST_Pos = @as(c_uint, 24);
pub const CoreDebug_DHCSR_S_RETIRE_ST_Msk = @as(c_ulong, 1) << CoreDebug_DHCSR_S_RETIRE_ST_Pos;
pub const CoreDebug_DHCSR_S_LOCKUP_Pos = @as(c_uint, 19);
pub const CoreDebug_DHCSR_S_LOCKUP_Msk = @as(c_ulong, 1) << CoreDebug_DHCSR_S_LOCKUP_Pos;
pub const CoreDebug_DHCSR_S_SLEEP_Pos = @as(c_uint, 18);
pub const CoreDebug_DHCSR_S_SLEEP_Msk = @as(c_ulong, 1) << CoreDebug_DHCSR_S_SLEEP_Pos;
pub const CoreDebug_DHCSR_S_HALT_Pos = @as(c_uint, 17);
pub const CoreDebug_DHCSR_S_HALT_Msk = @as(c_ulong, 1) << CoreDebug_DHCSR_S_HALT_Pos;
pub const CoreDebug_DHCSR_S_REGRDY_Pos = @as(c_uint, 16);
pub const CoreDebug_DHCSR_S_REGRDY_Msk = @as(c_ulong, 1) << CoreDebug_DHCSR_S_REGRDY_Pos;
pub const CoreDebug_DHCSR_C_SNAPSTALL_Pos = @as(c_uint, 5);
pub const CoreDebug_DHCSR_C_SNAPSTALL_Msk = @as(c_ulong, 1) << CoreDebug_DHCSR_C_SNAPSTALL_Pos;
pub const CoreDebug_DHCSR_C_MASKINTS_Pos = @as(c_uint, 3);
pub const CoreDebug_DHCSR_C_MASKINTS_Msk = @as(c_ulong, 1) << CoreDebug_DHCSR_C_MASKINTS_Pos;
pub const CoreDebug_DHCSR_C_STEP_Pos = @as(c_uint, 2);
pub const CoreDebug_DHCSR_C_STEP_Msk = @as(c_ulong, 1) << CoreDebug_DHCSR_C_STEP_Pos;
pub const CoreDebug_DHCSR_C_HALT_Pos = @as(c_uint, 1);
pub const CoreDebug_DHCSR_C_HALT_Msk = @as(c_ulong, 1) << CoreDebug_DHCSR_C_HALT_Pos;
pub const CoreDebug_DHCSR_C_DEBUGEN_Pos = @as(c_uint, 0);
pub const CoreDebug_DHCSR_C_DEBUGEN_Msk = @as(c_ulong, 1);
pub const CoreDebug_DCRSR_REGWnR_Pos = @as(c_uint, 16);
pub const CoreDebug_DCRSR_REGWnR_Msk = @as(c_ulong, 1) << CoreDebug_DCRSR_REGWnR_Pos;
pub const CoreDebug_DCRSR_REGSEL_Pos = @as(c_uint, 0);
pub const CoreDebug_DCRSR_REGSEL_Msk = @as(c_ulong, 0x1F);
pub const CoreDebug_DEMCR_TRCENA_Pos = @as(c_uint, 24);
pub const CoreDebug_DEMCR_TRCENA_Msk = @as(c_ulong, 1) << CoreDebug_DEMCR_TRCENA_Pos;
pub const CoreDebug_DEMCR_MON_REQ_Pos = @as(c_uint, 19);
pub const CoreDebug_DEMCR_MON_REQ_Msk = @as(c_ulong, 1) << CoreDebug_DEMCR_MON_REQ_Pos;
pub const CoreDebug_DEMCR_MON_STEP_Pos = @as(c_uint, 18);
pub const CoreDebug_DEMCR_MON_STEP_Msk = @as(c_ulong, 1) << CoreDebug_DEMCR_MON_STEP_Pos;
pub const CoreDebug_DEMCR_MON_PEND_Pos = @as(c_uint, 17);
pub const CoreDebug_DEMCR_MON_PEND_Msk = @as(c_ulong, 1) << CoreDebug_DEMCR_MON_PEND_Pos;
pub const CoreDebug_DEMCR_MON_EN_Pos = @as(c_uint, 16);
pub const CoreDebug_DEMCR_MON_EN_Msk = @as(c_ulong, 1) << CoreDebug_DEMCR_MON_EN_Pos;
pub const CoreDebug_DEMCR_VC_HARDERR_Pos = @as(c_uint, 10);
pub const CoreDebug_DEMCR_VC_HARDERR_Msk = @as(c_ulong, 1) << CoreDebug_DEMCR_VC_HARDERR_Pos;
pub const CoreDebug_DEMCR_VC_INTERR_Pos = @as(c_uint, 9);
pub const CoreDebug_DEMCR_VC_INTERR_Msk = @as(c_ulong, 1) << CoreDebug_DEMCR_VC_INTERR_Pos;
pub const CoreDebug_DEMCR_VC_BUSERR_Pos = @as(c_uint, 8);
pub const CoreDebug_DEMCR_VC_BUSERR_Msk = @as(c_ulong, 1) << CoreDebug_DEMCR_VC_BUSERR_Pos;
pub const CoreDebug_DEMCR_VC_STATERR_Pos = @as(c_uint, 7);
pub const CoreDebug_DEMCR_VC_STATERR_Msk = @as(c_ulong, 1) << CoreDebug_DEMCR_VC_STATERR_Pos;
pub const CoreDebug_DEMCR_VC_CHKERR_Pos = @as(c_uint, 6);
pub const CoreDebug_DEMCR_VC_CHKERR_Msk = @as(c_ulong, 1) << CoreDebug_DEMCR_VC_CHKERR_Pos;
pub const CoreDebug_DEMCR_VC_NOCPERR_Pos = @as(c_uint, 5);
pub const CoreDebug_DEMCR_VC_NOCPERR_Msk = @as(c_ulong, 1) << CoreDebug_DEMCR_VC_NOCPERR_Pos;
pub const CoreDebug_DEMCR_VC_MMERR_Pos = @as(c_uint, 4);
pub const CoreDebug_DEMCR_VC_MMERR_Msk = @as(c_ulong, 1) << CoreDebug_DEMCR_VC_MMERR_Pos;
pub const CoreDebug_DEMCR_VC_CORERESET_Pos = @as(c_uint, 0);
pub const CoreDebug_DEMCR_VC_CORERESET_Msk = @as(c_ulong, 1);
pub const SCS_BASE = @as(c_ulong, 0xE000E000);
pub const ITM_BASE = @as(c_ulong, 0xE0000000);
pub const DWT_BASE = @as(c_ulong, 0xE0001000);
pub const TPI_BASE = @as(c_ulong, 0xE0040000);
pub const CoreDebug_BASE = @as(c_ulong, 0xE000EDF0);
pub const SysTick_BASE = SCS_BASE + @as(c_ulong, 0x0010);
pub const NVIC_BASE = SCS_BASE + @as(c_ulong, 0x0100);
pub const SCB_BASE = SCS_BASE + @as(c_ulong, 0x0D00);
pub const SCnSCB = (@import("std").meta.cast([*c]SCnSCB_Type, SCS_BASE));
pub const SCB = (@import("std").meta.cast([*c]SCB_Type, SCB_BASE));
pub const SysTick = (@import("std").meta.cast([*c]SysTick_Type, SysTick_BASE));
pub const NVIC = (@import("std").meta.cast([*c]NVIC_Type, NVIC_BASE));
pub const ITM = (@import("std").meta.cast([*c]ITM_Type, ITM_BASE));
pub const DWT = (@import("std").meta.cast([*c]DWT_Type, DWT_BASE));
pub const TPI = (@import("std").meta.cast([*c]TPI_Type, TPI_BASE));
pub const CoreDebug = (@import("std").meta.cast([*c]CoreDebug_Type, CoreDebug_BASE));
pub const MPU_BASE = SCS_BASE + @as(c_ulong, 0x0D90);
pub const MPU = (@import("std").meta.cast([*c]MPU_Type, MPU_BASE));
pub const FPU_BASE = SCS_BASE + @as(c_ulong, 0x0F30);
pub const FPU = (@import("std").meta.cast([*c]FPU_Type, FPU_BASE));
pub const NVIC_SetPriorityGrouping = __NVIC_SetPriorityGrouping;
pub const NVIC_GetPriorityGrouping = __NVIC_GetPriorityGrouping;
pub const NVIC_EnableIRQ = __NVIC_EnableIRQ;
pub const NVIC_GetEnableIRQ = __NVIC_GetEnableIRQ;
pub const NVIC_DisableIRQ = __NVIC_DisableIRQ;
pub const NVIC_GetPendingIRQ = __NVIC_GetPendingIRQ;
pub const NVIC_SetPendingIRQ = __NVIC_SetPendingIRQ;
pub const NVIC_ClearPendingIRQ = __NVIC_ClearPendingIRQ;
pub const NVIC_GetActive = __NVIC_GetActive;
pub const NVIC_SetPriority = __NVIC_SetPriority;
pub const NVIC_GetPriority = __NVIC_GetPriority;
pub const NVIC_SystemReset = __NVIC_SystemReset;
pub const NVIC_SetVector = __NVIC_SetVector;
pub const NVIC_GetVector = __NVIC_GetVector;
pub const NVIC_USER_IRQ_OFFSET = 16;
pub const EXC_RETURN_HANDLER = @as(c_ulong, 0xFFFFFFF1);
pub const EXC_RETURN_THREAD_MSP = @as(c_ulong, 0xFFFFFFF9);
pub const EXC_RETURN_THREAD_PSP = @as(c_ulong, 0xFFFFFFFD);
pub const EXC_RETURN_HANDLER_FPU = @as(c_ulong, 0xFFFFFFE1);
pub const EXC_RETURN_THREAD_MSP_FPU = @as(c_ulong, 0xFFFFFFE9);
pub const EXC_RETURN_THREAD_PSP_FPU = @as(c_ulong, 0xFFFFFFED);
pub const ARM_MPU_REGION_SIZE_32B = (@import("std").meta.cast(u8, @as(c_uint, 0x04)));
pub const ARM_MPU_REGION_SIZE_64B = (@import("std").meta.cast(u8, @as(c_uint, 0x05)));
pub const ARM_MPU_REGION_SIZE_128B = (@import("std").meta.cast(u8, @as(c_uint, 0x06)));
pub const ARM_MPU_REGION_SIZE_256B = (@import("std").meta.cast(u8, @as(c_uint, 0x07)));
pub const ARM_MPU_REGION_SIZE_512B = (@import("std").meta.cast(u8, @as(c_uint, 0x08)));
pub const ARM_MPU_REGION_SIZE_1KB = (@import("std").meta.cast(u8, @as(c_uint, 0x09)));
pub const ARM_MPU_REGION_SIZE_2KB = (@import("std").meta.cast(u8, @as(c_uint, 0x0A)));
pub const ARM_MPU_REGION_SIZE_4KB = (@import("std").meta.cast(u8, @as(c_uint, 0x0B)));
pub const ARM_MPU_REGION_SIZE_8KB = (@import("std").meta.cast(u8, @as(c_uint, 0x0C)));
pub const ARM_MPU_REGION_SIZE_16KB = (@import("std").meta.cast(u8, @as(c_uint, 0x0D)));
pub const ARM_MPU_REGION_SIZE_32KB = (@import("std").meta.cast(u8, @as(c_uint, 0x0E)));
pub const ARM_MPU_REGION_SIZE_64KB = (@import("std").meta.cast(u8, @as(c_uint, 0x0F)));
pub const ARM_MPU_REGION_SIZE_128KB = (@import("std").meta.cast(u8, @as(c_uint, 0x10)));
pub const ARM_MPU_REGION_SIZE_256KB = (@import("std").meta.cast(u8, @as(c_uint, 0x11)));
pub const ARM_MPU_REGION_SIZE_512KB = (@import("std").meta.cast(u8, @as(c_uint, 0x12)));
pub const ARM_MPU_REGION_SIZE_1MB = (@import("std").meta.cast(u8, @as(c_uint, 0x13)));
pub const ARM_MPU_REGION_SIZE_2MB = (@import("std").meta.cast(u8, @as(c_uint, 0x14)));
pub const ARM_MPU_REGION_SIZE_4MB = (@import("std").meta.cast(u8, @as(c_uint, 0x15)));
pub const ARM_MPU_REGION_SIZE_8MB = (@import("std").meta.cast(u8, @as(c_uint, 0x16)));
pub const ARM_MPU_REGION_SIZE_16MB = (@import("std").meta.cast(u8, @as(c_uint, 0x17)));
pub const ARM_MPU_REGION_SIZE_32MB = (@import("std").meta.cast(u8, @as(c_uint, 0x18)));
pub const ARM_MPU_REGION_SIZE_64MB = (@import("std").meta.cast(u8, @as(c_uint, 0x19)));
pub const ARM_MPU_REGION_SIZE_128MB = (@import("std").meta.cast(u8, @as(c_uint, 0x1A)));
pub const ARM_MPU_REGION_SIZE_256MB = (@import("std").meta.cast(u8, @as(c_uint, 0x1B)));
pub const ARM_MPU_REGION_SIZE_512MB = (@import("std").meta.cast(u8, @as(c_uint, 0x1C)));
pub const ARM_MPU_REGION_SIZE_1GB = (@import("std").meta.cast(u8, @as(c_uint, 0x1D)));
pub const ARM_MPU_REGION_SIZE_2GB = (@import("std").meta.cast(u8, @as(c_uint, 0x1E)));
pub const ARM_MPU_REGION_SIZE_4GB = (@import("std").meta.cast(u8, @as(c_uint, 0x1F)));
pub const ARM_MPU_AP_NONE = @as(c_uint, 0);
pub const ARM_MPU_AP_PRIV = @as(c_uint, 1);
pub const ARM_MPU_AP_URO = @as(c_uint, 2);
pub const ARM_MPU_AP_FULL = @as(c_uint, 3);
pub const ARM_MPU_AP_PRO = @as(c_uint, 5);
pub const ARM_MPU_AP_RO = @as(c_uint, 6);
pub inline fn ARM_MPU_RBAR(Region: anytype, BaseAddress: anytype) @TypeOf(((BaseAddress & MPU_RBAR_ADDR_Msk) | (Region & MPU_RBAR_REGION_Msk)) | MPU_RBAR_VALID_Msk) {
    return ((BaseAddress & MPU_RBAR_ADDR_Msk) | (Region & MPU_RBAR_REGION_Msk)) | MPU_RBAR_VALID_Msk;
}
pub inline fn ARM_MPU_ACCESS_(TypeExtField: anytype, IsShareable: anytype, IsCacheable: anytype, IsBufferable: anytype) @TypeOf(((((TypeExtField << MPU_RASR_TEX_Pos) & MPU_RASR_TEX_Msk) | ((IsShareable << MPU_RASR_S_Pos) & MPU_RASR_S_Msk)) | ((IsCacheable << MPU_RASR_C_Pos) & MPU_RASR_C_Msk)) | ((IsBufferable << MPU_RASR_B_Pos) & MPU_RASR_B_Msk)) {
    return ((((TypeExtField << MPU_RASR_TEX_Pos) & MPU_RASR_TEX_Msk) | ((IsShareable << MPU_RASR_S_Pos) & MPU_RASR_S_Msk)) | ((IsCacheable << MPU_RASR_C_Pos) & MPU_RASR_C_Msk)) | ((IsBufferable << MPU_RASR_B_Pos) & MPU_RASR_B_Msk);
}
pub inline fn ARM_MPU_RASR_EX(DisableExec: anytype, AccessPermission: anytype, AccessAttributes: anytype, SubRegionDisable: anytype, Size: anytype) @TypeOf(((((((DisableExec << MPU_RASR_XN_Pos) & MPU_RASR_XN_Msk) | ((AccessPermission << MPU_RASR_AP_Pos) & MPU_RASR_AP_Msk)) | (AccessAttributes & (((MPU_RASR_TEX_Msk | MPU_RASR_S_Msk) | MPU_RASR_C_Msk) | MPU_RASR_B_Msk))) | ((SubRegionDisable << MPU_RASR_SRD_Pos) & MPU_RASR_SRD_Msk)) | ((Size << MPU_RASR_SIZE_Pos) & MPU_RASR_SIZE_Msk)) | MPU_RASR_ENABLE_Msk) {
    return ((((((DisableExec << MPU_RASR_XN_Pos) & MPU_RASR_XN_Msk) | ((AccessPermission << MPU_RASR_AP_Pos) & MPU_RASR_AP_Msk)) | (AccessAttributes & (((MPU_RASR_TEX_Msk | MPU_RASR_S_Msk) | MPU_RASR_C_Msk) | MPU_RASR_B_Msk))) | ((SubRegionDisable << MPU_RASR_SRD_Pos) & MPU_RASR_SRD_Msk)) | ((Size << MPU_RASR_SIZE_Pos) & MPU_RASR_SIZE_Msk)) | MPU_RASR_ENABLE_Msk;
}
pub inline fn ARM_MPU_RASR(DisableExec: anytype, AccessPermission: anytype, TypeExtField: anytype, IsShareable: anytype, IsCacheable: anytype, IsBufferable: anytype, SubRegionDisable: anytype, Size: anytype) @TypeOf(ARM_MPU_RASR_EX(DisableExec, AccessPermission, ARM_MPU_ACCESS_(TypeExtField, IsShareable, IsCacheable, IsBufferable), SubRegionDisable, Size)) {
    return ARM_MPU_RASR_EX(DisableExec, AccessPermission, ARM_MPU_ACCESS_(TypeExtField, IsShareable, IsCacheable, IsBufferable), SubRegionDisable, Size);
}
pub const ARM_MPU_ACCESS_ORDERED = ARM_MPU_ACCESS_(@as(c_uint, 0), @as(c_uint, 1), @as(c_uint, 0), @as(c_uint, 0));
pub inline fn ARM_MPU_ACCESS_DEVICE(IsShareable: anytype) @TypeOf(if (IsShareable) ARM_MPU_ACCESS_(@as(c_uint, 0), @as(c_uint, 1), @as(c_uint, 0), @as(c_uint, 1)) else ARM_MPU_ACCESS_(@as(c_uint, 2), @as(c_uint, 0), @as(c_uint, 0), @as(c_uint, 0))) {
    return if (IsShareable) ARM_MPU_ACCESS_(@as(c_uint, 0), @as(c_uint, 1), @as(c_uint, 0), @as(c_uint, 1)) else ARM_MPU_ACCESS_(@as(c_uint, 2), @as(c_uint, 0), @as(c_uint, 0), @as(c_uint, 0));
}
pub inline fn ARM_MPU_ACCESS_NORMAL(OuterCp: anytype, InnerCp: anytype, IsShareable: anytype) @TypeOf(ARM_MPU_ACCESS_(@as(c_uint, 4) | OuterCp, IsShareable, InnerCp & @as(c_uint, 2), InnerCp & @as(c_uint, 1))) {
    return ARM_MPU_ACCESS_(@as(c_uint, 4) | OuterCp, IsShareable, InnerCp & @as(c_uint, 2), InnerCp & @as(c_uint, 1));
}
pub const ARM_MPU_CACHEP_NOCACHE = @as(c_uint, 0);
pub const ARM_MPU_CACHEP_WB_WRA = @as(c_uint, 1);
pub const ARM_MPU_CACHEP_WT_NWA = @as(c_uint, 2);
pub const ARM_MPU_CACHEP_WB_NWA = @as(c_uint, 3);
pub const ITM_RXBUFFER_EMPTY = (@import("std").meta.cast(i32, @as(c_uint, 0x5AA55AA5)));
pub const NRF_FICR_BASE = @as(c_ulong, 0x10000000);
pub const NRF_UICR_BASE = @as(c_ulong, 0x10001000);
pub const NRF_CLOCK_BASE = @as(c_ulong, 0x40000000);
pub const NRF_POWER_BASE = @as(c_ulong, 0x40000000);
pub const NRF_P0_BASE = @as(c_ulong, 0x50000000);
pub const NRF_P1_BASE = @as(c_ulong, 0x50000300);
pub const NRF_RADIO_BASE = @as(c_ulong, 0x40001000);
pub const NRF_UART0_BASE = @as(c_ulong, 0x40002000);
pub const NRF_UARTE0_BASE = @as(c_ulong, 0x40002000);
pub const NRF_SPI0_BASE = @as(c_ulong, 0x40003000);
pub const NRF_SPIM0_BASE = @as(c_ulong, 0x40003000);
pub const NRF_SPIS0_BASE = @as(c_ulong, 0x40003000);
pub const NRF_TWI0_BASE = @as(c_ulong, 0x40003000);
pub const NRF_TWIM0_BASE = @as(c_ulong, 0x40003000);
pub const NRF_TWIS0_BASE = @as(c_ulong, 0x40003000);
pub const NRF_SPI1_BASE = @as(c_ulong, 0x40004000);
pub const NRF_SPIM1_BASE = @as(c_ulong, 0x40004000);
pub const NRF_SPIS1_BASE = @as(c_ulong, 0x40004000);
pub const NRF_TWI1_BASE = @as(c_ulong, 0x40004000);
pub const NRF_TWIM1_BASE = @as(c_ulong, 0x40004000);
pub const NRF_TWIS1_BASE = @as(c_ulong, 0x40004000);
pub const NRF_NFCT_BASE = @as(c_ulong, 0x40005000);
pub const NRF_GPIOTE_BASE = @as(c_ulong, 0x40006000);
pub const NRF_SAADC_BASE = @as(c_ulong, 0x40007000);
pub const NRF_TIMER0_BASE = @as(c_ulong, 0x40008000);
pub const NRF_TIMER1_BASE = @as(c_ulong, 0x40009000);
pub const NRF_TIMER2_BASE = @as(c_ulong, 0x4000A000);
pub const NRF_RTC0_BASE = @as(c_ulong, 0x4000B000);
pub const NRF_TEMP_BASE = @as(c_ulong, 0x4000C000);
pub const NRF_RNG_BASE = @as(c_ulong, 0x4000D000);
pub const NRF_ECB_BASE = @as(c_ulong, 0x4000E000);
pub const NRF_AAR_BASE = @as(c_ulong, 0x4000F000);
pub const NRF_CCM_BASE = @as(c_ulong, 0x4000F000);
pub const NRF_WDT_BASE = @as(c_ulong, 0x40010000);
pub const NRF_RTC1_BASE = @as(c_ulong, 0x40011000);
pub const NRF_QDEC_BASE = @as(c_ulong, 0x40012000);
pub const NRF_COMP_BASE = @as(c_ulong, 0x40013000);
pub const NRF_LPCOMP_BASE = @as(c_ulong, 0x40013000);
pub const NRF_EGU0_BASE = @as(c_ulong, 0x40014000);
pub const NRF_SWI0_BASE = @as(c_ulong, 0x40014000);
pub const NRF_EGU1_BASE = @as(c_ulong, 0x40015000);
pub const NRF_SWI1_BASE = @as(c_ulong, 0x40015000);
pub const NRF_EGU2_BASE = @as(c_ulong, 0x40016000);
pub const NRF_SWI2_BASE = @as(c_ulong, 0x40016000);
pub const NRF_EGU3_BASE = @as(c_ulong, 0x40017000);
pub const NRF_SWI3_BASE = @as(c_ulong, 0x40017000);
pub const NRF_EGU4_BASE = @as(c_ulong, 0x40018000);
pub const NRF_SWI4_BASE = @as(c_ulong, 0x40018000);
pub const NRF_EGU5_BASE = @as(c_ulong, 0x40019000);
pub const NRF_SWI5_BASE = @as(c_ulong, 0x40019000);
pub const NRF_TIMER3_BASE = @as(c_ulong, 0x4001A000);
pub const NRF_TIMER4_BASE = @as(c_ulong, 0x4001B000);
pub const NRF_PWM0_BASE = @as(c_ulong, 0x4001C000);
pub const NRF_PDM_BASE = @as(c_ulong, 0x4001D000);
pub const NRF_ACL_BASE = @as(c_ulong, 0x4001E000);
pub const NRF_NVMC_BASE = @as(c_ulong, 0x4001E000);
pub const NRF_PPI_BASE = @as(c_ulong, 0x4001F000);
pub const NRF_MWU_BASE = @as(c_ulong, 0x40020000);
pub const NRF_PWM1_BASE = @as(c_ulong, 0x40021000);
pub const NRF_PWM2_BASE = @as(c_ulong, 0x40022000);
pub const NRF_SPI2_BASE = @as(c_ulong, 0x40023000);
pub const NRF_SPIM2_BASE = @as(c_ulong, 0x40023000);
pub const NRF_SPIS2_BASE = @as(c_ulong, 0x40023000);
pub const NRF_RTC2_BASE = @as(c_ulong, 0x40024000);
pub const NRF_I2S_BASE = @as(c_ulong, 0x40025000);
pub const NRF_FPU_BASE = @as(c_ulong, 0x40026000);
pub const NRF_USBD_BASE = @as(c_ulong, 0x40027000);
pub const NRF_UARTE1_BASE = @as(c_ulong, 0x40028000);
pub const NRF_QSPI_BASE = @as(c_ulong, 0x40029000);
pub const NRF_CC_HOST_RGF_BASE = @as(c_ulong, 0x5002A000);
pub const NRF_CRYPTOCELL_BASE = @as(c_ulong, 0x5002A000);
pub const NRF_PWM3_BASE = @as(c_ulong, 0x4002D000);
pub const NRF_SPIM3_BASE = @as(c_ulong, 0x4002F000);
pub const NRF_FICR = (@import("std").meta.cast([*c]NRF_FICR_Type, NRF_FICR_BASE));
pub const NRF_UICR = (@import("std").meta.cast([*c]NRF_UICR_Type, NRF_UICR_BASE));
pub const NRF_CLOCK = (@import("std").meta.cast([*c]NRF_CLOCK_Type, NRF_CLOCK_BASE));
pub const NRF_POWER = (@import("std").meta.cast([*c]NRF_POWER_Type, NRF_POWER_BASE));
pub const NRF_P0 = (@import("std").meta.cast([*c]NRF_GPIO_Type, NRF_P0_BASE));
pub const NRF_P1 = (@import("std").meta.cast([*c]NRF_GPIO_Type, NRF_P1_BASE));
pub const NRF_RADIO = (@import("std").meta.cast([*c]NRF_RADIO_Type, NRF_RADIO_BASE));
pub const NRF_UART0 = (@import("std").meta.cast([*c]NRF_UART_Type, NRF_UART0_BASE));
pub const NRF_UARTE0 = (@import("std").meta.cast([*c]NRF_UARTE_Type, NRF_UARTE0_BASE));
pub const NRF_SPI0 = (@import("std").meta.cast([*c]NRF_SPI_Type, NRF_SPI0_BASE));
pub const NRF_SPIM0 = (@import("std").meta.cast([*c]NRF_SPIM_Type, NRF_SPIM0_BASE));
pub const NRF_SPIS0 = (@import("std").meta.cast([*c]NRF_SPIS_Type, NRF_SPIS0_BASE));
pub const NRF_TWI0 = (@import("std").meta.cast([*c]NRF_TWI_Type, NRF_TWI0_BASE));
pub const NRF_TWIM0 = (@import("std").meta.cast([*c]NRF_TWIM_Type, NRF_TWIM0_BASE));
pub const NRF_TWIS0 = (@import("std").meta.cast([*c]NRF_TWIS_Type, NRF_TWIS0_BASE));
pub const NRF_SPI1 = (@import("std").meta.cast([*c]NRF_SPI_Type, NRF_SPI1_BASE));
pub const NRF_SPIM1 = (@import("std").meta.cast([*c]NRF_SPIM_Type, NRF_SPIM1_BASE));
pub const NRF_SPIS1 = (@import("std").meta.cast([*c]NRF_SPIS_Type, NRF_SPIS1_BASE));
pub const NRF_TWI1 = (@import("std").meta.cast([*c]NRF_TWI_Type, NRF_TWI1_BASE));
pub const NRF_TWIM1 = (@import("std").meta.cast([*c]NRF_TWIM_Type, NRF_TWIM1_BASE));
pub const NRF_TWIS1 = (@import("std").meta.cast([*c]NRF_TWIS_Type, NRF_TWIS1_BASE));
pub const NRF_NFCT = (@import("std").meta.cast([*c]NRF_NFCT_Type, NRF_NFCT_BASE));
pub const NRF_GPIOTE = (@import("std").meta.cast([*c]NRF_GPIOTE_Type, NRF_GPIOTE_BASE));
pub const NRF_SAADC = (@import("std").meta.cast([*c]NRF_SAADC_Type, NRF_SAADC_BASE));
pub const NRF_TIMER0 = (@import("std").meta.cast([*c]NRF_TIMER_Type, NRF_TIMER0_BASE));
pub const NRF_TIMER1 = (@import("std").meta.cast([*c]NRF_TIMER_Type, NRF_TIMER1_BASE));
pub const NRF_TIMER2 = (@import("std").meta.cast([*c]NRF_TIMER_Type, NRF_TIMER2_BASE));
pub const NRF_RTC0 = (@import("std").meta.cast([*c]NRF_RTC_Type, NRF_RTC0_BASE));
pub const NRF_TEMP = (@import("std").meta.cast([*c]NRF_TEMP_Type, NRF_TEMP_BASE));
pub const NRF_RNG = (@import("std").meta.cast([*c]NRF_RNG_Type, NRF_RNG_BASE));
pub const NRF_ECB = (@import("std").meta.cast([*c]NRF_ECB_Type, NRF_ECB_BASE));
pub const NRF_AAR = (@import("std").meta.cast([*c]NRF_AAR_Type, NRF_AAR_BASE));
pub const NRF_CCM = (@import("std").meta.cast([*c]NRF_CCM_Type, NRF_CCM_BASE));
pub const NRF_WDT = (@import("std").meta.cast([*c]NRF_WDT_Type, NRF_WDT_BASE));
pub const NRF_RTC1 = (@import("std").meta.cast([*c]NRF_RTC_Type, NRF_RTC1_BASE));
pub const NRF_QDEC = (@import("std").meta.cast([*c]NRF_QDEC_Type, NRF_QDEC_BASE));
pub const NRF_COMP = (@import("std").meta.cast([*c]NRF_COMP_Type, NRF_COMP_BASE));
pub const NRF_LPCOMP = (@import("std").meta.cast([*c]NRF_LPCOMP_Type, NRF_LPCOMP_BASE));
pub const NRF_EGU0 = (@import("std").meta.cast([*c]NRF_EGU_Type, NRF_EGU0_BASE));
pub const NRF_SWI0 = (@import("std").meta.cast([*c]NRF_SWI_Type, NRF_SWI0_BASE));
pub const NRF_EGU1 = (@import("std").meta.cast([*c]NRF_EGU_Type, NRF_EGU1_BASE));
pub const NRF_SWI1 = (@import("std").meta.cast([*c]NRF_SWI_Type, NRF_SWI1_BASE));
pub const NRF_EGU2 = (@import("std").meta.cast([*c]NRF_EGU_Type, NRF_EGU2_BASE));
pub const NRF_SWI2 = (@import("std").meta.cast([*c]NRF_SWI_Type, NRF_SWI2_BASE));
pub const NRF_EGU3 = (@import("std").meta.cast([*c]NRF_EGU_Type, NRF_EGU3_BASE));
pub const NRF_SWI3 = (@import("std").meta.cast([*c]NRF_SWI_Type, NRF_SWI3_BASE));
pub const NRF_EGU4 = (@import("std").meta.cast([*c]NRF_EGU_Type, NRF_EGU4_BASE));
pub const NRF_SWI4 = (@import("std").meta.cast([*c]NRF_SWI_Type, NRF_SWI4_BASE));
pub const NRF_EGU5 = (@import("std").meta.cast([*c]NRF_EGU_Type, NRF_EGU5_BASE));
pub const NRF_SWI5 = (@import("std").meta.cast([*c]NRF_SWI_Type, NRF_SWI5_BASE));
pub const NRF_TIMER3 = (@import("std").meta.cast([*c]NRF_TIMER_Type, NRF_TIMER3_BASE));
pub const NRF_TIMER4 = (@import("std").meta.cast([*c]NRF_TIMER_Type, NRF_TIMER4_BASE));
pub const NRF_PWM0 = (@import("std").meta.cast([*c]NRF_PWM_Type, NRF_PWM0_BASE));
pub const NRF_PDM = (@import("std").meta.cast([*c]NRF_PDM_Type, NRF_PDM_BASE));
pub const NRF_ACL = (@import("std").meta.cast([*c]NRF_ACL_Type, NRF_ACL_BASE));
pub const NRF_NVMC = (@import("std").meta.cast([*c]NRF_NVMC_Type, NRF_NVMC_BASE));
pub const NRF_PPI = (@import("std").meta.cast([*c]NRF_PPI_Type, NRF_PPI_BASE));
pub const NRF_MWU = (@import("std").meta.cast([*c]NRF_MWU_Type, NRF_MWU_BASE));
pub const NRF_PWM1 = (@import("std").meta.cast([*c]NRF_PWM_Type, NRF_PWM1_BASE));
pub const NRF_PWM2 = (@import("std").meta.cast([*c]NRF_PWM_Type, NRF_PWM2_BASE));
pub const NRF_SPI2 = (@import("std").meta.cast([*c]NRF_SPI_Type, NRF_SPI2_BASE));
pub const NRF_SPIM2 = (@import("std").meta.cast([*c]NRF_SPIM_Type, NRF_SPIM2_BASE));
pub const NRF_SPIS2 = (@import("std").meta.cast([*c]NRF_SPIS_Type, NRF_SPIS2_BASE));
pub const NRF_RTC2 = (@import("std").meta.cast([*c]NRF_RTC_Type, NRF_RTC2_BASE));
pub const NRF_I2S = (@import("std").meta.cast([*c]NRF_I2S_Type, NRF_I2S_BASE));
pub const NRF_FPU = (@import("std").meta.cast([*c]NRF_FPU_Type, NRF_FPU_BASE));
pub const NRF_USBD = (@import("std").meta.cast([*c]NRF_USBD_Type, NRF_USBD_BASE));
pub const NRF_UARTE1 = (@import("std").meta.cast([*c]NRF_UARTE_Type, NRF_UARTE1_BASE));
pub const NRF_QSPI = (@import("std").meta.cast([*c]NRF_QSPI_Type, NRF_QSPI_BASE));
pub const NRF_CC_HOST_RGF = (@import("std").meta.cast([*c]NRF_CC_HOST_RGF_Type, NRF_CC_HOST_RGF_BASE));
pub const NRF_CRYPTOCELL = (@import("std").meta.cast([*c]NRF_CRYPTOCELL_Type, NRF_CRYPTOCELL_BASE));
pub const NRF_PWM3 = (@import("std").meta.cast([*c]NRF_PWM_Type, NRF_PWM3_BASE));
pub const NRF_SPIM3 = (@import("std").meta.cast([*c]NRF_SPIM_Type, NRF_SPIM3_BASE));
pub const AAR_TASKS_START_TASKS_START_Pos = @as(c_ulong, 0);
pub const AAR_TASKS_START_TASKS_START_Msk = @as(c_ulong, 0x1) << AAR_TASKS_START_TASKS_START_Pos;
pub const AAR_TASKS_START_TASKS_START_Trigger = @as(c_ulong, 1);
pub const AAR_TASKS_STOP_TASKS_STOP_Pos = @as(c_ulong, 0);
pub const AAR_TASKS_STOP_TASKS_STOP_Msk = @as(c_ulong, 0x1) << AAR_TASKS_STOP_TASKS_STOP_Pos;
pub const AAR_TASKS_STOP_TASKS_STOP_Trigger = @as(c_ulong, 1);
pub const AAR_EVENTS_END_EVENTS_END_Pos = @as(c_ulong, 0);
pub const AAR_EVENTS_END_EVENTS_END_Msk = @as(c_ulong, 0x1) << AAR_EVENTS_END_EVENTS_END_Pos;
pub const AAR_EVENTS_END_EVENTS_END_NotGenerated = @as(c_ulong, 0);
pub const AAR_EVENTS_END_EVENTS_END_Generated = @as(c_ulong, 1);
pub const AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_Pos = @as(c_ulong, 0);
pub const AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_Msk = @as(c_ulong, 0x1) << AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_Pos;
pub const AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_NotGenerated = @as(c_ulong, 0);
pub const AAR_EVENTS_RESOLVED_EVENTS_RESOLVED_Generated = @as(c_ulong, 1);
pub const AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_Pos = @as(c_ulong, 0);
pub const AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_Msk = @as(c_ulong, 0x1) << AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_Pos;
pub const AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_NotGenerated = @as(c_ulong, 0);
pub const AAR_EVENTS_NOTRESOLVED_EVENTS_NOTRESOLVED_Generated = @as(c_ulong, 1);
pub const AAR_INTENSET_NOTRESOLVED_Pos = @as(c_ulong, 2);
pub const AAR_INTENSET_NOTRESOLVED_Msk = @as(c_ulong, 0x1) << AAR_INTENSET_NOTRESOLVED_Pos;
pub const AAR_INTENSET_NOTRESOLVED_Disabled = @as(c_ulong, 0);
pub const AAR_INTENSET_NOTRESOLVED_Enabled = @as(c_ulong, 1);
pub const AAR_INTENSET_NOTRESOLVED_Set = @as(c_ulong, 1);
pub const AAR_INTENSET_RESOLVED_Pos = @as(c_ulong, 1);
pub const AAR_INTENSET_RESOLVED_Msk = @as(c_ulong, 0x1) << AAR_INTENSET_RESOLVED_Pos;
pub const AAR_INTENSET_RESOLVED_Disabled = @as(c_ulong, 0);
pub const AAR_INTENSET_RESOLVED_Enabled = @as(c_ulong, 1);
pub const AAR_INTENSET_RESOLVED_Set = @as(c_ulong, 1);
pub const AAR_INTENSET_END_Pos = @as(c_ulong, 0);
pub const AAR_INTENSET_END_Msk = @as(c_ulong, 0x1) << AAR_INTENSET_END_Pos;
pub const AAR_INTENSET_END_Disabled = @as(c_ulong, 0);
pub const AAR_INTENSET_END_Enabled = @as(c_ulong, 1);
pub const AAR_INTENSET_END_Set = @as(c_ulong, 1);
pub const AAR_INTENCLR_NOTRESOLVED_Pos = @as(c_ulong, 2);
pub const AAR_INTENCLR_NOTRESOLVED_Msk = @as(c_ulong, 0x1) << AAR_INTENCLR_NOTRESOLVED_Pos;
pub const AAR_INTENCLR_NOTRESOLVED_Disabled = @as(c_ulong, 0);
pub const AAR_INTENCLR_NOTRESOLVED_Enabled = @as(c_ulong, 1);
pub const AAR_INTENCLR_NOTRESOLVED_Clear = @as(c_ulong, 1);
pub const AAR_INTENCLR_RESOLVED_Pos = @as(c_ulong, 1);
pub const AAR_INTENCLR_RESOLVED_Msk = @as(c_ulong, 0x1) << AAR_INTENCLR_RESOLVED_Pos;
pub const AAR_INTENCLR_RESOLVED_Disabled = @as(c_ulong, 0);
pub const AAR_INTENCLR_RESOLVED_Enabled = @as(c_ulong, 1);
pub const AAR_INTENCLR_RESOLVED_Clear = @as(c_ulong, 1);
pub const AAR_INTENCLR_END_Pos = @as(c_ulong, 0);
pub const AAR_INTENCLR_END_Msk = @as(c_ulong, 0x1) << AAR_INTENCLR_END_Pos;
pub const AAR_INTENCLR_END_Disabled = @as(c_ulong, 0);
pub const AAR_INTENCLR_END_Enabled = @as(c_ulong, 1);
pub const AAR_INTENCLR_END_Clear = @as(c_ulong, 1);
pub const AAR_STATUS_STATUS_Pos = @as(c_ulong, 0);
pub const AAR_STATUS_STATUS_Msk = @as(c_ulong, 0xF) << AAR_STATUS_STATUS_Pos;
pub const AAR_ENABLE_ENABLE_Pos = @as(c_ulong, 0);
pub const AAR_ENABLE_ENABLE_Msk = @as(c_ulong, 0x3) << AAR_ENABLE_ENABLE_Pos;
pub const AAR_ENABLE_ENABLE_Disabled = @as(c_ulong, 0);
pub const AAR_ENABLE_ENABLE_Enabled = @as(c_ulong, 3);
pub const AAR_NIRK_NIRK_Pos = @as(c_ulong, 0);
pub const AAR_NIRK_NIRK_Msk = @as(c_ulong, 0x1F) << AAR_NIRK_NIRK_Pos;
pub const AAR_IRKPTR_IRKPTR_Pos = @as(c_ulong, 0);
pub const AAR_IRKPTR_IRKPTR_Msk = @as(c_ulong, 0xFFFFFFFF) << AAR_IRKPTR_IRKPTR_Pos;
pub const AAR_ADDRPTR_ADDRPTR_Pos = @as(c_ulong, 0);
pub const AAR_ADDRPTR_ADDRPTR_Msk = @as(c_ulong, 0xFFFFFFFF) << AAR_ADDRPTR_ADDRPTR_Pos;
pub const AAR_SCRATCHPTR_SCRATCHPTR_Pos = @as(c_ulong, 0);
pub const AAR_SCRATCHPTR_SCRATCHPTR_Msk = @as(c_ulong, 0xFFFFFFFF) << AAR_SCRATCHPTR_SCRATCHPTR_Pos;
pub const ACL_ACL_ADDR_ADDR_Pos = @as(c_ulong, 0);
pub const ACL_ACL_ADDR_ADDR_Msk = @as(c_ulong, 0xFFFFFFFF) << ACL_ACL_ADDR_ADDR_Pos;
pub const ACL_ACL_SIZE_SIZE_Pos = @as(c_ulong, 0);
pub const ACL_ACL_SIZE_SIZE_Msk = @as(c_ulong, 0xFFFFFFFF) << ACL_ACL_SIZE_SIZE_Pos;
pub const ACL_ACL_PERM_READ_Pos = @as(c_ulong, 2);
pub const ACL_ACL_PERM_READ_Msk = @as(c_ulong, 0x1) << ACL_ACL_PERM_READ_Pos;
pub const ACL_ACL_PERM_READ_Enable = @as(c_ulong, 0);
pub const ACL_ACL_PERM_READ_Disable = @as(c_ulong, 1);
pub const ACL_ACL_PERM_WRITE_Pos = @as(c_ulong, 1);
pub const ACL_ACL_PERM_WRITE_Msk = @as(c_ulong, 0x1) << ACL_ACL_PERM_WRITE_Pos;
pub const ACL_ACL_PERM_WRITE_Enable = @as(c_ulong, 0);
pub const ACL_ACL_PERM_WRITE_Disable = @as(c_ulong, 1);
pub const CCM_TASKS_KSGEN_TASKS_KSGEN_Pos = @as(c_ulong, 0);
pub const CCM_TASKS_KSGEN_TASKS_KSGEN_Msk = @as(c_ulong, 0x1) << CCM_TASKS_KSGEN_TASKS_KSGEN_Pos;
pub const CCM_TASKS_KSGEN_TASKS_KSGEN_Trigger = @as(c_ulong, 1);
pub const CCM_TASKS_CRYPT_TASKS_CRYPT_Pos = @as(c_ulong, 0);
pub const CCM_TASKS_CRYPT_TASKS_CRYPT_Msk = @as(c_ulong, 0x1) << CCM_TASKS_CRYPT_TASKS_CRYPT_Pos;
pub const CCM_TASKS_CRYPT_TASKS_CRYPT_Trigger = @as(c_ulong, 1);
pub const CCM_TASKS_STOP_TASKS_STOP_Pos = @as(c_ulong, 0);
pub const CCM_TASKS_STOP_TASKS_STOP_Msk = @as(c_ulong, 0x1) << CCM_TASKS_STOP_TASKS_STOP_Pos;
pub const CCM_TASKS_STOP_TASKS_STOP_Trigger = @as(c_ulong, 1);
pub const CCM_TASKS_RATEOVERRIDE_TASKS_RATEOVERRIDE_Pos = @as(c_ulong, 0);
pub const CCM_TASKS_RATEOVERRIDE_TASKS_RATEOVERRIDE_Msk = @as(c_ulong, 0x1) << CCM_TASKS_RATEOVERRIDE_TASKS_RATEOVERRIDE_Pos;
pub const CCM_TASKS_RATEOVERRIDE_TASKS_RATEOVERRIDE_Trigger = @as(c_ulong, 1);
pub const CCM_EVENTS_ENDKSGEN_EVENTS_ENDKSGEN_Pos = @as(c_ulong, 0);
pub const CCM_EVENTS_ENDKSGEN_EVENTS_ENDKSGEN_Msk = @as(c_ulong, 0x1) << CCM_EVENTS_ENDKSGEN_EVENTS_ENDKSGEN_Pos;
pub const CCM_EVENTS_ENDKSGEN_EVENTS_ENDKSGEN_NotGenerated = @as(c_ulong, 0);
pub const CCM_EVENTS_ENDKSGEN_EVENTS_ENDKSGEN_Generated = @as(c_ulong, 1);
pub const CCM_EVENTS_ENDCRYPT_EVENTS_ENDCRYPT_Pos = @as(c_ulong, 0);
pub const CCM_EVENTS_ENDCRYPT_EVENTS_ENDCRYPT_Msk = @as(c_ulong, 0x1) << CCM_EVENTS_ENDCRYPT_EVENTS_ENDCRYPT_Pos;
pub const CCM_EVENTS_ENDCRYPT_EVENTS_ENDCRYPT_NotGenerated = @as(c_ulong, 0);
pub const CCM_EVENTS_ENDCRYPT_EVENTS_ENDCRYPT_Generated = @as(c_ulong, 1);
pub const CCM_EVENTS_ERROR_EVENTS_ERROR_Pos = @as(c_ulong, 0);
pub const CCM_EVENTS_ERROR_EVENTS_ERROR_Msk = @as(c_ulong, 0x1) << CCM_EVENTS_ERROR_EVENTS_ERROR_Pos;
pub const CCM_EVENTS_ERROR_EVENTS_ERROR_NotGenerated = @as(c_ulong, 0);
pub const CCM_EVENTS_ERROR_EVENTS_ERROR_Generated = @as(c_ulong, 1);
pub const CCM_SHORTS_ENDKSGEN_CRYPT_Pos = @as(c_ulong, 0);
pub const CCM_SHORTS_ENDKSGEN_CRYPT_Msk = @as(c_ulong, 0x1) << CCM_SHORTS_ENDKSGEN_CRYPT_Pos;
pub const CCM_SHORTS_ENDKSGEN_CRYPT_Disabled = @as(c_ulong, 0);
pub const CCM_SHORTS_ENDKSGEN_CRYPT_Enabled = @as(c_ulong, 1);
pub const CCM_INTENSET_ERROR_Pos = @as(c_ulong, 2);
pub const CCM_INTENSET_ERROR_Msk = @as(c_ulong, 0x1) << CCM_INTENSET_ERROR_Pos;
pub const CCM_INTENSET_ERROR_Disabled = @as(c_ulong, 0);
pub const CCM_INTENSET_ERROR_Enabled = @as(c_ulong, 1);
pub const CCM_INTENSET_ERROR_Set = @as(c_ulong, 1);
pub const CCM_INTENSET_ENDCRYPT_Pos = @as(c_ulong, 1);
pub const CCM_INTENSET_ENDCRYPT_Msk = @as(c_ulong, 0x1) << CCM_INTENSET_ENDCRYPT_Pos;
pub const CCM_INTENSET_ENDCRYPT_Disabled = @as(c_ulong, 0);
pub const CCM_INTENSET_ENDCRYPT_Enabled = @as(c_ulong, 1);
pub const CCM_INTENSET_ENDCRYPT_Set = @as(c_ulong, 1);
pub const CCM_INTENSET_ENDKSGEN_Pos = @as(c_ulong, 0);
pub const CCM_INTENSET_ENDKSGEN_Msk = @as(c_ulong, 0x1) << CCM_INTENSET_ENDKSGEN_Pos;
pub const CCM_INTENSET_ENDKSGEN_Disabled = @as(c_ulong, 0);
pub const CCM_INTENSET_ENDKSGEN_Enabled = @as(c_ulong, 1);
pub const CCM_INTENSET_ENDKSGEN_Set = @as(c_ulong, 1);
pub const CCM_INTENCLR_ERROR_Pos = @as(c_ulong, 2);
pub const CCM_INTENCLR_ERROR_Msk = @as(c_ulong, 0x1) << CCM_INTENCLR_ERROR_Pos;
pub const CCM_INTENCLR_ERROR_Disabled = @as(c_ulong, 0);
pub const CCM_INTENCLR_ERROR_Enabled = @as(c_ulong, 1);
pub const CCM_INTENCLR_ERROR_Clear = @as(c_ulong, 1);
pub const CCM_INTENCLR_ENDCRYPT_Pos = @as(c_ulong, 1);
pub const CCM_INTENCLR_ENDCRYPT_Msk = @as(c_ulong, 0x1) << CCM_INTENCLR_ENDCRYPT_Pos;
pub const CCM_INTENCLR_ENDCRYPT_Disabled = @as(c_ulong, 0);
pub const CCM_INTENCLR_ENDCRYPT_Enabled = @as(c_ulong, 1);
pub const CCM_INTENCLR_ENDCRYPT_Clear = @as(c_ulong, 1);
pub const CCM_INTENCLR_ENDKSGEN_Pos = @as(c_ulong, 0);
pub const CCM_INTENCLR_ENDKSGEN_Msk = @as(c_ulong, 0x1) << CCM_INTENCLR_ENDKSGEN_Pos;
pub const CCM_INTENCLR_ENDKSGEN_Disabled = @as(c_ulong, 0);
pub const CCM_INTENCLR_ENDKSGEN_Enabled = @as(c_ulong, 1);
pub const CCM_INTENCLR_ENDKSGEN_Clear = @as(c_ulong, 1);
pub const CCM_MICSTATUS_MICSTATUS_Pos = @as(c_ulong, 0);
pub const CCM_MICSTATUS_MICSTATUS_Msk = @as(c_ulong, 0x1) << CCM_MICSTATUS_MICSTATUS_Pos;
pub const CCM_MICSTATUS_MICSTATUS_CheckFailed = @as(c_ulong, 0);
pub const CCM_MICSTATUS_MICSTATUS_CheckPassed = @as(c_ulong, 1);
pub const CCM_ENABLE_ENABLE_Pos = @as(c_ulong, 0);
pub const CCM_ENABLE_ENABLE_Msk = @as(c_ulong, 0x3) << CCM_ENABLE_ENABLE_Pos;
pub const CCM_ENABLE_ENABLE_Disabled = @as(c_ulong, 0);
pub const CCM_ENABLE_ENABLE_Enabled = @as(c_ulong, 2);
pub const CCM_MODE_LENGTH_Pos = @as(c_ulong, 24);
pub const CCM_MODE_LENGTH_Msk = @as(c_ulong, 0x1) << CCM_MODE_LENGTH_Pos;
pub const CCM_MODE_LENGTH_Default = @as(c_ulong, 0);
pub const CCM_MODE_LENGTH_Extended = @as(c_ulong, 1);
pub const CCM_MODE_DATARATE_Pos = @as(c_ulong, 16);
pub const CCM_MODE_DATARATE_Msk = @as(c_ulong, 0x3) << CCM_MODE_DATARATE_Pos;
pub const CCM_MODE_DATARATE_1Mbit = @as(c_ulong, 0);
pub const CCM_MODE_DATARATE_2Mbit = @as(c_ulong, 1);
pub const CCM_MODE_DATARATE_125Kbps = @as(c_ulong, 2);
pub const CCM_MODE_DATARATE_500Kbps = @as(c_ulong, 3);
pub const CCM_MODE_MODE_Pos = @as(c_ulong, 0);
pub const CCM_MODE_MODE_Msk = @as(c_ulong, 0x1) << CCM_MODE_MODE_Pos;
pub const CCM_MODE_MODE_Encryption = @as(c_ulong, 0);
pub const CCM_MODE_MODE_Decryption = @as(c_ulong, 1);
pub const CCM_CNFPTR_CNFPTR_Pos = @as(c_ulong, 0);
pub const CCM_CNFPTR_CNFPTR_Msk = @as(c_ulong, 0xFFFFFFFF) << CCM_CNFPTR_CNFPTR_Pos;
pub const CCM_INPTR_INPTR_Pos = @as(c_ulong, 0);
pub const CCM_INPTR_INPTR_Msk = @as(c_ulong, 0xFFFFFFFF) << CCM_INPTR_INPTR_Pos;
pub const CCM_OUTPTR_OUTPTR_Pos = @as(c_ulong, 0);
pub const CCM_OUTPTR_OUTPTR_Msk = @as(c_ulong, 0xFFFFFFFF) << CCM_OUTPTR_OUTPTR_Pos;
pub const CCM_SCRATCHPTR_SCRATCHPTR_Pos = @as(c_ulong, 0);
pub const CCM_SCRATCHPTR_SCRATCHPTR_Msk = @as(c_ulong, 0xFFFFFFFF) << CCM_SCRATCHPTR_SCRATCHPTR_Pos;
pub const CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos = @as(c_ulong, 0);
pub const CCM_MAXPACKETSIZE_MAXPACKETSIZE_Msk = @as(c_ulong, 0xFF) << CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos;
pub const CCM_RATEOVERRIDE_RATEOVERRIDE_Pos = @as(c_ulong, 0);
pub const CCM_RATEOVERRIDE_RATEOVERRIDE_Msk = @as(c_ulong, 0x3) << CCM_RATEOVERRIDE_RATEOVERRIDE_Pos;
pub const CCM_RATEOVERRIDE_RATEOVERRIDE_1Mbit = @as(c_ulong, 0);
pub const CCM_RATEOVERRIDE_RATEOVERRIDE_2Mbit = @as(c_ulong, 1);
pub const CCM_RATEOVERRIDE_RATEOVERRIDE_125Kbps = @as(c_ulong, 2);
pub const CCM_RATEOVERRIDE_RATEOVERRIDE_500Kbps = @as(c_ulong, 3);
pub const CC_HOST_RGF_HOST_CRYPTOKEY_SEL_HOST_CRYPTOKEY_SEL_Pos = @as(c_ulong, 0);
pub const CC_HOST_RGF_HOST_CRYPTOKEY_SEL_HOST_CRYPTOKEY_SEL_Msk = @as(c_ulong, 0x3) << CC_HOST_RGF_HOST_CRYPTOKEY_SEL_HOST_CRYPTOKEY_SEL_Pos;
pub const CC_HOST_RGF_HOST_CRYPTOKEY_SEL_HOST_CRYPTOKEY_SEL_K_DR = @as(c_ulong, 0);
pub const CC_HOST_RGF_HOST_CRYPTOKEY_SEL_HOST_CRYPTOKEY_SEL_K_PRTL = @as(c_ulong, 1);
pub const CC_HOST_RGF_HOST_CRYPTOKEY_SEL_HOST_CRYPTOKEY_SEL_Session = @as(c_ulong, 2);
pub const CC_HOST_RGF_HOST_IOT_KPRTL_LOCK_HOST_IOT_KPRTL_LOCK_Pos = @as(c_ulong, 0);
pub const CC_HOST_RGF_HOST_IOT_KPRTL_LOCK_HOST_IOT_KPRTL_LOCK_Msk = @as(c_ulong, 0x1) << CC_HOST_RGF_HOST_IOT_KPRTL_LOCK_HOST_IOT_KPRTL_LOCK_Pos;
pub const CC_HOST_RGF_HOST_IOT_KPRTL_LOCK_HOST_IOT_KPRTL_LOCK_Disabled = @as(c_ulong, 0);
pub const CC_HOST_RGF_HOST_IOT_KPRTL_LOCK_HOST_IOT_KPRTL_LOCK_Enabled = @as(c_ulong, 1);
pub const CC_HOST_RGF_HOST_IOT_KDR0_HOST_IOT_KDR0_Pos = @as(c_ulong, 0);
pub const CC_HOST_RGF_HOST_IOT_KDR0_HOST_IOT_KDR0_Msk = @as(c_ulong, 0xFFFFFFFF) << CC_HOST_RGF_HOST_IOT_KDR0_HOST_IOT_KDR0_Pos;
pub const CC_HOST_RGF_HOST_IOT_KDR1_HOST_IOT_KDR1_Pos = @as(c_ulong, 0);
pub const CC_HOST_RGF_HOST_IOT_KDR1_HOST_IOT_KDR1_Msk = @as(c_ulong, 0xFFFFFFFF) << CC_HOST_RGF_HOST_IOT_KDR1_HOST_IOT_KDR1_Pos;
pub const CC_HOST_RGF_HOST_IOT_KDR2_HOST_IOT_KDR2_Pos = @as(c_ulong, 0);
pub const CC_HOST_RGF_HOST_IOT_KDR2_HOST_IOT_KDR2_Msk = @as(c_ulong, 0xFFFFFFFF) << CC_HOST_RGF_HOST_IOT_KDR2_HOST_IOT_KDR2_Pos;
pub const CC_HOST_RGF_HOST_IOT_KDR3_HOST_IOT_KDR3_Pos = @as(c_ulong, 0);
pub const CC_HOST_RGF_HOST_IOT_KDR3_HOST_IOT_KDR3_Msk = @as(c_ulong, 0xFFFFFFFF) << CC_HOST_RGF_HOST_IOT_KDR3_HOST_IOT_KDR3_Pos;
pub const CC_HOST_RGF_HOST_IOT_LCS_LCS_IS_VALID_Pos = @as(c_ulong, 8);
pub const CC_HOST_RGF_HOST_IOT_LCS_LCS_IS_VALID_Msk = @as(c_ulong, 0x1) << CC_HOST_RGF_HOST_IOT_LCS_LCS_IS_VALID_Pos;
pub const CC_HOST_RGF_HOST_IOT_LCS_LCS_IS_VALID_Invalid = @as(c_ulong, 0);
pub const CC_HOST_RGF_HOST_IOT_LCS_LCS_IS_VALID_Valid = @as(c_ulong, 1);
pub const CC_HOST_RGF_HOST_IOT_LCS_LCS_Pos = @as(c_ulong, 0);
pub const CC_HOST_RGF_HOST_IOT_LCS_LCS_Msk = @as(c_ulong, 0x7) << CC_HOST_RGF_HOST_IOT_LCS_LCS_Pos;
pub const CC_HOST_RGF_HOST_IOT_LCS_LCS_Debug = @as(c_ulong, 0);
pub const CC_HOST_RGF_HOST_IOT_LCS_LCS_Secure = @as(c_ulong, 2);
pub const CLOCK_TASKS_HFCLKSTART_TASKS_HFCLKSTART_Pos = @as(c_ulong, 0);
pub const CLOCK_TASKS_HFCLKSTART_TASKS_HFCLKSTART_Msk = @as(c_ulong, 0x1) << CLOCK_TASKS_HFCLKSTART_TASKS_HFCLKSTART_Pos;
pub const CLOCK_TASKS_HFCLKSTART_TASKS_HFCLKSTART_Trigger = @as(c_ulong, 1);
pub const CLOCK_TASKS_HFCLKSTOP_TASKS_HFCLKSTOP_Pos = @as(c_ulong, 0);
pub const CLOCK_TASKS_HFCLKSTOP_TASKS_HFCLKSTOP_Msk = @as(c_ulong, 0x1) << CLOCK_TASKS_HFCLKSTOP_TASKS_HFCLKSTOP_Pos;
pub const CLOCK_TASKS_HFCLKSTOP_TASKS_HFCLKSTOP_Trigger = @as(c_ulong, 1);
pub const CLOCK_TASKS_LFCLKSTART_TASKS_LFCLKSTART_Pos = @as(c_ulong, 0);
pub const CLOCK_TASKS_LFCLKSTART_TASKS_LFCLKSTART_Msk = @as(c_ulong, 0x1) << CLOCK_TASKS_LFCLKSTART_TASKS_LFCLKSTART_Pos;
pub const CLOCK_TASKS_LFCLKSTART_TASKS_LFCLKSTART_Trigger = @as(c_ulong, 1);
pub const CLOCK_TASKS_LFCLKSTOP_TASKS_LFCLKSTOP_Pos = @as(c_ulong, 0);
pub const CLOCK_TASKS_LFCLKSTOP_TASKS_LFCLKSTOP_Msk = @as(c_ulong, 0x1) << CLOCK_TASKS_LFCLKSTOP_TASKS_LFCLKSTOP_Pos;
pub const CLOCK_TASKS_LFCLKSTOP_TASKS_LFCLKSTOP_Trigger = @as(c_ulong, 1);
pub const CLOCK_TASKS_CAL_TASKS_CAL_Pos = @as(c_ulong, 0);
pub const CLOCK_TASKS_CAL_TASKS_CAL_Msk = @as(c_ulong, 0x1) << CLOCK_TASKS_CAL_TASKS_CAL_Pos;
pub const CLOCK_TASKS_CAL_TASKS_CAL_Trigger = @as(c_ulong, 1);
pub const CLOCK_TASKS_CTSTART_TASKS_CTSTART_Pos = @as(c_ulong, 0);
pub const CLOCK_TASKS_CTSTART_TASKS_CTSTART_Msk = @as(c_ulong, 0x1) << CLOCK_TASKS_CTSTART_TASKS_CTSTART_Pos;
pub const CLOCK_TASKS_CTSTART_TASKS_CTSTART_Trigger = @as(c_ulong, 1);
pub const CLOCK_TASKS_CTSTOP_TASKS_CTSTOP_Pos = @as(c_ulong, 0);
pub const CLOCK_TASKS_CTSTOP_TASKS_CTSTOP_Msk = @as(c_ulong, 0x1) << CLOCK_TASKS_CTSTOP_TASKS_CTSTOP_Pos;
pub const CLOCK_TASKS_CTSTOP_TASKS_CTSTOP_Trigger = @as(c_ulong, 1);
pub const CLOCK_EVENTS_HFCLKSTARTED_EVENTS_HFCLKSTARTED_Pos = @as(c_ulong, 0);
pub const CLOCK_EVENTS_HFCLKSTARTED_EVENTS_HFCLKSTARTED_Msk = @as(c_ulong, 0x1) << CLOCK_EVENTS_HFCLKSTARTED_EVENTS_HFCLKSTARTED_Pos;
pub const CLOCK_EVENTS_HFCLKSTARTED_EVENTS_HFCLKSTARTED_NotGenerated = @as(c_ulong, 0);
pub const CLOCK_EVENTS_HFCLKSTARTED_EVENTS_HFCLKSTARTED_Generated = @as(c_ulong, 1);
pub const CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_Pos = @as(c_ulong, 0);
pub const CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_Msk = @as(c_ulong, 0x1) << CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_Pos;
pub const CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_NotGenerated = @as(c_ulong, 0);
pub const CLOCK_EVENTS_LFCLKSTARTED_EVENTS_LFCLKSTARTED_Generated = @as(c_ulong, 1);
pub const CLOCK_EVENTS_DONE_EVENTS_DONE_Pos = @as(c_ulong, 0);
pub const CLOCK_EVENTS_DONE_EVENTS_DONE_Msk = @as(c_ulong, 0x1) << CLOCK_EVENTS_DONE_EVENTS_DONE_Pos;
pub const CLOCK_EVENTS_DONE_EVENTS_DONE_NotGenerated = @as(c_ulong, 0);
pub const CLOCK_EVENTS_DONE_EVENTS_DONE_Generated = @as(c_ulong, 1);
pub const CLOCK_EVENTS_CTTO_EVENTS_CTTO_Pos = @as(c_ulong, 0);
pub const CLOCK_EVENTS_CTTO_EVENTS_CTTO_Msk = @as(c_ulong, 0x1) << CLOCK_EVENTS_CTTO_EVENTS_CTTO_Pos;
pub const CLOCK_EVENTS_CTTO_EVENTS_CTTO_NotGenerated = @as(c_ulong, 0);
pub const CLOCK_EVENTS_CTTO_EVENTS_CTTO_Generated = @as(c_ulong, 1);
pub const CLOCK_EVENTS_CTSTARTED_EVENTS_CTSTARTED_Pos = @as(c_ulong, 0);
pub const CLOCK_EVENTS_CTSTARTED_EVENTS_CTSTARTED_Msk = @as(c_ulong, 0x1) << CLOCK_EVENTS_CTSTARTED_EVENTS_CTSTARTED_Pos;
pub const CLOCK_EVENTS_CTSTARTED_EVENTS_CTSTARTED_NotGenerated = @as(c_ulong, 0);
pub const CLOCK_EVENTS_CTSTARTED_EVENTS_CTSTARTED_Generated = @as(c_ulong, 1);
pub const CLOCK_EVENTS_CTSTOPPED_EVENTS_CTSTOPPED_Pos = @as(c_ulong, 0);
pub const CLOCK_EVENTS_CTSTOPPED_EVENTS_CTSTOPPED_Msk = @as(c_ulong, 0x1) << CLOCK_EVENTS_CTSTOPPED_EVENTS_CTSTOPPED_Pos;
pub const CLOCK_EVENTS_CTSTOPPED_EVENTS_CTSTOPPED_NotGenerated = @as(c_ulong, 0);
pub const CLOCK_EVENTS_CTSTOPPED_EVENTS_CTSTOPPED_Generated = @as(c_ulong, 1);
pub const CLOCK_INTENSET_CTSTOPPED_Pos = @as(c_ulong, 11);
pub const CLOCK_INTENSET_CTSTOPPED_Msk = @as(c_ulong, 0x1) << CLOCK_INTENSET_CTSTOPPED_Pos;
pub const CLOCK_INTENSET_CTSTOPPED_Disabled = @as(c_ulong, 0);
pub const CLOCK_INTENSET_CTSTOPPED_Enabled = @as(c_ulong, 1);
pub const CLOCK_INTENSET_CTSTOPPED_Set = @as(c_ulong, 1);
pub const CLOCK_INTENSET_CTSTARTED_Pos = @as(c_ulong, 10);
pub const CLOCK_INTENSET_CTSTARTED_Msk = @as(c_ulong, 0x1) << CLOCK_INTENSET_CTSTARTED_Pos;
pub const CLOCK_INTENSET_CTSTARTED_Disabled = @as(c_ulong, 0);
pub const CLOCK_INTENSET_CTSTARTED_Enabled = @as(c_ulong, 1);
pub const CLOCK_INTENSET_CTSTARTED_Set = @as(c_ulong, 1);
pub const CLOCK_INTENSET_CTTO_Pos = @as(c_ulong, 4);
pub const CLOCK_INTENSET_CTTO_Msk = @as(c_ulong, 0x1) << CLOCK_INTENSET_CTTO_Pos;
pub const CLOCK_INTENSET_CTTO_Disabled = @as(c_ulong, 0);
pub const CLOCK_INTENSET_CTTO_Enabled = @as(c_ulong, 1);
pub const CLOCK_INTENSET_CTTO_Set = @as(c_ulong, 1);
pub const CLOCK_INTENSET_DONE_Pos = @as(c_ulong, 3);
pub const CLOCK_INTENSET_DONE_Msk = @as(c_ulong, 0x1) << CLOCK_INTENSET_DONE_Pos;
pub const CLOCK_INTENSET_DONE_Disabled = @as(c_ulong, 0);
pub const CLOCK_INTENSET_DONE_Enabled = @as(c_ulong, 1);
pub const CLOCK_INTENSET_DONE_Set = @as(c_ulong, 1);
pub const CLOCK_INTENSET_LFCLKSTARTED_Pos = @as(c_ulong, 1);
pub const CLOCK_INTENSET_LFCLKSTARTED_Msk = @as(c_ulong, 0x1) << CLOCK_INTENSET_LFCLKSTARTED_Pos;
pub const CLOCK_INTENSET_LFCLKSTARTED_Disabled = @as(c_ulong, 0);
pub const CLOCK_INTENSET_LFCLKSTARTED_Enabled = @as(c_ulong, 1);
pub const CLOCK_INTENSET_LFCLKSTARTED_Set = @as(c_ulong, 1);
pub const CLOCK_INTENSET_HFCLKSTARTED_Pos = @as(c_ulong, 0);
pub const CLOCK_INTENSET_HFCLKSTARTED_Msk = @as(c_ulong, 0x1) << CLOCK_INTENSET_HFCLKSTARTED_Pos;
pub const CLOCK_INTENSET_HFCLKSTARTED_Disabled = @as(c_ulong, 0);
pub const CLOCK_INTENSET_HFCLKSTARTED_Enabled = @as(c_ulong, 1);
pub const CLOCK_INTENSET_HFCLKSTARTED_Set = @as(c_ulong, 1);
pub const CLOCK_INTENCLR_CTSTOPPED_Pos = @as(c_ulong, 11);
pub const CLOCK_INTENCLR_CTSTOPPED_Msk = @as(c_ulong, 0x1) << CLOCK_INTENCLR_CTSTOPPED_Pos;
pub const CLOCK_INTENCLR_CTSTOPPED_Disabled = @as(c_ulong, 0);
pub const CLOCK_INTENCLR_CTSTOPPED_Enabled = @as(c_ulong, 1);
pub const CLOCK_INTENCLR_CTSTOPPED_Clear = @as(c_ulong, 1);
pub const CLOCK_INTENCLR_CTSTARTED_Pos = @as(c_ulong, 10);
pub const CLOCK_INTENCLR_CTSTARTED_Msk = @as(c_ulong, 0x1) << CLOCK_INTENCLR_CTSTARTED_Pos;
pub const CLOCK_INTENCLR_CTSTARTED_Disabled = @as(c_ulong, 0);
pub const CLOCK_INTENCLR_CTSTARTED_Enabled = @as(c_ulong, 1);
pub const CLOCK_INTENCLR_CTSTARTED_Clear = @as(c_ulong, 1);
pub const CLOCK_INTENCLR_CTTO_Pos = @as(c_ulong, 4);
pub const CLOCK_INTENCLR_CTTO_Msk = @as(c_ulong, 0x1) << CLOCK_INTENCLR_CTTO_Pos;
pub const CLOCK_INTENCLR_CTTO_Disabled = @as(c_ulong, 0);
pub const CLOCK_INTENCLR_CTTO_Enabled = @as(c_ulong, 1);
pub const CLOCK_INTENCLR_CTTO_Clear = @as(c_ulong, 1);
pub const CLOCK_INTENCLR_DONE_Pos = @as(c_ulong, 3);
pub const CLOCK_INTENCLR_DONE_Msk = @as(c_ulong, 0x1) << CLOCK_INTENCLR_DONE_Pos;
pub const CLOCK_INTENCLR_DONE_Disabled = @as(c_ulong, 0);
pub const CLOCK_INTENCLR_DONE_Enabled = @as(c_ulong, 1);
pub const CLOCK_INTENCLR_DONE_Clear = @as(c_ulong, 1);
pub const CLOCK_INTENCLR_LFCLKSTARTED_Pos = @as(c_ulong, 1);
pub const CLOCK_INTENCLR_LFCLKSTARTED_Msk = @as(c_ulong, 0x1) << CLOCK_INTENCLR_LFCLKSTARTED_Pos;
pub const CLOCK_INTENCLR_LFCLKSTARTED_Disabled = @as(c_ulong, 0);
pub const CLOCK_INTENCLR_LFCLKSTARTED_Enabled = @as(c_ulong, 1);
pub const CLOCK_INTENCLR_LFCLKSTARTED_Clear = @as(c_ulong, 1);
pub const CLOCK_INTENCLR_HFCLKSTARTED_Pos = @as(c_ulong, 0);
pub const CLOCK_INTENCLR_HFCLKSTARTED_Msk = @as(c_ulong, 0x1) << CLOCK_INTENCLR_HFCLKSTARTED_Pos;
pub const CLOCK_INTENCLR_HFCLKSTARTED_Disabled = @as(c_ulong, 0);
pub const CLOCK_INTENCLR_HFCLKSTARTED_Enabled = @as(c_ulong, 1);
pub const CLOCK_INTENCLR_HFCLKSTARTED_Clear = @as(c_ulong, 1);
pub const CLOCK_HFCLKRUN_STATUS_Pos = @as(c_ulong, 0);
pub const CLOCK_HFCLKRUN_STATUS_Msk = @as(c_ulong, 0x1) << CLOCK_HFCLKRUN_STATUS_Pos;
pub const CLOCK_HFCLKRUN_STATUS_NotTriggered = @as(c_ulong, 0);
pub const CLOCK_HFCLKRUN_STATUS_Triggered = @as(c_ulong, 1);
pub const CLOCK_HFCLKSTAT_STATE_Pos = @as(c_ulong, 16);
pub const CLOCK_HFCLKSTAT_STATE_Msk = @as(c_ulong, 0x1) << CLOCK_HFCLKSTAT_STATE_Pos;
pub const CLOCK_HFCLKSTAT_STATE_NotRunning = @as(c_ulong, 0);
pub const CLOCK_HFCLKSTAT_STATE_Running = @as(c_ulong, 1);
pub const CLOCK_HFCLKSTAT_SRC_Pos = @as(c_ulong, 0);
pub const CLOCK_HFCLKSTAT_SRC_Msk = @as(c_ulong, 0x1) << CLOCK_HFCLKSTAT_SRC_Pos;
pub const CLOCK_HFCLKSTAT_SRC_RC = @as(c_ulong, 0);
pub const CLOCK_HFCLKSTAT_SRC_Xtal = @as(c_ulong, 1);
pub const CLOCK_LFCLKRUN_STATUS_Pos = @as(c_ulong, 0);
pub const CLOCK_LFCLKRUN_STATUS_Msk = @as(c_ulong, 0x1) << CLOCK_LFCLKRUN_STATUS_Pos;
pub const CLOCK_LFCLKRUN_STATUS_NotTriggered = @as(c_ulong, 0);
pub const CLOCK_LFCLKRUN_STATUS_Triggered = @as(c_ulong, 1);
pub const CLOCK_LFCLKSTAT_STATE_Pos = @as(c_ulong, 16);
pub const CLOCK_LFCLKSTAT_STATE_Msk = @as(c_ulong, 0x1) << CLOCK_LFCLKSTAT_STATE_Pos;
pub const CLOCK_LFCLKSTAT_STATE_NotRunning = @as(c_ulong, 0);
pub const CLOCK_LFCLKSTAT_STATE_Running = @as(c_ulong, 1);
pub const CLOCK_LFCLKSTAT_SRC_Pos = @as(c_ulong, 0);
pub const CLOCK_LFCLKSTAT_SRC_Msk = @as(c_ulong, 0x3) << CLOCK_LFCLKSTAT_SRC_Pos;
pub const CLOCK_LFCLKSTAT_SRC_RC = @as(c_ulong, 0);
pub const CLOCK_LFCLKSTAT_SRC_Xtal = @as(c_ulong, 1);
pub const CLOCK_LFCLKSTAT_SRC_Synth = @as(c_ulong, 2);
pub const CLOCK_LFCLKSRCCOPY_SRC_Pos = @as(c_ulong, 0);
pub const CLOCK_LFCLKSRCCOPY_SRC_Msk = @as(c_ulong, 0x3) << CLOCK_LFCLKSRCCOPY_SRC_Pos;
pub const CLOCK_LFCLKSRCCOPY_SRC_RC = @as(c_ulong, 0);
pub const CLOCK_LFCLKSRCCOPY_SRC_Xtal = @as(c_ulong, 1);
pub const CLOCK_LFCLKSRCCOPY_SRC_Synth = @as(c_ulong, 2);
pub const CLOCK_LFCLKSRC_EXTERNAL_Pos = @as(c_ulong, 17);
pub const CLOCK_LFCLKSRC_EXTERNAL_Msk = @as(c_ulong, 0x1) << CLOCK_LFCLKSRC_EXTERNAL_Pos;
pub const CLOCK_LFCLKSRC_EXTERNAL_Disabled = @as(c_ulong, 0);
pub const CLOCK_LFCLKSRC_EXTERNAL_Enabled = @as(c_ulong, 1);
pub const CLOCK_LFCLKSRC_BYPASS_Pos = @as(c_ulong, 16);
pub const CLOCK_LFCLKSRC_BYPASS_Msk = @as(c_ulong, 0x1) << CLOCK_LFCLKSRC_BYPASS_Pos;
pub const CLOCK_LFCLKSRC_BYPASS_Disabled = @as(c_ulong, 0);
pub const CLOCK_LFCLKSRC_BYPASS_Enabled = @as(c_ulong, 1);
pub const CLOCK_LFCLKSRC_SRC_Pos = @as(c_ulong, 0);
pub const CLOCK_LFCLKSRC_SRC_Msk = @as(c_ulong, 0x3) << CLOCK_LFCLKSRC_SRC_Pos;
pub const CLOCK_LFCLKSRC_SRC_RC = @as(c_ulong, 0);
pub const CLOCK_LFCLKSRC_SRC_Xtal = @as(c_ulong, 1);
pub const CLOCK_LFCLKSRC_SRC_Synth = @as(c_ulong, 2);
pub const CLOCK_HFXODEBOUNCE_HFXODEBOUNCE_Pos = @as(c_ulong, 0);
pub const CLOCK_HFXODEBOUNCE_HFXODEBOUNCE_Msk = @as(c_ulong, 0xFF) << CLOCK_HFXODEBOUNCE_HFXODEBOUNCE_Pos;
pub const CLOCK_HFXODEBOUNCE_HFXODEBOUNCE_Db256us = @as(c_ulong, 0x10);
pub const CLOCK_HFXODEBOUNCE_HFXODEBOUNCE_Db1024us = @as(c_ulong, 0x40);
pub const CLOCK_CTIV_CTIV_Pos = @as(c_ulong, 0);
pub const CLOCK_CTIV_CTIV_Msk = @as(c_ulong, 0x7F) << CLOCK_CTIV_CTIV_Pos;
pub const CLOCK_TRACECONFIG_TRACEMUX_Pos = @as(c_ulong, 16);
pub const CLOCK_TRACECONFIG_TRACEMUX_Msk = @as(c_ulong, 0x3) << CLOCK_TRACECONFIG_TRACEMUX_Pos;
pub const CLOCK_TRACECONFIG_TRACEMUX_GPIO = @as(c_ulong, 0);
pub const CLOCK_TRACECONFIG_TRACEMUX_Serial = @as(c_ulong, 1);
pub const CLOCK_TRACECONFIG_TRACEMUX_Parallel = @as(c_ulong, 2);
pub const CLOCK_TRACECONFIG_TRACEPORTSPEED_Pos = @as(c_ulong, 0);
pub const CLOCK_TRACECONFIG_TRACEPORTSPEED_Msk = @as(c_ulong, 0x3) << CLOCK_TRACECONFIG_TRACEPORTSPEED_Pos;
pub const CLOCK_TRACECONFIG_TRACEPORTSPEED_32MHz = @as(c_ulong, 0);
pub const CLOCK_TRACECONFIG_TRACEPORTSPEED_16MHz = @as(c_ulong, 1);
pub const CLOCK_TRACECONFIG_TRACEPORTSPEED_8MHz = @as(c_ulong, 2);
pub const CLOCK_TRACECONFIG_TRACEPORTSPEED_4MHz = @as(c_ulong, 3);
pub const CLOCK_LFRCMODE_STATUS_Pos = @as(c_ulong, 16);
pub const CLOCK_LFRCMODE_STATUS_Msk = @as(c_ulong, 0x1) << CLOCK_LFRCMODE_STATUS_Pos;
pub const CLOCK_LFRCMODE_STATUS_Normal = @as(c_ulong, 0);
pub const CLOCK_LFRCMODE_STATUS_ULP = @as(c_ulong, 1);
pub const CLOCK_LFRCMODE_MODE_Pos = @as(c_ulong, 0);
pub const CLOCK_LFRCMODE_MODE_Msk = @as(c_ulong, 0x1) << CLOCK_LFRCMODE_MODE_Pos;
pub const CLOCK_LFRCMODE_MODE_Normal = @as(c_ulong, 0);
pub const CLOCK_LFRCMODE_MODE_ULP = @as(c_ulong, 1);
pub const COMP_TASKS_START_TASKS_START_Pos = @as(c_ulong, 0);
pub const COMP_TASKS_START_TASKS_START_Msk = @as(c_ulong, 0x1) << COMP_TASKS_START_TASKS_START_Pos;
pub const COMP_TASKS_START_TASKS_START_Trigger = @as(c_ulong, 1);
pub const COMP_TASKS_STOP_TASKS_STOP_Pos = @as(c_ulong, 0);
pub const COMP_TASKS_STOP_TASKS_STOP_Msk = @as(c_ulong, 0x1) << COMP_TASKS_STOP_TASKS_STOP_Pos;
pub const COMP_TASKS_STOP_TASKS_STOP_Trigger = @as(c_ulong, 1);
pub const COMP_TASKS_SAMPLE_TASKS_SAMPLE_Pos = @as(c_ulong, 0);
pub const COMP_TASKS_SAMPLE_TASKS_SAMPLE_Msk = @as(c_ulong, 0x1) << COMP_TASKS_SAMPLE_TASKS_SAMPLE_Pos;
pub const COMP_TASKS_SAMPLE_TASKS_SAMPLE_Trigger = @as(c_ulong, 1);
pub const COMP_EVENTS_READY_EVENTS_READY_Pos = @as(c_ulong, 0);
pub const COMP_EVENTS_READY_EVENTS_READY_Msk = @as(c_ulong, 0x1) << COMP_EVENTS_READY_EVENTS_READY_Pos;
pub const COMP_EVENTS_READY_EVENTS_READY_NotGenerated = @as(c_ulong, 0);
pub const COMP_EVENTS_READY_EVENTS_READY_Generated = @as(c_ulong, 1);
pub const COMP_EVENTS_DOWN_EVENTS_DOWN_Pos = @as(c_ulong, 0);
pub const COMP_EVENTS_DOWN_EVENTS_DOWN_Msk = @as(c_ulong, 0x1) << COMP_EVENTS_DOWN_EVENTS_DOWN_Pos;
pub const COMP_EVENTS_DOWN_EVENTS_DOWN_NotGenerated = @as(c_ulong, 0);
pub const COMP_EVENTS_DOWN_EVENTS_DOWN_Generated = @as(c_ulong, 1);
pub const COMP_EVENTS_UP_EVENTS_UP_Pos = @as(c_ulong, 0);
pub const COMP_EVENTS_UP_EVENTS_UP_Msk = @as(c_ulong, 0x1) << COMP_EVENTS_UP_EVENTS_UP_Pos;
pub const COMP_EVENTS_UP_EVENTS_UP_NotGenerated = @as(c_ulong, 0);
pub const COMP_EVENTS_UP_EVENTS_UP_Generated = @as(c_ulong, 1);
pub const COMP_EVENTS_CROSS_EVENTS_CROSS_Pos = @as(c_ulong, 0);
pub const COMP_EVENTS_CROSS_EVENTS_CROSS_Msk = @as(c_ulong, 0x1) << COMP_EVENTS_CROSS_EVENTS_CROSS_Pos;
pub const COMP_EVENTS_CROSS_EVENTS_CROSS_NotGenerated = @as(c_ulong, 0);
pub const COMP_EVENTS_CROSS_EVENTS_CROSS_Generated = @as(c_ulong, 1);
pub const COMP_SHORTS_CROSS_STOP_Pos = @as(c_ulong, 4);
pub const COMP_SHORTS_CROSS_STOP_Msk = @as(c_ulong, 0x1) << COMP_SHORTS_CROSS_STOP_Pos;
pub const COMP_SHORTS_CROSS_STOP_Disabled = @as(c_ulong, 0);
pub const COMP_SHORTS_CROSS_STOP_Enabled = @as(c_ulong, 1);
pub const COMP_SHORTS_UP_STOP_Pos = @as(c_ulong, 3);
pub const COMP_SHORTS_UP_STOP_Msk = @as(c_ulong, 0x1) << COMP_SHORTS_UP_STOP_Pos;
pub const COMP_SHORTS_UP_STOP_Disabled = @as(c_ulong, 0);
pub const COMP_SHORTS_UP_STOP_Enabled = @as(c_ulong, 1);
pub const COMP_SHORTS_DOWN_STOP_Pos = @as(c_ulong, 2);
pub const COMP_SHORTS_DOWN_STOP_Msk = @as(c_ulong, 0x1) << COMP_SHORTS_DOWN_STOP_Pos;
pub const COMP_SHORTS_DOWN_STOP_Disabled = @as(c_ulong, 0);
pub const COMP_SHORTS_DOWN_STOP_Enabled = @as(c_ulong, 1);
pub const COMP_SHORTS_READY_STOP_Pos = @as(c_ulong, 1);
pub const COMP_SHORTS_READY_STOP_Msk = @as(c_ulong, 0x1) << COMP_SHORTS_READY_STOP_Pos;
pub const COMP_SHORTS_READY_STOP_Disabled = @as(c_ulong, 0);
pub const COMP_SHORTS_READY_STOP_Enabled = @as(c_ulong, 1);
pub const COMP_SHORTS_READY_SAMPLE_Pos = @as(c_ulong, 0);
pub const COMP_SHORTS_READY_SAMPLE_Msk = @as(c_ulong, 0x1) << COMP_SHORTS_READY_SAMPLE_Pos;
pub const COMP_SHORTS_READY_SAMPLE_Disabled = @as(c_ulong, 0);
pub const COMP_SHORTS_READY_SAMPLE_Enabled = @as(c_ulong, 1);
pub const COMP_INTEN_CROSS_Pos = @as(c_ulong, 3);
pub const COMP_INTEN_CROSS_Msk = @as(c_ulong, 0x1) << COMP_INTEN_CROSS_Pos;
pub const COMP_INTEN_CROSS_Disabled = @as(c_ulong, 0);
pub const COMP_INTEN_CROSS_Enabled = @as(c_ulong, 1);
pub const COMP_INTEN_UP_Pos = @as(c_ulong, 2);
pub const COMP_INTEN_UP_Msk = @as(c_ulong, 0x1) << COMP_INTEN_UP_Pos;
pub const COMP_INTEN_UP_Disabled = @as(c_ulong, 0);
pub const COMP_INTEN_UP_Enabled = @as(c_ulong, 1);
pub const COMP_INTEN_DOWN_Pos = @as(c_ulong, 1);
pub const COMP_INTEN_DOWN_Msk = @as(c_ulong, 0x1) << COMP_INTEN_DOWN_Pos;
pub const COMP_INTEN_DOWN_Disabled = @as(c_ulong, 0);
pub const COMP_INTEN_DOWN_Enabled = @as(c_ulong, 1);
pub const COMP_INTEN_READY_Pos = @as(c_ulong, 0);
pub const COMP_INTEN_READY_Msk = @as(c_ulong, 0x1) << COMP_INTEN_READY_Pos;
pub const COMP_INTEN_READY_Disabled = @as(c_ulong, 0);
pub const COMP_INTEN_READY_Enabled = @as(c_ulong, 1);
pub const COMP_INTENSET_CROSS_Pos = @as(c_ulong, 3);
pub const COMP_INTENSET_CROSS_Msk = @as(c_ulong, 0x1) << COMP_INTENSET_CROSS_Pos;
pub const COMP_INTENSET_CROSS_Disabled = @as(c_ulong, 0);
pub const COMP_INTENSET_CROSS_Enabled = @as(c_ulong, 1);
pub const COMP_INTENSET_CROSS_Set = @as(c_ulong, 1);
pub const COMP_INTENSET_UP_Pos = @as(c_ulong, 2);
pub const COMP_INTENSET_UP_Msk = @as(c_ulong, 0x1) << COMP_INTENSET_UP_Pos;
pub const COMP_INTENSET_UP_Disabled = @as(c_ulong, 0);
pub const COMP_INTENSET_UP_Enabled = @as(c_ulong, 1);
pub const COMP_INTENSET_UP_Set = @as(c_ulong, 1);
pub const COMP_INTENSET_DOWN_Pos = @as(c_ulong, 1);
pub const COMP_INTENSET_DOWN_Msk = @as(c_ulong, 0x1) << COMP_INTENSET_DOWN_Pos;
pub const COMP_INTENSET_DOWN_Disabled = @as(c_ulong, 0);
pub const COMP_INTENSET_DOWN_Enabled = @as(c_ulong, 1);
pub const COMP_INTENSET_DOWN_Set = @as(c_ulong, 1);
pub const COMP_INTENSET_READY_Pos = @as(c_ulong, 0);
pub const COMP_INTENSET_READY_Msk = @as(c_ulong, 0x1) << COMP_INTENSET_READY_Pos;
pub const COMP_INTENSET_READY_Disabled = @as(c_ulong, 0);
pub const COMP_INTENSET_READY_Enabled = @as(c_ulong, 1);
pub const COMP_INTENSET_READY_Set = @as(c_ulong, 1);
pub const COMP_INTENCLR_CROSS_Pos = @as(c_ulong, 3);
pub const COMP_INTENCLR_CROSS_Msk = @as(c_ulong, 0x1) << COMP_INTENCLR_CROSS_Pos;
pub const COMP_INTENCLR_CROSS_Disabled = @as(c_ulong, 0);
pub const COMP_INTENCLR_CROSS_Enabled = @as(c_ulong, 1);
pub const COMP_INTENCLR_CROSS_Clear = @as(c_ulong, 1);
pub const COMP_INTENCLR_UP_Pos = @as(c_ulong, 2);
pub const COMP_INTENCLR_UP_Msk = @as(c_ulong, 0x1) << COMP_INTENCLR_UP_Pos;
pub const COMP_INTENCLR_UP_Disabled = @as(c_ulong, 0);
pub const COMP_INTENCLR_UP_Enabled = @as(c_ulong, 1);
pub const COMP_INTENCLR_UP_Clear = @as(c_ulong, 1);
pub const COMP_INTENCLR_DOWN_Pos = @as(c_ulong, 1);
pub const COMP_INTENCLR_DOWN_Msk = @as(c_ulong, 0x1) << COMP_INTENCLR_DOWN_Pos;
pub const COMP_INTENCLR_DOWN_Disabled = @as(c_ulong, 0);
pub const COMP_INTENCLR_DOWN_Enabled = @as(c_ulong, 1);
pub const COMP_INTENCLR_DOWN_Clear = @as(c_ulong, 1);
pub const COMP_INTENCLR_READY_Pos = @as(c_ulong, 0);
pub const COMP_INTENCLR_READY_Msk = @as(c_ulong, 0x1) << COMP_INTENCLR_READY_Pos;
pub const COMP_INTENCLR_READY_Disabled = @as(c_ulong, 0);
pub const COMP_INTENCLR_READY_Enabled = @as(c_ulong, 1);
pub const COMP_INTENCLR_READY_Clear = @as(c_ulong, 1);
pub const COMP_RESULT_RESULT_Pos = @as(c_ulong, 0);
pub const COMP_RESULT_RESULT_Msk = @as(c_ulong, 0x1) << COMP_RESULT_RESULT_Pos;
pub const COMP_RESULT_RESULT_Below = @as(c_ulong, 0);
pub const COMP_RESULT_RESULT_Above = @as(c_ulong, 1);
pub const COMP_ENABLE_ENABLE_Pos = @as(c_ulong, 0);
pub const COMP_ENABLE_ENABLE_Msk = @as(c_ulong, 0x3) << COMP_ENABLE_ENABLE_Pos;
pub const COMP_ENABLE_ENABLE_Disabled = @as(c_ulong, 0);
pub const COMP_ENABLE_ENABLE_Enabled = @as(c_ulong, 2);
pub const COMP_PSEL_PSEL_Pos = @as(c_ulong, 0);
pub const COMP_PSEL_PSEL_Msk = @as(c_ulong, 0x7) << COMP_PSEL_PSEL_Pos;
pub const COMP_PSEL_PSEL_AnalogInput0 = @as(c_ulong, 0);
pub const COMP_PSEL_PSEL_AnalogInput1 = @as(c_ulong, 1);
pub const COMP_PSEL_PSEL_AnalogInput2 = @as(c_ulong, 2);
pub const COMP_PSEL_PSEL_AnalogInput3 = @as(c_ulong, 3);
pub const COMP_PSEL_PSEL_AnalogInput4 = @as(c_ulong, 4);
pub const COMP_PSEL_PSEL_AnalogInput5 = @as(c_ulong, 5);
pub const COMP_PSEL_PSEL_AnalogInput6 = @as(c_ulong, 6);
pub const COMP_PSEL_PSEL_AnalogInput7 = @as(c_ulong, 7);
pub const COMP_REFSEL_REFSEL_Pos = @as(c_ulong, 0);
pub const COMP_REFSEL_REFSEL_Msk = @as(c_ulong, 0x7) << COMP_REFSEL_REFSEL_Pos;
pub const COMP_REFSEL_REFSEL_Int1V2 = @as(c_ulong, 0);
pub const COMP_REFSEL_REFSEL_Int1V8 = @as(c_ulong, 1);
pub const COMP_REFSEL_REFSEL_Int2V4 = @as(c_ulong, 2);
pub const COMP_REFSEL_REFSEL_VDD = @as(c_ulong, 4);
pub const COMP_REFSEL_REFSEL_ARef = @as(c_ulong, 5);
pub const COMP_EXTREFSEL_EXTREFSEL_Pos = @as(c_ulong, 0);
pub const COMP_EXTREFSEL_EXTREFSEL_Msk = @as(c_ulong, 0x7) << COMP_EXTREFSEL_EXTREFSEL_Pos;
pub const COMP_EXTREFSEL_EXTREFSEL_AnalogReference0 = @as(c_ulong, 0);
pub const COMP_EXTREFSEL_EXTREFSEL_AnalogReference1 = @as(c_ulong, 1);
pub const COMP_EXTREFSEL_EXTREFSEL_AnalogReference2 = @as(c_ulong, 2);
pub const COMP_EXTREFSEL_EXTREFSEL_AnalogReference3 = @as(c_ulong, 3);
pub const COMP_EXTREFSEL_EXTREFSEL_AnalogReference4 = @as(c_ulong, 4);
pub const COMP_EXTREFSEL_EXTREFSEL_AnalogReference5 = @as(c_ulong, 5);
pub const COMP_EXTREFSEL_EXTREFSEL_AnalogReference6 = @as(c_ulong, 6);
pub const COMP_EXTREFSEL_EXTREFSEL_AnalogReference7 = @as(c_ulong, 7);
pub const COMP_TH_THUP_Pos = @as(c_ulong, 8);
pub const COMP_TH_THUP_Msk = @as(c_ulong, 0x3F) << COMP_TH_THUP_Pos;
pub const COMP_TH_THDOWN_Pos = @as(c_ulong, 0);
pub const COMP_TH_THDOWN_Msk = @as(c_ulong, 0x3F) << COMP_TH_THDOWN_Pos;
pub const COMP_MODE_MAIN_Pos = @as(c_ulong, 8);
pub const COMP_MODE_MAIN_Msk = @as(c_ulong, 0x1) << COMP_MODE_MAIN_Pos;
pub const COMP_MODE_MAIN_SE = @as(c_ulong, 0);
pub const COMP_MODE_MAIN_Diff = @as(c_ulong, 1);
pub const COMP_MODE_SP_Pos = @as(c_ulong, 0);
pub const COMP_MODE_SP_Msk = @as(c_ulong, 0x3) << COMP_MODE_SP_Pos;
pub const COMP_MODE_SP_Low = @as(c_ulong, 0);
pub const COMP_MODE_SP_Normal = @as(c_ulong, 1);
pub const COMP_MODE_SP_High = @as(c_ulong, 2);
pub const COMP_HYST_HYST_Pos = @as(c_ulong, 0);
pub const COMP_HYST_HYST_Msk = @as(c_ulong, 0x1) << COMP_HYST_HYST_Pos;
pub const COMP_HYST_HYST_NoHyst = @as(c_ulong, 0);
pub const COMP_HYST_HYST_Hyst50mV = @as(c_ulong, 1);
pub const CRYPTOCELL_ENABLE_ENABLE_Pos = @as(c_ulong, 0);
pub const CRYPTOCELL_ENABLE_ENABLE_Msk = @as(c_ulong, 0x1) << CRYPTOCELL_ENABLE_ENABLE_Pos;
pub const CRYPTOCELL_ENABLE_ENABLE_Disabled = @as(c_ulong, 0);
pub const CRYPTOCELL_ENABLE_ENABLE_Enabled = @as(c_ulong, 1);
pub const ECB_TASKS_STARTECB_TASKS_STARTECB_Pos = @as(c_ulong, 0);
pub const ECB_TASKS_STARTECB_TASKS_STARTECB_Msk = @as(c_ulong, 0x1) << ECB_TASKS_STARTECB_TASKS_STARTECB_Pos;
pub const ECB_TASKS_STARTECB_TASKS_STARTECB_Trigger = @as(c_ulong, 1);
pub const ECB_TASKS_STOPECB_TASKS_STOPECB_Pos = @as(c_ulong, 0);
pub const ECB_TASKS_STOPECB_TASKS_STOPECB_Msk = @as(c_ulong, 0x1) << ECB_TASKS_STOPECB_TASKS_STOPECB_Pos;
pub const ECB_TASKS_STOPECB_TASKS_STOPECB_Trigger = @as(c_ulong, 1);
pub const ECB_EVENTS_ENDECB_EVENTS_ENDECB_Pos = @as(c_ulong, 0);
pub const ECB_EVENTS_ENDECB_EVENTS_ENDECB_Msk = @as(c_ulong, 0x1) << ECB_EVENTS_ENDECB_EVENTS_ENDECB_Pos;
pub const ECB_EVENTS_ENDECB_EVENTS_ENDECB_NotGenerated = @as(c_ulong, 0);
pub const ECB_EVENTS_ENDECB_EVENTS_ENDECB_Generated = @as(c_ulong, 1);
pub const ECB_EVENTS_ERRORECB_EVENTS_ERRORECB_Pos = @as(c_ulong, 0);
pub const ECB_EVENTS_ERRORECB_EVENTS_ERRORECB_Msk = @as(c_ulong, 0x1) << ECB_EVENTS_ERRORECB_EVENTS_ERRORECB_Pos;
pub const ECB_EVENTS_ERRORECB_EVENTS_ERRORECB_NotGenerated = @as(c_ulong, 0);
pub const ECB_EVENTS_ERRORECB_EVENTS_ERRORECB_Generated = @as(c_ulong, 1);
pub const ECB_INTENSET_ERRORECB_Pos = @as(c_ulong, 1);
pub const ECB_INTENSET_ERRORECB_Msk = @as(c_ulong, 0x1) << ECB_INTENSET_ERRORECB_Pos;
pub const ECB_INTENSET_ERRORECB_Disabled = @as(c_ulong, 0);
pub const ECB_INTENSET_ERRORECB_Enabled = @as(c_ulong, 1);
pub const ECB_INTENSET_ERRORECB_Set = @as(c_ulong, 1);
pub const ECB_INTENSET_ENDECB_Pos = @as(c_ulong, 0);
pub const ECB_INTENSET_ENDECB_Msk = @as(c_ulong, 0x1) << ECB_INTENSET_ENDECB_Pos;
pub const ECB_INTENSET_ENDECB_Disabled = @as(c_ulong, 0);
pub const ECB_INTENSET_ENDECB_Enabled = @as(c_ulong, 1);
pub const ECB_INTENSET_ENDECB_Set = @as(c_ulong, 1);
pub const ECB_INTENCLR_ERRORECB_Pos = @as(c_ulong, 1);
pub const ECB_INTENCLR_ERRORECB_Msk = @as(c_ulong, 0x1) << ECB_INTENCLR_ERRORECB_Pos;
pub const ECB_INTENCLR_ERRORECB_Disabled = @as(c_ulong, 0);
pub const ECB_INTENCLR_ERRORECB_Enabled = @as(c_ulong, 1);
pub const ECB_INTENCLR_ERRORECB_Clear = @as(c_ulong, 1);
pub const ECB_INTENCLR_ENDECB_Pos = @as(c_ulong, 0);
pub const ECB_INTENCLR_ENDECB_Msk = @as(c_ulong, 0x1) << ECB_INTENCLR_ENDECB_Pos;
pub const ECB_INTENCLR_ENDECB_Disabled = @as(c_ulong, 0);
pub const ECB_INTENCLR_ENDECB_Enabled = @as(c_ulong, 1);
pub const ECB_INTENCLR_ENDECB_Clear = @as(c_ulong, 1);
pub const ECB_ECBDATAPTR_ECBDATAPTR_Pos = @as(c_ulong, 0);
pub const ECB_ECBDATAPTR_ECBDATAPTR_Msk = @as(c_ulong, 0xFFFFFFFF) << ECB_ECBDATAPTR_ECBDATAPTR_Pos;
pub const EGU_TASKS_TRIGGER_TASKS_TRIGGER_Pos = @as(c_ulong, 0);
pub const EGU_TASKS_TRIGGER_TASKS_TRIGGER_Msk = @as(c_ulong, 0x1) << EGU_TASKS_TRIGGER_TASKS_TRIGGER_Pos;
pub const EGU_TASKS_TRIGGER_TASKS_TRIGGER_Trigger = @as(c_ulong, 1);
pub const EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Pos = @as(c_ulong, 0);
pub const EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Msk = @as(c_ulong, 0x1) << EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Pos;
pub const EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_NotGenerated = @as(c_ulong, 0);
pub const EGU_EVENTS_TRIGGERED_EVENTS_TRIGGERED_Generated = @as(c_ulong, 1);
pub const EGU_INTEN_TRIGGERED15_Pos = @as(c_ulong, 15);
pub const EGU_INTEN_TRIGGERED15_Msk = @as(c_ulong, 0x1) << EGU_INTEN_TRIGGERED15_Pos;
pub const EGU_INTEN_TRIGGERED15_Disabled = @as(c_ulong, 0);
pub const EGU_INTEN_TRIGGERED15_Enabled = @as(c_ulong, 1);
pub const EGU_INTEN_TRIGGERED14_Pos = @as(c_ulong, 14);
pub const EGU_INTEN_TRIGGERED14_Msk = @as(c_ulong, 0x1) << EGU_INTEN_TRIGGERED14_Pos;
pub const EGU_INTEN_TRIGGERED14_Disabled = @as(c_ulong, 0);
pub const EGU_INTEN_TRIGGERED14_Enabled = @as(c_ulong, 1);
pub const EGU_INTEN_TRIGGERED13_Pos = @as(c_ulong, 13);
pub const EGU_INTEN_TRIGGERED13_Msk = @as(c_ulong, 0x1) << EGU_INTEN_TRIGGERED13_Pos;
pub const EGU_INTEN_TRIGGERED13_Disabled = @as(c_ulong, 0);
pub const EGU_INTEN_TRIGGERED13_Enabled = @as(c_ulong, 1);
pub const EGU_INTEN_TRIGGERED12_Pos = @as(c_ulong, 12);
pub const EGU_INTEN_TRIGGERED12_Msk = @as(c_ulong, 0x1) << EGU_INTEN_TRIGGERED12_Pos;
pub const EGU_INTEN_TRIGGERED12_Disabled = @as(c_ulong, 0);
pub const EGU_INTEN_TRIGGERED12_Enabled = @as(c_ulong, 1);
pub const EGU_INTEN_TRIGGERED11_Pos = @as(c_ulong, 11);
pub const EGU_INTEN_TRIGGERED11_Msk = @as(c_ulong, 0x1) << EGU_INTEN_TRIGGERED11_Pos;
pub const EGU_INTEN_TRIGGERED11_Disabled = @as(c_ulong, 0);
pub const EGU_INTEN_TRIGGERED11_Enabled = @as(c_ulong, 1);
pub const EGU_INTEN_TRIGGERED10_Pos = @as(c_ulong, 10);
pub const EGU_INTEN_TRIGGERED10_Msk = @as(c_ulong, 0x1) << EGU_INTEN_TRIGGERED10_Pos;
pub const EGU_INTEN_TRIGGERED10_Disabled = @as(c_ulong, 0);
pub const EGU_INTEN_TRIGGERED10_Enabled = @as(c_ulong, 1);
pub const EGU_INTEN_TRIGGERED9_Pos = @as(c_ulong, 9);
pub const EGU_INTEN_TRIGGERED9_Msk = @as(c_ulong, 0x1) << EGU_INTEN_TRIGGERED9_Pos;
pub const EGU_INTEN_TRIGGERED9_Disabled = @as(c_ulong, 0);
pub const EGU_INTEN_TRIGGERED9_Enabled = @as(c_ulong, 1);
pub const EGU_INTEN_TRIGGERED8_Pos = @as(c_ulong, 8);
pub const EGU_INTEN_TRIGGERED8_Msk = @as(c_ulong, 0x1) << EGU_INTEN_TRIGGERED8_Pos;
pub const EGU_INTEN_TRIGGERED8_Disabled = @as(c_ulong, 0);
pub const EGU_INTEN_TRIGGERED8_Enabled = @as(c_ulong, 1);
pub const EGU_INTEN_TRIGGERED7_Pos = @as(c_ulong, 7);
pub const EGU_INTEN_TRIGGERED7_Msk = @as(c_ulong, 0x1) << EGU_INTEN_TRIGGERED7_Pos;
pub const EGU_INTEN_TRIGGERED7_Disabled = @as(c_ulong, 0);
pub const EGU_INTEN_TRIGGERED7_Enabled = @as(c_ulong, 1);
pub const EGU_INTEN_TRIGGERED6_Pos = @as(c_ulong, 6);
pub const EGU_INTEN_TRIGGERED6_Msk = @as(c_ulong, 0x1) << EGU_INTEN_TRIGGERED6_Pos;
pub const EGU_INTEN_TRIGGERED6_Disabled = @as(c_ulong, 0);
pub const EGU_INTEN_TRIGGERED6_Enabled = @as(c_ulong, 1);
pub const EGU_INTEN_TRIGGERED5_Pos = @as(c_ulong, 5);
pub const EGU_INTEN_TRIGGERED5_Msk = @as(c_ulong, 0x1) << EGU_INTEN_TRIGGERED5_Pos;
pub const EGU_INTEN_TRIGGERED5_Disabled = @as(c_ulong, 0);
pub const EGU_INTEN_TRIGGERED5_Enabled = @as(c_ulong, 1);
pub const EGU_INTEN_TRIGGERED4_Pos = @as(c_ulong, 4);
pub const EGU_INTEN_TRIGGERED4_Msk = @as(c_ulong, 0x1) << EGU_INTEN_TRIGGERED4_Pos;
pub const EGU_INTEN_TRIGGERED4_Disabled = @as(c_ulong, 0);
pub const EGU_INTEN_TRIGGERED4_Enabled = @as(c_ulong, 1);
pub const EGU_INTEN_TRIGGERED3_Pos = @as(c_ulong, 3);
pub const EGU_INTEN_TRIGGERED3_Msk = @as(c_ulong, 0x1) << EGU_INTEN_TRIGGERED3_Pos;
pub const EGU_INTEN_TRIGGERED3_Disabled = @as(c_ulong, 0);
pub const EGU_INTEN_TRIGGERED3_Enabled = @as(c_ulong, 1);
pub const EGU_INTEN_TRIGGERED2_Pos = @as(c_ulong, 2);
pub const EGU_INTEN_TRIGGERED2_Msk = @as(c_ulong, 0x1) << EGU_INTEN_TRIGGERED2_Pos;
pub const EGU_INTEN_TRIGGERED2_Disabled = @as(c_ulong, 0);
pub const EGU_INTEN_TRIGGERED2_Enabled = @as(c_ulong, 1);
pub const EGU_INTEN_TRIGGERED1_Pos = @as(c_ulong, 1);
pub const EGU_INTEN_TRIGGERED1_Msk = @as(c_ulong, 0x1) << EGU_INTEN_TRIGGERED1_Pos;
pub const EGU_INTEN_TRIGGERED1_Disabled = @as(c_ulong, 0);
pub const EGU_INTEN_TRIGGERED1_Enabled = @as(c_ulong, 1);
pub const EGU_INTEN_TRIGGERED0_Pos = @as(c_ulong, 0);
pub const EGU_INTEN_TRIGGERED0_Msk = @as(c_ulong, 0x1) << EGU_INTEN_TRIGGERED0_Pos;
pub const EGU_INTEN_TRIGGERED0_Disabled = @as(c_ulong, 0);
pub const EGU_INTEN_TRIGGERED0_Enabled = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED15_Pos = @as(c_ulong, 15);
pub const EGU_INTENSET_TRIGGERED15_Msk = @as(c_ulong, 0x1) << EGU_INTENSET_TRIGGERED15_Pos;
pub const EGU_INTENSET_TRIGGERED15_Disabled = @as(c_ulong, 0);
pub const EGU_INTENSET_TRIGGERED15_Enabled = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED15_Set = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED14_Pos = @as(c_ulong, 14);
pub const EGU_INTENSET_TRIGGERED14_Msk = @as(c_ulong, 0x1) << EGU_INTENSET_TRIGGERED14_Pos;
pub const EGU_INTENSET_TRIGGERED14_Disabled = @as(c_ulong, 0);
pub const EGU_INTENSET_TRIGGERED14_Enabled = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED14_Set = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED13_Pos = @as(c_ulong, 13);
pub const EGU_INTENSET_TRIGGERED13_Msk = @as(c_ulong, 0x1) << EGU_INTENSET_TRIGGERED13_Pos;
pub const EGU_INTENSET_TRIGGERED13_Disabled = @as(c_ulong, 0);
pub const EGU_INTENSET_TRIGGERED13_Enabled = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED13_Set = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED12_Pos = @as(c_ulong, 12);
pub const EGU_INTENSET_TRIGGERED12_Msk = @as(c_ulong, 0x1) << EGU_INTENSET_TRIGGERED12_Pos;
pub const EGU_INTENSET_TRIGGERED12_Disabled = @as(c_ulong, 0);
pub const EGU_INTENSET_TRIGGERED12_Enabled = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED12_Set = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED11_Pos = @as(c_ulong, 11);
pub const EGU_INTENSET_TRIGGERED11_Msk = @as(c_ulong, 0x1) << EGU_INTENSET_TRIGGERED11_Pos;
pub const EGU_INTENSET_TRIGGERED11_Disabled = @as(c_ulong, 0);
pub const EGU_INTENSET_TRIGGERED11_Enabled = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED11_Set = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED10_Pos = @as(c_ulong, 10);
pub const EGU_INTENSET_TRIGGERED10_Msk = @as(c_ulong, 0x1) << EGU_INTENSET_TRIGGERED10_Pos;
pub const EGU_INTENSET_TRIGGERED10_Disabled = @as(c_ulong, 0);
pub const EGU_INTENSET_TRIGGERED10_Enabled = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED10_Set = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED9_Pos = @as(c_ulong, 9);
pub const EGU_INTENSET_TRIGGERED9_Msk = @as(c_ulong, 0x1) << EGU_INTENSET_TRIGGERED9_Pos;
pub const EGU_INTENSET_TRIGGERED9_Disabled = @as(c_ulong, 0);
pub const EGU_INTENSET_TRIGGERED9_Enabled = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED9_Set = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED8_Pos = @as(c_ulong, 8);
pub const EGU_INTENSET_TRIGGERED8_Msk = @as(c_ulong, 0x1) << EGU_INTENSET_TRIGGERED8_Pos;
pub const EGU_INTENSET_TRIGGERED8_Disabled = @as(c_ulong, 0);
pub const EGU_INTENSET_TRIGGERED8_Enabled = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED8_Set = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED7_Pos = @as(c_ulong, 7);
pub const EGU_INTENSET_TRIGGERED7_Msk = @as(c_ulong, 0x1) << EGU_INTENSET_TRIGGERED7_Pos;
pub const EGU_INTENSET_TRIGGERED7_Disabled = @as(c_ulong, 0);
pub const EGU_INTENSET_TRIGGERED7_Enabled = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED7_Set = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED6_Pos = @as(c_ulong, 6);
pub const EGU_INTENSET_TRIGGERED6_Msk = @as(c_ulong, 0x1) << EGU_INTENSET_TRIGGERED6_Pos;
pub const EGU_INTENSET_TRIGGERED6_Disabled = @as(c_ulong, 0);
pub const EGU_INTENSET_TRIGGERED6_Enabled = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED6_Set = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED5_Pos = @as(c_ulong, 5);
pub const EGU_INTENSET_TRIGGERED5_Msk = @as(c_ulong, 0x1) << EGU_INTENSET_TRIGGERED5_Pos;
pub const EGU_INTENSET_TRIGGERED5_Disabled = @as(c_ulong, 0);
pub const EGU_INTENSET_TRIGGERED5_Enabled = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED5_Set = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED4_Pos = @as(c_ulong, 4);
pub const EGU_INTENSET_TRIGGERED4_Msk = @as(c_ulong, 0x1) << EGU_INTENSET_TRIGGERED4_Pos;
pub const EGU_INTENSET_TRIGGERED4_Disabled = @as(c_ulong, 0);
pub const EGU_INTENSET_TRIGGERED4_Enabled = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED4_Set = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED3_Pos = @as(c_ulong, 3);
pub const EGU_INTENSET_TRIGGERED3_Msk = @as(c_ulong, 0x1) << EGU_INTENSET_TRIGGERED3_Pos;
pub const EGU_INTENSET_TRIGGERED3_Disabled = @as(c_ulong, 0);
pub const EGU_INTENSET_TRIGGERED3_Enabled = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED3_Set = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED2_Pos = @as(c_ulong, 2);
pub const EGU_INTENSET_TRIGGERED2_Msk = @as(c_ulong, 0x1) << EGU_INTENSET_TRIGGERED2_Pos;
pub const EGU_INTENSET_TRIGGERED2_Disabled = @as(c_ulong, 0);
pub const EGU_INTENSET_TRIGGERED2_Enabled = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED2_Set = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED1_Pos = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED1_Msk = @as(c_ulong, 0x1) << EGU_INTENSET_TRIGGERED1_Pos;
pub const EGU_INTENSET_TRIGGERED1_Disabled = @as(c_ulong, 0);
pub const EGU_INTENSET_TRIGGERED1_Enabled = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED1_Set = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED0_Pos = @as(c_ulong, 0);
pub const EGU_INTENSET_TRIGGERED0_Msk = @as(c_ulong, 0x1) << EGU_INTENSET_TRIGGERED0_Pos;
pub const EGU_INTENSET_TRIGGERED0_Disabled = @as(c_ulong, 0);
pub const EGU_INTENSET_TRIGGERED0_Enabled = @as(c_ulong, 1);
pub const EGU_INTENSET_TRIGGERED0_Set = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED15_Pos = @as(c_ulong, 15);
pub const EGU_INTENCLR_TRIGGERED15_Msk = @as(c_ulong, 0x1) << EGU_INTENCLR_TRIGGERED15_Pos;
pub const EGU_INTENCLR_TRIGGERED15_Disabled = @as(c_ulong, 0);
pub const EGU_INTENCLR_TRIGGERED15_Enabled = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED15_Clear = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED14_Pos = @as(c_ulong, 14);
pub const EGU_INTENCLR_TRIGGERED14_Msk = @as(c_ulong, 0x1) << EGU_INTENCLR_TRIGGERED14_Pos;
pub const EGU_INTENCLR_TRIGGERED14_Disabled = @as(c_ulong, 0);
pub const EGU_INTENCLR_TRIGGERED14_Enabled = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED14_Clear = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED13_Pos = @as(c_ulong, 13);
pub const EGU_INTENCLR_TRIGGERED13_Msk = @as(c_ulong, 0x1) << EGU_INTENCLR_TRIGGERED13_Pos;
pub const EGU_INTENCLR_TRIGGERED13_Disabled = @as(c_ulong, 0);
pub const EGU_INTENCLR_TRIGGERED13_Enabled = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED13_Clear = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED12_Pos = @as(c_ulong, 12);
pub const EGU_INTENCLR_TRIGGERED12_Msk = @as(c_ulong, 0x1) << EGU_INTENCLR_TRIGGERED12_Pos;
pub const EGU_INTENCLR_TRIGGERED12_Disabled = @as(c_ulong, 0);
pub const EGU_INTENCLR_TRIGGERED12_Enabled = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED12_Clear = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED11_Pos = @as(c_ulong, 11);
pub const EGU_INTENCLR_TRIGGERED11_Msk = @as(c_ulong, 0x1) << EGU_INTENCLR_TRIGGERED11_Pos;
pub const EGU_INTENCLR_TRIGGERED11_Disabled = @as(c_ulong, 0);
pub const EGU_INTENCLR_TRIGGERED11_Enabled = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED11_Clear = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED10_Pos = @as(c_ulong, 10);
pub const EGU_INTENCLR_TRIGGERED10_Msk = @as(c_ulong, 0x1) << EGU_INTENCLR_TRIGGERED10_Pos;
pub const EGU_INTENCLR_TRIGGERED10_Disabled = @as(c_ulong, 0);
pub const EGU_INTENCLR_TRIGGERED10_Enabled = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED10_Clear = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED9_Pos = @as(c_ulong, 9);
pub const EGU_INTENCLR_TRIGGERED9_Msk = @as(c_ulong, 0x1) << EGU_INTENCLR_TRIGGERED9_Pos;
pub const EGU_INTENCLR_TRIGGERED9_Disabled = @as(c_ulong, 0);
pub const EGU_INTENCLR_TRIGGERED9_Enabled = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED9_Clear = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED8_Pos = @as(c_ulong, 8);
pub const EGU_INTENCLR_TRIGGERED8_Msk = @as(c_ulong, 0x1) << EGU_INTENCLR_TRIGGERED8_Pos;
pub const EGU_INTENCLR_TRIGGERED8_Disabled = @as(c_ulong, 0);
pub const EGU_INTENCLR_TRIGGERED8_Enabled = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED8_Clear = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED7_Pos = @as(c_ulong, 7);
pub const EGU_INTENCLR_TRIGGERED7_Msk = @as(c_ulong, 0x1) << EGU_INTENCLR_TRIGGERED7_Pos;
pub const EGU_INTENCLR_TRIGGERED7_Disabled = @as(c_ulong, 0);
pub const EGU_INTENCLR_TRIGGERED7_Enabled = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED7_Clear = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED6_Pos = @as(c_ulong, 6);
pub const EGU_INTENCLR_TRIGGERED6_Msk = @as(c_ulong, 0x1) << EGU_INTENCLR_TRIGGERED6_Pos;
pub const EGU_INTENCLR_TRIGGERED6_Disabled = @as(c_ulong, 0);
pub const EGU_INTENCLR_TRIGGERED6_Enabled = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED6_Clear = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED5_Pos = @as(c_ulong, 5);
pub const EGU_INTENCLR_TRIGGERED5_Msk = @as(c_ulong, 0x1) << EGU_INTENCLR_TRIGGERED5_Pos;
pub const EGU_INTENCLR_TRIGGERED5_Disabled = @as(c_ulong, 0);
pub const EGU_INTENCLR_TRIGGERED5_Enabled = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED5_Clear = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED4_Pos = @as(c_ulong, 4);
pub const EGU_INTENCLR_TRIGGERED4_Msk = @as(c_ulong, 0x1) << EGU_INTENCLR_TRIGGERED4_Pos;
pub const EGU_INTENCLR_TRIGGERED4_Disabled = @as(c_ulong, 0);
pub const EGU_INTENCLR_TRIGGERED4_Enabled = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED4_Clear = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED3_Pos = @as(c_ulong, 3);
pub const EGU_INTENCLR_TRIGGERED3_Msk = @as(c_ulong, 0x1) << EGU_INTENCLR_TRIGGERED3_Pos;
pub const EGU_INTENCLR_TRIGGERED3_Disabled = @as(c_ulong, 0);
pub const EGU_INTENCLR_TRIGGERED3_Enabled = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED3_Clear = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED2_Pos = @as(c_ulong, 2);
pub const EGU_INTENCLR_TRIGGERED2_Msk = @as(c_ulong, 0x1) << EGU_INTENCLR_TRIGGERED2_Pos;
pub const EGU_INTENCLR_TRIGGERED2_Disabled = @as(c_ulong, 0);
pub const EGU_INTENCLR_TRIGGERED2_Enabled = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED2_Clear = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED1_Pos = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED1_Msk = @as(c_ulong, 0x1) << EGU_INTENCLR_TRIGGERED1_Pos;
pub const EGU_INTENCLR_TRIGGERED1_Disabled = @as(c_ulong, 0);
pub const EGU_INTENCLR_TRIGGERED1_Enabled = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED1_Clear = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED0_Pos = @as(c_ulong, 0);
pub const EGU_INTENCLR_TRIGGERED0_Msk = @as(c_ulong, 0x1) << EGU_INTENCLR_TRIGGERED0_Pos;
pub const EGU_INTENCLR_TRIGGERED0_Disabled = @as(c_ulong, 0);
pub const EGU_INTENCLR_TRIGGERED0_Enabled = @as(c_ulong, 1);
pub const EGU_INTENCLR_TRIGGERED0_Clear = @as(c_ulong, 1);
pub const FICR_CODEPAGESIZE_CODEPAGESIZE_Pos = @as(c_ulong, 0);
pub const FICR_CODEPAGESIZE_CODEPAGESIZE_Msk = @as(c_ulong, 0xFFFFFFFF) << FICR_CODEPAGESIZE_CODEPAGESIZE_Pos;
pub const FICR_CODESIZE_CODESIZE_Pos = @as(c_ulong, 0);
pub const FICR_CODESIZE_CODESIZE_Msk = @as(c_ulong, 0xFFFFFFFF) << FICR_CODESIZE_CODESIZE_Pos;
pub const FICR_DEVICEID_DEVICEID_Pos = @as(c_ulong, 0);
pub const FICR_DEVICEID_DEVICEID_Msk = @as(c_ulong, 0xFFFFFFFF) << FICR_DEVICEID_DEVICEID_Pos;
pub const FICR_ER_ER_Pos = @as(c_ulong, 0);
pub const FICR_ER_ER_Msk = @as(c_ulong, 0xFFFFFFFF) << FICR_ER_ER_Pos;
pub const FICR_IR_IR_Pos = @as(c_ulong, 0);
pub const FICR_IR_IR_Msk = @as(c_ulong, 0xFFFFFFFF) << FICR_IR_IR_Pos;
pub const FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Pos = @as(c_ulong, 0);
pub const FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Msk = @as(c_ulong, 0x1) << FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Pos;
pub const FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Public = @as(c_ulong, 0);
pub const FICR_DEVICEADDRTYPE_DEVICEADDRTYPE_Random = @as(c_ulong, 1);
pub const FICR_DEVICEADDR_DEVICEADDR_Pos = @as(c_ulong, 0);
pub const FICR_DEVICEADDR_DEVICEADDR_Msk = @as(c_ulong, 0xFFFFFFFF) << FICR_DEVICEADDR_DEVICEADDR_Pos;
pub const FICR_INFO_PART_PART_Pos = @as(c_ulong, 0);
pub const FICR_INFO_PART_PART_Msk = @as(c_ulong, 0xFFFFFFFF) << FICR_INFO_PART_PART_Pos;
pub const FICR_INFO_PART_PART_N52833 = @as(c_ulong, 0x52833);
pub const FICR_INFO_PART_PART_N52840 = @as(c_ulong, 0x52840);
pub const FICR_INFO_PART_PART_Unspecified = @as(c_ulong, 0xFFFFFFFF);
pub const FICR_INFO_VARIANT_VARIANT_Pos = @as(c_ulong, 0);
pub const FICR_INFO_VARIANT_VARIANT_Msk = @as(c_ulong, 0xFFFFFFFF) << FICR_INFO_VARIANT_VARIANT_Pos;
pub const FICR_INFO_VARIANT_VARIANT_AAAA = @as(c_ulong, 0x41414141);
pub const FICR_INFO_VARIANT_VARIANT_AAAB = @as(c_ulong, 0x41414142);
pub const FICR_INFO_VARIANT_VARIANT_AABA = @as(c_ulong, 0x41414241);
pub const FICR_INFO_VARIANT_VARIANT_AABB = @as(c_ulong, 0x41414242);
pub const FICR_INFO_VARIANT_VARIANT_AACA = @as(c_ulong, 0x41414341);
pub const FICR_INFO_VARIANT_VARIANT_BAAA = @as(c_ulong, 0x42414141);
pub const FICR_INFO_VARIANT_VARIANT_CAAA = @as(c_ulong, 0x43414141);
pub const FICR_INFO_VARIANT_VARIANT_Unspecified = @as(c_ulong, 0xFFFFFFFF);
pub const FICR_INFO_PACKAGE_PACKAGE_Pos = @as(c_ulong, 0);
pub const FICR_INFO_PACKAGE_PACKAGE_Msk = @as(c_ulong, 0xFFFFFFFF) << FICR_INFO_PACKAGE_PACKAGE_Pos;
pub const FICR_INFO_PACKAGE_PACKAGE_QI = @as(c_ulong, 0x2004);
pub const FICR_INFO_PACKAGE_PACKAGE_CK = @as(c_ulong, 0x2005);
pub const FICR_INFO_PACKAGE_PACKAGE_Unspecified = @as(c_ulong, 0xFFFFFFFF);
pub const FICR_INFO_RAM_RAM_Pos = @as(c_ulong, 0);
pub const FICR_INFO_RAM_RAM_Msk = @as(c_ulong, 0xFFFFFFFF) << FICR_INFO_RAM_RAM_Pos;
pub const FICR_INFO_RAM_RAM_K16 = @as(c_ulong, 0x10);
pub const FICR_INFO_RAM_RAM_K32 = @as(c_ulong, 0x20);
pub const FICR_INFO_RAM_RAM_K64 = @as(c_ulong, 0x40);
pub const FICR_INFO_RAM_RAM_K128 = @as(c_ulong, 0x80);
pub const FICR_INFO_RAM_RAM_K256 = @as(c_ulong, 0x100);
pub const FICR_INFO_RAM_RAM_Unspecified = @as(c_ulong, 0xFFFFFFFF);
pub const FICR_INFO_FLASH_FLASH_Pos = @as(c_ulong, 0);
pub const FICR_INFO_FLASH_FLASH_Msk = @as(c_ulong, 0xFFFFFFFF) << FICR_INFO_FLASH_FLASH_Pos;
pub const FICR_INFO_FLASH_FLASH_K128 = @as(c_ulong, 0x80);
pub const FICR_INFO_FLASH_FLASH_K256 = @as(c_ulong, 0x100);
pub const FICR_INFO_FLASH_FLASH_K512 = @as(c_ulong, 0x200);
pub const FICR_INFO_FLASH_FLASH_K1024 = @as(c_ulong, 0x400);
pub const FICR_INFO_FLASH_FLASH_K2048 = @as(c_ulong, 0x800);
pub const FICR_INFO_FLASH_FLASH_Unspecified = @as(c_ulong, 0xFFFFFFFF);
pub const FICR_PRODTEST_PRODTEST_Pos = @as(c_ulong, 0);
pub const FICR_PRODTEST_PRODTEST_Msk = @as(c_ulong, 0xFFFFFFFF) << FICR_PRODTEST_PRODTEST_Pos;
pub const FICR_PRODTEST_PRODTEST_Done = @as(c_ulong, 0xBB42319F);
pub const FICR_PRODTEST_PRODTEST_NotDone = @as(c_ulong, 0xFFFFFFFF);
pub const FICR_TEMP_A0_A_Pos = @as(c_ulong, 0);
pub const FICR_TEMP_A0_A_Msk = @as(c_ulong, 0xFFF) << FICR_TEMP_A0_A_Pos;
pub const FICR_TEMP_A1_A_Pos = @as(c_ulong, 0);
pub const FICR_TEMP_A1_A_Msk = @as(c_ulong, 0xFFF) << FICR_TEMP_A1_A_Pos;
pub const FICR_TEMP_A2_A_Pos = @as(c_ulong, 0);
pub const FICR_TEMP_A2_A_Msk = @as(c_ulong, 0xFFF) << FICR_TEMP_A2_A_Pos;
pub const FICR_TEMP_A3_A_Pos = @as(c_ulong, 0);
pub const FICR_TEMP_A3_A_Msk = @as(c_ulong, 0xFFF) << FICR_TEMP_A3_A_Pos;
pub const FICR_TEMP_A4_A_Pos = @as(c_ulong, 0);
pub const FICR_TEMP_A4_A_Msk = @as(c_ulong, 0xFFF) << FICR_TEMP_A4_A_Pos;
pub const FICR_TEMP_A5_A_Pos = @as(c_ulong, 0);
pub const FICR_TEMP_A5_A_Msk = @as(c_ulong, 0xFFF) << FICR_TEMP_A5_A_Pos;
pub const FICR_TEMP_B0_B_Pos = @as(c_ulong, 0);
pub const FICR_TEMP_B0_B_Msk = @as(c_ulong, 0x3FFF) << FICR_TEMP_B0_B_Pos;
pub const FICR_TEMP_B1_B_Pos = @as(c_ulong, 0);
pub const FICR_TEMP_B1_B_Msk = @as(c_ulong, 0x3FFF) << FICR_TEMP_B1_B_Pos;
pub const FICR_TEMP_B2_B_Pos = @as(c_ulong, 0);
pub const FICR_TEMP_B2_B_Msk = @as(c_ulong, 0x3FFF) << FICR_TEMP_B2_B_Pos;
pub const FICR_TEMP_B3_B_Pos = @as(c_ulong, 0);
pub const FICR_TEMP_B3_B_Msk = @as(c_ulong, 0x3FFF) << FICR_TEMP_B3_B_Pos;
pub const FICR_TEMP_B4_B_Pos = @as(c_ulong, 0);
pub const FICR_TEMP_B4_B_Msk = @as(c_ulong, 0x3FFF) << FICR_TEMP_B4_B_Pos;
pub const FICR_TEMP_B5_B_Pos = @as(c_ulong, 0);
pub const FICR_TEMP_B5_B_Msk = @as(c_ulong, 0x3FFF) << FICR_TEMP_B5_B_Pos;
pub const FICR_TEMP_T0_T_Pos = @as(c_ulong, 0);
pub const FICR_TEMP_T0_T_Msk = @as(c_ulong, 0xFF) << FICR_TEMP_T0_T_Pos;
pub const FICR_TEMP_T1_T_Pos = @as(c_ulong, 0);
pub const FICR_TEMP_T1_T_Msk = @as(c_ulong, 0xFF) << FICR_TEMP_T1_T_Pos;
pub const FICR_TEMP_T2_T_Pos = @as(c_ulong, 0);
pub const FICR_TEMP_T2_T_Msk = @as(c_ulong, 0xFF) << FICR_TEMP_T2_T_Pos;
pub const FICR_TEMP_T3_T_Pos = @as(c_ulong, 0);
pub const FICR_TEMP_T3_T_Msk = @as(c_ulong, 0xFF) << FICR_TEMP_T3_T_Pos;
pub const FICR_TEMP_T4_T_Pos = @as(c_ulong, 0);
pub const FICR_TEMP_T4_T_Msk = @as(c_ulong, 0xFF) << FICR_TEMP_T4_T_Pos;
pub const FICR_NFC_TAGHEADER0_UD3_Pos = @as(c_ulong, 24);
pub const FICR_NFC_TAGHEADER0_UD3_Msk = @as(c_ulong, 0xFF) << FICR_NFC_TAGHEADER0_UD3_Pos;
pub const FICR_NFC_TAGHEADER0_UD2_Pos = @as(c_ulong, 16);
pub const FICR_NFC_TAGHEADER0_UD2_Msk = @as(c_ulong, 0xFF) << FICR_NFC_TAGHEADER0_UD2_Pos;
pub const FICR_NFC_TAGHEADER0_UD1_Pos = @as(c_ulong, 8);
pub const FICR_NFC_TAGHEADER0_UD1_Msk = @as(c_ulong, 0xFF) << FICR_NFC_TAGHEADER0_UD1_Pos;
pub const FICR_NFC_TAGHEADER0_MFGID_Pos = @as(c_ulong, 0);
pub const FICR_NFC_TAGHEADER0_MFGID_Msk = @as(c_ulong, 0xFF) << FICR_NFC_TAGHEADER0_MFGID_Pos;
pub const FICR_NFC_TAGHEADER1_UD7_Pos = @as(c_ulong, 24);
pub const FICR_NFC_TAGHEADER1_UD7_Msk = @as(c_ulong, 0xFF) << FICR_NFC_TAGHEADER1_UD7_Pos;
pub const FICR_NFC_TAGHEADER1_UD6_Pos = @as(c_ulong, 16);
pub const FICR_NFC_TAGHEADER1_UD6_Msk = @as(c_ulong, 0xFF) << FICR_NFC_TAGHEADER1_UD6_Pos;
pub const FICR_NFC_TAGHEADER1_UD5_Pos = @as(c_ulong, 8);
pub const FICR_NFC_TAGHEADER1_UD5_Msk = @as(c_ulong, 0xFF) << FICR_NFC_TAGHEADER1_UD5_Pos;
pub const FICR_NFC_TAGHEADER1_UD4_Pos = @as(c_ulong, 0);
pub const FICR_NFC_TAGHEADER1_UD4_Msk = @as(c_ulong, 0xFF) << FICR_NFC_TAGHEADER1_UD4_Pos;
pub const FICR_NFC_TAGHEADER2_UD11_Pos = @as(c_ulong, 24);
pub const FICR_NFC_TAGHEADER2_UD11_Msk = @as(c_ulong, 0xFF) << FICR_NFC_TAGHEADER2_UD11_Pos;
pub const FICR_NFC_TAGHEADER2_UD10_Pos = @as(c_ulong, 16);
pub const FICR_NFC_TAGHEADER2_UD10_Msk = @as(c_ulong, 0xFF) << FICR_NFC_TAGHEADER2_UD10_Pos;
pub const FICR_NFC_TAGHEADER2_UD9_Pos = @as(c_ulong, 8);
pub const FICR_NFC_TAGHEADER2_UD9_Msk = @as(c_ulong, 0xFF) << FICR_NFC_TAGHEADER2_UD9_Pos;
pub const FICR_NFC_TAGHEADER2_UD8_Pos = @as(c_ulong, 0);
pub const FICR_NFC_TAGHEADER2_UD8_Msk = @as(c_ulong, 0xFF) << FICR_NFC_TAGHEADER2_UD8_Pos;
pub const FICR_NFC_TAGHEADER3_UD15_Pos = @as(c_ulong, 24);
pub const FICR_NFC_TAGHEADER3_UD15_Msk = @as(c_ulong, 0xFF) << FICR_NFC_TAGHEADER3_UD15_Pos;
pub const FICR_NFC_TAGHEADER3_UD14_Pos = @as(c_ulong, 16);
pub const FICR_NFC_TAGHEADER3_UD14_Msk = @as(c_ulong, 0xFF) << FICR_NFC_TAGHEADER3_UD14_Pos;
pub const FICR_NFC_TAGHEADER3_UD13_Pos = @as(c_ulong, 8);
pub const FICR_NFC_TAGHEADER3_UD13_Msk = @as(c_ulong, 0xFF) << FICR_NFC_TAGHEADER3_UD13_Pos;
pub const FICR_NFC_TAGHEADER3_UD12_Pos = @as(c_ulong, 0);
pub const FICR_NFC_TAGHEADER3_UD12_Msk = @as(c_ulong, 0xFF) << FICR_NFC_TAGHEADER3_UD12_Pos;
pub const FICR_TRNG90B_BYTES_BYTES_Pos = @as(c_ulong, 0);
pub const FICR_TRNG90B_BYTES_BYTES_Msk = @as(c_ulong, 0xFFFFFFFF) << FICR_TRNG90B_BYTES_BYTES_Pos;
pub const FICR_TRNG90B_RCCUTOFF_RCCUTOFF_Pos = @as(c_ulong, 0);
pub const FICR_TRNG90B_RCCUTOFF_RCCUTOFF_Msk = @as(c_ulong, 0xFFFFFFFF) << FICR_TRNG90B_RCCUTOFF_RCCUTOFF_Pos;
pub const FICR_TRNG90B_APCUTOFF_APCUTOFF_Pos = @as(c_ulong, 0);
pub const FICR_TRNG90B_APCUTOFF_APCUTOFF_Msk = @as(c_ulong, 0xFFFFFFFF) << FICR_TRNG90B_APCUTOFF_APCUTOFF_Pos;
pub const FICR_TRNG90B_STARTUP_STARTUP_Pos = @as(c_ulong, 0);
pub const FICR_TRNG90B_STARTUP_STARTUP_Msk = @as(c_ulong, 0xFFFFFFFF) << FICR_TRNG90B_STARTUP_STARTUP_Pos;
pub const FICR_TRNG90B_ROSC1_ROSC1_Pos = @as(c_ulong, 0);
pub const FICR_TRNG90B_ROSC1_ROSC1_Msk = @as(c_ulong, 0xFFFFFFFF) << FICR_TRNG90B_ROSC1_ROSC1_Pos;
pub const FICR_TRNG90B_ROSC2_ROSC2_Pos = @as(c_ulong, 0);
pub const FICR_TRNG90B_ROSC2_ROSC2_Msk = @as(c_ulong, 0xFFFFFFFF) << FICR_TRNG90B_ROSC2_ROSC2_Pos;
pub const FICR_TRNG90B_ROSC3_ROSC3_Pos = @as(c_ulong, 0);
pub const FICR_TRNG90B_ROSC3_ROSC3_Msk = @as(c_ulong, 0xFFFFFFFF) << FICR_TRNG90B_ROSC3_ROSC3_Pos;
pub const FICR_TRNG90B_ROSC4_ROSC4_Pos = @as(c_ulong, 0);
pub const FICR_TRNG90B_ROSC4_ROSC4_Msk = @as(c_ulong, 0xFFFFFFFF) << FICR_TRNG90B_ROSC4_ROSC4_Pos;
pub const GPIOTE_TASKS_OUT_TASKS_OUT_Pos = @as(c_ulong, 0);
pub const GPIOTE_TASKS_OUT_TASKS_OUT_Msk = @as(c_ulong, 0x1) << GPIOTE_TASKS_OUT_TASKS_OUT_Pos;
pub const GPIOTE_TASKS_OUT_TASKS_OUT_Trigger = @as(c_ulong, 1);
pub const GPIOTE_TASKS_SET_TASKS_SET_Pos = @as(c_ulong, 0);
pub const GPIOTE_TASKS_SET_TASKS_SET_Msk = @as(c_ulong, 0x1) << GPIOTE_TASKS_SET_TASKS_SET_Pos;
pub const GPIOTE_TASKS_SET_TASKS_SET_Trigger = @as(c_ulong, 1);
pub const GPIOTE_TASKS_CLR_TASKS_CLR_Pos = @as(c_ulong, 0);
pub const GPIOTE_TASKS_CLR_TASKS_CLR_Msk = @as(c_ulong, 0x1) << GPIOTE_TASKS_CLR_TASKS_CLR_Pos;
pub const GPIOTE_TASKS_CLR_TASKS_CLR_Trigger = @as(c_ulong, 1);
pub const GPIOTE_EVENTS_IN_EVENTS_IN_Pos = @as(c_ulong, 0);
pub const GPIOTE_EVENTS_IN_EVENTS_IN_Msk = @as(c_ulong, 0x1) << GPIOTE_EVENTS_IN_EVENTS_IN_Pos;
pub const GPIOTE_EVENTS_IN_EVENTS_IN_NotGenerated = @as(c_ulong, 0);
pub const GPIOTE_EVENTS_IN_EVENTS_IN_Generated = @as(c_ulong, 1);
pub const GPIOTE_EVENTS_PORT_EVENTS_PORT_Pos = @as(c_ulong, 0);
pub const GPIOTE_EVENTS_PORT_EVENTS_PORT_Msk = @as(c_ulong, 0x1) << GPIOTE_EVENTS_PORT_EVENTS_PORT_Pos;
pub const GPIOTE_EVENTS_PORT_EVENTS_PORT_NotGenerated = @as(c_ulong, 0);
pub const GPIOTE_EVENTS_PORT_EVENTS_PORT_Generated = @as(c_ulong, 1);
pub const GPIOTE_INTENSET_PORT_Pos = @as(c_ulong, 31);
pub const GPIOTE_INTENSET_PORT_Msk = @as(c_ulong, 0x1) << GPIOTE_INTENSET_PORT_Pos;
pub const GPIOTE_INTENSET_PORT_Disabled = @as(c_ulong, 0);
pub const GPIOTE_INTENSET_PORT_Enabled = @as(c_ulong, 1);
pub const GPIOTE_INTENSET_PORT_Set = @as(c_ulong, 1);
pub const GPIOTE_INTENSET_IN7_Pos = @as(c_ulong, 7);
pub const GPIOTE_INTENSET_IN7_Msk = @as(c_ulong, 0x1) << GPIOTE_INTENSET_IN7_Pos;
pub const GPIOTE_INTENSET_IN7_Disabled = @as(c_ulong, 0);
pub const GPIOTE_INTENSET_IN7_Enabled = @as(c_ulong, 1);
pub const GPIOTE_INTENSET_IN7_Set = @as(c_ulong, 1);
pub const GPIOTE_INTENSET_IN6_Pos = @as(c_ulong, 6);
pub const GPIOTE_INTENSET_IN6_Msk = @as(c_ulong, 0x1) << GPIOTE_INTENSET_IN6_Pos;
pub const GPIOTE_INTENSET_IN6_Disabled = @as(c_ulong, 0);
pub const GPIOTE_INTENSET_IN6_Enabled = @as(c_ulong, 1);
pub const GPIOTE_INTENSET_IN6_Set = @as(c_ulong, 1);
pub const GPIOTE_INTENSET_IN5_Pos = @as(c_ulong, 5);
pub const GPIOTE_INTENSET_IN5_Msk = @as(c_ulong, 0x1) << GPIOTE_INTENSET_IN5_Pos;
pub const GPIOTE_INTENSET_IN5_Disabled = @as(c_ulong, 0);
pub const GPIOTE_INTENSET_IN5_Enabled = @as(c_ulong, 1);
pub const GPIOTE_INTENSET_IN5_Set = @as(c_ulong, 1);
pub const GPIOTE_INTENSET_IN4_Pos = @as(c_ulong, 4);
pub const GPIOTE_INTENSET_IN4_Msk = @as(c_ulong, 0x1) << GPIOTE_INTENSET_IN4_Pos;
pub const GPIOTE_INTENSET_IN4_Disabled = @as(c_ulong, 0);
pub const GPIOTE_INTENSET_IN4_Enabled = @as(c_ulong, 1);
pub const GPIOTE_INTENSET_IN4_Set = @as(c_ulong, 1);
pub const GPIOTE_INTENSET_IN3_Pos = @as(c_ulong, 3);
pub const GPIOTE_INTENSET_IN3_Msk = @as(c_ulong, 0x1) << GPIOTE_INTENSET_IN3_Pos;
pub const GPIOTE_INTENSET_IN3_Disabled = @as(c_ulong, 0);
pub const GPIOTE_INTENSET_IN3_Enabled = @as(c_ulong, 1);
pub const GPIOTE_INTENSET_IN3_Set = @as(c_ulong, 1);
pub const GPIOTE_INTENSET_IN2_Pos = @as(c_ulong, 2);
pub const GPIOTE_INTENSET_IN2_Msk = @as(c_ulong, 0x1) << GPIOTE_INTENSET_IN2_Pos;
pub const GPIOTE_INTENSET_IN2_Disabled = @as(c_ulong, 0);
pub const GPIOTE_INTENSET_IN2_Enabled = @as(c_ulong, 1);
pub const GPIOTE_INTENSET_IN2_Set = @as(c_ulong, 1);
pub const GPIOTE_INTENSET_IN1_Pos = @as(c_ulong, 1);
pub const GPIOTE_INTENSET_IN1_Msk = @as(c_ulong, 0x1) << GPIOTE_INTENSET_IN1_Pos;
pub const GPIOTE_INTENSET_IN1_Disabled = @as(c_ulong, 0);
pub const GPIOTE_INTENSET_IN1_Enabled = @as(c_ulong, 1);
pub const GPIOTE_INTENSET_IN1_Set = @as(c_ulong, 1);
pub const GPIOTE_INTENSET_IN0_Pos = @as(c_ulong, 0);
pub const GPIOTE_INTENSET_IN0_Msk = @as(c_ulong, 0x1) << GPIOTE_INTENSET_IN0_Pos;
pub const GPIOTE_INTENSET_IN0_Disabled = @as(c_ulong, 0);
pub const GPIOTE_INTENSET_IN0_Enabled = @as(c_ulong, 1);
pub const GPIOTE_INTENSET_IN0_Set = @as(c_ulong, 1);
pub const GPIOTE_INTENCLR_PORT_Pos = @as(c_ulong, 31);
pub const GPIOTE_INTENCLR_PORT_Msk = @as(c_ulong, 0x1) << GPIOTE_INTENCLR_PORT_Pos;
pub const GPIOTE_INTENCLR_PORT_Disabled = @as(c_ulong, 0);
pub const GPIOTE_INTENCLR_PORT_Enabled = @as(c_ulong, 1);
pub const GPIOTE_INTENCLR_PORT_Clear = @as(c_ulong, 1);
pub const GPIOTE_INTENCLR_IN7_Pos = @as(c_ulong, 7);
pub const GPIOTE_INTENCLR_IN7_Msk = @as(c_ulong, 0x1) << GPIOTE_INTENCLR_IN7_Pos;
pub const GPIOTE_INTENCLR_IN7_Disabled = @as(c_ulong, 0);
pub const GPIOTE_INTENCLR_IN7_Enabled = @as(c_ulong, 1);
pub const GPIOTE_INTENCLR_IN7_Clear = @as(c_ulong, 1);
pub const GPIOTE_INTENCLR_IN6_Pos = @as(c_ulong, 6);
pub const GPIOTE_INTENCLR_IN6_Msk = @as(c_ulong, 0x1) << GPIOTE_INTENCLR_IN6_Pos;
pub const GPIOTE_INTENCLR_IN6_Disabled = @as(c_ulong, 0);
pub const GPIOTE_INTENCLR_IN6_Enabled = @as(c_ulong, 1);
pub const GPIOTE_INTENCLR_IN6_Clear = @as(c_ulong, 1);
pub const GPIOTE_INTENCLR_IN5_Pos = @as(c_ulong, 5);
pub const GPIOTE_INTENCLR_IN5_Msk = @as(c_ulong, 0x1) << GPIOTE_INTENCLR_IN5_Pos;
pub const GPIOTE_INTENCLR_IN5_Disabled = @as(c_ulong, 0);
pub const GPIOTE_INTENCLR_IN5_Enabled = @as(c_ulong, 1);
pub const GPIOTE_INTENCLR_IN5_Clear = @as(c_ulong, 1);
pub const GPIOTE_INTENCLR_IN4_Pos = @as(c_ulong, 4);
pub const GPIOTE_INTENCLR_IN4_Msk = @as(c_ulong, 0x1) << GPIOTE_INTENCLR_IN4_Pos;
pub const GPIOTE_INTENCLR_IN4_Disabled = @as(c_ulong, 0);
pub const GPIOTE_INTENCLR_IN4_Enabled = @as(c_ulong, 1);
pub const GPIOTE_INTENCLR_IN4_Clear = @as(c_ulong, 1);
pub const GPIOTE_INTENCLR_IN3_Pos = @as(c_ulong, 3);
pub const GPIOTE_INTENCLR_IN3_Msk = @as(c_ulong, 0x1) << GPIOTE_INTENCLR_IN3_Pos;
pub const GPIOTE_INTENCLR_IN3_Disabled = @as(c_ulong, 0);
pub const GPIOTE_INTENCLR_IN3_Enabled = @as(c_ulong, 1);
pub const GPIOTE_INTENCLR_IN3_Clear = @as(c_ulong, 1);
pub const GPIOTE_INTENCLR_IN2_Pos = @as(c_ulong, 2);
pub const GPIOTE_INTENCLR_IN2_Msk = @as(c_ulong, 0x1) << GPIOTE_INTENCLR_IN2_Pos;
pub const GPIOTE_INTENCLR_IN2_Disabled = @as(c_ulong, 0);
pub const GPIOTE_INTENCLR_IN2_Enabled = @as(c_ulong, 1);
pub const GPIOTE_INTENCLR_IN2_Clear = @as(c_ulong, 1);
pub const GPIOTE_INTENCLR_IN1_Pos = @as(c_ulong, 1);
pub const GPIOTE_INTENCLR_IN1_Msk = @as(c_ulong, 0x1) << GPIOTE_INTENCLR_IN1_Pos;
pub const GPIOTE_INTENCLR_IN1_Disabled = @as(c_ulong, 0);
pub const GPIOTE_INTENCLR_IN1_Enabled = @as(c_ulong, 1);
pub const GPIOTE_INTENCLR_IN1_Clear = @as(c_ulong, 1);
pub const GPIOTE_INTENCLR_IN0_Pos = @as(c_ulong, 0);
pub const GPIOTE_INTENCLR_IN0_Msk = @as(c_ulong, 0x1) << GPIOTE_INTENCLR_IN0_Pos;
pub const GPIOTE_INTENCLR_IN0_Disabled = @as(c_ulong, 0);
pub const GPIOTE_INTENCLR_IN0_Enabled = @as(c_ulong, 1);
pub const GPIOTE_INTENCLR_IN0_Clear = @as(c_ulong, 1);
pub const GPIOTE_CONFIG_OUTINIT_Pos = @as(c_ulong, 20);
pub const GPIOTE_CONFIG_OUTINIT_Msk = @as(c_ulong, 0x1) << GPIOTE_CONFIG_OUTINIT_Pos;
pub const GPIOTE_CONFIG_OUTINIT_Low = @as(c_ulong, 0);
pub const GPIOTE_CONFIG_OUTINIT_High = @as(c_ulong, 1);
pub const GPIOTE_CONFIG_POLARITY_Pos = @as(c_ulong, 16);
pub const GPIOTE_CONFIG_POLARITY_Msk = @as(c_ulong, 0x3) << GPIOTE_CONFIG_POLARITY_Pos;
pub const GPIOTE_CONFIG_POLARITY_None = @as(c_ulong, 0);
pub const GPIOTE_CONFIG_POLARITY_LoToHi = @as(c_ulong, 1);
pub const GPIOTE_CONFIG_POLARITY_HiToLo = @as(c_ulong, 2);
pub const GPIOTE_CONFIG_POLARITY_Toggle = @as(c_ulong, 3);
pub const GPIOTE_CONFIG_PORT_Pos = @as(c_ulong, 13);
pub const GPIOTE_CONFIG_PORT_Msk = @as(c_ulong, 0x1) << GPIOTE_CONFIG_PORT_Pos;
pub const GPIOTE_CONFIG_PSEL_Pos = @as(c_ulong, 8);
pub const GPIOTE_CONFIG_PSEL_Msk = @as(c_ulong, 0x1F) << GPIOTE_CONFIG_PSEL_Pos;
pub const GPIOTE_CONFIG_MODE_Pos = @as(c_ulong, 0);
pub const GPIOTE_CONFIG_MODE_Msk = @as(c_ulong, 0x3) << GPIOTE_CONFIG_MODE_Pos;
pub const GPIOTE_CONFIG_MODE_Disabled = @as(c_ulong, 0);
pub const GPIOTE_CONFIG_MODE_Event = @as(c_ulong, 1);
pub const GPIOTE_CONFIG_MODE_Task = @as(c_ulong, 3);
pub const I2S_TASKS_START_TASKS_START_Pos = @as(c_ulong, 0);
pub const I2S_TASKS_START_TASKS_START_Msk = @as(c_ulong, 0x1) << I2S_TASKS_START_TASKS_START_Pos;
pub const I2S_TASKS_START_TASKS_START_Trigger = @as(c_ulong, 1);
pub const I2S_TASKS_STOP_TASKS_STOP_Pos = @as(c_ulong, 0);
pub const I2S_TASKS_STOP_TASKS_STOP_Msk = @as(c_ulong, 0x1) << I2S_TASKS_STOP_TASKS_STOP_Pos;
pub const I2S_TASKS_STOP_TASKS_STOP_Trigger = @as(c_ulong, 1);
pub const I2S_EVENTS_RXPTRUPD_EVENTS_RXPTRUPD_Pos = @as(c_ulong, 0);
pub const I2S_EVENTS_RXPTRUPD_EVENTS_RXPTRUPD_Msk = @as(c_ulong, 0x1) << I2S_EVENTS_RXPTRUPD_EVENTS_RXPTRUPD_Pos;
pub const I2S_EVENTS_RXPTRUPD_EVENTS_RXPTRUPD_NotGenerated = @as(c_ulong, 0);
pub const I2S_EVENTS_RXPTRUPD_EVENTS_RXPTRUPD_Generated = @as(c_ulong, 1);
pub const I2S_EVENTS_STOPPED_EVENTS_STOPPED_Pos = @as(c_ulong, 0);
pub const I2S_EVENTS_STOPPED_EVENTS_STOPPED_Msk = @as(c_ulong, 0x1) << I2S_EVENTS_STOPPED_EVENTS_STOPPED_Pos;
pub const I2S_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated = @as(c_ulong, 0);
pub const I2S_EVENTS_STOPPED_EVENTS_STOPPED_Generated = @as(c_ulong, 1);
pub const I2S_EVENTS_TXPTRUPD_EVENTS_TXPTRUPD_Pos = @as(c_ulong, 0);
pub const I2S_EVENTS_TXPTRUPD_EVENTS_TXPTRUPD_Msk = @as(c_ulong, 0x1) << I2S_EVENTS_TXPTRUPD_EVENTS_TXPTRUPD_Pos;
pub const I2S_EVENTS_TXPTRUPD_EVENTS_TXPTRUPD_NotGenerated = @as(c_ulong, 0);
pub const I2S_EVENTS_TXPTRUPD_EVENTS_TXPTRUPD_Generated = @as(c_ulong, 1);
pub const I2S_INTEN_TXPTRUPD_Pos = @as(c_ulong, 5);
pub const I2S_INTEN_TXPTRUPD_Msk = @as(c_ulong, 0x1) << I2S_INTEN_TXPTRUPD_Pos;
pub const I2S_INTEN_TXPTRUPD_Disabled = @as(c_ulong, 0);
pub const I2S_INTEN_TXPTRUPD_Enabled = @as(c_ulong, 1);
pub const I2S_INTEN_STOPPED_Pos = @as(c_ulong, 2);
pub const I2S_INTEN_STOPPED_Msk = @as(c_ulong, 0x1) << I2S_INTEN_STOPPED_Pos;
pub const I2S_INTEN_STOPPED_Disabled = @as(c_ulong, 0);
pub const I2S_INTEN_STOPPED_Enabled = @as(c_ulong, 1);
pub const I2S_INTEN_RXPTRUPD_Pos = @as(c_ulong, 1);
pub const I2S_INTEN_RXPTRUPD_Msk = @as(c_ulong, 0x1) << I2S_INTEN_RXPTRUPD_Pos;
pub const I2S_INTEN_RXPTRUPD_Disabled = @as(c_ulong, 0);
pub const I2S_INTEN_RXPTRUPD_Enabled = @as(c_ulong, 1);
pub const I2S_INTENSET_TXPTRUPD_Pos = @as(c_ulong, 5);
pub const I2S_INTENSET_TXPTRUPD_Msk = @as(c_ulong, 0x1) << I2S_INTENSET_TXPTRUPD_Pos;
pub const I2S_INTENSET_TXPTRUPD_Disabled = @as(c_ulong, 0);
pub const I2S_INTENSET_TXPTRUPD_Enabled = @as(c_ulong, 1);
pub const I2S_INTENSET_TXPTRUPD_Set = @as(c_ulong, 1);
pub const I2S_INTENSET_STOPPED_Pos = @as(c_ulong, 2);
pub const I2S_INTENSET_STOPPED_Msk = @as(c_ulong, 0x1) << I2S_INTENSET_STOPPED_Pos;
pub const I2S_INTENSET_STOPPED_Disabled = @as(c_ulong, 0);
pub const I2S_INTENSET_STOPPED_Enabled = @as(c_ulong, 1);
pub const I2S_INTENSET_STOPPED_Set = @as(c_ulong, 1);
pub const I2S_INTENSET_RXPTRUPD_Pos = @as(c_ulong, 1);
pub const I2S_INTENSET_RXPTRUPD_Msk = @as(c_ulong, 0x1) << I2S_INTENSET_RXPTRUPD_Pos;
pub const I2S_INTENSET_RXPTRUPD_Disabled = @as(c_ulong, 0);
pub const I2S_INTENSET_RXPTRUPD_Enabled = @as(c_ulong, 1);
pub const I2S_INTENSET_RXPTRUPD_Set = @as(c_ulong, 1);
pub const I2S_INTENCLR_TXPTRUPD_Pos = @as(c_ulong, 5);
pub const I2S_INTENCLR_TXPTRUPD_Msk = @as(c_ulong, 0x1) << I2S_INTENCLR_TXPTRUPD_Pos;
pub const I2S_INTENCLR_TXPTRUPD_Disabled = @as(c_ulong, 0);
pub const I2S_INTENCLR_TXPTRUPD_Enabled = @as(c_ulong, 1);
pub const I2S_INTENCLR_TXPTRUPD_Clear = @as(c_ulong, 1);
pub const I2S_INTENCLR_STOPPED_Pos = @as(c_ulong, 2);
pub const I2S_INTENCLR_STOPPED_Msk = @as(c_ulong, 0x1) << I2S_INTENCLR_STOPPED_Pos;
pub const I2S_INTENCLR_STOPPED_Disabled = @as(c_ulong, 0);
pub const I2S_INTENCLR_STOPPED_Enabled = @as(c_ulong, 1);
pub const I2S_INTENCLR_STOPPED_Clear = @as(c_ulong, 1);
pub const I2S_INTENCLR_RXPTRUPD_Pos = @as(c_ulong, 1);
pub const I2S_INTENCLR_RXPTRUPD_Msk = @as(c_ulong, 0x1) << I2S_INTENCLR_RXPTRUPD_Pos;
pub const I2S_INTENCLR_RXPTRUPD_Disabled = @as(c_ulong, 0);
pub const I2S_INTENCLR_RXPTRUPD_Enabled = @as(c_ulong, 1);
pub const I2S_INTENCLR_RXPTRUPD_Clear = @as(c_ulong, 1);
pub const I2S_ENABLE_ENABLE_Pos = @as(c_ulong, 0);
pub const I2S_ENABLE_ENABLE_Msk = @as(c_ulong, 0x1) << I2S_ENABLE_ENABLE_Pos;
pub const I2S_ENABLE_ENABLE_Disabled = @as(c_ulong, 0);
pub const I2S_ENABLE_ENABLE_Enabled = @as(c_ulong, 1);
pub const I2S_CONFIG_MODE_MODE_Pos = @as(c_ulong, 0);
pub const I2S_CONFIG_MODE_MODE_Msk = @as(c_ulong, 0x1) << I2S_CONFIG_MODE_MODE_Pos;
pub const I2S_CONFIG_MODE_MODE_Master = @as(c_ulong, 0);
pub const I2S_CONFIG_MODE_MODE_Slave = @as(c_ulong, 1);
pub const I2S_CONFIG_RXEN_RXEN_Pos = @as(c_ulong, 0);
pub const I2S_CONFIG_RXEN_RXEN_Msk = @as(c_ulong, 0x1) << I2S_CONFIG_RXEN_RXEN_Pos;
pub const I2S_CONFIG_RXEN_RXEN_Disabled = @as(c_ulong, 0);
pub const I2S_CONFIG_RXEN_RXEN_Enabled = @as(c_ulong, 1);
pub const I2S_CONFIG_TXEN_TXEN_Pos = @as(c_ulong, 0);
pub const I2S_CONFIG_TXEN_TXEN_Msk = @as(c_ulong, 0x1) << I2S_CONFIG_TXEN_TXEN_Pos;
pub const I2S_CONFIG_TXEN_TXEN_Disabled = @as(c_ulong, 0);
pub const I2S_CONFIG_TXEN_TXEN_Enabled = @as(c_ulong, 1);
pub const I2S_CONFIG_MCKEN_MCKEN_Pos = @as(c_ulong, 0);
pub const I2S_CONFIG_MCKEN_MCKEN_Msk = @as(c_ulong, 0x1) << I2S_CONFIG_MCKEN_MCKEN_Pos;
pub const I2S_CONFIG_MCKEN_MCKEN_Disabled = @as(c_ulong, 0);
pub const I2S_CONFIG_MCKEN_MCKEN_Enabled = @as(c_ulong, 1);
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_Pos = @as(c_ulong, 0);
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_Msk = @as(c_ulong, 0xFFFFFFFF) << I2S_CONFIG_MCKFREQ_MCKFREQ_Pos;
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV125 = @as(c_ulong, 0x020C0000);
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV63 = @as(c_ulong, 0x04100000);
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV42 = @as(c_ulong, 0x06000000);
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV32 = @as(c_ulong, 0x08000000);
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV31 = @as(c_ulong, 0x08400000);
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV30 = @as(c_ulong, 0x08800000);
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV23 = @as(c_ulong, 0x0B000000);
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV21 = @as(c_ulong, 0x0C000000);
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV16 = @as(c_ulong, 0x10000000);
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV15 = @as(c_ulong, 0x11000000);
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV11 = @as(c_ulong, 0x16000000);
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV10 = @as(c_ulong, 0x18000000);
pub const I2S_CONFIG_MCKFREQ_MCKFREQ_32MDIV8 = @as(c_ulong, 0x20000000);
pub const I2S_CONFIG_RATIO_RATIO_Pos = @as(c_ulong, 0);
pub const I2S_CONFIG_RATIO_RATIO_Msk = @as(c_ulong, 0xF) << I2S_CONFIG_RATIO_RATIO_Pos;
pub const I2S_CONFIG_RATIO_RATIO_32X = @as(c_ulong, 0);
pub const I2S_CONFIG_RATIO_RATIO_48X = @as(c_ulong, 1);
pub const I2S_CONFIG_RATIO_RATIO_64X = @as(c_ulong, 2);
pub const I2S_CONFIG_RATIO_RATIO_96X = @as(c_ulong, 3);
pub const I2S_CONFIG_RATIO_RATIO_128X = @as(c_ulong, 4);
pub const I2S_CONFIG_RATIO_RATIO_192X = @as(c_ulong, 5);
pub const I2S_CONFIG_RATIO_RATIO_256X = @as(c_ulong, 6);
pub const I2S_CONFIG_RATIO_RATIO_384X = @as(c_ulong, 7);
pub const I2S_CONFIG_RATIO_RATIO_512X = @as(c_ulong, 8);
pub const I2S_CONFIG_SWIDTH_SWIDTH_Pos = @as(c_ulong, 0);
pub const I2S_CONFIG_SWIDTH_SWIDTH_Msk = @as(c_ulong, 0x3) << I2S_CONFIG_SWIDTH_SWIDTH_Pos;
pub const I2S_CONFIG_SWIDTH_SWIDTH_8Bit = @as(c_ulong, 0);
pub const I2S_CONFIG_SWIDTH_SWIDTH_16Bit = @as(c_ulong, 1);
pub const I2S_CONFIG_SWIDTH_SWIDTH_24Bit = @as(c_ulong, 2);
pub const I2S_CONFIG_ALIGN_ALIGN_Pos = @as(c_ulong, 0);
pub const I2S_CONFIG_ALIGN_ALIGN_Msk = @as(c_ulong, 0x1) << I2S_CONFIG_ALIGN_ALIGN_Pos;
pub const I2S_CONFIG_ALIGN_ALIGN_Left = @as(c_ulong, 0);
pub const I2S_CONFIG_ALIGN_ALIGN_Right = @as(c_ulong, 1);
pub const I2S_CONFIG_FORMAT_FORMAT_Pos = @as(c_ulong, 0);
pub const I2S_CONFIG_FORMAT_FORMAT_Msk = @as(c_ulong, 0x1) << I2S_CONFIG_FORMAT_FORMAT_Pos;
pub const I2S_CONFIG_FORMAT_FORMAT_I2S = @as(c_ulong, 0);
pub const I2S_CONFIG_FORMAT_FORMAT_Aligned = @as(c_ulong, 1);
pub const I2S_CONFIG_CHANNELS_CHANNELS_Pos = @as(c_ulong, 0);
pub const I2S_CONFIG_CHANNELS_CHANNELS_Msk = @as(c_ulong, 0x3) << I2S_CONFIG_CHANNELS_CHANNELS_Pos;
pub const I2S_CONFIG_CHANNELS_CHANNELS_Stereo = @as(c_ulong, 0);
pub const I2S_CONFIG_CHANNELS_CHANNELS_Left = @as(c_ulong, 1);
pub const I2S_CONFIG_CHANNELS_CHANNELS_Right = @as(c_ulong, 2);
pub const I2S_RXD_PTR_PTR_Pos = @as(c_ulong, 0);
pub const I2S_RXD_PTR_PTR_Msk = @as(c_ulong, 0xFFFFFFFF) << I2S_RXD_PTR_PTR_Pos;
pub const I2S_TXD_PTR_PTR_Pos = @as(c_ulong, 0);
pub const I2S_TXD_PTR_PTR_Msk = @as(c_ulong, 0xFFFFFFFF) << I2S_TXD_PTR_PTR_Pos;
pub const I2S_RXTXD_MAXCNT_MAXCNT_Pos = @as(c_ulong, 0);
pub const I2S_RXTXD_MAXCNT_MAXCNT_Msk = @as(c_ulong, 0x3FFF) << I2S_RXTXD_MAXCNT_MAXCNT_Pos;
pub const I2S_PSEL_MCK_CONNECT_Pos = @as(c_ulong, 31);
pub const I2S_PSEL_MCK_CONNECT_Msk = @as(c_ulong, 0x1) << I2S_PSEL_MCK_CONNECT_Pos;
pub const I2S_PSEL_MCK_CONNECT_Connected = @as(c_ulong, 0);
pub const I2S_PSEL_MCK_CONNECT_Disconnected = @as(c_ulong, 1);
pub const I2S_PSEL_MCK_PORT_Pos = @as(c_ulong, 5);
pub const I2S_PSEL_MCK_PORT_Msk = @as(c_ulong, 0x1) << I2S_PSEL_MCK_PORT_Pos;
pub const I2S_PSEL_MCK_PIN_Pos = @as(c_ulong, 0);
pub const I2S_PSEL_MCK_PIN_Msk = @as(c_ulong, 0x1F) << I2S_PSEL_MCK_PIN_Pos;
pub const I2S_PSEL_SCK_CONNECT_Pos = @as(c_ulong, 31);
pub const I2S_PSEL_SCK_CONNECT_Msk = @as(c_ulong, 0x1) << I2S_PSEL_SCK_CONNECT_Pos;
pub const I2S_PSEL_SCK_CONNECT_Connected = @as(c_ulong, 0);
pub const I2S_PSEL_SCK_CONNECT_Disconnected = @as(c_ulong, 1);
pub const I2S_PSEL_SCK_PORT_Pos = @as(c_ulong, 5);
pub const I2S_PSEL_SCK_PORT_Msk = @as(c_ulong, 0x1) << I2S_PSEL_SCK_PORT_Pos;
pub const I2S_PSEL_SCK_PIN_Pos = @as(c_ulong, 0);
pub const I2S_PSEL_SCK_PIN_Msk = @as(c_ulong, 0x1F) << I2S_PSEL_SCK_PIN_Pos;
pub const I2S_PSEL_LRCK_CONNECT_Pos = @as(c_ulong, 31);
pub const I2S_PSEL_LRCK_CONNECT_Msk = @as(c_ulong, 0x1) << I2S_PSEL_LRCK_CONNECT_Pos;
pub const I2S_PSEL_LRCK_CONNECT_Connected = @as(c_ulong, 0);
pub const I2S_PSEL_LRCK_CONNECT_Disconnected = @as(c_ulong, 1);
pub const I2S_PSEL_LRCK_PORT_Pos = @as(c_ulong, 5);
pub const I2S_PSEL_LRCK_PORT_Msk = @as(c_ulong, 0x1) << I2S_PSEL_LRCK_PORT_Pos;
pub const I2S_PSEL_LRCK_PIN_Pos = @as(c_ulong, 0);
pub const I2S_PSEL_LRCK_PIN_Msk = @as(c_ulong, 0x1F) << I2S_PSEL_LRCK_PIN_Pos;
pub const I2S_PSEL_SDIN_CONNECT_Pos = @as(c_ulong, 31);
pub const I2S_PSEL_SDIN_CONNECT_Msk = @as(c_ulong, 0x1) << I2S_PSEL_SDIN_CONNECT_Pos;
pub const I2S_PSEL_SDIN_CONNECT_Connected = @as(c_ulong, 0);
pub const I2S_PSEL_SDIN_CONNECT_Disconnected = @as(c_ulong, 1);
pub const I2S_PSEL_SDIN_PORT_Pos = @as(c_ulong, 5);
pub const I2S_PSEL_SDIN_PORT_Msk = @as(c_ulong, 0x1) << I2S_PSEL_SDIN_PORT_Pos;
pub const I2S_PSEL_SDIN_PIN_Pos = @as(c_ulong, 0);
pub const I2S_PSEL_SDIN_PIN_Msk = @as(c_ulong, 0x1F) << I2S_PSEL_SDIN_PIN_Pos;
pub const I2S_PSEL_SDOUT_CONNECT_Pos = @as(c_ulong, 31);
pub const I2S_PSEL_SDOUT_CONNECT_Msk = @as(c_ulong, 0x1) << I2S_PSEL_SDOUT_CONNECT_Pos;
pub const I2S_PSEL_SDOUT_CONNECT_Connected = @as(c_ulong, 0);
pub const I2S_PSEL_SDOUT_CONNECT_Disconnected = @as(c_ulong, 1);
pub const I2S_PSEL_SDOUT_PORT_Pos = @as(c_ulong, 5);
pub const I2S_PSEL_SDOUT_PORT_Msk = @as(c_ulong, 0x1) << I2S_PSEL_SDOUT_PORT_Pos;
pub const I2S_PSEL_SDOUT_PIN_Pos = @as(c_ulong, 0);
pub const I2S_PSEL_SDOUT_PIN_Msk = @as(c_ulong, 0x1F) << I2S_PSEL_SDOUT_PIN_Pos;
pub const LPCOMP_TASKS_START_TASKS_START_Pos = @as(c_ulong, 0);
pub const LPCOMP_TASKS_START_TASKS_START_Msk = @as(c_ulong, 0x1) << LPCOMP_TASKS_START_TASKS_START_Pos;
pub const LPCOMP_TASKS_START_TASKS_START_Trigger = @as(c_ulong, 1);
pub const LPCOMP_TASKS_STOP_TASKS_STOP_Pos = @as(c_ulong, 0);
pub const LPCOMP_TASKS_STOP_TASKS_STOP_Msk = @as(c_ulong, 0x1) << LPCOMP_TASKS_STOP_TASKS_STOP_Pos;
pub const LPCOMP_TASKS_STOP_TASKS_STOP_Trigger = @as(c_ulong, 1);
pub const LPCOMP_TASKS_SAMPLE_TASKS_SAMPLE_Pos = @as(c_ulong, 0);
pub const LPCOMP_TASKS_SAMPLE_TASKS_SAMPLE_Msk = @as(c_ulong, 0x1) << LPCOMP_TASKS_SAMPLE_TASKS_SAMPLE_Pos;
pub const LPCOMP_TASKS_SAMPLE_TASKS_SAMPLE_Trigger = @as(c_ulong, 1);
pub const LPCOMP_EVENTS_READY_EVENTS_READY_Pos = @as(c_ulong, 0);
pub const LPCOMP_EVENTS_READY_EVENTS_READY_Msk = @as(c_ulong, 0x1) << LPCOMP_EVENTS_READY_EVENTS_READY_Pos;
pub const LPCOMP_EVENTS_READY_EVENTS_READY_NotGenerated = @as(c_ulong, 0);
pub const LPCOMP_EVENTS_READY_EVENTS_READY_Generated = @as(c_ulong, 1);
pub const LPCOMP_EVENTS_DOWN_EVENTS_DOWN_Pos = @as(c_ulong, 0);
pub const LPCOMP_EVENTS_DOWN_EVENTS_DOWN_Msk = @as(c_ulong, 0x1) << LPCOMP_EVENTS_DOWN_EVENTS_DOWN_Pos;
pub const LPCOMP_EVENTS_DOWN_EVENTS_DOWN_NotGenerated = @as(c_ulong, 0);
pub const LPCOMP_EVENTS_DOWN_EVENTS_DOWN_Generated = @as(c_ulong, 1);
pub const LPCOMP_EVENTS_UP_EVENTS_UP_Pos = @as(c_ulong, 0);
pub const LPCOMP_EVENTS_UP_EVENTS_UP_Msk = @as(c_ulong, 0x1) << LPCOMP_EVENTS_UP_EVENTS_UP_Pos;
pub const LPCOMP_EVENTS_UP_EVENTS_UP_NotGenerated = @as(c_ulong, 0);
pub const LPCOMP_EVENTS_UP_EVENTS_UP_Generated = @as(c_ulong, 1);
pub const LPCOMP_EVENTS_CROSS_EVENTS_CROSS_Pos = @as(c_ulong, 0);
pub const LPCOMP_EVENTS_CROSS_EVENTS_CROSS_Msk = @as(c_ulong, 0x1) << LPCOMP_EVENTS_CROSS_EVENTS_CROSS_Pos;
pub const LPCOMP_EVENTS_CROSS_EVENTS_CROSS_NotGenerated = @as(c_ulong, 0);
pub const LPCOMP_EVENTS_CROSS_EVENTS_CROSS_Generated = @as(c_ulong, 1);
pub const LPCOMP_SHORTS_CROSS_STOP_Pos = @as(c_ulong, 4);
pub const LPCOMP_SHORTS_CROSS_STOP_Msk = @as(c_ulong, 0x1) << LPCOMP_SHORTS_CROSS_STOP_Pos;
pub const LPCOMP_SHORTS_CROSS_STOP_Disabled = @as(c_ulong, 0);
pub const LPCOMP_SHORTS_CROSS_STOP_Enabled = @as(c_ulong, 1);
pub const LPCOMP_SHORTS_UP_STOP_Pos = @as(c_ulong, 3);
pub const LPCOMP_SHORTS_UP_STOP_Msk = @as(c_ulong, 0x1) << LPCOMP_SHORTS_UP_STOP_Pos;
pub const LPCOMP_SHORTS_UP_STOP_Disabled = @as(c_ulong, 0);
pub const LPCOMP_SHORTS_UP_STOP_Enabled = @as(c_ulong, 1);
pub const LPCOMP_SHORTS_DOWN_STOP_Pos = @as(c_ulong, 2);
pub const LPCOMP_SHORTS_DOWN_STOP_Msk = @as(c_ulong, 0x1) << LPCOMP_SHORTS_DOWN_STOP_Pos;
pub const LPCOMP_SHORTS_DOWN_STOP_Disabled = @as(c_ulong, 0);
pub const LPCOMP_SHORTS_DOWN_STOP_Enabled = @as(c_ulong, 1);
pub const LPCOMP_SHORTS_READY_STOP_Pos = @as(c_ulong, 1);
pub const LPCOMP_SHORTS_READY_STOP_Msk = @as(c_ulong, 0x1) << LPCOMP_SHORTS_READY_STOP_Pos;
pub const LPCOMP_SHORTS_READY_STOP_Disabled = @as(c_ulong, 0);
pub const LPCOMP_SHORTS_READY_STOP_Enabled = @as(c_ulong, 1);
pub const LPCOMP_SHORTS_READY_SAMPLE_Pos = @as(c_ulong, 0);
pub const LPCOMP_SHORTS_READY_SAMPLE_Msk = @as(c_ulong, 0x1) << LPCOMP_SHORTS_READY_SAMPLE_Pos;
pub const LPCOMP_SHORTS_READY_SAMPLE_Disabled = @as(c_ulong, 0);
pub const LPCOMP_SHORTS_READY_SAMPLE_Enabled = @as(c_ulong, 1);
pub const LPCOMP_INTENSET_CROSS_Pos = @as(c_ulong, 3);
pub const LPCOMP_INTENSET_CROSS_Msk = @as(c_ulong, 0x1) << LPCOMP_INTENSET_CROSS_Pos;
pub const LPCOMP_INTENSET_CROSS_Disabled = @as(c_ulong, 0);
pub const LPCOMP_INTENSET_CROSS_Enabled = @as(c_ulong, 1);
pub const LPCOMP_INTENSET_CROSS_Set = @as(c_ulong, 1);
pub const LPCOMP_INTENSET_UP_Pos = @as(c_ulong, 2);
pub const LPCOMP_INTENSET_UP_Msk = @as(c_ulong, 0x1) << LPCOMP_INTENSET_UP_Pos;
pub const LPCOMP_INTENSET_UP_Disabled = @as(c_ulong, 0);
pub const LPCOMP_INTENSET_UP_Enabled = @as(c_ulong, 1);
pub const LPCOMP_INTENSET_UP_Set = @as(c_ulong, 1);
pub const LPCOMP_INTENSET_DOWN_Pos = @as(c_ulong, 1);
pub const LPCOMP_INTENSET_DOWN_Msk = @as(c_ulong, 0x1) << LPCOMP_INTENSET_DOWN_Pos;
pub const LPCOMP_INTENSET_DOWN_Disabled = @as(c_ulong, 0);
pub const LPCOMP_INTENSET_DOWN_Enabled = @as(c_ulong, 1);
pub const LPCOMP_INTENSET_DOWN_Set = @as(c_ulong, 1);
pub const LPCOMP_INTENSET_READY_Pos = @as(c_ulong, 0);
pub const LPCOMP_INTENSET_READY_Msk = @as(c_ulong, 0x1) << LPCOMP_INTENSET_READY_Pos;
pub const LPCOMP_INTENSET_READY_Disabled = @as(c_ulong, 0);
pub const LPCOMP_INTENSET_READY_Enabled = @as(c_ulong, 1);
pub const LPCOMP_INTENSET_READY_Set = @as(c_ulong, 1);
pub const LPCOMP_INTENCLR_CROSS_Pos = @as(c_ulong, 3);
pub const LPCOMP_INTENCLR_CROSS_Msk = @as(c_ulong, 0x1) << LPCOMP_INTENCLR_CROSS_Pos;
pub const LPCOMP_INTENCLR_CROSS_Disabled = @as(c_ulong, 0);
pub const LPCOMP_INTENCLR_CROSS_Enabled = @as(c_ulong, 1);
pub const LPCOMP_INTENCLR_CROSS_Clear = @as(c_ulong, 1);
pub const LPCOMP_INTENCLR_UP_Pos = @as(c_ulong, 2);
pub const LPCOMP_INTENCLR_UP_Msk = @as(c_ulong, 0x1) << LPCOMP_INTENCLR_UP_Pos;
pub const LPCOMP_INTENCLR_UP_Disabled = @as(c_ulong, 0);
pub const LPCOMP_INTENCLR_UP_Enabled = @as(c_ulong, 1);
pub const LPCOMP_INTENCLR_UP_Clear = @as(c_ulong, 1);
pub const LPCOMP_INTENCLR_DOWN_Pos = @as(c_ulong, 1);
pub const LPCOMP_INTENCLR_DOWN_Msk = @as(c_ulong, 0x1) << LPCOMP_INTENCLR_DOWN_Pos;
pub const LPCOMP_INTENCLR_DOWN_Disabled = @as(c_ulong, 0);
pub const LPCOMP_INTENCLR_DOWN_Enabled = @as(c_ulong, 1);
pub const LPCOMP_INTENCLR_DOWN_Clear = @as(c_ulong, 1);
pub const LPCOMP_INTENCLR_READY_Pos = @as(c_ulong, 0);
pub const LPCOMP_INTENCLR_READY_Msk = @as(c_ulong, 0x1) << LPCOMP_INTENCLR_READY_Pos;
pub const LPCOMP_INTENCLR_READY_Disabled = @as(c_ulong, 0);
pub const LPCOMP_INTENCLR_READY_Enabled = @as(c_ulong, 1);
pub const LPCOMP_INTENCLR_READY_Clear = @as(c_ulong, 1);
pub const LPCOMP_RESULT_RESULT_Pos = @as(c_ulong, 0);
pub const LPCOMP_RESULT_RESULT_Msk = @as(c_ulong, 0x1) << LPCOMP_RESULT_RESULT_Pos;
pub const LPCOMP_RESULT_RESULT_Below = @as(c_ulong, 0);
pub const LPCOMP_RESULT_RESULT_Above = @as(c_ulong, 1);
pub const LPCOMP_ENABLE_ENABLE_Pos = @as(c_ulong, 0);
pub const LPCOMP_ENABLE_ENABLE_Msk = @as(c_ulong, 0x3) << LPCOMP_ENABLE_ENABLE_Pos;
pub const LPCOMP_ENABLE_ENABLE_Disabled = @as(c_ulong, 0);
pub const LPCOMP_ENABLE_ENABLE_Enabled = @as(c_ulong, 1);
pub const LPCOMP_PSEL_PSEL_Pos = @as(c_ulong, 0);
pub const LPCOMP_PSEL_PSEL_Msk = @as(c_ulong, 0x7) << LPCOMP_PSEL_PSEL_Pos;
pub const LPCOMP_PSEL_PSEL_AnalogInput0 = @as(c_ulong, 0);
pub const LPCOMP_PSEL_PSEL_AnalogInput1 = @as(c_ulong, 1);
pub const LPCOMP_PSEL_PSEL_AnalogInput2 = @as(c_ulong, 2);
pub const LPCOMP_PSEL_PSEL_AnalogInput3 = @as(c_ulong, 3);
pub const LPCOMP_PSEL_PSEL_AnalogInput4 = @as(c_ulong, 4);
pub const LPCOMP_PSEL_PSEL_AnalogInput5 = @as(c_ulong, 5);
pub const LPCOMP_PSEL_PSEL_AnalogInput6 = @as(c_ulong, 6);
pub const LPCOMP_PSEL_PSEL_AnalogInput7 = @as(c_ulong, 7);
pub const LPCOMP_REFSEL_REFSEL_Pos = @as(c_ulong, 0);
pub const LPCOMP_REFSEL_REFSEL_Msk = @as(c_ulong, 0xF) << LPCOMP_REFSEL_REFSEL_Pos;
pub const LPCOMP_REFSEL_REFSEL_Ref1_8Vdd = @as(c_ulong, 0);
pub const LPCOMP_REFSEL_REFSEL_Ref2_8Vdd = @as(c_ulong, 1);
pub const LPCOMP_REFSEL_REFSEL_Ref3_8Vdd = @as(c_ulong, 2);
pub const LPCOMP_REFSEL_REFSEL_Ref4_8Vdd = @as(c_ulong, 3);
pub const LPCOMP_REFSEL_REFSEL_Ref5_8Vdd = @as(c_ulong, 4);
pub const LPCOMP_REFSEL_REFSEL_Ref6_8Vdd = @as(c_ulong, 5);
pub const LPCOMP_REFSEL_REFSEL_Ref7_8Vdd = @as(c_ulong, 6);
pub const LPCOMP_REFSEL_REFSEL_ARef = @as(c_ulong, 7);
pub const LPCOMP_REFSEL_REFSEL_Ref1_16Vdd = @as(c_ulong, 8);
pub const LPCOMP_REFSEL_REFSEL_Ref3_16Vdd = @as(c_ulong, 9);
pub const LPCOMP_REFSEL_REFSEL_Ref5_16Vdd = @as(c_ulong, 10);
pub const LPCOMP_REFSEL_REFSEL_Ref7_16Vdd = @as(c_ulong, 11);
pub const LPCOMP_REFSEL_REFSEL_Ref9_16Vdd = @as(c_ulong, 12);
pub const LPCOMP_REFSEL_REFSEL_Ref11_16Vdd = @as(c_ulong, 13);
pub const LPCOMP_REFSEL_REFSEL_Ref13_16Vdd = @as(c_ulong, 14);
pub const LPCOMP_REFSEL_REFSEL_Ref15_16Vdd = @as(c_ulong, 15);
pub const LPCOMP_EXTREFSEL_EXTREFSEL_Pos = @as(c_ulong, 0);
pub const LPCOMP_EXTREFSEL_EXTREFSEL_Msk = @as(c_ulong, 0x1) << LPCOMP_EXTREFSEL_EXTREFSEL_Pos;
pub const LPCOMP_EXTREFSEL_EXTREFSEL_AnalogReference0 = @as(c_ulong, 0);
pub const LPCOMP_EXTREFSEL_EXTREFSEL_AnalogReference1 = @as(c_ulong, 1);
pub const LPCOMP_ANADETECT_ANADETECT_Pos = @as(c_ulong, 0);
pub const LPCOMP_ANADETECT_ANADETECT_Msk = @as(c_ulong, 0x3) << LPCOMP_ANADETECT_ANADETECT_Pos;
pub const LPCOMP_ANADETECT_ANADETECT_Cross = @as(c_ulong, 0);
pub const LPCOMP_ANADETECT_ANADETECT_Up = @as(c_ulong, 1);
pub const LPCOMP_ANADETECT_ANADETECT_Down = @as(c_ulong, 2);
pub const LPCOMP_HYST_HYST_Pos = @as(c_ulong, 0);
pub const LPCOMP_HYST_HYST_Msk = @as(c_ulong, 0x1) << LPCOMP_HYST_HYST_Pos;
pub const LPCOMP_HYST_HYST_Disabled = @as(c_ulong, 0);
pub const LPCOMP_HYST_HYST_Enabled = @as(c_ulong, 1);
pub const MWU_EVENTS_REGION_WA_WA_Pos = @as(c_ulong, 0);
pub const MWU_EVENTS_REGION_WA_WA_Msk = @as(c_ulong, 0x1) << MWU_EVENTS_REGION_WA_WA_Pos;
pub const MWU_EVENTS_REGION_WA_WA_NotGenerated = @as(c_ulong, 0);
pub const MWU_EVENTS_REGION_WA_WA_Generated = @as(c_ulong, 1);
pub const MWU_EVENTS_REGION_RA_RA_Pos = @as(c_ulong, 0);
pub const MWU_EVENTS_REGION_RA_RA_Msk = @as(c_ulong, 0x1) << MWU_EVENTS_REGION_RA_RA_Pos;
pub const MWU_EVENTS_REGION_RA_RA_NotGenerated = @as(c_ulong, 0);
pub const MWU_EVENTS_REGION_RA_RA_Generated = @as(c_ulong, 1);
pub const MWU_EVENTS_PREGION_WA_WA_Pos = @as(c_ulong, 0);
pub const MWU_EVENTS_PREGION_WA_WA_Msk = @as(c_ulong, 0x1) << MWU_EVENTS_PREGION_WA_WA_Pos;
pub const MWU_EVENTS_PREGION_WA_WA_NotGenerated = @as(c_ulong, 0);
pub const MWU_EVENTS_PREGION_WA_WA_Generated = @as(c_ulong, 1);
pub const MWU_EVENTS_PREGION_RA_RA_Pos = @as(c_ulong, 0);
pub const MWU_EVENTS_PREGION_RA_RA_Msk = @as(c_ulong, 0x1) << MWU_EVENTS_PREGION_RA_RA_Pos;
pub const MWU_EVENTS_PREGION_RA_RA_NotGenerated = @as(c_ulong, 0);
pub const MWU_EVENTS_PREGION_RA_RA_Generated = @as(c_ulong, 1);
pub const MWU_INTEN_PREGION1RA_Pos = @as(c_ulong, 27);
pub const MWU_INTEN_PREGION1RA_Msk = @as(c_ulong, 0x1) << MWU_INTEN_PREGION1RA_Pos;
pub const MWU_INTEN_PREGION1RA_Disabled = @as(c_ulong, 0);
pub const MWU_INTEN_PREGION1RA_Enabled = @as(c_ulong, 1);
pub const MWU_INTEN_PREGION1WA_Pos = @as(c_ulong, 26);
pub const MWU_INTEN_PREGION1WA_Msk = @as(c_ulong, 0x1) << MWU_INTEN_PREGION1WA_Pos;
pub const MWU_INTEN_PREGION1WA_Disabled = @as(c_ulong, 0);
pub const MWU_INTEN_PREGION1WA_Enabled = @as(c_ulong, 1);
pub const MWU_INTEN_PREGION0RA_Pos = @as(c_ulong, 25);
pub const MWU_INTEN_PREGION0RA_Msk = @as(c_ulong, 0x1) << MWU_INTEN_PREGION0RA_Pos;
pub const MWU_INTEN_PREGION0RA_Disabled = @as(c_ulong, 0);
pub const MWU_INTEN_PREGION0RA_Enabled = @as(c_ulong, 1);
pub const MWU_INTEN_PREGION0WA_Pos = @as(c_ulong, 24);
pub const MWU_INTEN_PREGION0WA_Msk = @as(c_ulong, 0x1) << MWU_INTEN_PREGION0WA_Pos;
pub const MWU_INTEN_PREGION0WA_Disabled = @as(c_ulong, 0);
pub const MWU_INTEN_PREGION0WA_Enabled = @as(c_ulong, 1);
pub const MWU_INTEN_REGION3RA_Pos = @as(c_ulong, 7);
pub const MWU_INTEN_REGION3RA_Msk = @as(c_ulong, 0x1) << MWU_INTEN_REGION3RA_Pos;
pub const MWU_INTEN_REGION3RA_Disabled = @as(c_ulong, 0);
pub const MWU_INTEN_REGION3RA_Enabled = @as(c_ulong, 1);
pub const MWU_INTEN_REGION3WA_Pos = @as(c_ulong, 6);
pub const MWU_INTEN_REGION3WA_Msk = @as(c_ulong, 0x1) << MWU_INTEN_REGION3WA_Pos;
pub const MWU_INTEN_REGION3WA_Disabled = @as(c_ulong, 0);
pub const MWU_INTEN_REGION3WA_Enabled = @as(c_ulong, 1);
pub const MWU_INTEN_REGION2RA_Pos = @as(c_ulong, 5);
pub const MWU_INTEN_REGION2RA_Msk = @as(c_ulong, 0x1) << MWU_INTEN_REGION2RA_Pos;
pub const MWU_INTEN_REGION2RA_Disabled = @as(c_ulong, 0);
pub const MWU_INTEN_REGION2RA_Enabled = @as(c_ulong, 1);
pub const MWU_INTEN_REGION2WA_Pos = @as(c_ulong, 4);
pub const MWU_INTEN_REGION2WA_Msk = @as(c_ulong, 0x1) << MWU_INTEN_REGION2WA_Pos;
pub const MWU_INTEN_REGION2WA_Disabled = @as(c_ulong, 0);
pub const MWU_INTEN_REGION2WA_Enabled = @as(c_ulong, 1);
pub const MWU_INTEN_REGION1RA_Pos = @as(c_ulong, 3);
pub const MWU_INTEN_REGION1RA_Msk = @as(c_ulong, 0x1) << MWU_INTEN_REGION1RA_Pos;
pub const MWU_INTEN_REGION1RA_Disabled = @as(c_ulong, 0);
pub const MWU_INTEN_REGION1RA_Enabled = @as(c_ulong, 1);
pub const MWU_INTEN_REGION1WA_Pos = @as(c_ulong, 2);
pub const MWU_INTEN_REGION1WA_Msk = @as(c_ulong, 0x1) << MWU_INTEN_REGION1WA_Pos;
pub const MWU_INTEN_REGION1WA_Disabled = @as(c_ulong, 0);
pub const MWU_INTEN_REGION1WA_Enabled = @as(c_ulong, 1);
pub const MWU_INTEN_REGION0RA_Pos = @as(c_ulong, 1);
pub const MWU_INTEN_REGION0RA_Msk = @as(c_ulong, 0x1) << MWU_INTEN_REGION0RA_Pos;
pub const MWU_INTEN_REGION0RA_Disabled = @as(c_ulong, 0);
pub const MWU_INTEN_REGION0RA_Enabled = @as(c_ulong, 1);
pub const MWU_INTEN_REGION0WA_Pos = @as(c_ulong, 0);
pub const MWU_INTEN_REGION0WA_Msk = @as(c_ulong, 0x1) << MWU_INTEN_REGION0WA_Pos;
pub const MWU_INTEN_REGION0WA_Disabled = @as(c_ulong, 0);
pub const MWU_INTEN_REGION0WA_Enabled = @as(c_ulong, 1);
pub const MWU_INTENSET_PREGION1RA_Pos = @as(c_ulong, 27);
pub const MWU_INTENSET_PREGION1RA_Msk = @as(c_ulong, 0x1) << MWU_INTENSET_PREGION1RA_Pos;
pub const MWU_INTENSET_PREGION1RA_Disabled = @as(c_ulong, 0);
pub const MWU_INTENSET_PREGION1RA_Enabled = @as(c_ulong, 1);
pub const MWU_INTENSET_PREGION1RA_Set = @as(c_ulong, 1);
pub const MWU_INTENSET_PREGION1WA_Pos = @as(c_ulong, 26);
pub const MWU_INTENSET_PREGION1WA_Msk = @as(c_ulong, 0x1) << MWU_INTENSET_PREGION1WA_Pos;
pub const MWU_INTENSET_PREGION1WA_Disabled = @as(c_ulong, 0);
pub const MWU_INTENSET_PREGION1WA_Enabled = @as(c_ulong, 1);
pub const MWU_INTENSET_PREGION1WA_Set = @as(c_ulong, 1);
pub const MWU_INTENSET_PREGION0RA_Pos = @as(c_ulong, 25);
pub const MWU_INTENSET_PREGION0RA_Msk = @as(c_ulong, 0x1) << MWU_INTENSET_PREGION0RA_Pos;
pub const MWU_INTENSET_PREGION0RA_Disabled = @as(c_ulong, 0);
pub const MWU_INTENSET_PREGION0RA_Enabled = @as(c_ulong, 1);
pub const MWU_INTENSET_PREGION0RA_Set = @as(c_ulong, 1);
pub const MWU_INTENSET_PREGION0WA_Pos = @as(c_ulong, 24);
pub const MWU_INTENSET_PREGION0WA_Msk = @as(c_ulong, 0x1) << MWU_INTENSET_PREGION0WA_Pos;
pub const MWU_INTENSET_PREGION0WA_Disabled = @as(c_ulong, 0);
pub const MWU_INTENSET_PREGION0WA_Enabled = @as(c_ulong, 1);
pub const MWU_INTENSET_PREGION0WA_Set = @as(c_ulong, 1);
pub const MWU_INTENSET_REGION3RA_Pos = @as(c_ulong, 7);
pub const MWU_INTENSET_REGION3RA_Msk = @as(c_ulong, 0x1) << MWU_INTENSET_REGION3RA_Pos;
pub const MWU_INTENSET_REGION3RA_Disabled = @as(c_ulong, 0);
pub const MWU_INTENSET_REGION3RA_Enabled = @as(c_ulong, 1);
pub const MWU_INTENSET_REGION3RA_Set = @as(c_ulong, 1);
pub const MWU_INTENSET_REGION3WA_Pos = @as(c_ulong, 6);
pub const MWU_INTENSET_REGION3WA_Msk = @as(c_ulong, 0x1) << MWU_INTENSET_REGION3WA_Pos;
pub const MWU_INTENSET_REGION3WA_Disabled = @as(c_ulong, 0);
pub const MWU_INTENSET_REGION3WA_Enabled = @as(c_ulong, 1);
pub const MWU_INTENSET_REGION3WA_Set = @as(c_ulong, 1);
pub const MWU_INTENSET_REGION2RA_Pos = @as(c_ulong, 5);
pub const MWU_INTENSET_REGION2RA_Msk = @as(c_ulong, 0x1) << MWU_INTENSET_REGION2RA_Pos;
pub const MWU_INTENSET_REGION2RA_Disabled = @as(c_ulong, 0);
pub const MWU_INTENSET_REGION2RA_Enabled = @as(c_ulong, 1);
pub const MWU_INTENSET_REGION2RA_Set = @as(c_ulong, 1);
pub const MWU_INTENSET_REGION2WA_Pos = @as(c_ulong, 4);
pub const MWU_INTENSET_REGION2WA_Msk = @as(c_ulong, 0x1) << MWU_INTENSET_REGION2WA_Pos;
pub const MWU_INTENSET_REGION2WA_Disabled = @as(c_ulong, 0);
pub const MWU_INTENSET_REGION2WA_Enabled = @as(c_ulong, 1);
pub const MWU_INTENSET_REGION2WA_Set = @as(c_ulong, 1);
pub const MWU_INTENSET_REGION1RA_Pos = @as(c_ulong, 3);
pub const MWU_INTENSET_REGION1RA_Msk = @as(c_ulong, 0x1) << MWU_INTENSET_REGION1RA_Pos;
pub const MWU_INTENSET_REGION1RA_Disabled = @as(c_ulong, 0);
pub const MWU_INTENSET_REGION1RA_Enabled = @as(c_ulong, 1);
pub const MWU_INTENSET_REGION1RA_Set = @as(c_ulong, 1);
pub const MWU_INTENSET_REGION1WA_Pos = @as(c_ulong, 2);
pub const MWU_INTENSET_REGION1WA_Msk = @as(c_ulong, 0x1) << MWU_INTENSET_REGION1WA_Pos;
pub const MWU_INTENSET_REGION1WA_Disabled = @as(c_ulong, 0);
pub const MWU_INTENSET_REGION1WA_Enabled = @as(c_ulong, 1);
pub const MWU_INTENSET_REGION1WA_Set = @as(c_ulong, 1);
pub const MWU_INTENSET_REGION0RA_Pos = @as(c_ulong, 1);
pub const MWU_INTENSET_REGION0RA_Msk = @as(c_ulong, 0x1) << MWU_INTENSET_REGION0RA_Pos;
pub const MWU_INTENSET_REGION0RA_Disabled = @as(c_ulong, 0);
pub const MWU_INTENSET_REGION0RA_Enabled = @as(c_ulong, 1);
pub const MWU_INTENSET_REGION0RA_Set = @as(c_ulong, 1);
pub const MWU_INTENSET_REGION0WA_Pos = @as(c_ulong, 0);
pub const MWU_INTENSET_REGION0WA_Msk = @as(c_ulong, 0x1) << MWU_INTENSET_REGION0WA_Pos;
pub const MWU_INTENSET_REGION0WA_Disabled = @as(c_ulong, 0);
pub const MWU_INTENSET_REGION0WA_Enabled = @as(c_ulong, 1);
pub const MWU_INTENSET_REGION0WA_Set = @as(c_ulong, 1);
pub const MWU_INTENCLR_PREGION1RA_Pos = @as(c_ulong, 27);
pub const MWU_INTENCLR_PREGION1RA_Msk = @as(c_ulong, 0x1) << MWU_INTENCLR_PREGION1RA_Pos;
pub const MWU_INTENCLR_PREGION1RA_Disabled = @as(c_ulong, 0);
pub const MWU_INTENCLR_PREGION1RA_Enabled = @as(c_ulong, 1);
pub const MWU_INTENCLR_PREGION1RA_Clear = @as(c_ulong, 1);
pub const MWU_INTENCLR_PREGION1WA_Pos = @as(c_ulong, 26);
pub const MWU_INTENCLR_PREGION1WA_Msk = @as(c_ulong, 0x1) << MWU_INTENCLR_PREGION1WA_Pos;
pub const MWU_INTENCLR_PREGION1WA_Disabled = @as(c_ulong, 0);
pub const MWU_INTENCLR_PREGION1WA_Enabled = @as(c_ulong, 1);
pub const MWU_INTENCLR_PREGION1WA_Clear = @as(c_ulong, 1);
pub const MWU_INTENCLR_PREGION0RA_Pos = @as(c_ulong, 25);
pub const MWU_INTENCLR_PREGION0RA_Msk = @as(c_ulong, 0x1) << MWU_INTENCLR_PREGION0RA_Pos;
pub const MWU_INTENCLR_PREGION0RA_Disabled = @as(c_ulong, 0);
pub const MWU_INTENCLR_PREGION0RA_Enabled = @as(c_ulong, 1);
pub const MWU_INTENCLR_PREGION0RA_Clear = @as(c_ulong, 1);
pub const MWU_INTENCLR_PREGION0WA_Pos = @as(c_ulong, 24);
pub const MWU_INTENCLR_PREGION0WA_Msk = @as(c_ulong, 0x1) << MWU_INTENCLR_PREGION0WA_Pos;
pub const MWU_INTENCLR_PREGION0WA_Disabled = @as(c_ulong, 0);
pub const MWU_INTENCLR_PREGION0WA_Enabled = @as(c_ulong, 1);
pub const MWU_INTENCLR_PREGION0WA_Clear = @as(c_ulong, 1);
pub const MWU_INTENCLR_REGION3RA_Pos = @as(c_ulong, 7);
pub const MWU_INTENCLR_REGION3RA_Msk = @as(c_ulong, 0x1) << MWU_INTENCLR_REGION3RA_Pos;
pub const MWU_INTENCLR_REGION3RA_Disabled = @as(c_ulong, 0);
pub const MWU_INTENCLR_REGION3RA_Enabled = @as(c_ulong, 1);
pub const MWU_INTENCLR_REGION3RA_Clear = @as(c_ulong, 1);
pub const MWU_INTENCLR_REGION3WA_Pos = @as(c_ulong, 6);
pub const MWU_INTENCLR_REGION3WA_Msk = @as(c_ulong, 0x1) << MWU_INTENCLR_REGION3WA_Pos;
pub const MWU_INTENCLR_REGION3WA_Disabled = @as(c_ulong, 0);
pub const MWU_INTENCLR_REGION3WA_Enabled = @as(c_ulong, 1);
pub const MWU_INTENCLR_REGION3WA_Clear = @as(c_ulong, 1);
pub const MWU_INTENCLR_REGION2RA_Pos = @as(c_ulong, 5);
pub const MWU_INTENCLR_REGION2RA_Msk = @as(c_ulong, 0x1) << MWU_INTENCLR_REGION2RA_Pos;
pub const MWU_INTENCLR_REGION2RA_Disabled = @as(c_ulong, 0);
pub const MWU_INTENCLR_REGION2RA_Enabled = @as(c_ulong, 1);
pub const MWU_INTENCLR_REGION2RA_Clear = @as(c_ulong, 1);
pub const MWU_INTENCLR_REGION2WA_Pos = @as(c_ulong, 4);
pub const MWU_INTENCLR_REGION2WA_Msk = @as(c_ulong, 0x1) << MWU_INTENCLR_REGION2WA_Pos;
pub const MWU_INTENCLR_REGION2WA_Disabled = @as(c_ulong, 0);
pub const MWU_INTENCLR_REGION2WA_Enabled = @as(c_ulong, 1);
pub const MWU_INTENCLR_REGION2WA_Clear = @as(c_ulong, 1);
pub const MWU_INTENCLR_REGION1RA_Pos = @as(c_ulong, 3);
pub const MWU_INTENCLR_REGION1RA_Msk = @as(c_ulong, 0x1) << MWU_INTENCLR_REGION1RA_Pos;
pub const MWU_INTENCLR_REGION1RA_Disabled = @as(c_ulong, 0);
pub const MWU_INTENCLR_REGION1RA_Enabled = @as(c_ulong, 1);
pub const MWU_INTENCLR_REGION1RA_Clear = @as(c_ulong, 1);
pub const MWU_INTENCLR_REGION1WA_Pos = @as(c_ulong, 2);
pub const MWU_INTENCLR_REGION1WA_Msk = @as(c_ulong, 0x1) << MWU_INTENCLR_REGION1WA_Pos;
pub const MWU_INTENCLR_REGION1WA_Disabled = @as(c_ulong, 0);
pub const MWU_INTENCLR_REGION1WA_Enabled = @as(c_ulong, 1);
pub const MWU_INTENCLR_REGION1WA_Clear = @as(c_ulong, 1);
pub const MWU_INTENCLR_REGION0RA_Pos = @as(c_ulong, 1);
pub const MWU_INTENCLR_REGION0RA_Msk = @as(c_ulong, 0x1) << MWU_INTENCLR_REGION0RA_Pos;
pub const MWU_INTENCLR_REGION0RA_Disabled = @as(c_ulong, 0);
pub const MWU_INTENCLR_REGION0RA_Enabled = @as(c_ulong, 1);
pub const MWU_INTENCLR_REGION0RA_Clear = @as(c_ulong, 1);
pub const MWU_INTENCLR_REGION0WA_Pos = @as(c_ulong, 0);
pub const MWU_INTENCLR_REGION0WA_Msk = @as(c_ulong, 0x1) << MWU_INTENCLR_REGION0WA_Pos;
pub const MWU_INTENCLR_REGION0WA_Disabled = @as(c_ulong, 0);
pub const MWU_INTENCLR_REGION0WA_Enabled = @as(c_ulong, 1);
pub const MWU_INTENCLR_REGION0WA_Clear = @as(c_ulong, 1);
pub const MWU_NMIEN_PREGION1RA_Pos = @as(c_ulong, 27);
pub const MWU_NMIEN_PREGION1RA_Msk = @as(c_ulong, 0x1) << MWU_NMIEN_PREGION1RA_Pos;
pub const MWU_NMIEN_PREGION1RA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIEN_PREGION1RA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIEN_PREGION1WA_Pos = @as(c_ulong, 26);
pub const MWU_NMIEN_PREGION1WA_Msk = @as(c_ulong, 0x1) << MWU_NMIEN_PREGION1WA_Pos;
pub const MWU_NMIEN_PREGION1WA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIEN_PREGION1WA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIEN_PREGION0RA_Pos = @as(c_ulong, 25);
pub const MWU_NMIEN_PREGION0RA_Msk = @as(c_ulong, 0x1) << MWU_NMIEN_PREGION0RA_Pos;
pub const MWU_NMIEN_PREGION0RA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIEN_PREGION0RA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIEN_PREGION0WA_Pos = @as(c_ulong, 24);
pub const MWU_NMIEN_PREGION0WA_Msk = @as(c_ulong, 0x1) << MWU_NMIEN_PREGION0WA_Pos;
pub const MWU_NMIEN_PREGION0WA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIEN_PREGION0WA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIEN_REGION3RA_Pos = @as(c_ulong, 7);
pub const MWU_NMIEN_REGION3RA_Msk = @as(c_ulong, 0x1) << MWU_NMIEN_REGION3RA_Pos;
pub const MWU_NMIEN_REGION3RA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIEN_REGION3RA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIEN_REGION3WA_Pos = @as(c_ulong, 6);
pub const MWU_NMIEN_REGION3WA_Msk = @as(c_ulong, 0x1) << MWU_NMIEN_REGION3WA_Pos;
pub const MWU_NMIEN_REGION3WA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIEN_REGION3WA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIEN_REGION2RA_Pos = @as(c_ulong, 5);
pub const MWU_NMIEN_REGION2RA_Msk = @as(c_ulong, 0x1) << MWU_NMIEN_REGION2RA_Pos;
pub const MWU_NMIEN_REGION2RA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIEN_REGION2RA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIEN_REGION2WA_Pos = @as(c_ulong, 4);
pub const MWU_NMIEN_REGION2WA_Msk = @as(c_ulong, 0x1) << MWU_NMIEN_REGION2WA_Pos;
pub const MWU_NMIEN_REGION2WA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIEN_REGION2WA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIEN_REGION1RA_Pos = @as(c_ulong, 3);
pub const MWU_NMIEN_REGION1RA_Msk = @as(c_ulong, 0x1) << MWU_NMIEN_REGION1RA_Pos;
pub const MWU_NMIEN_REGION1RA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIEN_REGION1RA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIEN_REGION1WA_Pos = @as(c_ulong, 2);
pub const MWU_NMIEN_REGION1WA_Msk = @as(c_ulong, 0x1) << MWU_NMIEN_REGION1WA_Pos;
pub const MWU_NMIEN_REGION1WA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIEN_REGION1WA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIEN_REGION0RA_Pos = @as(c_ulong, 1);
pub const MWU_NMIEN_REGION0RA_Msk = @as(c_ulong, 0x1) << MWU_NMIEN_REGION0RA_Pos;
pub const MWU_NMIEN_REGION0RA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIEN_REGION0RA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIEN_REGION0WA_Pos = @as(c_ulong, 0);
pub const MWU_NMIEN_REGION0WA_Msk = @as(c_ulong, 0x1) << MWU_NMIEN_REGION0WA_Pos;
pub const MWU_NMIEN_REGION0WA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIEN_REGION0WA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIENSET_PREGION1RA_Pos = @as(c_ulong, 27);
pub const MWU_NMIENSET_PREGION1RA_Msk = @as(c_ulong, 0x1) << MWU_NMIENSET_PREGION1RA_Pos;
pub const MWU_NMIENSET_PREGION1RA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIENSET_PREGION1RA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIENSET_PREGION1RA_Set = @as(c_ulong, 1);
pub const MWU_NMIENSET_PREGION1WA_Pos = @as(c_ulong, 26);
pub const MWU_NMIENSET_PREGION1WA_Msk = @as(c_ulong, 0x1) << MWU_NMIENSET_PREGION1WA_Pos;
pub const MWU_NMIENSET_PREGION1WA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIENSET_PREGION1WA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIENSET_PREGION1WA_Set = @as(c_ulong, 1);
pub const MWU_NMIENSET_PREGION0RA_Pos = @as(c_ulong, 25);
pub const MWU_NMIENSET_PREGION0RA_Msk = @as(c_ulong, 0x1) << MWU_NMIENSET_PREGION0RA_Pos;
pub const MWU_NMIENSET_PREGION0RA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIENSET_PREGION0RA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIENSET_PREGION0RA_Set = @as(c_ulong, 1);
pub const MWU_NMIENSET_PREGION0WA_Pos = @as(c_ulong, 24);
pub const MWU_NMIENSET_PREGION0WA_Msk = @as(c_ulong, 0x1) << MWU_NMIENSET_PREGION0WA_Pos;
pub const MWU_NMIENSET_PREGION0WA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIENSET_PREGION0WA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIENSET_PREGION0WA_Set = @as(c_ulong, 1);
pub const MWU_NMIENSET_REGION3RA_Pos = @as(c_ulong, 7);
pub const MWU_NMIENSET_REGION3RA_Msk = @as(c_ulong, 0x1) << MWU_NMIENSET_REGION3RA_Pos;
pub const MWU_NMIENSET_REGION3RA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIENSET_REGION3RA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIENSET_REGION3RA_Set = @as(c_ulong, 1);
pub const MWU_NMIENSET_REGION3WA_Pos = @as(c_ulong, 6);
pub const MWU_NMIENSET_REGION3WA_Msk = @as(c_ulong, 0x1) << MWU_NMIENSET_REGION3WA_Pos;
pub const MWU_NMIENSET_REGION3WA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIENSET_REGION3WA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIENSET_REGION3WA_Set = @as(c_ulong, 1);
pub const MWU_NMIENSET_REGION2RA_Pos = @as(c_ulong, 5);
pub const MWU_NMIENSET_REGION2RA_Msk = @as(c_ulong, 0x1) << MWU_NMIENSET_REGION2RA_Pos;
pub const MWU_NMIENSET_REGION2RA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIENSET_REGION2RA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIENSET_REGION2RA_Set = @as(c_ulong, 1);
pub const MWU_NMIENSET_REGION2WA_Pos = @as(c_ulong, 4);
pub const MWU_NMIENSET_REGION2WA_Msk = @as(c_ulong, 0x1) << MWU_NMIENSET_REGION2WA_Pos;
pub const MWU_NMIENSET_REGION2WA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIENSET_REGION2WA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIENSET_REGION2WA_Set = @as(c_ulong, 1);
pub const MWU_NMIENSET_REGION1RA_Pos = @as(c_ulong, 3);
pub const MWU_NMIENSET_REGION1RA_Msk = @as(c_ulong, 0x1) << MWU_NMIENSET_REGION1RA_Pos;
pub const MWU_NMIENSET_REGION1RA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIENSET_REGION1RA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIENSET_REGION1RA_Set = @as(c_ulong, 1);
pub const MWU_NMIENSET_REGION1WA_Pos = @as(c_ulong, 2);
pub const MWU_NMIENSET_REGION1WA_Msk = @as(c_ulong, 0x1) << MWU_NMIENSET_REGION1WA_Pos;
pub const MWU_NMIENSET_REGION1WA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIENSET_REGION1WA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIENSET_REGION1WA_Set = @as(c_ulong, 1);
pub const MWU_NMIENSET_REGION0RA_Pos = @as(c_ulong, 1);
pub const MWU_NMIENSET_REGION0RA_Msk = @as(c_ulong, 0x1) << MWU_NMIENSET_REGION0RA_Pos;
pub const MWU_NMIENSET_REGION0RA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIENSET_REGION0RA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIENSET_REGION0RA_Set = @as(c_ulong, 1);
pub const MWU_NMIENSET_REGION0WA_Pos = @as(c_ulong, 0);
pub const MWU_NMIENSET_REGION0WA_Msk = @as(c_ulong, 0x1) << MWU_NMIENSET_REGION0WA_Pos;
pub const MWU_NMIENSET_REGION0WA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIENSET_REGION0WA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIENSET_REGION0WA_Set = @as(c_ulong, 1);
pub const MWU_NMIENCLR_PREGION1RA_Pos = @as(c_ulong, 27);
pub const MWU_NMIENCLR_PREGION1RA_Msk = @as(c_ulong, 0x1) << MWU_NMIENCLR_PREGION1RA_Pos;
pub const MWU_NMIENCLR_PREGION1RA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIENCLR_PREGION1RA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIENCLR_PREGION1RA_Clear = @as(c_ulong, 1);
pub const MWU_NMIENCLR_PREGION1WA_Pos = @as(c_ulong, 26);
pub const MWU_NMIENCLR_PREGION1WA_Msk = @as(c_ulong, 0x1) << MWU_NMIENCLR_PREGION1WA_Pos;
pub const MWU_NMIENCLR_PREGION1WA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIENCLR_PREGION1WA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIENCLR_PREGION1WA_Clear = @as(c_ulong, 1);
pub const MWU_NMIENCLR_PREGION0RA_Pos = @as(c_ulong, 25);
pub const MWU_NMIENCLR_PREGION0RA_Msk = @as(c_ulong, 0x1) << MWU_NMIENCLR_PREGION0RA_Pos;
pub const MWU_NMIENCLR_PREGION0RA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIENCLR_PREGION0RA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIENCLR_PREGION0RA_Clear = @as(c_ulong, 1);
pub const MWU_NMIENCLR_PREGION0WA_Pos = @as(c_ulong, 24);
pub const MWU_NMIENCLR_PREGION0WA_Msk = @as(c_ulong, 0x1) << MWU_NMIENCLR_PREGION0WA_Pos;
pub const MWU_NMIENCLR_PREGION0WA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIENCLR_PREGION0WA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIENCLR_PREGION0WA_Clear = @as(c_ulong, 1);
pub const MWU_NMIENCLR_REGION3RA_Pos = @as(c_ulong, 7);
pub const MWU_NMIENCLR_REGION3RA_Msk = @as(c_ulong, 0x1) << MWU_NMIENCLR_REGION3RA_Pos;
pub const MWU_NMIENCLR_REGION3RA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIENCLR_REGION3RA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIENCLR_REGION3RA_Clear = @as(c_ulong, 1);
pub const MWU_NMIENCLR_REGION3WA_Pos = @as(c_ulong, 6);
pub const MWU_NMIENCLR_REGION3WA_Msk = @as(c_ulong, 0x1) << MWU_NMIENCLR_REGION3WA_Pos;
pub const MWU_NMIENCLR_REGION3WA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIENCLR_REGION3WA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIENCLR_REGION3WA_Clear = @as(c_ulong, 1);
pub const MWU_NMIENCLR_REGION2RA_Pos = @as(c_ulong, 5);
pub const MWU_NMIENCLR_REGION2RA_Msk = @as(c_ulong, 0x1) << MWU_NMIENCLR_REGION2RA_Pos;
pub const MWU_NMIENCLR_REGION2RA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIENCLR_REGION2RA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIENCLR_REGION2RA_Clear = @as(c_ulong, 1);
pub const MWU_NMIENCLR_REGION2WA_Pos = @as(c_ulong, 4);
pub const MWU_NMIENCLR_REGION2WA_Msk = @as(c_ulong, 0x1) << MWU_NMIENCLR_REGION2WA_Pos;
pub const MWU_NMIENCLR_REGION2WA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIENCLR_REGION2WA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIENCLR_REGION2WA_Clear = @as(c_ulong, 1);
pub const MWU_NMIENCLR_REGION1RA_Pos = @as(c_ulong, 3);
pub const MWU_NMIENCLR_REGION1RA_Msk = @as(c_ulong, 0x1) << MWU_NMIENCLR_REGION1RA_Pos;
pub const MWU_NMIENCLR_REGION1RA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIENCLR_REGION1RA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIENCLR_REGION1RA_Clear = @as(c_ulong, 1);
pub const MWU_NMIENCLR_REGION1WA_Pos = @as(c_ulong, 2);
pub const MWU_NMIENCLR_REGION1WA_Msk = @as(c_ulong, 0x1) << MWU_NMIENCLR_REGION1WA_Pos;
pub const MWU_NMIENCLR_REGION1WA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIENCLR_REGION1WA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIENCLR_REGION1WA_Clear = @as(c_ulong, 1);
pub const MWU_NMIENCLR_REGION0RA_Pos = @as(c_ulong, 1);
pub const MWU_NMIENCLR_REGION0RA_Msk = @as(c_ulong, 0x1) << MWU_NMIENCLR_REGION0RA_Pos;
pub const MWU_NMIENCLR_REGION0RA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIENCLR_REGION0RA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIENCLR_REGION0RA_Clear = @as(c_ulong, 1);
pub const MWU_NMIENCLR_REGION0WA_Pos = @as(c_ulong, 0);
pub const MWU_NMIENCLR_REGION0WA_Msk = @as(c_ulong, 0x1) << MWU_NMIENCLR_REGION0WA_Pos;
pub const MWU_NMIENCLR_REGION0WA_Disabled = @as(c_ulong, 0);
pub const MWU_NMIENCLR_REGION0WA_Enabled = @as(c_ulong, 1);
pub const MWU_NMIENCLR_REGION0WA_Clear = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR31_Pos = @as(c_ulong, 31);
pub const MWU_PERREGION_SUBSTATWA_SR31_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR31_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR31_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR31_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR30_Pos = @as(c_ulong, 30);
pub const MWU_PERREGION_SUBSTATWA_SR30_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR30_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR30_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR30_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR29_Pos = @as(c_ulong, 29);
pub const MWU_PERREGION_SUBSTATWA_SR29_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR29_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR29_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR29_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR28_Pos = @as(c_ulong, 28);
pub const MWU_PERREGION_SUBSTATWA_SR28_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR28_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR28_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR28_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR27_Pos = @as(c_ulong, 27);
pub const MWU_PERREGION_SUBSTATWA_SR27_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR27_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR27_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR27_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR26_Pos = @as(c_ulong, 26);
pub const MWU_PERREGION_SUBSTATWA_SR26_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR26_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR26_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR26_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR25_Pos = @as(c_ulong, 25);
pub const MWU_PERREGION_SUBSTATWA_SR25_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR25_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR25_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR25_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR24_Pos = @as(c_ulong, 24);
pub const MWU_PERREGION_SUBSTATWA_SR24_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR24_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR24_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR24_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR23_Pos = @as(c_ulong, 23);
pub const MWU_PERREGION_SUBSTATWA_SR23_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR23_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR23_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR23_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR22_Pos = @as(c_ulong, 22);
pub const MWU_PERREGION_SUBSTATWA_SR22_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR22_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR22_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR22_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR21_Pos = @as(c_ulong, 21);
pub const MWU_PERREGION_SUBSTATWA_SR21_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR21_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR21_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR21_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR20_Pos = @as(c_ulong, 20);
pub const MWU_PERREGION_SUBSTATWA_SR20_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR20_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR20_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR20_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR19_Pos = @as(c_ulong, 19);
pub const MWU_PERREGION_SUBSTATWA_SR19_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR19_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR19_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR19_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR18_Pos = @as(c_ulong, 18);
pub const MWU_PERREGION_SUBSTATWA_SR18_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR18_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR18_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR18_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR17_Pos = @as(c_ulong, 17);
pub const MWU_PERREGION_SUBSTATWA_SR17_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR17_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR17_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR17_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR16_Pos = @as(c_ulong, 16);
pub const MWU_PERREGION_SUBSTATWA_SR16_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR16_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR16_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR16_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR15_Pos = @as(c_ulong, 15);
pub const MWU_PERREGION_SUBSTATWA_SR15_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR15_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR15_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR15_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR14_Pos = @as(c_ulong, 14);
pub const MWU_PERREGION_SUBSTATWA_SR14_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR14_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR14_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR14_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR13_Pos = @as(c_ulong, 13);
pub const MWU_PERREGION_SUBSTATWA_SR13_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR13_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR13_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR13_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR12_Pos = @as(c_ulong, 12);
pub const MWU_PERREGION_SUBSTATWA_SR12_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR12_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR12_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR12_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR11_Pos = @as(c_ulong, 11);
pub const MWU_PERREGION_SUBSTATWA_SR11_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR11_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR11_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR11_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR10_Pos = @as(c_ulong, 10);
pub const MWU_PERREGION_SUBSTATWA_SR10_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR10_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR10_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR10_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR9_Pos = @as(c_ulong, 9);
pub const MWU_PERREGION_SUBSTATWA_SR9_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR9_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR9_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR9_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR8_Pos = @as(c_ulong, 8);
pub const MWU_PERREGION_SUBSTATWA_SR8_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR8_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR8_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR8_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR7_Pos = @as(c_ulong, 7);
pub const MWU_PERREGION_SUBSTATWA_SR7_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR7_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR7_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR7_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR6_Pos = @as(c_ulong, 6);
pub const MWU_PERREGION_SUBSTATWA_SR6_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR6_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR6_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR6_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR5_Pos = @as(c_ulong, 5);
pub const MWU_PERREGION_SUBSTATWA_SR5_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR5_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR5_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR5_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR4_Pos = @as(c_ulong, 4);
pub const MWU_PERREGION_SUBSTATWA_SR4_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR4_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR4_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR4_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR3_Pos = @as(c_ulong, 3);
pub const MWU_PERREGION_SUBSTATWA_SR3_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR3_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR3_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR3_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR2_Pos = @as(c_ulong, 2);
pub const MWU_PERREGION_SUBSTATWA_SR2_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR2_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR2_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR2_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR1_Pos = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR1_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR1_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR1_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR1_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATWA_SR0_Pos = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR0_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATWA_SR0_Pos;
pub const MWU_PERREGION_SUBSTATWA_SR0_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATWA_SR0_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR31_Pos = @as(c_ulong, 31);
pub const MWU_PERREGION_SUBSTATRA_SR31_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR31_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR31_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR31_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR30_Pos = @as(c_ulong, 30);
pub const MWU_PERREGION_SUBSTATRA_SR30_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR30_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR30_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR30_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR29_Pos = @as(c_ulong, 29);
pub const MWU_PERREGION_SUBSTATRA_SR29_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR29_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR29_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR29_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR28_Pos = @as(c_ulong, 28);
pub const MWU_PERREGION_SUBSTATRA_SR28_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR28_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR28_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR28_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR27_Pos = @as(c_ulong, 27);
pub const MWU_PERREGION_SUBSTATRA_SR27_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR27_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR27_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR27_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR26_Pos = @as(c_ulong, 26);
pub const MWU_PERREGION_SUBSTATRA_SR26_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR26_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR26_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR26_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR25_Pos = @as(c_ulong, 25);
pub const MWU_PERREGION_SUBSTATRA_SR25_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR25_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR25_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR25_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR24_Pos = @as(c_ulong, 24);
pub const MWU_PERREGION_SUBSTATRA_SR24_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR24_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR24_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR24_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR23_Pos = @as(c_ulong, 23);
pub const MWU_PERREGION_SUBSTATRA_SR23_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR23_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR23_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR23_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR22_Pos = @as(c_ulong, 22);
pub const MWU_PERREGION_SUBSTATRA_SR22_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR22_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR22_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR22_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR21_Pos = @as(c_ulong, 21);
pub const MWU_PERREGION_SUBSTATRA_SR21_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR21_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR21_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR21_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR20_Pos = @as(c_ulong, 20);
pub const MWU_PERREGION_SUBSTATRA_SR20_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR20_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR20_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR20_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR19_Pos = @as(c_ulong, 19);
pub const MWU_PERREGION_SUBSTATRA_SR19_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR19_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR19_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR19_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR18_Pos = @as(c_ulong, 18);
pub const MWU_PERREGION_SUBSTATRA_SR18_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR18_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR18_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR18_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR17_Pos = @as(c_ulong, 17);
pub const MWU_PERREGION_SUBSTATRA_SR17_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR17_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR17_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR17_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR16_Pos = @as(c_ulong, 16);
pub const MWU_PERREGION_SUBSTATRA_SR16_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR16_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR16_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR16_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR15_Pos = @as(c_ulong, 15);
pub const MWU_PERREGION_SUBSTATRA_SR15_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR15_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR15_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR15_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR14_Pos = @as(c_ulong, 14);
pub const MWU_PERREGION_SUBSTATRA_SR14_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR14_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR14_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR14_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR13_Pos = @as(c_ulong, 13);
pub const MWU_PERREGION_SUBSTATRA_SR13_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR13_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR13_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR13_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR12_Pos = @as(c_ulong, 12);
pub const MWU_PERREGION_SUBSTATRA_SR12_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR12_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR12_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR12_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR11_Pos = @as(c_ulong, 11);
pub const MWU_PERREGION_SUBSTATRA_SR11_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR11_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR11_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR11_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR10_Pos = @as(c_ulong, 10);
pub const MWU_PERREGION_SUBSTATRA_SR10_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR10_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR10_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR10_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR9_Pos = @as(c_ulong, 9);
pub const MWU_PERREGION_SUBSTATRA_SR9_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR9_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR9_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR9_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR8_Pos = @as(c_ulong, 8);
pub const MWU_PERREGION_SUBSTATRA_SR8_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR8_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR8_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR8_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR7_Pos = @as(c_ulong, 7);
pub const MWU_PERREGION_SUBSTATRA_SR7_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR7_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR7_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR7_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR6_Pos = @as(c_ulong, 6);
pub const MWU_PERREGION_SUBSTATRA_SR6_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR6_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR6_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR6_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR5_Pos = @as(c_ulong, 5);
pub const MWU_PERREGION_SUBSTATRA_SR5_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR5_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR5_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR5_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR4_Pos = @as(c_ulong, 4);
pub const MWU_PERREGION_SUBSTATRA_SR4_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR4_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR4_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR4_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR3_Pos = @as(c_ulong, 3);
pub const MWU_PERREGION_SUBSTATRA_SR3_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR3_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR3_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR3_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR2_Pos = @as(c_ulong, 2);
pub const MWU_PERREGION_SUBSTATRA_SR2_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR2_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR2_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR2_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR1_Pos = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR1_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR1_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR1_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR1_Access = @as(c_ulong, 1);
pub const MWU_PERREGION_SUBSTATRA_SR0_Pos = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR0_Msk = @as(c_ulong, 0x1) << MWU_PERREGION_SUBSTATRA_SR0_Pos;
pub const MWU_PERREGION_SUBSTATRA_SR0_NoAccess = @as(c_ulong, 0);
pub const MWU_PERREGION_SUBSTATRA_SR0_Access = @as(c_ulong, 1);
pub const MWU_REGIONEN_PRGN1RA_Pos = @as(c_ulong, 27);
pub const MWU_REGIONEN_PRGN1RA_Msk = @as(c_ulong, 0x1) << MWU_REGIONEN_PRGN1RA_Pos;
pub const MWU_REGIONEN_PRGN1RA_Disable = @as(c_ulong, 0);
pub const MWU_REGIONEN_PRGN1RA_Enable = @as(c_ulong, 1);
pub const MWU_REGIONEN_PRGN1WA_Pos = @as(c_ulong, 26);
pub const MWU_REGIONEN_PRGN1WA_Msk = @as(c_ulong, 0x1) << MWU_REGIONEN_PRGN1WA_Pos;
pub const MWU_REGIONEN_PRGN1WA_Disable = @as(c_ulong, 0);
pub const MWU_REGIONEN_PRGN1WA_Enable = @as(c_ulong, 1);
pub const MWU_REGIONEN_PRGN0RA_Pos = @as(c_ulong, 25);
pub const MWU_REGIONEN_PRGN0RA_Msk = @as(c_ulong, 0x1) << MWU_REGIONEN_PRGN0RA_Pos;
pub const MWU_REGIONEN_PRGN0RA_Disable = @as(c_ulong, 0);
pub const MWU_REGIONEN_PRGN0RA_Enable = @as(c_ulong, 1);
pub const MWU_REGIONEN_PRGN0WA_Pos = @as(c_ulong, 24);
pub const MWU_REGIONEN_PRGN0WA_Msk = @as(c_ulong, 0x1) << MWU_REGIONEN_PRGN0WA_Pos;
pub const MWU_REGIONEN_PRGN0WA_Disable = @as(c_ulong, 0);
pub const MWU_REGIONEN_PRGN0WA_Enable = @as(c_ulong, 1);
pub const MWU_REGIONEN_RGN3RA_Pos = @as(c_ulong, 7);
pub const MWU_REGIONEN_RGN3RA_Msk = @as(c_ulong, 0x1) << MWU_REGIONEN_RGN3RA_Pos;
pub const MWU_REGIONEN_RGN3RA_Disable = @as(c_ulong, 0);
pub const MWU_REGIONEN_RGN3RA_Enable = @as(c_ulong, 1);
pub const MWU_REGIONEN_RGN3WA_Pos = @as(c_ulong, 6);
pub const MWU_REGIONEN_RGN3WA_Msk = @as(c_ulong, 0x1) << MWU_REGIONEN_RGN3WA_Pos;
pub const MWU_REGIONEN_RGN3WA_Disable = @as(c_ulong, 0);
pub const MWU_REGIONEN_RGN3WA_Enable = @as(c_ulong, 1);
pub const MWU_REGIONEN_RGN2RA_Pos = @as(c_ulong, 5);
pub const MWU_REGIONEN_RGN2RA_Msk = @as(c_ulong, 0x1) << MWU_REGIONEN_RGN2RA_Pos;
pub const MWU_REGIONEN_RGN2RA_Disable = @as(c_ulong, 0);
pub const MWU_REGIONEN_RGN2RA_Enable = @as(c_ulong, 1);
pub const MWU_REGIONEN_RGN2WA_Pos = @as(c_ulong, 4);
pub const MWU_REGIONEN_RGN2WA_Msk = @as(c_ulong, 0x1) << MWU_REGIONEN_RGN2WA_Pos;
pub const MWU_REGIONEN_RGN2WA_Disable = @as(c_ulong, 0);
pub const MWU_REGIONEN_RGN2WA_Enable = @as(c_ulong, 1);
pub const MWU_REGIONEN_RGN1RA_Pos = @as(c_ulong, 3);
pub const MWU_REGIONEN_RGN1RA_Msk = @as(c_ulong, 0x1) << MWU_REGIONEN_RGN1RA_Pos;
pub const MWU_REGIONEN_RGN1RA_Disable = @as(c_ulong, 0);
pub const MWU_REGIONEN_RGN1RA_Enable = @as(c_ulong, 1);
pub const MWU_REGIONEN_RGN1WA_Pos = @as(c_ulong, 2);
pub const MWU_REGIONEN_RGN1WA_Msk = @as(c_ulong, 0x1) << MWU_REGIONEN_RGN1WA_Pos;
pub const MWU_REGIONEN_RGN1WA_Disable = @as(c_ulong, 0);
pub const MWU_REGIONEN_RGN1WA_Enable = @as(c_ulong, 1);
pub const MWU_REGIONEN_RGN0RA_Pos = @as(c_ulong, 1);
pub const MWU_REGIONEN_RGN0RA_Msk = @as(c_ulong, 0x1) << MWU_REGIONEN_RGN0RA_Pos;
pub const MWU_REGIONEN_RGN0RA_Disable = @as(c_ulong, 0);
pub const MWU_REGIONEN_RGN0RA_Enable = @as(c_ulong, 1);
pub const MWU_REGIONEN_RGN0WA_Pos = @as(c_ulong, 0);
pub const MWU_REGIONEN_RGN0WA_Msk = @as(c_ulong, 0x1) << MWU_REGIONEN_RGN0WA_Pos;
pub const MWU_REGIONEN_RGN0WA_Disable = @as(c_ulong, 0);
pub const MWU_REGIONEN_RGN0WA_Enable = @as(c_ulong, 1);
pub const MWU_REGIONENSET_PRGN1RA_Pos = @as(c_ulong, 27);
pub const MWU_REGIONENSET_PRGN1RA_Msk = @as(c_ulong, 0x1) << MWU_REGIONENSET_PRGN1RA_Pos;
pub const MWU_REGIONENSET_PRGN1RA_Disabled = @as(c_ulong, 0);
pub const MWU_REGIONENSET_PRGN1RA_Enabled = @as(c_ulong, 1);
pub const MWU_REGIONENSET_PRGN1RA_Set = @as(c_ulong, 1);
pub const MWU_REGIONENSET_PRGN1WA_Pos = @as(c_ulong, 26);
pub const MWU_REGIONENSET_PRGN1WA_Msk = @as(c_ulong, 0x1) << MWU_REGIONENSET_PRGN1WA_Pos;
pub const MWU_REGIONENSET_PRGN1WA_Disabled = @as(c_ulong, 0);
pub const MWU_REGIONENSET_PRGN1WA_Enabled = @as(c_ulong, 1);
pub const MWU_REGIONENSET_PRGN1WA_Set = @as(c_ulong, 1);
pub const MWU_REGIONENSET_PRGN0RA_Pos = @as(c_ulong, 25);
pub const MWU_REGIONENSET_PRGN0RA_Msk = @as(c_ulong, 0x1) << MWU_REGIONENSET_PRGN0RA_Pos;
pub const MWU_REGIONENSET_PRGN0RA_Disabled = @as(c_ulong, 0);
pub const MWU_REGIONENSET_PRGN0RA_Enabled = @as(c_ulong, 1);
pub const MWU_REGIONENSET_PRGN0RA_Set = @as(c_ulong, 1);
pub const MWU_REGIONENSET_PRGN0WA_Pos = @as(c_ulong, 24);
pub const MWU_REGIONENSET_PRGN0WA_Msk = @as(c_ulong, 0x1) << MWU_REGIONENSET_PRGN0WA_Pos;
pub const MWU_REGIONENSET_PRGN0WA_Disabled = @as(c_ulong, 0);
pub const MWU_REGIONENSET_PRGN0WA_Enabled = @as(c_ulong, 1);
pub const MWU_REGIONENSET_PRGN0WA_Set = @as(c_ulong, 1);
pub const MWU_REGIONENSET_RGN3RA_Pos = @as(c_ulong, 7);
pub const MWU_REGIONENSET_RGN3RA_Msk = @as(c_ulong, 0x1) << MWU_REGIONENSET_RGN3RA_Pos;
pub const MWU_REGIONENSET_RGN3RA_Disabled = @as(c_ulong, 0);
pub const MWU_REGIONENSET_RGN3RA_Enabled = @as(c_ulong, 1);
pub const MWU_REGIONENSET_RGN3RA_Set = @as(c_ulong, 1);
pub const MWU_REGIONENSET_RGN3WA_Pos = @as(c_ulong, 6);
pub const MWU_REGIONENSET_RGN3WA_Msk = @as(c_ulong, 0x1) << MWU_REGIONENSET_RGN3WA_Pos;
pub const MWU_REGIONENSET_RGN3WA_Disabled = @as(c_ulong, 0);
pub const MWU_REGIONENSET_RGN3WA_Enabled = @as(c_ulong, 1);
pub const MWU_REGIONENSET_RGN3WA_Set = @as(c_ulong, 1);
pub const MWU_REGIONENSET_RGN2RA_Pos = @as(c_ulong, 5);
pub const MWU_REGIONENSET_RGN2RA_Msk = @as(c_ulong, 0x1) << MWU_REGIONENSET_RGN2RA_Pos;
pub const MWU_REGIONENSET_RGN2RA_Disabled = @as(c_ulong, 0);
pub const MWU_REGIONENSET_RGN2RA_Enabled = @as(c_ulong, 1);
pub const MWU_REGIONENSET_RGN2RA_Set = @as(c_ulong, 1);
pub const MWU_REGIONENSET_RGN2WA_Pos = @as(c_ulong, 4);
pub const MWU_REGIONENSET_RGN2WA_Msk = @as(c_ulong, 0x1) << MWU_REGIONENSET_RGN2WA_Pos;
pub const MWU_REGIONENSET_RGN2WA_Disabled = @as(c_ulong, 0);
pub const MWU_REGIONENSET_RGN2WA_Enabled = @as(c_ulong, 1);
pub const MWU_REGIONENSET_RGN2WA_Set = @as(c_ulong, 1);
pub const MWU_REGIONENSET_RGN1RA_Pos = @as(c_ulong, 3);
pub const MWU_REGIONENSET_RGN1RA_Msk = @as(c_ulong, 0x1) << MWU_REGIONENSET_RGN1RA_Pos;
pub const MWU_REGIONENSET_RGN1RA_Disabled = @as(c_ulong, 0);
pub const MWU_REGIONENSET_RGN1RA_Enabled = @as(c_ulong, 1);
pub const MWU_REGIONENSET_RGN1RA_Set = @as(c_ulong, 1);
pub const MWU_REGIONENSET_RGN1WA_Pos = @as(c_ulong, 2);
pub const MWU_REGIONENSET_RGN1WA_Msk = @as(c_ulong, 0x1) << MWU_REGIONENSET_RGN1WA_Pos;
pub const MWU_REGIONENSET_RGN1WA_Disabled = @as(c_ulong, 0);
pub const MWU_REGIONENSET_RGN1WA_Enabled = @as(c_ulong, 1);
pub const MWU_REGIONENSET_RGN1WA_Set = @as(c_ulong, 1);
pub const MWU_REGIONENSET_RGN0RA_Pos = @as(c_ulong, 1);
pub const MWU_REGIONENSET_RGN0RA_Msk = @as(c_ulong, 0x1) << MWU_REGIONENSET_RGN0RA_Pos;
pub const MWU_REGIONENSET_RGN0RA_Disabled = @as(c_ulong, 0);
pub const MWU_REGIONENSET_RGN0RA_Enabled = @as(c_ulong, 1);
pub const MWU_REGIONENSET_RGN0RA_Set = @as(c_ulong, 1);
pub const MWU_REGIONENSET_RGN0WA_Pos = @as(c_ulong, 0);
pub const MWU_REGIONENSET_RGN0WA_Msk = @as(c_ulong, 0x1) << MWU_REGIONENSET_RGN0WA_Pos;
pub const MWU_REGIONENSET_RGN0WA_Disabled = @as(c_ulong, 0);
pub const MWU_REGIONENSET_RGN0WA_Enabled = @as(c_ulong, 1);
pub const MWU_REGIONENSET_RGN0WA_Set = @as(c_ulong, 1);
pub const MWU_REGIONENCLR_PRGN1RA_Pos = @as(c_ulong, 27);
pub const MWU_REGIONENCLR_PRGN1RA_Msk = @as(c_ulong, 0x1) << MWU_REGIONENCLR_PRGN1RA_Pos;
pub const MWU_REGIONENCLR_PRGN1RA_Disabled = @as(c_ulong, 0);
pub const MWU_REGIONENCLR_PRGN1RA_Enabled = @as(c_ulong, 1);
pub const MWU_REGIONENCLR_PRGN1RA_Clear = @as(c_ulong, 1);
pub const MWU_REGIONENCLR_PRGN1WA_Pos = @as(c_ulong, 26);
pub const MWU_REGIONENCLR_PRGN1WA_Msk = @as(c_ulong, 0x1) << MWU_REGIONENCLR_PRGN1WA_Pos;
pub const MWU_REGIONENCLR_PRGN1WA_Disabled = @as(c_ulong, 0);
pub const MWU_REGIONENCLR_PRGN1WA_Enabled = @as(c_ulong, 1);
pub const MWU_REGIONENCLR_PRGN1WA_Clear = @as(c_ulong, 1);
pub const MWU_REGIONENCLR_PRGN0RA_Pos = @as(c_ulong, 25);
pub const MWU_REGIONENCLR_PRGN0RA_Msk = @as(c_ulong, 0x1) << MWU_REGIONENCLR_PRGN0RA_Pos;
pub const MWU_REGIONENCLR_PRGN0RA_Disabled = @as(c_ulong, 0);
pub const MWU_REGIONENCLR_PRGN0RA_Enabled = @as(c_ulong, 1);
pub const MWU_REGIONENCLR_PRGN0RA_Clear = @as(c_ulong, 1);
pub const MWU_REGIONENCLR_PRGN0WA_Pos = @as(c_ulong, 24);
pub const MWU_REGIONENCLR_PRGN0WA_Msk = @as(c_ulong, 0x1) << MWU_REGIONENCLR_PRGN0WA_Pos;
pub const MWU_REGIONENCLR_PRGN0WA_Disabled = @as(c_ulong, 0);
pub const MWU_REGIONENCLR_PRGN0WA_Enabled = @as(c_ulong, 1);
pub const MWU_REGIONENCLR_PRGN0WA_Clear = @as(c_ulong, 1);
pub const MWU_REGIONENCLR_RGN3RA_Pos = @as(c_ulong, 7);
pub const MWU_REGIONENCLR_RGN3RA_Msk = @as(c_ulong, 0x1) << MWU_REGIONENCLR_RGN3RA_Pos;
pub const MWU_REGIONENCLR_RGN3RA_Disabled = @as(c_ulong, 0);
pub const MWU_REGIONENCLR_RGN3RA_Enabled = @as(c_ulong, 1);
pub const MWU_REGIONENCLR_RGN3RA_Clear = @as(c_ulong, 1);
pub const MWU_REGIONENCLR_RGN3WA_Pos = @as(c_ulong, 6);
pub const MWU_REGIONENCLR_RGN3WA_Msk = @as(c_ulong, 0x1) << MWU_REGIONENCLR_RGN3WA_Pos;
pub const MWU_REGIONENCLR_RGN3WA_Disabled = @as(c_ulong, 0);
pub const MWU_REGIONENCLR_RGN3WA_Enabled = @as(c_ulong, 1);
pub const MWU_REGIONENCLR_RGN3WA_Clear = @as(c_ulong, 1);
pub const MWU_REGIONENCLR_RGN2RA_Pos = @as(c_ulong, 5);
pub const MWU_REGIONENCLR_RGN2RA_Msk = @as(c_ulong, 0x1) << MWU_REGIONENCLR_RGN2RA_Pos;
pub const MWU_REGIONENCLR_RGN2RA_Disabled = @as(c_ulong, 0);
pub const MWU_REGIONENCLR_RGN2RA_Enabled = @as(c_ulong, 1);
pub const MWU_REGIONENCLR_RGN2RA_Clear = @as(c_ulong, 1);
pub const MWU_REGIONENCLR_RGN2WA_Pos = @as(c_ulong, 4);
pub const MWU_REGIONENCLR_RGN2WA_Msk = @as(c_ulong, 0x1) << MWU_REGIONENCLR_RGN2WA_Pos;
pub const MWU_REGIONENCLR_RGN2WA_Disabled = @as(c_ulong, 0);
pub const MWU_REGIONENCLR_RGN2WA_Enabled = @as(c_ulong, 1);
pub const MWU_REGIONENCLR_RGN2WA_Clear = @as(c_ulong, 1);
pub const MWU_REGIONENCLR_RGN1RA_Pos = @as(c_ulong, 3);
pub const MWU_REGIONENCLR_RGN1RA_Msk = @as(c_ulong, 0x1) << MWU_REGIONENCLR_RGN1RA_Pos;
pub const MWU_REGIONENCLR_RGN1RA_Disabled = @as(c_ulong, 0);
pub const MWU_REGIONENCLR_RGN1RA_Enabled = @as(c_ulong, 1);
pub const MWU_REGIONENCLR_RGN1RA_Clear = @as(c_ulong, 1);
pub const MWU_REGIONENCLR_RGN1WA_Pos = @as(c_ulong, 2);
pub const MWU_REGIONENCLR_RGN1WA_Msk = @as(c_ulong, 0x1) << MWU_REGIONENCLR_RGN1WA_Pos;
pub const MWU_REGIONENCLR_RGN1WA_Disabled = @as(c_ulong, 0);
pub const MWU_REGIONENCLR_RGN1WA_Enabled = @as(c_ulong, 1);
pub const MWU_REGIONENCLR_RGN1WA_Clear = @as(c_ulong, 1);
pub const MWU_REGIONENCLR_RGN0RA_Pos = @as(c_ulong, 1);
pub const MWU_REGIONENCLR_RGN0RA_Msk = @as(c_ulong, 0x1) << MWU_REGIONENCLR_RGN0RA_Pos;
pub const MWU_REGIONENCLR_RGN0RA_Disabled = @as(c_ulong, 0);
pub const MWU_REGIONENCLR_RGN0RA_Enabled = @as(c_ulong, 1);
pub const MWU_REGIONENCLR_RGN0RA_Clear = @as(c_ulong, 1);
pub const MWU_REGIONENCLR_RGN0WA_Pos = @as(c_ulong, 0);
pub const MWU_REGIONENCLR_RGN0WA_Msk = @as(c_ulong, 0x1) << MWU_REGIONENCLR_RGN0WA_Pos;
pub const MWU_REGIONENCLR_RGN0WA_Disabled = @as(c_ulong, 0);
pub const MWU_REGIONENCLR_RGN0WA_Enabled = @as(c_ulong, 1);
pub const MWU_REGIONENCLR_RGN0WA_Clear = @as(c_ulong, 1);
pub const MWU_REGION_START_START_Pos = @as(c_ulong, 0);
pub const MWU_REGION_START_START_Msk = @as(c_ulong, 0xFFFFFFFF) << MWU_REGION_START_START_Pos;
pub const MWU_REGION_END_END_Pos = @as(c_ulong, 0);
pub const MWU_REGION_END_END_Msk = @as(c_ulong, 0xFFFFFFFF) << MWU_REGION_END_END_Pos;
pub const MWU_PREGION_START_START_Pos = @as(c_ulong, 0);
pub const MWU_PREGION_START_START_Msk = @as(c_ulong, 0xFFFFFFFF) << MWU_PREGION_START_START_Pos;
pub const MWU_PREGION_END_END_Pos = @as(c_ulong, 0);
pub const MWU_PREGION_END_END_Msk = @as(c_ulong, 0xFFFFFFFF) << MWU_PREGION_END_END_Pos;
pub const MWU_PREGION_SUBS_SR31_Pos = @as(c_ulong, 31);
pub const MWU_PREGION_SUBS_SR31_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR31_Pos;
pub const MWU_PREGION_SUBS_SR31_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR31_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR30_Pos = @as(c_ulong, 30);
pub const MWU_PREGION_SUBS_SR30_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR30_Pos;
pub const MWU_PREGION_SUBS_SR30_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR30_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR29_Pos = @as(c_ulong, 29);
pub const MWU_PREGION_SUBS_SR29_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR29_Pos;
pub const MWU_PREGION_SUBS_SR29_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR29_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR28_Pos = @as(c_ulong, 28);
pub const MWU_PREGION_SUBS_SR28_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR28_Pos;
pub const MWU_PREGION_SUBS_SR28_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR28_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR27_Pos = @as(c_ulong, 27);
pub const MWU_PREGION_SUBS_SR27_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR27_Pos;
pub const MWU_PREGION_SUBS_SR27_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR27_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR26_Pos = @as(c_ulong, 26);
pub const MWU_PREGION_SUBS_SR26_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR26_Pos;
pub const MWU_PREGION_SUBS_SR26_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR26_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR25_Pos = @as(c_ulong, 25);
pub const MWU_PREGION_SUBS_SR25_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR25_Pos;
pub const MWU_PREGION_SUBS_SR25_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR25_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR24_Pos = @as(c_ulong, 24);
pub const MWU_PREGION_SUBS_SR24_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR24_Pos;
pub const MWU_PREGION_SUBS_SR24_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR24_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR23_Pos = @as(c_ulong, 23);
pub const MWU_PREGION_SUBS_SR23_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR23_Pos;
pub const MWU_PREGION_SUBS_SR23_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR23_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR22_Pos = @as(c_ulong, 22);
pub const MWU_PREGION_SUBS_SR22_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR22_Pos;
pub const MWU_PREGION_SUBS_SR22_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR22_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR21_Pos = @as(c_ulong, 21);
pub const MWU_PREGION_SUBS_SR21_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR21_Pos;
pub const MWU_PREGION_SUBS_SR21_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR21_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR20_Pos = @as(c_ulong, 20);
pub const MWU_PREGION_SUBS_SR20_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR20_Pos;
pub const MWU_PREGION_SUBS_SR20_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR20_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR19_Pos = @as(c_ulong, 19);
pub const MWU_PREGION_SUBS_SR19_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR19_Pos;
pub const MWU_PREGION_SUBS_SR19_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR19_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR18_Pos = @as(c_ulong, 18);
pub const MWU_PREGION_SUBS_SR18_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR18_Pos;
pub const MWU_PREGION_SUBS_SR18_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR18_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR17_Pos = @as(c_ulong, 17);
pub const MWU_PREGION_SUBS_SR17_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR17_Pos;
pub const MWU_PREGION_SUBS_SR17_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR17_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR16_Pos = @as(c_ulong, 16);
pub const MWU_PREGION_SUBS_SR16_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR16_Pos;
pub const MWU_PREGION_SUBS_SR16_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR16_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR15_Pos = @as(c_ulong, 15);
pub const MWU_PREGION_SUBS_SR15_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR15_Pos;
pub const MWU_PREGION_SUBS_SR15_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR15_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR14_Pos = @as(c_ulong, 14);
pub const MWU_PREGION_SUBS_SR14_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR14_Pos;
pub const MWU_PREGION_SUBS_SR14_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR14_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR13_Pos = @as(c_ulong, 13);
pub const MWU_PREGION_SUBS_SR13_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR13_Pos;
pub const MWU_PREGION_SUBS_SR13_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR13_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR12_Pos = @as(c_ulong, 12);
pub const MWU_PREGION_SUBS_SR12_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR12_Pos;
pub const MWU_PREGION_SUBS_SR12_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR12_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR11_Pos = @as(c_ulong, 11);
pub const MWU_PREGION_SUBS_SR11_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR11_Pos;
pub const MWU_PREGION_SUBS_SR11_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR11_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR10_Pos = @as(c_ulong, 10);
pub const MWU_PREGION_SUBS_SR10_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR10_Pos;
pub const MWU_PREGION_SUBS_SR10_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR10_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR9_Pos = @as(c_ulong, 9);
pub const MWU_PREGION_SUBS_SR9_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR9_Pos;
pub const MWU_PREGION_SUBS_SR9_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR9_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR8_Pos = @as(c_ulong, 8);
pub const MWU_PREGION_SUBS_SR8_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR8_Pos;
pub const MWU_PREGION_SUBS_SR8_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR8_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR7_Pos = @as(c_ulong, 7);
pub const MWU_PREGION_SUBS_SR7_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR7_Pos;
pub const MWU_PREGION_SUBS_SR7_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR7_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR6_Pos = @as(c_ulong, 6);
pub const MWU_PREGION_SUBS_SR6_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR6_Pos;
pub const MWU_PREGION_SUBS_SR6_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR6_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR5_Pos = @as(c_ulong, 5);
pub const MWU_PREGION_SUBS_SR5_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR5_Pos;
pub const MWU_PREGION_SUBS_SR5_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR5_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR4_Pos = @as(c_ulong, 4);
pub const MWU_PREGION_SUBS_SR4_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR4_Pos;
pub const MWU_PREGION_SUBS_SR4_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR4_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR3_Pos = @as(c_ulong, 3);
pub const MWU_PREGION_SUBS_SR3_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR3_Pos;
pub const MWU_PREGION_SUBS_SR3_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR3_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR2_Pos = @as(c_ulong, 2);
pub const MWU_PREGION_SUBS_SR2_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR2_Pos;
pub const MWU_PREGION_SUBS_SR2_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR2_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR1_Pos = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR1_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR1_Pos;
pub const MWU_PREGION_SUBS_SR1_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR1_Include = @as(c_ulong, 1);
pub const MWU_PREGION_SUBS_SR0_Pos = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR0_Msk = @as(c_ulong, 0x1) << MWU_PREGION_SUBS_SR0_Pos;
pub const MWU_PREGION_SUBS_SR0_Exclude = @as(c_ulong, 0);
pub const MWU_PREGION_SUBS_SR0_Include = @as(c_ulong, 1);
pub const NFCT_TASKS_ACTIVATE_TASKS_ACTIVATE_Pos = @as(c_ulong, 0);
pub const NFCT_TASKS_ACTIVATE_TASKS_ACTIVATE_Msk = @as(c_ulong, 0x1) << NFCT_TASKS_ACTIVATE_TASKS_ACTIVATE_Pos;
pub const NFCT_TASKS_ACTIVATE_TASKS_ACTIVATE_Trigger = @as(c_ulong, 1);
pub const NFCT_TASKS_DISABLE_TASKS_DISABLE_Pos = @as(c_ulong, 0);
pub const NFCT_TASKS_DISABLE_TASKS_DISABLE_Msk = @as(c_ulong, 0x1) << NFCT_TASKS_DISABLE_TASKS_DISABLE_Pos;
pub const NFCT_TASKS_DISABLE_TASKS_DISABLE_Trigger = @as(c_ulong, 1);
pub const NFCT_TASKS_SENSE_TASKS_SENSE_Pos = @as(c_ulong, 0);
pub const NFCT_TASKS_SENSE_TASKS_SENSE_Msk = @as(c_ulong, 0x1) << NFCT_TASKS_SENSE_TASKS_SENSE_Pos;
pub const NFCT_TASKS_SENSE_TASKS_SENSE_Trigger = @as(c_ulong, 1);
pub const NFCT_TASKS_STARTTX_TASKS_STARTTX_Pos = @as(c_ulong, 0);
pub const NFCT_TASKS_STARTTX_TASKS_STARTTX_Msk = @as(c_ulong, 0x1) << NFCT_TASKS_STARTTX_TASKS_STARTTX_Pos;
pub const NFCT_TASKS_STARTTX_TASKS_STARTTX_Trigger = @as(c_ulong, 1);
pub const NFCT_TASKS_ENABLERXDATA_TASKS_ENABLERXDATA_Pos = @as(c_ulong, 0);
pub const NFCT_TASKS_ENABLERXDATA_TASKS_ENABLERXDATA_Msk = @as(c_ulong, 0x1) << NFCT_TASKS_ENABLERXDATA_TASKS_ENABLERXDATA_Pos;
pub const NFCT_TASKS_ENABLERXDATA_TASKS_ENABLERXDATA_Trigger = @as(c_ulong, 1);
pub const NFCT_TASKS_GOIDLE_TASKS_GOIDLE_Pos = @as(c_ulong, 0);
pub const NFCT_TASKS_GOIDLE_TASKS_GOIDLE_Msk = @as(c_ulong, 0x1) << NFCT_TASKS_GOIDLE_TASKS_GOIDLE_Pos;
pub const NFCT_TASKS_GOIDLE_TASKS_GOIDLE_Trigger = @as(c_ulong, 1);
pub const NFCT_TASKS_GOSLEEP_TASKS_GOSLEEP_Pos = @as(c_ulong, 0);
pub const NFCT_TASKS_GOSLEEP_TASKS_GOSLEEP_Msk = @as(c_ulong, 0x1) << NFCT_TASKS_GOSLEEP_TASKS_GOSLEEP_Pos;
pub const NFCT_TASKS_GOSLEEP_TASKS_GOSLEEP_Trigger = @as(c_ulong, 1);
pub const NFCT_EVENTS_READY_EVENTS_READY_Pos = @as(c_ulong, 0);
pub const NFCT_EVENTS_READY_EVENTS_READY_Msk = @as(c_ulong, 0x1) << NFCT_EVENTS_READY_EVENTS_READY_Pos;
pub const NFCT_EVENTS_READY_EVENTS_READY_NotGenerated = @as(c_ulong, 0);
pub const NFCT_EVENTS_READY_EVENTS_READY_Generated = @as(c_ulong, 1);
pub const NFCT_EVENTS_FIELDDETECTED_EVENTS_FIELDDETECTED_Pos = @as(c_ulong, 0);
pub const NFCT_EVENTS_FIELDDETECTED_EVENTS_FIELDDETECTED_Msk = @as(c_ulong, 0x1) << NFCT_EVENTS_FIELDDETECTED_EVENTS_FIELDDETECTED_Pos;
pub const NFCT_EVENTS_FIELDDETECTED_EVENTS_FIELDDETECTED_NotGenerated = @as(c_ulong, 0);
pub const NFCT_EVENTS_FIELDDETECTED_EVENTS_FIELDDETECTED_Generated = @as(c_ulong, 1);
pub const NFCT_EVENTS_FIELDLOST_EVENTS_FIELDLOST_Pos = @as(c_ulong, 0);
pub const NFCT_EVENTS_FIELDLOST_EVENTS_FIELDLOST_Msk = @as(c_ulong, 0x1) << NFCT_EVENTS_FIELDLOST_EVENTS_FIELDLOST_Pos;
pub const NFCT_EVENTS_FIELDLOST_EVENTS_FIELDLOST_NotGenerated = @as(c_ulong, 0);
pub const NFCT_EVENTS_FIELDLOST_EVENTS_FIELDLOST_Generated = @as(c_ulong, 1);
pub const NFCT_EVENTS_TXFRAMESTART_EVENTS_TXFRAMESTART_Pos = @as(c_ulong, 0);
pub const NFCT_EVENTS_TXFRAMESTART_EVENTS_TXFRAMESTART_Msk = @as(c_ulong, 0x1) << NFCT_EVENTS_TXFRAMESTART_EVENTS_TXFRAMESTART_Pos;
pub const NFCT_EVENTS_TXFRAMESTART_EVENTS_TXFRAMESTART_NotGenerated = @as(c_ulong, 0);
pub const NFCT_EVENTS_TXFRAMESTART_EVENTS_TXFRAMESTART_Generated = @as(c_ulong, 1);
pub const NFCT_EVENTS_TXFRAMEEND_EVENTS_TXFRAMEEND_Pos = @as(c_ulong, 0);
pub const NFCT_EVENTS_TXFRAMEEND_EVENTS_TXFRAMEEND_Msk = @as(c_ulong, 0x1) << NFCT_EVENTS_TXFRAMEEND_EVENTS_TXFRAMEEND_Pos;
pub const NFCT_EVENTS_TXFRAMEEND_EVENTS_TXFRAMEEND_NotGenerated = @as(c_ulong, 0);
pub const NFCT_EVENTS_TXFRAMEEND_EVENTS_TXFRAMEEND_Generated = @as(c_ulong, 1);
pub const NFCT_EVENTS_RXFRAMESTART_EVENTS_RXFRAMESTART_Pos = @as(c_ulong, 0);
pub const NFCT_EVENTS_RXFRAMESTART_EVENTS_RXFRAMESTART_Msk = @as(c_ulong, 0x1) << NFCT_EVENTS_RXFRAMESTART_EVENTS_RXFRAMESTART_Pos;
pub const NFCT_EVENTS_RXFRAMESTART_EVENTS_RXFRAMESTART_NotGenerated = @as(c_ulong, 0);
pub const NFCT_EVENTS_RXFRAMESTART_EVENTS_RXFRAMESTART_Generated = @as(c_ulong, 1);
pub const NFCT_EVENTS_RXFRAMEEND_EVENTS_RXFRAMEEND_Pos = @as(c_ulong, 0);
pub const NFCT_EVENTS_RXFRAMEEND_EVENTS_RXFRAMEEND_Msk = @as(c_ulong, 0x1) << NFCT_EVENTS_RXFRAMEEND_EVENTS_RXFRAMEEND_Pos;
pub const NFCT_EVENTS_RXFRAMEEND_EVENTS_RXFRAMEEND_NotGenerated = @as(c_ulong, 0);
pub const NFCT_EVENTS_RXFRAMEEND_EVENTS_RXFRAMEEND_Generated = @as(c_ulong, 1);
pub const NFCT_EVENTS_ERROR_EVENTS_ERROR_Pos = @as(c_ulong, 0);
pub const NFCT_EVENTS_ERROR_EVENTS_ERROR_Msk = @as(c_ulong, 0x1) << NFCT_EVENTS_ERROR_EVENTS_ERROR_Pos;
pub const NFCT_EVENTS_ERROR_EVENTS_ERROR_NotGenerated = @as(c_ulong, 0);
pub const NFCT_EVENTS_ERROR_EVENTS_ERROR_Generated = @as(c_ulong, 1);
pub const NFCT_EVENTS_RXERROR_EVENTS_RXERROR_Pos = @as(c_ulong, 0);
pub const NFCT_EVENTS_RXERROR_EVENTS_RXERROR_Msk = @as(c_ulong, 0x1) << NFCT_EVENTS_RXERROR_EVENTS_RXERROR_Pos;
pub const NFCT_EVENTS_RXERROR_EVENTS_RXERROR_NotGenerated = @as(c_ulong, 0);
pub const NFCT_EVENTS_RXERROR_EVENTS_RXERROR_Generated = @as(c_ulong, 1);
pub const NFCT_EVENTS_ENDRX_EVENTS_ENDRX_Pos = @as(c_ulong, 0);
pub const NFCT_EVENTS_ENDRX_EVENTS_ENDRX_Msk = @as(c_ulong, 0x1) << NFCT_EVENTS_ENDRX_EVENTS_ENDRX_Pos;
pub const NFCT_EVENTS_ENDRX_EVENTS_ENDRX_NotGenerated = @as(c_ulong, 0);
pub const NFCT_EVENTS_ENDRX_EVENTS_ENDRX_Generated = @as(c_ulong, 1);
pub const NFCT_EVENTS_ENDTX_EVENTS_ENDTX_Pos = @as(c_ulong, 0);
pub const NFCT_EVENTS_ENDTX_EVENTS_ENDTX_Msk = @as(c_ulong, 0x1) << NFCT_EVENTS_ENDTX_EVENTS_ENDTX_Pos;
pub const NFCT_EVENTS_ENDTX_EVENTS_ENDTX_NotGenerated = @as(c_ulong, 0);
pub const NFCT_EVENTS_ENDTX_EVENTS_ENDTX_Generated = @as(c_ulong, 1);
pub const NFCT_EVENTS_AUTOCOLRESSTARTED_EVENTS_AUTOCOLRESSTARTED_Pos = @as(c_ulong, 0);
pub const NFCT_EVENTS_AUTOCOLRESSTARTED_EVENTS_AUTOCOLRESSTARTED_Msk = @as(c_ulong, 0x1) << NFCT_EVENTS_AUTOCOLRESSTARTED_EVENTS_AUTOCOLRESSTARTED_Pos;
pub const NFCT_EVENTS_AUTOCOLRESSTARTED_EVENTS_AUTOCOLRESSTARTED_NotGenerated = @as(c_ulong, 0);
pub const NFCT_EVENTS_AUTOCOLRESSTARTED_EVENTS_AUTOCOLRESSTARTED_Generated = @as(c_ulong, 1);
pub const NFCT_EVENTS_COLLISION_EVENTS_COLLISION_Pos = @as(c_ulong, 0);
pub const NFCT_EVENTS_COLLISION_EVENTS_COLLISION_Msk = @as(c_ulong, 0x1) << NFCT_EVENTS_COLLISION_EVENTS_COLLISION_Pos;
pub const NFCT_EVENTS_COLLISION_EVENTS_COLLISION_NotGenerated = @as(c_ulong, 0);
pub const NFCT_EVENTS_COLLISION_EVENTS_COLLISION_Generated = @as(c_ulong, 1);
pub const NFCT_EVENTS_SELECTED_EVENTS_SELECTED_Pos = @as(c_ulong, 0);
pub const NFCT_EVENTS_SELECTED_EVENTS_SELECTED_Msk = @as(c_ulong, 0x1) << NFCT_EVENTS_SELECTED_EVENTS_SELECTED_Pos;
pub const NFCT_EVENTS_SELECTED_EVENTS_SELECTED_NotGenerated = @as(c_ulong, 0);
pub const NFCT_EVENTS_SELECTED_EVENTS_SELECTED_Generated = @as(c_ulong, 1);
pub const NFCT_EVENTS_STARTED_EVENTS_STARTED_Pos = @as(c_ulong, 0);
pub const NFCT_EVENTS_STARTED_EVENTS_STARTED_Msk = @as(c_ulong, 0x1) << NFCT_EVENTS_STARTED_EVENTS_STARTED_Pos;
pub const NFCT_EVENTS_STARTED_EVENTS_STARTED_NotGenerated = @as(c_ulong, 0);
pub const NFCT_EVENTS_STARTED_EVENTS_STARTED_Generated = @as(c_ulong, 1);
pub const NFCT_SHORTS_TXFRAMEEND_ENABLERXDATA_Pos = @as(c_ulong, 5);
pub const NFCT_SHORTS_TXFRAMEEND_ENABLERXDATA_Msk = @as(c_ulong, 0x1) << NFCT_SHORTS_TXFRAMEEND_ENABLERXDATA_Pos;
pub const NFCT_SHORTS_TXFRAMEEND_ENABLERXDATA_Disabled = @as(c_ulong, 0);
pub const NFCT_SHORTS_TXFRAMEEND_ENABLERXDATA_Enabled = @as(c_ulong, 1);
pub const NFCT_SHORTS_FIELDLOST_SENSE_Pos = @as(c_ulong, 1);
pub const NFCT_SHORTS_FIELDLOST_SENSE_Msk = @as(c_ulong, 0x1) << NFCT_SHORTS_FIELDLOST_SENSE_Pos;
pub const NFCT_SHORTS_FIELDLOST_SENSE_Disabled = @as(c_ulong, 0);
pub const NFCT_SHORTS_FIELDLOST_SENSE_Enabled = @as(c_ulong, 1);
pub const NFCT_SHORTS_FIELDDETECTED_ACTIVATE_Pos = @as(c_ulong, 0);
pub const NFCT_SHORTS_FIELDDETECTED_ACTIVATE_Msk = @as(c_ulong, 0x1) << NFCT_SHORTS_FIELDDETECTED_ACTIVATE_Pos;
pub const NFCT_SHORTS_FIELDDETECTED_ACTIVATE_Disabled = @as(c_ulong, 0);
pub const NFCT_SHORTS_FIELDDETECTED_ACTIVATE_Enabled = @as(c_ulong, 1);
pub const NFCT_INTEN_STARTED_Pos = @as(c_ulong, 20);
pub const NFCT_INTEN_STARTED_Msk = @as(c_ulong, 0x1) << NFCT_INTEN_STARTED_Pos;
pub const NFCT_INTEN_STARTED_Disabled = @as(c_ulong, 0);
pub const NFCT_INTEN_STARTED_Enabled = @as(c_ulong, 1);
pub const NFCT_INTEN_SELECTED_Pos = @as(c_ulong, 19);
pub const NFCT_INTEN_SELECTED_Msk = @as(c_ulong, 0x1) << NFCT_INTEN_SELECTED_Pos;
pub const NFCT_INTEN_SELECTED_Disabled = @as(c_ulong, 0);
pub const NFCT_INTEN_SELECTED_Enabled = @as(c_ulong, 1);
pub const NFCT_INTEN_COLLISION_Pos = @as(c_ulong, 18);
pub const NFCT_INTEN_COLLISION_Msk = @as(c_ulong, 0x1) << NFCT_INTEN_COLLISION_Pos;
pub const NFCT_INTEN_COLLISION_Disabled = @as(c_ulong, 0);
pub const NFCT_INTEN_COLLISION_Enabled = @as(c_ulong, 1);
pub const NFCT_INTEN_AUTOCOLRESSTARTED_Pos = @as(c_ulong, 14);
pub const NFCT_INTEN_AUTOCOLRESSTARTED_Msk = @as(c_ulong, 0x1) << NFCT_INTEN_AUTOCOLRESSTARTED_Pos;
pub const NFCT_INTEN_AUTOCOLRESSTARTED_Disabled = @as(c_ulong, 0);
pub const NFCT_INTEN_AUTOCOLRESSTARTED_Enabled = @as(c_ulong, 1);
pub const NFCT_INTEN_ENDTX_Pos = @as(c_ulong, 12);
pub const NFCT_INTEN_ENDTX_Msk = @as(c_ulong, 0x1) << NFCT_INTEN_ENDTX_Pos;
pub const NFCT_INTEN_ENDTX_Disabled = @as(c_ulong, 0);
pub const NFCT_INTEN_ENDTX_Enabled = @as(c_ulong, 1);
pub const NFCT_INTEN_ENDRX_Pos = @as(c_ulong, 11);
pub const NFCT_INTEN_ENDRX_Msk = @as(c_ulong, 0x1) << NFCT_INTEN_ENDRX_Pos;
pub const NFCT_INTEN_ENDRX_Disabled = @as(c_ulong, 0);
pub const NFCT_INTEN_ENDRX_Enabled = @as(c_ulong, 1);
pub const NFCT_INTEN_RXERROR_Pos = @as(c_ulong, 10);
pub const NFCT_INTEN_RXERROR_Msk = @as(c_ulong, 0x1) << NFCT_INTEN_RXERROR_Pos;
pub const NFCT_INTEN_RXERROR_Disabled = @as(c_ulong, 0);
pub const NFCT_INTEN_RXERROR_Enabled = @as(c_ulong, 1);
pub const NFCT_INTEN_ERROR_Pos = @as(c_ulong, 7);
pub const NFCT_INTEN_ERROR_Msk = @as(c_ulong, 0x1) << NFCT_INTEN_ERROR_Pos;
pub const NFCT_INTEN_ERROR_Disabled = @as(c_ulong, 0);
pub const NFCT_INTEN_ERROR_Enabled = @as(c_ulong, 1);
pub const NFCT_INTEN_RXFRAMEEND_Pos = @as(c_ulong, 6);
pub const NFCT_INTEN_RXFRAMEEND_Msk = @as(c_ulong, 0x1) << NFCT_INTEN_RXFRAMEEND_Pos;
pub const NFCT_INTEN_RXFRAMEEND_Disabled = @as(c_ulong, 0);
pub const NFCT_INTEN_RXFRAMEEND_Enabled = @as(c_ulong, 1);
pub const NFCT_INTEN_RXFRAMESTART_Pos = @as(c_ulong, 5);
pub const NFCT_INTEN_RXFRAMESTART_Msk = @as(c_ulong, 0x1) << NFCT_INTEN_RXFRAMESTART_Pos;
pub const NFCT_INTEN_RXFRAMESTART_Disabled = @as(c_ulong, 0);
pub const NFCT_INTEN_RXFRAMESTART_Enabled = @as(c_ulong, 1);
pub const NFCT_INTEN_TXFRAMEEND_Pos = @as(c_ulong, 4);
pub const NFCT_INTEN_TXFRAMEEND_Msk = @as(c_ulong, 0x1) << NFCT_INTEN_TXFRAMEEND_Pos;
pub const NFCT_INTEN_TXFRAMEEND_Disabled = @as(c_ulong, 0);
pub const NFCT_INTEN_TXFRAMEEND_Enabled = @as(c_ulong, 1);
pub const NFCT_INTEN_TXFRAMESTART_Pos = @as(c_ulong, 3);
pub const NFCT_INTEN_TXFRAMESTART_Msk = @as(c_ulong, 0x1) << NFCT_INTEN_TXFRAMESTART_Pos;
pub const NFCT_INTEN_TXFRAMESTART_Disabled = @as(c_ulong, 0);
pub const NFCT_INTEN_TXFRAMESTART_Enabled = @as(c_ulong, 1);
pub const NFCT_INTEN_FIELDLOST_Pos = @as(c_ulong, 2);
pub const NFCT_INTEN_FIELDLOST_Msk = @as(c_ulong, 0x1) << NFCT_INTEN_FIELDLOST_Pos;
pub const NFCT_INTEN_FIELDLOST_Disabled = @as(c_ulong, 0);
pub const NFCT_INTEN_FIELDLOST_Enabled = @as(c_ulong, 1);
pub const NFCT_INTEN_FIELDDETECTED_Pos = @as(c_ulong, 1);
pub const NFCT_INTEN_FIELDDETECTED_Msk = @as(c_ulong, 0x1) << NFCT_INTEN_FIELDDETECTED_Pos;
pub const NFCT_INTEN_FIELDDETECTED_Disabled = @as(c_ulong, 0);
pub const NFCT_INTEN_FIELDDETECTED_Enabled = @as(c_ulong, 1);
pub const NFCT_INTEN_READY_Pos = @as(c_ulong, 0);
pub const NFCT_INTEN_READY_Msk = @as(c_ulong, 0x1) << NFCT_INTEN_READY_Pos;
pub const NFCT_INTEN_READY_Disabled = @as(c_ulong, 0);
pub const NFCT_INTEN_READY_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENSET_STARTED_Pos = @as(c_ulong, 20);
pub const NFCT_INTENSET_STARTED_Msk = @as(c_ulong, 0x1) << NFCT_INTENSET_STARTED_Pos;
pub const NFCT_INTENSET_STARTED_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENSET_STARTED_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENSET_STARTED_Set = @as(c_ulong, 1);
pub const NFCT_INTENSET_SELECTED_Pos = @as(c_ulong, 19);
pub const NFCT_INTENSET_SELECTED_Msk = @as(c_ulong, 0x1) << NFCT_INTENSET_SELECTED_Pos;
pub const NFCT_INTENSET_SELECTED_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENSET_SELECTED_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENSET_SELECTED_Set = @as(c_ulong, 1);
pub const NFCT_INTENSET_COLLISION_Pos = @as(c_ulong, 18);
pub const NFCT_INTENSET_COLLISION_Msk = @as(c_ulong, 0x1) << NFCT_INTENSET_COLLISION_Pos;
pub const NFCT_INTENSET_COLLISION_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENSET_COLLISION_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENSET_COLLISION_Set = @as(c_ulong, 1);
pub const NFCT_INTENSET_AUTOCOLRESSTARTED_Pos = @as(c_ulong, 14);
pub const NFCT_INTENSET_AUTOCOLRESSTARTED_Msk = @as(c_ulong, 0x1) << NFCT_INTENSET_AUTOCOLRESSTARTED_Pos;
pub const NFCT_INTENSET_AUTOCOLRESSTARTED_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENSET_AUTOCOLRESSTARTED_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENSET_AUTOCOLRESSTARTED_Set = @as(c_ulong, 1);
pub const NFCT_INTENSET_ENDTX_Pos = @as(c_ulong, 12);
pub const NFCT_INTENSET_ENDTX_Msk = @as(c_ulong, 0x1) << NFCT_INTENSET_ENDTX_Pos;
pub const NFCT_INTENSET_ENDTX_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENSET_ENDTX_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENSET_ENDTX_Set = @as(c_ulong, 1);
pub const NFCT_INTENSET_ENDRX_Pos = @as(c_ulong, 11);
pub const NFCT_INTENSET_ENDRX_Msk = @as(c_ulong, 0x1) << NFCT_INTENSET_ENDRX_Pos;
pub const NFCT_INTENSET_ENDRX_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENSET_ENDRX_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENSET_ENDRX_Set = @as(c_ulong, 1);
pub const NFCT_INTENSET_RXERROR_Pos = @as(c_ulong, 10);
pub const NFCT_INTENSET_RXERROR_Msk = @as(c_ulong, 0x1) << NFCT_INTENSET_RXERROR_Pos;
pub const NFCT_INTENSET_RXERROR_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENSET_RXERROR_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENSET_RXERROR_Set = @as(c_ulong, 1);
pub const NFCT_INTENSET_ERROR_Pos = @as(c_ulong, 7);
pub const NFCT_INTENSET_ERROR_Msk = @as(c_ulong, 0x1) << NFCT_INTENSET_ERROR_Pos;
pub const NFCT_INTENSET_ERROR_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENSET_ERROR_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENSET_ERROR_Set = @as(c_ulong, 1);
pub const NFCT_INTENSET_RXFRAMEEND_Pos = @as(c_ulong, 6);
pub const NFCT_INTENSET_RXFRAMEEND_Msk = @as(c_ulong, 0x1) << NFCT_INTENSET_RXFRAMEEND_Pos;
pub const NFCT_INTENSET_RXFRAMEEND_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENSET_RXFRAMEEND_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENSET_RXFRAMEEND_Set = @as(c_ulong, 1);
pub const NFCT_INTENSET_RXFRAMESTART_Pos = @as(c_ulong, 5);
pub const NFCT_INTENSET_RXFRAMESTART_Msk = @as(c_ulong, 0x1) << NFCT_INTENSET_RXFRAMESTART_Pos;
pub const NFCT_INTENSET_RXFRAMESTART_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENSET_RXFRAMESTART_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENSET_RXFRAMESTART_Set = @as(c_ulong, 1);
pub const NFCT_INTENSET_TXFRAMEEND_Pos = @as(c_ulong, 4);
pub const NFCT_INTENSET_TXFRAMEEND_Msk = @as(c_ulong, 0x1) << NFCT_INTENSET_TXFRAMEEND_Pos;
pub const NFCT_INTENSET_TXFRAMEEND_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENSET_TXFRAMEEND_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENSET_TXFRAMEEND_Set = @as(c_ulong, 1);
pub const NFCT_INTENSET_TXFRAMESTART_Pos = @as(c_ulong, 3);
pub const NFCT_INTENSET_TXFRAMESTART_Msk = @as(c_ulong, 0x1) << NFCT_INTENSET_TXFRAMESTART_Pos;
pub const NFCT_INTENSET_TXFRAMESTART_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENSET_TXFRAMESTART_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENSET_TXFRAMESTART_Set = @as(c_ulong, 1);
pub const NFCT_INTENSET_FIELDLOST_Pos = @as(c_ulong, 2);
pub const NFCT_INTENSET_FIELDLOST_Msk = @as(c_ulong, 0x1) << NFCT_INTENSET_FIELDLOST_Pos;
pub const NFCT_INTENSET_FIELDLOST_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENSET_FIELDLOST_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENSET_FIELDLOST_Set = @as(c_ulong, 1);
pub const NFCT_INTENSET_FIELDDETECTED_Pos = @as(c_ulong, 1);
pub const NFCT_INTENSET_FIELDDETECTED_Msk = @as(c_ulong, 0x1) << NFCT_INTENSET_FIELDDETECTED_Pos;
pub const NFCT_INTENSET_FIELDDETECTED_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENSET_FIELDDETECTED_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENSET_FIELDDETECTED_Set = @as(c_ulong, 1);
pub const NFCT_INTENSET_READY_Pos = @as(c_ulong, 0);
pub const NFCT_INTENSET_READY_Msk = @as(c_ulong, 0x1) << NFCT_INTENSET_READY_Pos;
pub const NFCT_INTENSET_READY_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENSET_READY_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENSET_READY_Set = @as(c_ulong, 1);
pub const NFCT_INTENCLR_STARTED_Pos = @as(c_ulong, 20);
pub const NFCT_INTENCLR_STARTED_Msk = @as(c_ulong, 0x1) << NFCT_INTENCLR_STARTED_Pos;
pub const NFCT_INTENCLR_STARTED_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENCLR_STARTED_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENCLR_STARTED_Clear = @as(c_ulong, 1);
pub const NFCT_INTENCLR_SELECTED_Pos = @as(c_ulong, 19);
pub const NFCT_INTENCLR_SELECTED_Msk = @as(c_ulong, 0x1) << NFCT_INTENCLR_SELECTED_Pos;
pub const NFCT_INTENCLR_SELECTED_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENCLR_SELECTED_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENCLR_SELECTED_Clear = @as(c_ulong, 1);
pub const NFCT_INTENCLR_COLLISION_Pos = @as(c_ulong, 18);
pub const NFCT_INTENCLR_COLLISION_Msk = @as(c_ulong, 0x1) << NFCT_INTENCLR_COLLISION_Pos;
pub const NFCT_INTENCLR_COLLISION_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENCLR_COLLISION_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENCLR_COLLISION_Clear = @as(c_ulong, 1);
pub const NFCT_INTENCLR_AUTOCOLRESSTARTED_Pos = @as(c_ulong, 14);
pub const NFCT_INTENCLR_AUTOCOLRESSTARTED_Msk = @as(c_ulong, 0x1) << NFCT_INTENCLR_AUTOCOLRESSTARTED_Pos;
pub const NFCT_INTENCLR_AUTOCOLRESSTARTED_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENCLR_AUTOCOLRESSTARTED_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENCLR_AUTOCOLRESSTARTED_Clear = @as(c_ulong, 1);
pub const NFCT_INTENCLR_ENDTX_Pos = @as(c_ulong, 12);
pub const NFCT_INTENCLR_ENDTX_Msk = @as(c_ulong, 0x1) << NFCT_INTENCLR_ENDTX_Pos;
pub const NFCT_INTENCLR_ENDTX_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENCLR_ENDTX_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENCLR_ENDTX_Clear = @as(c_ulong, 1);
pub const NFCT_INTENCLR_ENDRX_Pos = @as(c_ulong, 11);
pub const NFCT_INTENCLR_ENDRX_Msk = @as(c_ulong, 0x1) << NFCT_INTENCLR_ENDRX_Pos;
pub const NFCT_INTENCLR_ENDRX_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENCLR_ENDRX_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENCLR_ENDRX_Clear = @as(c_ulong, 1);
pub const NFCT_INTENCLR_RXERROR_Pos = @as(c_ulong, 10);
pub const NFCT_INTENCLR_RXERROR_Msk = @as(c_ulong, 0x1) << NFCT_INTENCLR_RXERROR_Pos;
pub const NFCT_INTENCLR_RXERROR_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENCLR_RXERROR_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENCLR_RXERROR_Clear = @as(c_ulong, 1);
pub const NFCT_INTENCLR_ERROR_Pos = @as(c_ulong, 7);
pub const NFCT_INTENCLR_ERROR_Msk = @as(c_ulong, 0x1) << NFCT_INTENCLR_ERROR_Pos;
pub const NFCT_INTENCLR_ERROR_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENCLR_ERROR_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENCLR_ERROR_Clear = @as(c_ulong, 1);
pub const NFCT_INTENCLR_RXFRAMEEND_Pos = @as(c_ulong, 6);
pub const NFCT_INTENCLR_RXFRAMEEND_Msk = @as(c_ulong, 0x1) << NFCT_INTENCLR_RXFRAMEEND_Pos;
pub const NFCT_INTENCLR_RXFRAMEEND_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENCLR_RXFRAMEEND_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENCLR_RXFRAMEEND_Clear = @as(c_ulong, 1);
pub const NFCT_INTENCLR_RXFRAMESTART_Pos = @as(c_ulong, 5);
pub const NFCT_INTENCLR_RXFRAMESTART_Msk = @as(c_ulong, 0x1) << NFCT_INTENCLR_RXFRAMESTART_Pos;
pub const NFCT_INTENCLR_RXFRAMESTART_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENCLR_RXFRAMESTART_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENCLR_RXFRAMESTART_Clear = @as(c_ulong, 1);
pub const NFCT_INTENCLR_TXFRAMEEND_Pos = @as(c_ulong, 4);
pub const NFCT_INTENCLR_TXFRAMEEND_Msk = @as(c_ulong, 0x1) << NFCT_INTENCLR_TXFRAMEEND_Pos;
pub const NFCT_INTENCLR_TXFRAMEEND_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENCLR_TXFRAMEEND_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENCLR_TXFRAMEEND_Clear = @as(c_ulong, 1);
pub const NFCT_INTENCLR_TXFRAMESTART_Pos = @as(c_ulong, 3);
pub const NFCT_INTENCLR_TXFRAMESTART_Msk = @as(c_ulong, 0x1) << NFCT_INTENCLR_TXFRAMESTART_Pos;
pub const NFCT_INTENCLR_TXFRAMESTART_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENCLR_TXFRAMESTART_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENCLR_TXFRAMESTART_Clear = @as(c_ulong, 1);
pub const NFCT_INTENCLR_FIELDLOST_Pos = @as(c_ulong, 2);
pub const NFCT_INTENCLR_FIELDLOST_Msk = @as(c_ulong, 0x1) << NFCT_INTENCLR_FIELDLOST_Pos;
pub const NFCT_INTENCLR_FIELDLOST_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENCLR_FIELDLOST_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENCLR_FIELDLOST_Clear = @as(c_ulong, 1);
pub const NFCT_INTENCLR_FIELDDETECTED_Pos = @as(c_ulong, 1);
pub const NFCT_INTENCLR_FIELDDETECTED_Msk = @as(c_ulong, 0x1) << NFCT_INTENCLR_FIELDDETECTED_Pos;
pub const NFCT_INTENCLR_FIELDDETECTED_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENCLR_FIELDDETECTED_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENCLR_FIELDDETECTED_Clear = @as(c_ulong, 1);
pub const NFCT_INTENCLR_READY_Pos = @as(c_ulong, 0);
pub const NFCT_INTENCLR_READY_Msk = @as(c_ulong, 0x1) << NFCT_INTENCLR_READY_Pos;
pub const NFCT_INTENCLR_READY_Disabled = @as(c_ulong, 0);
pub const NFCT_INTENCLR_READY_Enabled = @as(c_ulong, 1);
pub const NFCT_INTENCLR_READY_Clear = @as(c_ulong, 1);
pub const NFCT_ERRORSTATUS_FRAMEDELAYTIMEOUT_Pos = @as(c_ulong, 0);
pub const NFCT_ERRORSTATUS_FRAMEDELAYTIMEOUT_Msk = @as(c_ulong, 0x1) << NFCT_ERRORSTATUS_FRAMEDELAYTIMEOUT_Pos;
pub const NFCT_FRAMESTATUS_RX_OVERRUN_Pos = @as(c_ulong, 3);
pub const NFCT_FRAMESTATUS_RX_OVERRUN_Msk = @as(c_ulong, 0x1) << NFCT_FRAMESTATUS_RX_OVERRUN_Pos;
pub const NFCT_FRAMESTATUS_RX_OVERRUN_NoOverrun = @as(c_ulong, 0);
pub const NFCT_FRAMESTATUS_RX_OVERRUN_Overrun = @as(c_ulong, 1);
pub const NFCT_FRAMESTATUS_RX_PARITYSTATUS_Pos = @as(c_ulong, 2);
pub const NFCT_FRAMESTATUS_RX_PARITYSTATUS_Msk = @as(c_ulong, 0x1) << NFCT_FRAMESTATUS_RX_PARITYSTATUS_Pos;
pub const NFCT_FRAMESTATUS_RX_PARITYSTATUS_ParityOK = @as(c_ulong, 0);
pub const NFCT_FRAMESTATUS_RX_PARITYSTATUS_ParityError = @as(c_ulong, 1);
pub const NFCT_FRAMESTATUS_RX_CRCERROR_Pos = @as(c_ulong, 0);
pub const NFCT_FRAMESTATUS_RX_CRCERROR_Msk = @as(c_ulong, 0x1) << NFCT_FRAMESTATUS_RX_CRCERROR_Pos;
pub const NFCT_FRAMESTATUS_RX_CRCERROR_CRCCorrect = @as(c_ulong, 0);
pub const NFCT_FRAMESTATUS_RX_CRCERROR_CRCError = @as(c_ulong, 1);
pub const NFCT_NFCTAGSTATE_NFCTAGSTATE_Pos = @as(c_ulong, 0);
pub const NFCT_NFCTAGSTATE_NFCTAGSTATE_Msk = @as(c_ulong, 0x7) << NFCT_NFCTAGSTATE_NFCTAGSTATE_Pos;
pub const NFCT_NFCTAGSTATE_NFCTAGSTATE_Disabled = @as(c_ulong, 0);
pub const NFCT_NFCTAGSTATE_NFCTAGSTATE_RampUp = @as(c_ulong, 2);
pub const NFCT_NFCTAGSTATE_NFCTAGSTATE_Idle = @as(c_ulong, 3);
pub const NFCT_NFCTAGSTATE_NFCTAGSTATE_Receive = @as(c_ulong, 4);
pub const NFCT_NFCTAGSTATE_NFCTAGSTATE_FrameDelay = @as(c_ulong, 5);
pub const NFCT_NFCTAGSTATE_NFCTAGSTATE_Transmit = @as(c_ulong, 6);
pub const NFCT_SLEEPSTATE_SLEEPSTATE_Pos = @as(c_ulong, 0);
pub const NFCT_SLEEPSTATE_SLEEPSTATE_Msk = @as(c_ulong, 0x1) << NFCT_SLEEPSTATE_SLEEPSTATE_Pos;
pub const NFCT_SLEEPSTATE_SLEEPSTATE_Idle = @as(c_ulong, 0);
pub const NFCT_SLEEPSTATE_SLEEPSTATE_SleepA = @as(c_ulong, 1);
pub const NFCT_FIELDPRESENT_LOCKDETECT_Pos = @as(c_ulong, 1);
pub const NFCT_FIELDPRESENT_LOCKDETECT_Msk = @as(c_ulong, 0x1) << NFCT_FIELDPRESENT_LOCKDETECT_Pos;
pub const NFCT_FIELDPRESENT_LOCKDETECT_NotLocked = @as(c_ulong, 0);
pub const NFCT_FIELDPRESENT_LOCKDETECT_Locked = @as(c_ulong, 1);
pub const NFCT_FIELDPRESENT_FIELDPRESENT_Pos = @as(c_ulong, 0);
pub const NFCT_FIELDPRESENT_FIELDPRESENT_Msk = @as(c_ulong, 0x1) << NFCT_FIELDPRESENT_FIELDPRESENT_Pos;
pub const NFCT_FIELDPRESENT_FIELDPRESENT_NoField = @as(c_ulong, 0);
pub const NFCT_FIELDPRESENT_FIELDPRESENT_FieldPresent = @as(c_ulong, 1);
pub const NFCT_FRAMEDELAYMIN_FRAMEDELAYMIN_Pos = @as(c_ulong, 0);
pub const NFCT_FRAMEDELAYMIN_FRAMEDELAYMIN_Msk = @as(c_ulong, 0xFFFF) << NFCT_FRAMEDELAYMIN_FRAMEDELAYMIN_Pos;
pub const NFCT_FRAMEDELAYMAX_FRAMEDELAYMAX_Pos = @as(c_ulong, 0);
pub const NFCT_FRAMEDELAYMAX_FRAMEDELAYMAX_Msk = @as(c_ulong, 0xFFFFF) << NFCT_FRAMEDELAYMAX_FRAMEDELAYMAX_Pos;
pub const NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_Pos = @as(c_ulong, 0);
pub const NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_Msk = @as(c_ulong, 0x3) << NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_Pos;
pub const NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_FreeRun = @as(c_ulong, 0);
pub const NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_Window = @as(c_ulong, 1);
pub const NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_ExactVal = @as(c_ulong, 2);
pub const NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_WindowGrid = @as(c_ulong, 3);
pub const NFCT_PACKETPTR_PTR_Pos = @as(c_ulong, 0);
pub const NFCT_PACKETPTR_PTR_Msk = @as(c_ulong, 0xFFFFFFFF) << NFCT_PACKETPTR_PTR_Pos;
pub const NFCT_MAXLEN_MAXLEN_Pos = @as(c_ulong, 0);
pub const NFCT_MAXLEN_MAXLEN_Msk = @as(c_ulong, 0x1FF) << NFCT_MAXLEN_MAXLEN_Pos;
pub const NFCT_TXD_FRAMECONFIG_CRCMODETX_Pos = @as(c_ulong, 4);
pub const NFCT_TXD_FRAMECONFIG_CRCMODETX_Msk = @as(c_ulong, 0x1) << NFCT_TXD_FRAMECONFIG_CRCMODETX_Pos;
pub const NFCT_TXD_FRAMECONFIG_CRCMODETX_NoCRCTX = @as(c_ulong, 0);
pub const NFCT_TXD_FRAMECONFIG_CRCMODETX_CRC16TX = @as(c_ulong, 1);
pub const NFCT_TXD_FRAMECONFIG_SOF_Pos = @as(c_ulong, 2);
pub const NFCT_TXD_FRAMECONFIG_SOF_Msk = @as(c_ulong, 0x1) << NFCT_TXD_FRAMECONFIG_SOF_Pos;
pub const NFCT_TXD_FRAMECONFIG_SOF_NoSoF = @as(c_ulong, 0);
pub const NFCT_TXD_FRAMECONFIG_SOF_SoF = @as(c_ulong, 1);
pub const NFCT_TXD_FRAMECONFIG_DISCARDMODE_Pos = @as(c_ulong, 1);
pub const NFCT_TXD_FRAMECONFIG_DISCARDMODE_Msk = @as(c_ulong, 0x1) << NFCT_TXD_FRAMECONFIG_DISCARDMODE_Pos;
pub const NFCT_TXD_FRAMECONFIG_DISCARDMODE_DiscardEnd = @as(c_ulong, 0);
pub const NFCT_TXD_FRAMECONFIG_DISCARDMODE_DiscardStart = @as(c_ulong, 1);
pub const NFCT_TXD_FRAMECONFIG_PARITY_Pos = @as(c_ulong, 0);
pub const NFCT_TXD_FRAMECONFIG_PARITY_Msk = @as(c_ulong, 0x1) << NFCT_TXD_FRAMECONFIG_PARITY_Pos;
pub const NFCT_TXD_FRAMECONFIG_PARITY_NoParity = @as(c_ulong, 0);
pub const NFCT_TXD_FRAMECONFIG_PARITY_Parity = @as(c_ulong, 1);
pub const NFCT_TXD_AMOUNT_TXDATABYTES_Pos = @as(c_ulong, 3);
pub const NFCT_TXD_AMOUNT_TXDATABYTES_Msk = @as(c_ulong, 0x1FF) << NFCT_TXD_AMOUNT_TXDATABYTES_Pos;
pub const NFCT_TXD_AMOUNT_TXDATABITS_Pos = @as(c_ulong, 0);
pub const NFCT_TXD_AMOUNT_TXDATABITS_Msk = @as(c_ulong, 0x7) << NFCT_TXD_AMOUNT_TXDATABITS_Pos;
pub const NFCT_RXD_FRAMECONFIG_CRCMODERX_Pos = @as(c_ulong, 4);
pub const NFCT_RXD_FRAMECONFIG_CRCMODERX_Msk = @as(c_ulong, 0x1) << NFCT_RXD_FRAMECONFIG_CRCMODERX_Pos;
pub const NFCT_RXD_FRAMECONFIG_CRCMODERX_NoCRCRX = @as(c_ulong, 0);
pub const NFCT_RXD_FRAMECONFIG_CRCMODERX_CRC16RX = @as(c_ulong, 1);
pub const NFCT_RXD_FRAMECONFIG_SOF_Pos = @as(c_ulong, 2);
pub const NFCT_RXD_FRAMECONFIG_SOF_Msk = @as(c_ulong, 0x1) << NFCT_RXD_FRAMECONFIG_SOF_Pos;
pub const NFCT_RXD_FRAMECONFIG_SOF_NoSoF = @as(c_ulong, 0);
pub const NFCT_RXD_FRAMECONFIG_SOF_SoF = @as(c_ulong, 1);
pub const NFCT_RXD_FRAMECONFIG_PARITY_Pos = @as(c_ulong, 0);
pub const NFCT_RXD_FRAMECONFIG_PARITY_Msk = @as(c_ulong, 0x1) << NFCT_RXD_FRAMECONFIG_PARITY_Pos;
pub const NFCT_RXD_FRAMECONFIG_PARITY_NoParity = @as(c_ulong, 0);
pub const NFCT_RXD_FRAMECONFIG_PARITY_Parity = @as(c_ulong, 1);
pub const NFCT_RXD_AMOUNT_RXDATABYTES_Pos = @as(c_ulong, 3);
pub const NFCT_RXD_AMOUNT_RXDATABYTES_Msk = @as(c_ulong, 0x1FF) << NFCT_RXD_AMOUNT_RXDATABYTES_Pos;
pub const NFCT_RXD_AMOUNT_RXDATABITS_Pos = @as(c_ulong, 0);
pub const NFCT_RXD_AMOUNT_RXDATABITS_Msk = @as(c_ulong, 0x7) << NFCT_RXD_AMOUNT_RXDATABITS_Pos;
pub const NFCT_NFCID1_LAST_NFCID1_W_Pos = @as(c_ulong, 24);
pub const NFCT_NFCID1_LAST_NFCID1_W_Msk = @as(c_ulong, 0xFF) << NFCT_NFCID1_LAST_NFCID1_W_Pos;
pub const NFCT_NFCID1_LAST_NFCID1_X_Pos = @as(c_ulong, 16);
pub const NFCT_NFCID1_LAST_NFCID1_X_Msk = @as(c_ulong, 0xFF) << NFCT_NFCID1_LAST_NFCID1_X_Pos;
pub const NFCT_NFCID1_LAST_NFCID1_Y_Pos = @as(c_ulong, 8);
pub const NFCT_NFCID1_LAST_NFCID1_Y_Msk = @as(c_ulong, 0xFF) << NFCT_NFCID1_LAST_NFCID1_Y_Pos;
pub const NFCT_NFCID1_LAST_NFCID1_Z_Pos = @as(c_ulong, 0);
pub const NFCT_NFCID1_LAST_NFCID1_Z_Msk = @as(c_ulong, 0xFF) << NFCT_NFCID1_LAST_NFCID1_Z_Pos;
pub const NFCT_NFCID1_2ND_LAST_NFCID1_T_Pos = @as(c_ulong, 16);
pub const NFCT_NFCID1_2ND_LAST_NFCID1_T_Msk = @as(c_ulong, 0xFF) << NFCT_NFCID1_2ND_LAST_NFCID1_T_Pos;
pub const NFCT_NFCID1_2ND_LAST_NFCID1_U_Pos = @as(c_ulong, 8);
pub const NFCT_NFCID1_2ND_LAST_NFCID1_U_Msk = @as(c_ulong, 0xFF) << NFCT_NFCID1_2ND_LAST_NFCID1_U_Pos;
pub const NFCT_NFCID1_2ND_LAST_NFCID1_V_Pos = @as(c_ulong, 0);
pub const NFCT_NFCID1_2ND_LAST_NFCID1_V_Msk = @as(c_ulong, 0xFF) << NFCT_NFCID1_2ND_LAST_NFCID1_V_Pos;
pub const NFCT_NFCID1_3RD_LAST_NFCID1_Q_Pos = @as(c_ulong, 16);
pub const NFCT_NFCID1_3RD_LAST_NFCID1_Q_Msk = @as(c_ulong, 0xFF) << NFCT_NFCID1_3RD_LAST_NFCID1_Q_Pos;
pub const NFCT_NFCID1_3RD_LAST_NFCID1_R_Pos = @as(c_ulong, 8);
pub const NFCT_NFCID1_3RD_LAST_NFCID1_R_Msk = @as(c_ulong, 0xFF) << NFCT_NFCID1_3RD_LAST_NFCID1_R_Pos;
pub const NFCT_NFCID1_3RD_LAST_NFCID1_S_Pos = @as(c_ulong, 0);
pub const NFCT_NFCID1_3RD_LAST_NFCID1_S_Msk = @as(c_ulong, 0xFF) << NFCT_NFCID1_3RD_LAST_NFCID1_S_Pos;
pub const NFCT_AUTOCOLRESCONFIG_MODE_Pos = @as(c_ulong, 0);
pub const NFCT_AUTOCOLRESCONFIG_MODE_Msk = @as(c_ulong, 0x1) << NFCT_AUTOCOLRESCONFIG_MODE_Pos;
pub const NFCT_AUTOCOLRESCONFIG_MODE_Enabled = @as(c_ulong, 0);
pub const NFCT_AUTOCOLRESCONFIG_MODE_Disabled = @as(c_ulong, 1);
pub const NFCT_SENSRES_RFU74_Pos = @as(c_ulong, 12);
pub const NFCT_SENSRES_RFU74_Msk = @as(c_ulong, 0xF) << NFCT_SENSRES_RFU74_Pos;
pub const NFCT_SENSRES_PLATFCONFIG_Pos = @as(c_ulong, 8);
pub const NFCT_SENSRES_PLATFCONFIG_Msk = @as(c_ulong, 0xF) << NFCT_SENSRES_PLATFCONFIG_Pos;
pub const NFCT_SENSRES_NFCIDSIZE_Pos = @as(c_ulong, 6);
pub const NFCT_SENSRES_NFCIDSIZE_Msk = @as(c_ulong, 0x3) << NFCT_SENSRES_NFCIDSIZE_Pos;
pub const NFCT_SENSRES_NFCIDSIZE_NFCID1Single = @as(c_ulong, 0);
pub const NFCT_SENSRES_NFCIDSIZE_NFCID1Double = @as(c_ulong, 1);
pub const NFCT_SENSRES_NFCIDSIZE_NFCID1Triple = @as(c_ulong, 2);
pub const NFCT_SENSRES_RFU5_Pos = @as(c_ulong, 5);
pub const NFCT_SENSRES_RFU5_Msk = @as(c_ulong, 0x1) << NFCT_SENSRES_RFU5_Pos;
pub const NFCT_SENSRES_BITFRAMESDD_Pos = @as(c_ulong, 0);
pub const NFCT_SENSRES_BITFRAMESDD_Msk = @as(c_ulong, 0x1F) << NFCT_SENSRES_BITFRAMESDD_Pos;
pub const NFCT_SENSRES_BITFRAMESDD_SDD00000 = @as(c_ulong, 0);
pub const NFCT_SENSRES_BITFRAMESDD_SDD00001 = @as(c_ulong, 1);
pub const NFCT_SENSRES_BITFRAMESDD_SDD00010 = @as(c_ulong, 2);
pub const NFCT_SENSRES_BITFRAMESDD_SDD00100 = @as(c_ulong, 4);
pub const NFCT_SENSRES_BITFRAMESDD_SDD01000 = @as(c_ulong, 8);
pub const NFCT_SENSRES_BITFRAMESDD_SDD10000 = @as(c_ulong, 16);
pub const NFCT_SELRES_RFU7_Pos = @as(c_ulong, 7);
pub const NFCT_SELRES_RFU7_Msk = @as(c_ulong, 0x1) << NFCT_SELRES_RFU7_Pos;
pub const NFCT_SELRES_PROTOCOL_Pos = @as(c_ulong, 5);
pub const NFCT_SELRES_PROTOCOL_Msk = @as(c_ulong, 0x3) << NFCT_SELRES_PROTOCOL_Pos;
pub const NFCT_SELRES_RFU43_Pos = @as(c_ulong, 3);
pub const NFCT_SELRES_RFU43_Msk = @as(c_ulong, 0x3) << NFCT_SELRES_RFU43_Pos;
pub const NFCT_SELRES_CASCADE_Pos = @as(c_ulong, 2);
pub const NFCT_SELRES_CASCADE_Msk = @as(c_ulong, 0x1) << NFCT_SELRES_CASCADE_Pos;
pub const NFCT_SELRES_RFU10_Pos = @as(c_ulong, 0);
pub const NFCT_SELRES_RFU10_Msk = @as(c_ulong, 0x3) << NFCT_SELRES_RFU10_Pos;
pub const NVMC_READY_READY_Pos = @as(c_ulong, 0);
pub const NVMC_READY_READY_Msk = @as(c_ulong, 0x1) << NVMC_READY_READY_Pos;
pub const NVMC_READY_READY_Busy = @as(c_ulong, 0);
pub const NVMC_READY_READY_Ready = @as(c_ulong, 1);
pub const NVMC_READYNEXT_READYNEXT_Pos = @as(c_ulong, 0);
pub const NVMC_READYNEXT_READYNEXT_Msk = @as(c_ulong, 0x1) << NVMC_READYNEXT_READYNEXT_Pos;
pub const NVMC_READYNEXT_READYNEXT_Busy = @as(c_ulong, 0);
pub const NVMC_READYNEXT_READYNEXT_Ready = @as(c_ulong, 1);
pub const NVMC_CONFIG_WEN_Pos = @as(c_ulong, 0);
pub const NVMC_CONFIG_WEN_Msk = @as(c_ulong, 0x3) << NVMC_CONFIG_WEN_Pos;
pub const NVMC_CONFIG_WEN_Ren = @as(c_ulong, 0);
pub const NVMC_CONFIG_WEN_Wen = @as(c_ulong, 1);
pub const NVMC_CONFIG_WEN_Een = @as(c_ulong, 2);
pub const NVMC_ERASEPAGE_ERASEPAGE_Pos = @as(c_ulong, 0);
pub const NVMC_ERASEPAGE_ERASEPAGE_Msk = @as(c_ulong, 0xFFFFFFFF) << NVMC_ERASEPAGE_ERASEPAGE_Pos;
pub const NVMC_ERASEPCR1_ERASEPCR1_Pos = @as(c_ulong, 0);
pub const NVMC_ERASEPCR1_ERASEPCR1_Msk = @as(c_ulong, 0xFFFFFFFF) << NVMC_ERASEPCR1_ERASEPCR1_Pos;
pub const NVMC_ERASEALL_ERASEALL_Pos = @as(c_ulong, 0);
pub const NVMC_ERASEALL_ERASEALL_Msk = @as(c_ulong, 0x1) << NVMC_ERASEALL_ERASEALL_Pos;
pub const NVMC_ERASEALL_ERASEALL_NoOperation = @as(c_ulong, 0);
pub const NVMC_ERASEALL_ERASEALL_Erase = @as(c_ulong, 1);
pub const NVMC_ERASEPCR0_ERASEPCR0_Pos = @as(c_ulong, 0);
pub const NVMC_ERASEPCR0_ERASEPCR0_Msk = @as(c_ulong, 0xFFFFFFFF) << NVMC_ERASEPCR0_ERASEPCR0_Pos;
pub const NVMC_ERASEUICR_ERASEUICR_Pos = @as(c_ulong, 0);
pub const NVMC_ERASEUICR_ERASEUICR_Msk = @as(c_ulong, 0x1) << NVMC_ERASEUICR_ERASEUICR_Pos;
pub const NVMC_ERASEUICR_ERASEUICR_NoOperation = @as(c_ulong, 0);
pub const NVMC_ERASEUICR_ERASEUICR_Erase = @as(c_ulong, 1);
pub const NVMC_ERASEPAGEPARTIAL_ERASEPAGEPARTIAL_Pos = @as(c_ulong, 0);
pub const NVMC_ERASEPAGEPARTIAL_ERASEPAGEPARTIAL_Msk = @as(c_ulong, 0xFFFFFFFF) << NVMC_ERASEPAGEPARTIAL_ERASEPAGEPARTIAL_Pos;
pub const NVMC_ERASEPAGEPARTIALCFG_DURATION_Pos = @as(c_ulong, 0);
pub const NVMC_ERASEPAGEPARTIALCFG_DURATION_Msk = @as(c_ulong, 0x7F) << NVMC_ERASEPAGEPARTIALCFG_DURATION_Pos;
pub const NVMC_ICACHECNF_CACHEPROFEN_Pos = @as(c_ulong, 8);
pub const NVMC_ICACHECNF_CACHEPROFEN_Msk = @as(c_ulong, 0x1) << NVMC_ICACHECNF_CACHEPROFEN_Pos;
pub const NVMC_ICACHECNF_CACHEPROFEN_Disabled = @as(c_ulong, 0);
pub const NVMC_ICACHECNF_CACHEPROFEN_Enabled = @as(c_ulong, 1);
pub const NVMC_ICACHECNF_CACHEEN_Pos = @as(c_ulong, 0);
pub const NVMC_ICACHECNF_CACHEEN_Msk = @as(c_ulong, 0x1) << NVMC_ICACHECNF_CACHEEN_Pos;
pub const NVMC_ICACHECNF_CACHEEN_Disabled = @as(c_ulong, 0);
pub const NVMC_ICACHECNF_CACHEEN_Enabled = @as(c_ulong, 1);
pub const NVMC_IHIT_HITS_Pos = @as(c_ulong, 0);
pub const NVMC_IHIT_HITS_Msk = @as(c_ulong, 0xFFFFFFFF) << NVMC_IHIT_HITS_Pos;
pub const NVMC_IMISS_MISSES_Pos = @as(c_ulong, 0);
pub const NVMC_IMISS_MISSES_Msk = @as(c_ulong, 0xFFFFFFFF) << NVMC_IMISS_MISSES_Pos;
pub const GPIO_OUT_PIN31_Pos = @as(c_ulong, 31);
pub const GPIO_OUT_PIN31_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN31_Pos;
pub const GPIO_OUT_PIN31_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN31_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN30_Pos = @as(c_ulong, 30);
pub const GPIO_OUT_PIN30_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN30_Pos;
pub const GPIO_OUT_PIN30_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN30_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN29_Pos = @as(c_ulong, 29);
pub const GPIO_OUT_PIN29_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN29_Pos;
pub const GPIO_OUT_PIN29_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN29_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN28_Pos = @as(c_ulong, 28);
pub const GPIO_OUT_PIN28_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN28_Pos;
pub const GPIO_OUT_PIN28_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN28_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN27_Pos = @as(c_ulong, 27);
pub const GPIO_OUT_PIN27_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN27_Pos;
pub const GPIO_OUT_PIN27_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN27_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN26_Pos = @as(c_ulong, 26);
pub const GPIO_OUT_PIN26_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN26_Pos;
pub const GPIO_OUT_PIN26_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN26_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN25_Pos = @as(c_ulong, 25);
pub const GPIO_OUT_PIN25_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN25_Pos;
pub const GPIO_OUT_PIN25_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN25_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN24_Pos = @as(c_ulong, 24);
pub const GPIO_OUT_PIN24_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN24_Pos;
pub const GPIO_OUT_PIN24_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN24_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN23_Pos = @as(c_ulong, 23);
pub const GPIO_OUT_PIN23_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN23_Pos;
pub const GPIO_OUT_PIN23_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN23_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN22_Pos = @as(c_ulong, 22);
pub const GPIO_OUT_PIN22_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN22_Pos;
pub const GPIO_OUT_PIN22_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN22_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN21_Pos = @as(c_ulong, 21);
pub const GPIO_OUT_PIN21_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN21_Pos;
pub const GPIO_OUT_PIN21_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN21_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN20_Pos = @as(c_ulong, 20);
pub const GPIO_OUT_PIN20_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN20_Pos;
pub const GPIO_OUT_PIN20_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN20_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN19_Pos = @as(c_ulong, 19);
pub const GPIO_OUT_PIN19_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN19_Pos;
pub const GPIO_OUT_PIN19_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN19_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN18_Pos = @as(c_ulong, 18);
pub const GPIO_OUT_PIN18_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN18_Pos;
pub const GPIO_OUT_PIN18_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN18_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN17_Pos = @as(c_ulong, 17);
pub const GPIO_OUT_PIN17_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN17_Pos;
pub const GPIO_OUT_PIN17_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN17_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN16_Pos = @as(c_ulong, 16);
pub const GPIO_OUT_PIN16_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN16_Pos;
pub const GPIO_OUT_PIN16_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN16_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN15_Pos = @as(c_ulong, 15);
pub const GPIO_OUT_PIN15_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN15_Pos;
pub const GPIO_OUT_PIN15_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN15_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN14_Pos = @as(c_ulong, 14);
pub const GPIO_OUT_PIN14_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN14_Pos;
pub const GPIO_OUT_PIN14_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN14_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN13_Pos = @as(c_ulong, 13);
pub const GPIO_OUT_PIN13_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN13_Pos;
pub const GPIO_OUT_PIN13_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN13_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN12_Pos = @as(c_ulong, 12);
pub const GPIO_OUT_PIN12_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN12_Pos;
pub const GPIO_OUT_PIN12_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN12_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN11_Pos = @as(c_ulong, 11);
pub const GPIO_OUT_PIN11_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN11_Pos;
pub const GPIO_OUT_PIN11_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN11_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN10_Pos = @as(c_ulong, 10);
pub const GPIO_OUT_PIN10_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN10_Pos;
pub const GPIO_OUT_PIN10_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN10_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN9_Pos = @as(c_ulong, 9);
pub const GPIO_OUT_PIN9_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN9_Pos;
pub const GPIO_OUT_PIN9_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN9_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN8_Pos = @as(c_ulong, 8);
pub const GPIO_OUT_PIN8_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN8_Pos;
pub const GPIO_OUT_PIN8_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN8_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN7_Pos = @as(c_ulong, 7);
pub const GPIO_OUT_PIN7_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN7_Pos;
pub const GPIO_OUT_PIN7_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN7_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN6_Pos = @as(c_ulong, 6);
pub const GPIO_OUT_PIN6_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN6_Pos;
pub const GPIO_OUT_PIN6_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN6_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN5_Pos = @as(c_ulong, 5);
pub const GPIO_OUT_PIN5_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN5_Pos;
pub const GPIO_OUT_PIN5_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN5_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN4_Pos = @as(c_ulong, 4);
pub const GPIO_OUT_PIN4_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN4_Pos;
pub const GPIO_OUT_PIN4_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN4_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN3_Pos = @as(c_ulong, 3);
pub const GPIO_OUT_PIN3_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN3_Pos;
pub const GPIO_OUT_PIN3_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN3_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN2_Pos = @as(c_ulong, 2);
pub const GPIO_OUT_PIN2_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN2_Pos;
pub const GPIO_OUT_PIN2_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN2_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN1_Pos = @as(c_ulong, 1);
pub const GPIO_OUT_PIN1_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN1_Pos;
pub const GPIO_OUT_PIN1_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN1_High = @as(c_ulong, 1);
pub const GPIO_OUT_PIN0_Pos = @as(c_ulong, 0);
pub const GPIO_OUT_PIN0_Msk = @as(c_ulong, 0x1) << GPIO_OUT_PIN0_Pos;
pub const GPIO_OUT_PIN0_Low = @as(c_ulong, 0);
pub const GPIO_OUT_PIN0_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN31_Pos = @as(c_ulong, 31);
pub const GPIO_OUTSET_PIN31_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN31_Pos;
pub const GPIO_OUTSET_PIN31_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN31_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN31_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN30_Pos = @as(c_ulong, 30);
pub const GPIO_OUTSET_PIN30_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN30_Pos;
pub const GPIO_OUTSET_PIN30_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN30_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN30_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN29_Pos = @as(c_ulong, 29);
pub const GPIO_OUTSET_PIN29_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN29_Pos;
pub const GPIO_OUTSET_PIN29_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN29_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN29_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN28_Pos = @as(c_ulong, 28);
pub const GPIO_OUTSET_PIN28_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN28_Pos;
pub const GPIO_OUTSET_PIN28_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN28_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN28_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN27_Pos = @as(c_ulong, 27);
pub const GPIO_OUTSET_PIN27_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN27_Pos;
pub const GPIO_OUTSET_PIN27_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN27_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN27_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN26_Pos = @as(c_ulong, 26);
pub const GPIO_OUTSET_PIN26_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN26_Pos;
pub const GPIO_OUTSET_PIN26_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN26_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN26_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN25_Pos = @as(c_ulong, 25);
pub const GPIO_OUTSET_PIN25_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN25_Pos;
pub const GPIO_OUTSET_PIN25_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN25_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN25_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN24_Pos = @as(c_ulong, 24);
pub const GPIO_OUTSET_PIN24_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN24_Pos;
pub const GPIO_OUTSET_PIN24_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN24_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN24_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN23_Pos = @as(c_ulong, 23);
pub const GPIO_OUTSET_PIN23_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN23_Pos;
pub const GPIO_OUTSET_PIN23_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN23_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN23_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN22_Pos = @as(c_ulong, 22);
pub const GPIO_OUTSET_PIN22_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN22_Pos;
pub const GPIO_OUTSET_PIN22_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN22_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN22_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN21_Pos = @as(c_ulong, 21);
pub const GPIO_OUTSET_PIN21_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN21_Pos;
pub const GPIO_OUTSET_PIN21_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN21_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN21_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN20_Pos = @as(c_ulong, 20);
pub const GPIO_OUTSET_PIN20_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN20_Pos;
pub const GPIO_OUTSET_PIN20_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN20_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN20_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN19_Pos = @as(c_ulong, 19);
pub const GPIO_OUTSET_PIN19_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN19_Pos;
pub const GPIO_OUTSET_PIN19_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN19_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN19_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN18_Pos = @as(c_ulong, 18);
pub const GPIO_OUTSET_PIN18_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN18_Pos;
pub const GPIO_OUTSET_PIN18_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN18_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN18_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN17_Pos = @as(c_ulong, 17);
pub const GPIO_OUTSET_PIN17_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN17_Pos;
pub const GPIO_OUTSET_PIN17_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN17_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN17_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN16_Pos = @as(c_ulong, 16);
pub const GPIO_OUTSET_PIN16_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN16_Pos;
pub const GPIO_OUTSET_PIN16_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN16_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN16_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN15_Pos = @as(c_ulong, 15);
pub const GPIO_OUTSET_PIN15_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN15_Pos;
pub const GPIO_OUTSET_PIN15_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN15_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN15_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN14_Pos = @as(c_ulong, 14);
pub const GPIO_OUTSET_PIN14_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN14_Pos;
pub const GPIO_OUTSET_PIN14_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN14_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN14_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN13_Pos = @as(c_ulong, 13);
pub const GPIO_OUTSET_PIN13_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN13_Pos;
pub const GPIO_OUTSET_PIN13_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN13_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN13_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN12_Pos = @as(c_ulong, 12);
pub const GPIO_OUTSET_PIN12_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN12_Pos;
pub const GPIO_OUTSET_PIN12_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN12_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN12_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN11_Pos = @as(c_ulong, 11);
pub const GPIO_OUTSET_PIN11_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN11_Pos;
pub const GPIO_OUTSET_PIN11_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN11_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN11_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN10_Pos = @as(c_ulong, 10);
pub const GPIO_OUTSET_PIN10_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN10_Pos;
pub const GPIO_OUTSET_PIN10_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN10_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN10_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN9_Pos = @as(c_ulong, 9);
pub const GPIO_OUTSET_PIN9_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN9_Pos;
pub const GPIO_OUTSET_PIN9_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN9_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN9_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN8_Pos = @as(c_ulong, 8);
pub const GPIO_OUTSET_PIN8_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN8_Pos;
pub const GPIO_OUTSET_PIN8_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN8_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN8_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN7_Pos = @as(c_ulong, 7);
pub const GPIO_OUTSET_PIN7_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN7_Pos;
pub const GPIO_OUTSET_PIN7_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN7_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN7_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN6_Pos = @as(c_ulong, 6);
pub const GPIO_OUTSET_PIN6_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN6_Pos;
pub const GPIO_OUTSET_PIN6_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN6_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN6_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN5_Pos = @as(c_ulong, 5);
pub const GPIO_OUTSET_PIN5_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN5_Pos;
pub const GPIO_OUTSET_PIN5_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN5_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN5_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN4_Pos = @as(c_ulong, 4);
pub const GPIO_OUTSET_PIN4_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN4_Pos;
pub const GPIO_OUTSET_PIN4_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN4_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN4_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN3_Pos = @as(c_ulong, 3);
pub const GPIO_OUTSET_PIN3_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN3_Pos;
pub const GPIO_OUTSET_PIN3_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN3_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN3_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN2_Pos = @as(c_ulong, 2);
pub const GPIO_OUTSET_PIN2_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN2_Pos;
pub const GPIO_OUTSET_PIN2_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN2_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN2_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN1_Pos = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN1_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN1_Pos;
pub const GPIO_OUTSET_PIN1_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN1_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN1_Set = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN0_Pos = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN0_Msk = @as(c_ulong, 0x1) << GPIO_OUTSET_PIN0_Pos;
pub const GPIO_OUTSET_PIN0_Low = @as(c_ulong, 0);
pub const GPIO_OUTSET_PIN0_High = @as(c_ulong, 1);
pub const GPIO_OUTSET_PIN0_Set = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN31_Pos = @as(c_ulong, 31);
pub const GPIO_OUTCLR_PIN31_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN31_Pos;
pub const GPIO_OUTCLR_PIN31_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN31_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN31_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN30_Pos = @as(c_ulong, 30);
pub const GPIO_OUTCLR_PIN30_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN30_Pos;
pub const GPIO_OUTCLR_PIN30_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN30_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN30_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN29_Pos = @as(c_ulong, 29);
pub const GPIO_OUTCLR_PIN29_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN29_Pos;
pub const GPIO_OUTCLR_PIN29_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN29_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN29_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN28_Pos = @as(c_ulong, 28);
pub const GPIO_OUTCLR_PIN28_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN28_Pos;
pub const GPIO_OUTCLR_PIN28_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN28_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN28_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN27_Pos = @as(c_ulong, 27);
pub const GPIO_OUTCLR_PIN27_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN27_Pos;
pub const GPIO_OUTCLR_PIN27_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN27_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN27_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN26_Pos = @as(c_ulong, 26);
pub const GPIO_OUTCLR_PIN26_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN26_Pos;
pub const GPIO_OUTCLR_PIN26_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN26_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN26_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN25_Pos = @as(c_ulong, 25);
pub const GPIO_OUTCLR_PIN25_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN25_Pos;
pub const GPIO_OUTCLR_PIN25_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN25_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN25_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN24_Pos = @as(c_ulong, 24);
pub const GPIO_OUTCLR_PIN24_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN24_Pos;
pub const GPIO_OUTCLR_PIN24_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN24_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN24_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN23_Pos = @as(c_ulong, 23);
pub const GPIO_OUTCLR_PIN23_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN23_Pos;
pub const GPIO_OUTCLR_PIN23_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN23_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN23_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN22_Pos = @as(c_ulong, 22);
pub const GPIO_OUTCLR_PIN22_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN22_Pos;
pub const GPIO_OUTCLR_PIN22_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN22_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN22_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN21_Pos = @as(c_ulong, 21);
pub const GPIO_OUTCLR_PIN21_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN21_Pos;
pub const GPIO_OUTCLR_PIN21_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN21_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN21_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN20_Pos = @as(c_ulong, 20);
pub const GPIO_OUTCLR_PIN20_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN20_Pos;
pub const GPIO_OUTCLR_PIN20_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN20_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN20_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN19_Pos = @as(c_ulong, 19);
pub const GPIO_OUTCLR_PIN19_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN19_Pos;
pub const GPIO_OUTCLR_PIN19_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN19_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN19_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN18_Pos = @as(c_ulong, 18);
pub const GPIO_OUTCLR_PIN18_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN18_Pos;
pub const GPIO_OUTCLR_PIN18_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN18_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN18_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN17_Pos = @as(c_ulong, 17);
pub const GPIO_OUTCLR_PIN17_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN17_Pos;
pub const GPIO_OUTCLR_PIN17_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN17_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN17_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN16_Pos = @as(c_ulong, 16);
pub const GPIO_OUTCLR_PIN16_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN16_Pos;
pub const GPIO_OUTCLR_PIN16_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN16_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN16_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN15_Pos = @as(c_ulong, 15);
pub const GPIO_OUTCLR_PIN15_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN15_Pos;
pub const GPIO_OUTCLR_PIN15_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN15_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN15_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN14_Pos = @as(c_ulong, 14);
pub const GPIO_OUTCLR_PIN14_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN14_Pos;
pub const GPIO_OUTCLR_PIN14_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN14_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN14_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN13_Pos = @as(c_ulong, 13);
pub const GPIO_OUTCLR_PIN13_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN13_Pos;
pub const GPIO_OUTCLR_PIN13_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN13_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN13_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN12_Pos = @as(c_ulong, 12);
pub const GPIO_OUTCLR_PIN12_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN12_Pos;
pub const GPIO_OUTCLR_PIN12_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN12_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN12_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN11_Pos = @as(c_ulong, 11);
pub const GPIO_OUTCLR_PIN11_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN11_Pos;
pub const GPIO_OUTCLR_PIN11_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN11_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN11_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN10_Pos = @as(c_ulong, 10);
pub const GPIO_OUTCLR_PIN10_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN10_Pos;
pub const GPIO_OUTCLR_PIN10_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN10_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN10_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN9_Pos = @as(c_ulong, 9);
pub const GPIO_OUTCLR_PIN9_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN9_Pos;
pub const GPIO_OUTCLR_PIN9_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN9_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN9_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN8_Pos = @as(c_ulong, 8);
pub const GPIO_OUTCLR_PIN8_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN8_Pos;
pub const GPIO_OUTCLR_PIN8_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN8_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN8_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN7_Pos = @as(c_ulong, 7);
pub const GPIO_OUTCLR_PIN7_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN7_Pos;
pub const GPIO_OUTCLR_PIN7_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN7_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN7_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN6_Pos = @as(c_ulong, 6);
pub const GPIO_OUTCLR_PIN6_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN6_Pos;
pub const GPIO_OUTCLR_PIN6_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN6_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN6_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN5_Pos = @as(c_ulong, 5);
pub const GPIO_OUTCLR_PIN5_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN5_Pos;
pub const GPIO_OUTCLR_PIN5_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN5_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN5_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN4_Pos = @as(c_ulong, 4);
pub const GPIO_OUTCLR_PIN4_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN4_Pos;
pub const GPIO_OUTCLR_PIN4_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN4_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN4_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN3_Pos = @as(c_ulong, 3);
pub const GPIO_OUTCLR_PIN3_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN3_Pos;
pub const GPIO_OUTCLR_PIN3_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN3_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN3_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN2_Pos = @as(c_ulong, 2);
pub const GPIO_OUTCLR_PIN2_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN2_Pos;
pub const GPIO_OUTCLR_PIN2_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN2_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN2_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN1_Pos = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN1_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN1_Pos;
pub const GPIO_OUTCLR_PIN1_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN1_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN1_Clear = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN0_Pos = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN0_Msk = @as(c_ulong, 0x1) << GPIO_OUTCLR_PIN0_Pos;
pub const GPIO_OUTCLR_PIN0_Low = @as(c_ulong, 0);
pub const GPIO_OUTCLR_PIN0_High = @as(c_ulong, 1);
pub const GPIO_OUTCLR_PIN0_Clear = @as(c_ulong, 1);
pub const GPIO_IN_PIN31_Pos = @as(c_ulong, 31);
pub const GPIO_IN_PIN31_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN31_Pos;
pub const GPIO_IN_PIN31_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN31_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN30_Pos = @as(c_ulong, 30);
pub const GPIO_IN_PIN30_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN30_Pos;
pub const GPIO_IN_PIN30_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN30_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN29_Pos = @as(c_ulong, 29);
pub const GPIO_IN_PIN29_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN29_Pos;
pub const GPIO_IN_PIN29_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN29_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN28_Pos = @as(c_ulong, 28);
pub const GPIO_IN_PIN28_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN28_Pos;
pub const GPIO_IN_PIN28_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN28_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN27_Pos = @as(c_ulong, 27);
pub const GPIO_IN_PIN27_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN27_Pos;
pub const GPIO_IN_PIN27_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN27_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN26_Pos = @as(c_ulong, 26);
pub const GPIO_IN_PIN26_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN26_Pos;
pub const GPIO_IN_PIN26_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN26_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN25_Pos = @as(c_ulong, 25);
pub const GPIO_IN_PIN25_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN25_Pos;
pub const GPIO_IN_PIN25_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN25_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN24_Pos = @as(c_ulong, 24);
pub const GPIO_IN_PIN24_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN24_Pos;
pub const GPIO_IN_PIN24_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN24_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN23_Pos = @as(c_ulong, 23);
pub const GPIO_IN_PIN23_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN23_Pos;
pub const GPIO_IN_PIN23_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN23_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN22_Pos = @as(c_ulong, 22);
pub const GPIO_IN_PIN22_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN22_Pos;
pub const GPIO_IN_PIN22_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN22_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN21_Pos = @as(c_ulong, 21);
pub const GPIO_IN_PIN21_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN21_Pos;
pub const GPIO_IN_PIN21_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN21_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN20_Pos = @as(c_ulong, 20);
pub const GPIO_IN_PIN20_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN20_Pos;
pub const GPIO_IN_PIN20_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN20_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN19_Pos = @as(c_ulong, 19);
pub const GPIO_IN_PIN19_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN19_Pos;
pub const GPIO_IN_PIN19_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN19_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN18_Pos = @as(c_ulong, 18);
pub const GPIO_IN_PIN18_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN18_Pos;
pub const GPIO_IN_PIN18_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN18_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN17_Pos = @as(c_ulong, 17);
pub const GPIO_IN_PIN17_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN17_Pos;
pub const GPIO_IN_PIN17_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN17_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN16_Pos = @as(c_ulong, 16);
pub const GPIO_IN_PIN16_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN16_Pos;
pub const GPIO_IN_PIN16_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN16_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN15_Pos = @as(c_ulong, 15);
pub const GPIO_IN_PIN15_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN15_Pos;
pub const GPIO_IN_PIN15_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN15_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN14_Pos = @as(c_ulong, 14);
pub const GPIO_IN_PIN14_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN14_Pos;
pub const GPIO_IN_PIN14_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN14_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN13_Pos = @as(c_ulong, 13);
pub const GPIO_IN_PIN13_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN13_Pos;
pub const GPIO_IN_PIN13_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN13_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN12_Pos = @as(c_ulong, 12);
pub const GPIO_IN_PIN12_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN12_Pos;
pub const GPIO_IN_PIN12_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN12_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN11_Pos = @as(c_ulong, 11);
pub const GPIO_IN_PIN11_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN11_Pos;
pub const GPIO_IN_PIN11_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN11_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN10_Pos = @as(c_ulong, 10);
pub const GPIO_IN_PIN10_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN10_Pos;
pub const GPIO_IN_PIN10_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN10_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN9_Pos = @as(c_ulong, 9);
pub const GPIO_IN_PIN9_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN9_Pos;
pub const GPIO_IN_PIN9_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN9_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN8_Pos = @as(c_ulong, 8);
pub const GPIO_IN_PIN8_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN8_Pos;
pub const GPIO_IN_PIN8_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN8_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN7_Pos = @as(c_ulong, 7);
pub const GPIO_IN_PIN7_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN7_Pos;
pub const GPIO_IN_PIN7_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN7_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN6_Pos = @as(c_ulong, 6);
pub const GPIO_IN_PIN6_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN6_Pos;
pub const GPIO_IN_PIN6_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN6_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN5_Pos = @as(c_ulong, 5);
pub const GPIO_IN_PIN5_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN5_Pos;
pub const GPIO_IN_PIN5_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN5_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN4_Pos = @as(c_ulong, 4);
pub const GPIO_IN_PIN4_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN4_Pos;
pub const GPIO_IN_PIN4_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN4_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN3_Pos = @as(c_ulong, 3);
pub const GPIO_IN_PIN3_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN3_Pos;
pub const GPIO_IN_PIN3_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN3_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN2_Pos = @as(c_ulong, 2);
pub const GPIO_IN_PIN2_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN2_Pos;
pub const GPIO_IN_PIN2_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN2_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN1_Pos = @as(c_ulong, 1);
pub const GPIO_IN_PIN1_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN1_Pos;
pub const GPIO_IN_PIN1_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN1_High = @as(c_ulong, 1);
pub const GPIO_IN_PIN0_Pos = @as(c_ulong, 0);
pub const GPIO_IN_PIN0_Msk = @as(c_ulong, 0x1) << GPIO_IN_PIN0_Pos;
pub const GPIO_IN_PIN0_Low = @as(c_ulong, 0);
pub const GPIO_IN_PIN0_High = @as(c_ulong, 1);
pub const GPIO_DIR_PIN31_Pos = @as(c_ulong, 31);
pub const GPIO_DIR_PIN31_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN31_Pos;
pub const GPIO_DIR_PIN31_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN31_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN30_Pos = @as(c_ulong, 30);
pub const GPIO_DIR_PIN30_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN30_Pos;
pub const GPIO_DIR_PIN30_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN30_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN29_Pos = @as(c_ulong, 29);
pub const GPIO_DIR_PIN29_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN29_Pos;
pub const GPIO_DIR_PIN29_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN29_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN28_Pos = @as(c_ulong, 28);
pub const GPIO_DIR_PIN28_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN28_Pos;
pub const GPIO_DIR_PIN28_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN28_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN27_Pos = @as(c_ulong, 27);
pub const GPIO_DIR_PIN27_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN27_Pos;
pub const GPIO_DIR_PIN27_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN27_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN26_Pos = @as(c_ulong, 26);
pub const GPIO_DIR_PIN26_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN26_Pos;
pub const GPIO_DIR_PIN26_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN26_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN25_Pos = @as(c_ulong, 25);
pub const GPIO_DIR_PIN25_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN25_Pos;
pub const GPIO_DIR_PIN25_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN25_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN24_Pos = @as(c_ulong, 24);
pub const GPIO_DIR_PIN24_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN24_Pos;
pub const GPIO_DIR_PIN24_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN24_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN23_Pos = @as(c_ulong, 23);
pub const GPIO_DIR_PIN23_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN23_Pos;
pub const GPIO_DIR_PIN23_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN23_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN22_Pos = @as(c_ulong, 22);
pub const GPIO_DIR_PIN22_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN22_Pos;
pub const GPIO_DIR_PIN22_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN22_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN21_Pos = @as(c_ulong, 21);
pub const GPIO_DIR_PIN21_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN21_Pos;
pub const GPIO_DIR_PIN21_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN21_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN20_Pos = @as(c_ulong, 20);
pub const GPIO_DIR_PIN20_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN20_Pos;
pub const GPIO_DIR_PIN20_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN20_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN19_Pos = @as(c_ulong, 19);
pub const GPIO_DIR_PIN19_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN19_Pos;
pub const GPIO_DIR_PIN19_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN19_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN18_Pos = @as(c_ulong, 18);
pub const GPIO_DIR_PIN18_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN18_Pos;
pub const GPIO_DIR_PIN18_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN18_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN17_Pos = @as(c_ulong, 17);
pub const GPIO_DIR_PIN17_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN17_Pos;
pub const GPIO_DIR_PIN17_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN17_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN16_Pos = @as(c_ulong, 16);
pub const GPIO_DIR_PIN16_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN16_Pos;
pub const GPIO_DIR_PIN16_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN16_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN15_Pos = @as(c_ulong, 15);
pub const GPIO_DIR_PIN15_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN15_Pos;
pub const GPIO_DIR_PIN15_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN15_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN14_Pos = @as(c_ulong, 14);
pub const GPIO_DIR_PIN14_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN14_Pos;
pub const GPIO_DIR_PIN14_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN14_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN13_Pos = @as(c_ulong, 13);
pub const GPIO_DIR_PIN13_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN13_Pos;
pub const GPIO_DIR_PIN13_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN13_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN12_Pos = @as(c_ulong, 12);
pub const GPIO_DIR_PIN12_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN12_Pos;
pub const GPIO_DIR_PIN12_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN12_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN11_Pos = @as(c_ulong, 11);
pub const GPIO_DIR_PIN11_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN11_Pos;
pub const GPIO_DIR_PIN11_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN11_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN10_Pos = @as(c_ulong, 10);
pub const GPIO_DIR_PIN10_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN10_Pos;
pub const GPIO_DIR_PIN10_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN10_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN9_Pos = @as(c_ulong, 9);
pub const GPIO_DIR_PIN9_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN9_Pos;
pub const GPIO_DIR_PIN9_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN9_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN8_Pos = @as(c_ulong, 8);
pub const GPIO_DIR_PIN8_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN8_Pos;
pub const GPIO_DIR_PIN8_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN8_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN7_Pos = @as(c_ulong, 7);
pub const GPIO_DIR_PIN7_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN7_Pos;
pub const GPIO_DIR_PIN7_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN7_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN6_Pos = @as(c_ulong, 6);
pub const GPIO_DIR_PIN6_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN6_Pos;
pub const GPIO_DIR_PIN6_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN6_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN5_Pos = @as(c_ulong, 5);
pub const GPIO_DIR_PIN5_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN5_Pos;
pub const GPIO_DIR_PIN5_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN5_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN4_Pos = @as(c_ulong, 4);
pub const GPIO_DIR_PIN4_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN4_Pos;
pub const GPIO_DIR_PIN4_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN4_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN3_Pos = @as(c_ulong, 3);
pub const GPIO_DIR_PIN3_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN3_Pos;
pub const GPIO_DIR_PIN3_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN3_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN2_Pos = @as(c_ulong, 2);
pub const GPIO_DIR_PIN2_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN2_Pos;
pub const GPIO_DIR_PIN2_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN2_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN1_Pos = @as(c_ulong, 1);
pub const GPIO_DIR_PIN1_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN1_Pos;
pub const GPIO_DIR_PIN1_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN1_Output = @as(c_ulong, 1);
pub const GPIO_DIR_PIN0_Pos = @as(c_ulong, 0);
pub const GPIO_DIR_PIN0_Msk = @as(c_ulong, 0x1) << GPIO_DIR_PIN0_Pos;
pub const GPIO_DIR_PIN0_Input = @as(c_ulong, 0);
pub const GPIO_DIR_PIN0_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN31_Pos = @as(c_ulong, 31);
pub const GPIO_DIRSET_PIN31_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN31_Pos;
pub const GPIO_DIRSET_PIN31_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN31_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN31_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN30_Pos = @as(c_ulong, 30);
pub const GPIO_DIRSET_PIN30_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN30_Pos;
pub const GPIO_DIRSET_PIN30_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN30_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN30_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN29_Pos = @as(c_ulong, 29);
pub const GPIO_DIRSET_PIN29_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN29_Pos;
pub const GPIO_DIRSET_PIN29_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN29_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN29_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN28_Pos = @as(c_ulong, 28);
pub const GPIO_DIRSET_PIN28_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN28_Pos;
pub const GPIO_DIRSET_PIN28_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN28_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN28_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN27_Pos = @as(c_ulong, 27);
pub const GPIO_DIRSET_PIN27_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN27_Pos;
pub const GPIO_DIRSET_PIN27_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN27_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN27_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN26_Pos = @as(c_ulong, 26);
pub const GPIO_DIRSET_PIN26_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN26_Pos;
pub const GPIO_DIRSET_PIN26_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN26_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN26_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN25_Pos = @as(c_ulong, 25);
pub const GPIO_DIRSET_PIN25_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN25_Pos;
pub const GPIO_DIRSET_PIN25_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN25_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN25_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN24_Pos = @as(c_ulong, 24);
pub const GPIO_DIRSET_PIN24_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN24_Pos;
pub const GPIO_DIRSET_PIN24_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN24_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN24_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN23_Pos = @as(c_ulong, 23);
pub const GPIO_DIRSET_PIN23_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN23_Pos;
pub const GPIO_DIRSET_PIN23_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN23_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN23_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN22_Pos = @as(c_ulong, 22);
pub const GPIO_DIRSET_PIN22_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN22_Pos;
pub const GPIO_DIRSET_PIN22_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN22_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN22_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN21_Pos = @as(c_ulong, 21);
pub const GPIO_DIRSET_PIN21_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN21_Pos;
pub const GPIO_DIRSET_PIN21_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN21_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN21_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN20_Pos = @as(c_ulong, 20);
pub const GPIO_DIRSET_PIN20_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN20_Pos;
pub const GPIO_DIRSET_PIN20_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN20_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN20_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN19_Pos = @as(c_ulong, 19);
pub const GPIO_DIRSET_PIN19_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN19_Pos;
pub const GPIO_DIRSET_PIN19_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN19_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN19_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN18_Pos = @as(c_ulong, 18);
pub const GPIO_DIRSET_PIN18_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN18_Pos;
pub const GPIO_DIRSET_PIN18_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN18_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN18_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN17_Pos = @as(c_ulong, 17);
pub const GPIO_DIRSET_PIN17_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN17_Pos;
pub const GPIO_DIRSET_PIN17_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN17_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN17_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN16_Pos = @as(c_ulong, 16);
pub const GPIO_DIRSET_PIN16_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN16_Pos;
pub const GPIO_DIRSET_PIN16_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN16_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN16_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN15_Pos = @as(c_ulong, 15);
pub const GPIO_DIRSET_PIN15_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN15_Pos;
pub const GPIO_DIRSET_PIN15_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN15_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN15_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN14_Pos = @as(c_ulong, 14);
pub const GPIO_DIRSET_PIN14_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN14_Pos;
pub const GPIO_DIRSET_PIN14_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN14_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN14_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN13_Pos = @as(c_ulong, 13);
pub const GPIO_DIRSET_PIN13_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN13_Pos;
pub const GPIO_DIRSET_PIN13_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN13_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN13_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN12_Pos = @as(c_ulong, 12);
pub const GPIO_DIRSET_PIN12_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN12_Pos;
pub const GPIO_DIRSET_PIN12_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN12_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN12_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN11_Pos = @as(c_ulong, 11);
pub const GPIO_DIRSET_PIN11_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN11_Pos;
pub const GPIO_DIRSET_PIN11_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN11_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN11_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN10_Pos = @as(c_ulong, 10);
pub const GPIO_DIRSET_PIN10_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN10_Pos;
pub const GPIO_DIRSET_PIN10_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN10_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN10_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN9_Pos = @as(c_ulong, 9);
pub const GPIO_DIRSET_PIN9_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN9_Pos;
pub const GPIO_DIRSET_PIN9_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN9_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN9_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN8_Pos = @as(c_ulong, 8);
pub const GPIO_DIRSET_PIN8_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN8_Pos;
pub const GPIO_DIRSET_PIN8_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN8_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN8_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN7_Pos = @as(c_ulong, 7);
pub const GPIO_DIRSET_PIN7_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN7_Pos;
pub const GPIO_DIRSET_PIN7_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN7_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN7_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN6_Pos = @as(c_ulong, 6);
pub const GPIO_DIRSET_PIN6_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN6_Pos;
pub const GPIO_DIRSET_PIN6_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN6_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN6_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN5_Pos = @as(c_ulong, 5);
pub const GPIO_DIRSET_PIN5_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN5_Pos;
pub const GPIO_DIRSET_PIN5_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN5_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN5_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN4_Pos = @as(c_ulong, 4);
pub const GPIO_DIRSET_PIN4_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN4_Pos;
pub const GPIO_DIRSET_PIN4_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN4_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN4_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN3_Pos = @as(c_ulong, 3);
pub const GPIO_DIRSET_PIN3_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN3_Pos;
pub const GPIO_DIRSET_PIN3_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN3_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN3_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN2_Pos = @as(c_ulong, 2);
pub const GPIO_DIRSET_PIN2_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN2_Pos;
pub const GPIO_DIRSET_PIN2_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN2_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN2_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN1_Pos = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN1_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN1_Pos;
pub const GPIO_DIRSET_PIN1_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN1_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN1_Set = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN0_Pos = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN0_Msk = @as(c_ulong, 0x1) << GPIO_DIRSET_PIN0_Pos;
pub const GPIO_DIRSET_PIN0_Input = @as(c_ulong, 0);
pub const GPIO_DIRSET_PIN0_Output = @as(c_ulong, 1);
pub const GPIO_DIRSET_PIN0_Set = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN31_Pos = @as(c_ulong, 31);
pub const GPIO_DIRCLR_PIN31_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN31_Pos;
pub const GPIO_DIRCLR_PIN31_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN31_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN31_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN30_Pos = @as(c_ulong, 30);
pub const GPIO_DIRCLR_PIN30_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN30_Pos;
pub const GPIO_DIRCLR_PIN30_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN30_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN30_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN29_Pos = @as(c_ulong, 29);
pub const GPIO_DIRCLR_PIN29_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN29_Pos;
pub const GPIO_DIRCLR_PIN29_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN29_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN29_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN28_Pos = @as(c_ulong, 28);
pub const GPIO_DIRCLR_PIN28_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN28_Pos;
pub const GPIO_DIRCLR_PIN28_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN28_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN28_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN27_Pos = @as(c_ulong, 27);
pub const GPIO_DIRCLR_PIN27_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN27_Pos;
pub const GPIO_DIRCLR_PIN27_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN27_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN27_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN26_Pos = @as(c_ulong, 26);
pub const GPIO_DIRCLR_PIN26_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN26_Pos;
pub const GPIO_DIRCLR_PIN26_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN26_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN26_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN25_Pos = @as(c_ulong, 25);
pub const GPIO_DIRCLR_PIN25_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN25_Pos;
pub const GPIO_DIRCLR_PIN25_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN25_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN25_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN24_Pos = @as(c_ulong, 24);
pub const GPIO_DIRCLR_PIN24_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN24_Pos;
pub const GPIO_DIRCLR_PIN24_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN24_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN24_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN23_Pos = @as(c_ulong, 23);
pub const GPIO_DIRCLR_PIN23_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN23_Pos;
pub const GPIO_DIRCLR_PIN23_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN23_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN23_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN22_Pos = @as(c_ulong, 22);
pub const GPIO_DIRCLR_PIN22_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN22_Pos;
pub const GPIO_DIRCLR_PIN22_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN22_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN22_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN21_Pos = @as(c_ulong, 21);
pub const GPIO_DIRCLR_PIN21_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN21_Pos;
pub const GPIO_DIRCLR_PIN21_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN21_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN21_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN20_Pos = @as(c_ulong, 20);
pub const GPIO_DIRCLR_PIN20_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN20_Pos;
pub const GPIO_DIRCLR_PIN20_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN20_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN20_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN19_Pos = @as(c_ulong, 19);
pub const GPIO_DIRCLR_PIN19_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN19_Pos;
pub const GPIO_DIRCLR_PIN19_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN19_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN19_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN18_Pos = @as(c_ulong, 18);
pub const GPIO_DIRCLR_PIN18_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN18_Pos;
pub const GPIO_DIRCLR_PIN18_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN18_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN18_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN17_Pos = @as(c_ulong, 17);
pub const GPIO_DIRCLR_PIN17_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN17_Pos;
pub const GPIO_DIRCLR_PIN17_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN17_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN17_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN16_Pos = @as(c_ulong, 16);
pub const GPIO_DIRCLR_PIN16_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN16_Pos;
pub const GPIO_DIRCLR_PIN16_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN16_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN16_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN15_Pos = @as(c_ulong, 15);
pub const GPIO_DIRCLR_PIN15_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN15_Pos;
pub const GPIO_DIRCLR_PIN15_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN15_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN15_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN14_Pos = @as(c_ulong, 14);
pub const GPIO_DIRCLR_PIN14_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN14_Pos;
pub const GPIO_DIRCLR_PIN14_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN14_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN14_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN13_Pos = @as(c_ulong, 13);
pub const GPIO_DIRCLR_PIN13_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN13_Pos;
pub const GPIO_DIRCLR_PIN13_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN13_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN13_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN12_Pos = @as(c_ulong, 12);
pub const GPIO_DIRCLR_PIN12_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN12_Pos;
pub const GPIO_DIRCLR_PIN12_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN12_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN12_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN11_Pos = @as(c_ulong, 11);
pub const GPIO_DIRCLR_PIN11_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN11_Pos;
pub const GPIO_DIRCLR_PIN11_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN11_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN11_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN10_Pos = @as(c_ulong, 10);
pub const GPIO_DIRCLR_PIN10_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN10_Pos;
pub const GPIO_DIRCLR_PIN10_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN10_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN10_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN9_Pos = @as(c_ulong, 9);
pub const GPIO_DIRCLR_PIN9_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN9_Pos;
pub const GPIO_DIRCLR_PIN9_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN9_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN9_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN8_Pos = @as(c_ulong, 8);
pub const GPIO_DIRCLR_PIN8_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN8_Pos;
pub const GPIO_DIRCLR_PIN8_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN8_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN8_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN7_Pos = @as(c_ulong, 7);
pub const GPIO_DIRCLR_PIN7_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN7_Pos;
pub const GPIO_DIRCLR_PIN7_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN7_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN7_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN6_Pos = @as(c_ulong, 6);
pub const GPIO_DIRCLR_PIN6_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN6_Pos;
pub const GPIO_DIRCLR_PIN6_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN6_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN6_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN5_Pos = @as(c_ulong, 5);
pub const GPIO_DIRCLR_PIN5_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN5_Pos;
pub const GPIO_DIRCLR_PIN5_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN5_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN5_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN4_Pos = @as(c_ulong, 4);
pub const GPIO_DIRCLR_PIN4_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN4_Pos;
pub const GPIO_DIRCLR_PIN4_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN4_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN4_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN3_Pos = @as(c_ulong, 3);
pub const GPIO_DIRCLR_PIN3_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN3_Pos;
pub const GPIO_DIRCLR_PIN3_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN3_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN3_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN2_Pos = @as(c_ulong, 2);
pub const GPIO_DIRCLR_PIN2_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN2_Pos;
pub const GPIO_DIRCLR_PIN2_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN2_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN2_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN1_Pos = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN1_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN1_Pos;
pub const GPIO_DIRCLR_PIN1_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN1_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN1_Clear = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN0_Pos = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN0_Msk = @as(c_ulong, 0x1) << GPIO_DIRCLR_PIN0_Pos;
pub const GPIO_DIRCLR_PIN0_Input = @as(c_ulong, 0);
pub const GPIO_DIRCLR_PIN0_Output = @as(c_ulong, 1);
pub const GPIO_DIRCLR_PIN0_Clear = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN31_Pos = @as(c_ulong, 31);
pub const GPIO_LATCH_PIN31_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN31_Pos;
pub const GPIO_LATCH_PIN31_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN31_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN30_Pos = @as(c_ulong, 30);
pub const GPIO_LATCH_PIN30_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN30_Pos;
pub const GPIO_LATCH_PIN30_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN30_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN29_Pos = @as(c_ulong, 29);
pub const GPIO_LATCH_PIN29_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN29_Pos;
pub const GPIO_LATCH_PIN29_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN29_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN28_Pos = @as(c_ulong, 28);
pub const GPIO_LATCH_PIN28_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN28_Pos;
pub const GPIO_LATCH_PIN28_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN28_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN27_Pos = @as(c_ulong, 27);
pub const GPIO_LATCH_PIN27_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN27_Pos;
pub const GPIO_LATCH_PIN27_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN27_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN26_Pos = @as(c_ulong, 26);
pub const GPIO_LATCH_PIN26_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN26_Pos;
pub const GPIO_LATCH_PIN26_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN26_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN25_Pos = @as(c_ulong, 25);
pub const GPIO_LATCH_PIN25_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN25_Pos;
pub const GPIO_LATCH_PIN25_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN25_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN24_Pos = @as(c_ulong, 24);
pub const GPIO_LATCH_PIN24_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN24_Pos;
pub const GPIO_LATCH_PIN24_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN24_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN23_Pos = @as(c_ulong, 23);
pub const GPIO_LATCH_PIN23_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN23_Pos;
pub const GPIO_LATCH_PIN23_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN23_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN22_Pos = @as(c_ulong, 22);
pub const GPIO_LATCH_PIN22_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN22_Pos;
pub const GPIO_LATCH_PIN22_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN22_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN21_Pos = @as(c_ulong, 21);
pub const GPIO_LATCH_PIN21_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN21_Pos;
pub const GPIO_LATCH_PIN21_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN21_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN20_Pos = @as(c_ulong, 20);
pub const GPIO_LATCH_PIN20_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN20_Pos;
pub const GPIO_LATCH_PIN20_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN20_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN19_Pos = @as(c_ulong, 19);
pub const GPIO_LATCH_PIN19_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN19_Pos;
pub const GPIO_LATCH_PIN19_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN19_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN18_Pos = @as(c_ulong, 18);
pub const GPIO_LATCH_PIN18_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN18_Pos;
pub const GPIO_LATCH_PIN18_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN18_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN17_Pos = @as(c_ulong, 17);
pub const GPIO_LATCH_PIN17_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN17_Pos;
pub const GPIO_LATCH_PIN17_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN17_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN16_Pos = @as(c_ulong, 16);
pub const GPIO_LATCH_PIN16_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN16_Pos;
pub const GPIO_LATCH_PIN16_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN16_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN15_Pos = @as(c_ulong, 15);
pub const GPIO_LATCH_PIN15_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN15_Pos;
pub const GPIO_LATCH_PIN15_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN15_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN14_Pos = @as(c_ulong, 14);
pub const GPIO_LATCH_PIN14_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN14_Pos;
pub const GPIO_LATCH_PIN14_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN14_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN13_Pos = @as(c_ulong, 13);
pub const GPIO_LATCH_PIN13_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN13_Pos;
pub const GPIO_LATCH_PIN13_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN13_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN12_Pos = @as(c_ulong, 12);
pub const GPIO_LATCH_PIN12_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN12_Pos;
pub const GPIO_LATCH_PIN12_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN12_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN11_Pos = @as(c_ulong, 11);
pub const GPIO_LATCH_PIN11_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN11_Pos;
pub const GPIO_LATCH_PIN11_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN11_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN10_Pos = @as(c_ulong, 10);
pub const GPIO_LATCH_PIN10_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN10_Pos;
pub const GPIO_LATCH_PIN10_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN10_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN9_Pos = @as(c_ulong, 9);
pub const GPIO_LATCH_PIN9_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN9_Pos;
pub const GPIO_LATCH_PIN9_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN9_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN8_Pos = @as(c_ulong, 8);
pub const GPIO_LATCH_PIN8_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN8_Pos;
pub const GPIO_LATCH_PIN8_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN8_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN7_Pos = @as(c_ulong, 7);
pub const GPIO_LATCH_PIN7_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN7_Pos;
pub const GPIO_LATCH_PIN7_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN7_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN6_Pos = @as(c_ulong, 6);
pub const GPIO_LATCH_PIN6_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN6_Pos;
pub const GPIO_LATCH_PIN6_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN6_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN5_Pos = @as(c_ulong, 5);
pub const GPIO_LATCH_PIN5_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN5_Pos;
pub const GPIO_LATCH_PIN5_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN5_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN4_Pos = @as(c_ulong, 4);
pub const GPIO_LATCH_PIN4_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN4_Pos;
pub const GPIO_LATCH_PIN4_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN4_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN3_Pos = @as(c_ulong, 3);
pub const GPIO_LATCH_PIN3_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN3_Pos;
pub const GPIO_LATCH_PIN3_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN3_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN2_Pos = @as(c_ulong, 2);
pub const GPIO_LATCH_PIN2_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN2_Pos;
pub const GPIO_LATCH_PIN2_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN2_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN1_Pos = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN1_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN1_Pos;
pub const GPIO_LATCH_PIN1_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN1_Latched = @as(c_ulong, 1);
pub const GPIO_LATCH_PIN0_Pos = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN0_Msk = @as(c_ulong, 0x1) << GPIO_LATCH_PIN0_Pos;
pub const GPIO_LATCH_PIN0_NotLatched = @as(c_ulong, 0);
pub const GPIO_LATCH_PIN0_Latched = @as(c_ulong, 1);
pub const GPIO_DETECTMODE_DETECTMODE_Pos = @as(c_ulong, 0);
pub const GPIO_DETECTMODE_DETECTMODE_Msk = @as(c_ulong, 0x1) << GPIO_DETECTMODE_DETECTMODE_Pos;
pub const GPIO_DETECTMODE_DETECTMODE_Default = @as(c_ulong, 0);
pub const GPIO_DETECTMODE_DETECTMODE_LDETECT = @as(c_ulong, 1);
pub const GPIO_PIN_CNF_SENSE_Pos = @as(c_ulong, 16);
pub const GPIO_PIN_CNF_SENSE_Msk = @as(c_ulong, 0x3) << GPIO_PIN_CNF_SENSE_Pos;
pub const GPIO_PIN_CNF_SENSE_Disabled = @as(c_ulong, 0);
pub const GPIO_PIN_CNF_SENSE_High = @as(c_ulong, 2);
pub const GPIO_PIN_CNF_SENSE_Low = @as(c_ulong, 3);
pub const GPIO_PIN_CNF_DRIVE_Pos = @as(c_ulong, 8);
pub const GPIO_PIN_CNF_DRIVE_Msk = @as(c_ulong, 0x7) << GPIO_PIN_CNF_DRIVE_Pos;
pub const GPIO_PIN_CNF_DRIVE_S0S1 = @as(c_ulong, 0);
pub const GPIO_PIN_CNF_DRIVE_H0S1 = @as(c_ulong, 1);
pub const GPIO_PIN_CNF_DRIVE_S0H1 = @as(c_ulong, 2);
pub const GPIO_PIN_CNF_DRIVE_H0H1 = @as(c_ulong, 3);
pub const GPIO_PIN_CNF_DRIVE_D0S1 = @as(c_ulong, 4);
pub const GPIO_PIN_CNF_DRIVE_D0H1 = @as(c_ulong, 5);
pub const GPIO_PIN_CNF_DRIVE_S0D1 = @as(c_ulong, 6);
pub const GPIO_PIN_CNF_DRIVE_H0D1 = @as(c_ulong, 7);
pub const GPIO_PIN_CNF_PULL_Pos = @as(c_ulong, 2);
pub const GPIO_PIN_CNF_PULL_Msk = @as(c_ulong, 0x3) << GPIO_PIN_CNF_PULL_Pos;
pub const GPIO_PIN_CNF_PULL_Disabled = @as(c_ulong, 0);
pub const GPIO_PIN_CNF_PULL_Pulldown = @as(c_ulong, 1);
pub const GPIO_PIN_CNF_PULL_Pullup = @as(c_ulong, 3);
pub const GPIO_PIN_CNF_INPUT_Pos = @as(c_ulong, 1);
pub const GPIO_PIN_CNF_INPUT_Msk = @as(c_ulong, 0x1) << GPIO_PIN_CNF_INPUT_Pos;
pub const GPIO_PIN_CNF_INPUT_Connect = @as(c_ulong, 0);
pub const GPIO_PIN_CNF_INPUT_Disconnect = @as(c_ulong, 1);
pub const GPIO_PIN_CNF_DIR_Pos = @as(c_ulong, 0);
pub const GPIO_PIN_CNF_DIR_Msk = @as(c_ulong, 0x1) << GPIO_PIN_CNF_DIR_Pos;
pub const GPIO_PIN_CNF_DIR_Input = @as(c_ulong, 0);
pub const GPIO_PIN_CNF_DIR_Output = @as(c_ulong, 1);
pub const PDM_TASKS_START_TASKS_START_Pos = @as(c_ulong, 0);
pub const PDM_TASKS_START_TASKS_START_Msk = @as(c_ulong, 0x1) << PDM_TASKS_START_TASKS_START_Pos;
pub const PDM_TASKS_START_TASKS_START_Trigger = @as(c_ulong, 1);
pub const PDM_TASKS_STOP_TASKS_STOP_Pos = @as(c_ulong, 0);
pub const PDM_TASKS_STOP_TASKS_STOP_Msk = @as(c_ulong, 0x1) << PDM_TASKS_STOP_TASKS_STOP_Pos;
pub const PDM_TASKS_STOP_TASKS_STOP_Trigger = @as(c_ulong, 1);
pub const PDM_EVENTS_STARTED_EVENTS_STARTED_Pos = @as(c_ulong, 0);
pub const PDM_EVENTS_STARTED_EVENTS_STARTED_Msk = @as(c_ulong, 0x1) << PDM_EVENTS_STARTED_EVENTS_STARTED_Pos;
pub const PDM_EVENTS_STARTED_EVENTS_STARTED_NotGenerated = @as(c_ulong, 0);
pub const PDM_EVENTS_STARTED_EVENTS_STARTED_Generated = @as(c_ulong, 1);
pub const PDM_EVENTS_STOPPED_EVENTS_STOPPED_Pos = @as(c_ulong, 0);
pub const PDM_EVENTS_STOPPED_EVENTS_STOPPED_Msk = @as(c_ulong, 0x1) << PDM_EVENTS_STOPPED_EVENTS_STOPPED_Pos;
pub const PDM_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated = @as(c_ulong, 0);
pub const PDM_EVENTS_STOPPED_EVENTS_STOPPED_Generated = @as(c_ulong, 1);
pub const PDM_EVENTS_END_EVENTS_END_Pos = @as(c_ulong, 0);
pub const PDM_EVENTS_END_EVENTS_END_Msk = @as(c_ulong, 0x1) << PDM_EVENTS_END_EVENTS_END_Pos;
pub const PDM_EVENTS_END_EVENTS_END_NotGenerated = @as(c_ulong, 0);
pub const PDM_EVENTS_END_EVENTS_END_Generated = @as(c_ulong, 1);
pub const PDM_INTEN_END_Pos = @as(c_ulong, 2);
pub const PDM_INTEN_END_Msk = @as(c_ulong, 0x1) << PDM_INTEN_END_Pos;
pub const PDM_INTEN_END_Disabled = @as(c_ulong, 0);
pub const PDM_INTEN_END_Enabled = @as(c_ulong, 1);
pub const PDM_INTEN_STOPPED_Pos = @as(c_ulong, 1);
pub const PDM_INTEN_STOPPED_Msk = @as(c_ulong, 0x1) << PDM_INTEN_STOPPED_Pos;
pub const PDM_INTEN_STOPPED_Disabled = @as(c_ulong, 0);
pub const PDM_INTEN_STOPPED_Enabled = @as(c_ulong, 1);
pub const PDM_INTEN_STARTED_Pos = @as(c_ulong, 0);
pub const PDM_INTEN_STARTED_Msk = @as(c_ulong, 0x1) << PDM_INTEN_STARTED_Pos;
pub const PDM_INTEN_STARTED_Disabled = @as(c_ulong, 0);
pub const PDM_INTEN_STARTED_Enabled = @as(c_ulong, 1);
pub const PDM_INTENSET_END_Pos = @as(c_ulong, 2);
pub const PDM_INTENSET_END_Msk = @as(c_ulong, 0x1) << PDM_INTENSET_END_Pos;
pub const PDM_INTENSET_END_Disabled = @as(c_ulong, 0);
pub const PDM_INTENSET_END_Enabled = @as(c_ulong, 1);
pub const PDM_INTENSET_END_Set = @as(c_ulong, 1);
pub const PDM_INTENSET_STOPPED_Pos = @as(c_ulong, 1);
pub const PDM_INTENSET_STOPPED_Msk = @as(c_ulong, 0x1) << PDM_INTENSET_STOPPED_Pos;
pub const PDM_INTENSET_STOPPED_Disabled = @as(c_ulong, 0);
pub const PDM_INTENSET_STOPPED_Enabled = @as(c_ulong, 1);
pub const PDM_INTENSET_STOPPED_Set = @as(c_ulong, 1);
pub const PDM_INTENSET_STARTED_Pos = @as(c_ulong, 0);
pub const PDM_INTENSET_STARTED_Msk = @as(c_ulong, 0x1) << PDM_INTENSET_STARTED_Pos;
pub const PDM_INTENSET_STARTED_Disabled = @as(c_ulong, 0);
pub const PDM_INTENSET_STARTED_Enabled = @as(c_ulong, 1);
pub const PDM_INTENSET_STARTED_Set = @as(c_ulong, 1);
pub const PDM_INTENCLR_END_Pos = @as(c_ulong, 2);
pub const PDM_INTENCLR_END_Msk = @as(c_ulong, 0x1) << PDM_INTENCLR_END_Pos;
pub const PDM_INTENCLR_END_Disabled = @as(c_ulong, 0);
pub const PDM_INTENCLR_END_Enabled = @as(c_ulong, 1);
pub const PDM_INTENCLR_END_Clear = @as(c_ulong, 1);
pub const PDM_INTENCLR_STOPPED_Pos = @as(c_ulong, 1);
pub const PDM_INTENCLR_STOPPED_Msk = @as(c_ulong, 0x1) << PDM_INTENCLR_STOPPED_Pos;
pub const PDM_INTENCLR_STOPPED_Disabled = @as(c_ulong, 0);
pub const PDM_INTENCLR_STOPPED_Enabled = @as(c_ulong, 1);
pub const PDM_INTENCLR_STOPPED_Clear = @as(c_ulong, 1);
pub const PDM_INTENCLR_STARTED_Pos = @as(c_ulong, 0);
pub const PDM_INTENCLR_STARTED_Msk = @as(c_ulong, 0x1) << PDM_INTENCLR_STARTED_Pos;
pub const PDM_INTENCLR_STARTED_Disabled = @as(c_ulong, 0);
pub const PDM_INTENCLR_STARTED_Enabled = @as(c_ulong, 1);
pub const PDM_INTENCLR_STARTED_Clear = @as(c_ulong, 1);
pub const PDM_ENABLE_ENABLE_Pos = @as(c_ulong, 0);
pub const PDM_ENABLE_ENABLE_Msk = @as(c_ulong, 0x1) << PDM_ENABLE_ENABLE_Pos;
pub const PDM_ENABLE_ENABLE_Disabled = @as(c_ulong, 0);
pub const PDM_ENABLE_ENABLE_Enabled = @as(c_ulong, 1);
pub const PDM_PDMCLKCTRL_FREQ_Pos = @as(c_ulong, 0);
pub const PDM_PDMCLKCTRL_FREQ_Msk = @as(c_ulong, 0xFFFFFFFF) << PDM_PDMCLKCTRL_FREQ_Pos;
pub const PDM_PDMCLKCTRL_FREQ_1000K = @as(c_ulong, 0x08000000);
pub const PDM_PDMCLKCTRL_FREQ_Default = @as(c_ulong, 0x08400000);
pub const PDM_PDMCLKCTRL_FREQ_1067K = @as(c_ulong, 0x08800000);
pub const PDM_PDMCLKCTRL_FREQ_1231K = @as(c_ulong, 0x09800000);
pub const PDM_PDMCLKCTRL_FREQ_1280K = @as(c_ulong, 0x0A000000);
pub const PDM_PDMCLKCTRL_FREQ_1333K = @as(c_ulong, 0x0A800000);
pub const PDM_MODE_EDGE_Pos = @as(c_ulong, 1);
pub const PDM_MODE_EDGE_Msk = @as(c_ulong, 0x1) << PDM_MODE_EDGE_Pos;
pub const PDM_MODE_EDGE_LeftFalling = @as(c_ulong, 0);
pub const PDM_MODE_EDGE_LeftRising = @as(c_ulong, 1);
pub const PDM_MODE_OPERATION_Pos = @as(c_ulong, 0);
pub const PDM_MODE_OPERATION_Msk = @as(c_ulong, 0x1) << PDM_MODE_OPERATION_Pos;
pub const PDM_MODE_OPERATION_Stereo = @as(c_ulong, 0);
pub const PDM_MODE_OPERATION_Mono = @as(c_ulong, 1);
pub const PDM_GAINL_GAINL_Pos = @as(c_ulong, 0);
pub const PDM_GAINL_GAINL_Msk = @as(c_ulong, 0x7F) << PDM_GAINL_GAINL_Pos;
pub const PDM_GAINL_GAINL_MinGain = @as(c_ulong, 0x00);
pub const PDM_GAINL_GAINL_DefaultGain = @as(c_ulong, 0x28);
pub const PDM_GAINL_GAINL_MaxGain = @as(c_ulong, 0x50);
pub const PDM_GAINR_GAINR_Pos = @as(c_ulong, 0);
pub const PDM_GAINR_GAINR_Msk = @as(c_ulong, 0x7F) << PDM_GAINR_GAINR_Pos;
pub const PDM_GAINR_GAINR_MinGain = @as(c_ulong, 0x00);
pub const PDM_GAINR_GAINR_DefaultGain = @as(c_ulong, 0x28);
pub const PDM_GAINR_GAINR_MaxGain = @as(c_ulong, 0x50);
pub const PDM_RATIO_RATIO_Pos = @as(c_ulong, 0);
pub const PDM_RATIO_RATIO_Msk = @as(c_ulong, 0x1) << PDM_RATIO_RATIO_Pos;
pub const PDM_RATIO_RATIO_Ratio64 = @as(c_ulong, 0);
pub const PDM_RATIO_RATIO_Ratio80 = @as(c_ulong, 1);
pub const PDM_PSEL_CLK_CONNECT_Pos = @as(c_ulong, 31);
pub const PDM_PSEL_CLK_CONNECT_Msk = @as(c_ulong, 0x1) << PDM_PSEL_CLK_CONNECT_Pos;
pub const PDM_PSEL_CLK_CONNECT_Connected = @as(c_ulong, 0);
pub const PDM_PSEL_CLK_CONNECT_Disconnected = @as(c_ulong, 1);
pub const PDM_PSEL_CLK_PORT_Pos = @as(c_ulong, 5);
pub const PDM_PSEL_CLK_PORT_Msk = @as(c_ulong, 0x1) << PDM_PSEL_CLK_PORT_Pos;
pub const PDM_PSEL_CLK_PIN_Pos = @as(c_ulong, 0);
pub const PDM_PSEL_CLK_PIN_Msk = @as(c_ulong, 0x1F) << PDM_PSEL_CLK_PIN_Pos;
pub const PDM_PSEL_DIN_CONNECT_Pos = @as(c_ulong, 31);
pub const PDM_PSEL_DIN_CONNECT_Msk = @as(c_ulong, 0x1) << PDM_PSEL_DIN_CONNECT_Pos;
pub const PDM_PSEL_DIN_CONNECT_Connected = @as(c_ulong, 0);
pub const PDM_PSEL_DIN_CONNECT_Disconnected = @as(c_ulong, 1);
pub const PDM_PSEL_DIN_PORT_Pos = @as(c_ulong, 5);
pub const PDM_PSEL_DIN_PORT_Msk = @as(c_ulong, 0x1) << PDM_PSEL_DIN_PORT_Pos;
pub const PDM_PSEL_DIN_PIN_Pos = @as(c_ulong, 0);
pub const PDM_PSEL_DIN_PIN_Msk = @as(c_ulong, 0x1F) << PDM_PSEL_DIN_PIN_Pos;
pub const PDM_SAMPLE_PTR_SAMPLEPTR_Pos = @as(c_ulong, 0);
pub const PDM_SAMPLE_PTR_SAMPLEPTR_Msk = @as(c_ulong, 0xFFFFFFFF) << PDM_SAMPLE_PTR_SAMPLEPTR_Pos;
pub const PDM_SAMPLE_MAXCNT_BUFFSIZE_Pos = @as(c_ulong, 0);
pub const PDM_SAMPLE_MAXCNT_BUFFSIZE_Msk = @as(c_ulong, 0x7FFF) << PDM_SAMPLE_MAXCNT_BUFFSIZE_Pos;
pub const POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Pos = @as(c_ulong, 0);
pub const POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Msk = @as(c_ulong, 0x1) << POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Pos;
pub const POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Trigger = @as(c_ulong, 1);
pub const POWER_TASKS_LOWPWR_TASKS_LOWPWR_Pos = @as(c_ulong, 0);
pub const POWER_TASKS_LOWPWR_TASKS_LOWPWR_Msk = @as(c_ulong, 0x1) << POWER_TASKS_LOWPWR_TASKS_LOWPWR_Pos;
pub const POWER_TASKS_LOWPWR_TASKS_LOWPWR_Trigger = @as(c_ulong, 1);
pub const POWER_EVENTS_POFWARN_EVENTS_POFWARN_Pos = @as(c_ulong, 0);
pub const POWER_EVENTS_POFWARN_EVENTS_POFWARN_Msk = @as(c_ulong, 0x1) << POWER_EVENTS_POFWARN_EVENTS_POFWARN_Pos;
pub const POWER_EVENTS_POFWARN_EVENTS_POFWARN_NotGenerated = @as(c_ulong, 0);
pub const POWER_EVENTS_POFWARN_EVENTS_POFWARN_Generated = @as(c_ulong, 1);
pub const POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos = @as(c_ulong, 0);
pub const POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Msk = @as(c_ulong, 0x1) << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos;
pub const POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated = @as(c_ulong, 0);
pub const POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Generated = @as(c_ulong, 1);
pub const POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos = @as(c_ulong, 0);
pub const POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Msk = @as(c_ulong, 0x1) << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos;
pub const POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated = @as(c_ulong, 0);
pub const POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Generated = @as(c_ulong, 1);
pub const POWER_EVENTS_USBDETECTED_EVENTS_USBDETECTED_Pos = @as(c_ulong, 0);
pub const POWER_EVENTS_USBDETECTED_EVENTS_USBDETECTED_Msk = @as(c_ulong, 0x1) << POWER_EVENTS_USBDETECTED_EVENTS_USBDETECTED_Pos;
pub const POWER_EVENTS_USBDETECTED_EVENTS_USBDETECTED_NotGenerated = @as(c_ulong, 0);
pub const POWER_EVENTS_USBDETECTED_EVENTS_USBDETECTED_Generated = @as(c_ulong, 1);
pub const POWER_EVENTS_USBREMOVED_EVENTS_USBREMOVED_Pos = @as(c_ulong, 0);
pub const POWER_EVENTS_USBREMOVED_EVENTS_USBREMOVED_Msk = @as(c_ulong, 0x1) << POWER_EVENTS_USBREMOVED_EVENTS_USBREMOVED_Pos;
pub const POWER_EVENTS_USBREMOVED_EVENTS_USBREMOVED_NotGenerated = @as(c_ulong, 0);
pub const POWER_EVENTS_USBREMOVED_EVENTS_USBREMOVED_Generated = @as(c_ulong, 1);
pub const POWER_EVENTS_USBPWRRDY_EVENTS_USBPWRRDY_Pos = @as(c_ulong, 0);
pub const POWER_EVENTS_USBPWRRDY_EVENTS_USBPWRRDY_Msk = @as(c_ulong, 0x1) << POWER_EVENTS_USBPWRRDY_EVENTS_USBPWRRDY_Pos;
pub const POWER_EVENTS_USBPWRRDY_EVENTS_USBPWRRDY_NotGenerated = @as(c_ulong, 0);
pub const POWER_EVENTS_USBPWRRDY_EVENTS_USBPWRRDY_Generated = @as(c_ulong, 1);
pub const POWER_INTENSET_USBPWRRDY_Pos = @as(c_ulong, 9);
pub const POWER_INTENSET_USBPWRRDY_Msk = @as(c_ulong, 0x1) << POWER_INTENSET_USBPWRRDY_Pos;
pub const POWER_INTENSET_USBPWRRDY_Disabled = @as(c_ulong, 0);
pub const POWER_INTENSET_USBPWRRDY_Enabled = @as(c_ulong, 1);
pub const POWER_INTENSET_USBPWRRDY_Set = @as(c_ulong, 1);
pub const POWER_INTENSET_USBREMOVED_Pos = @as(c_ulong, 8);
pub const POWER_INTENSET_USBREMOVED_Msk = @as(c_ulong, 0x1) << POWER_INTENSET_USBREMOVED_Pos;
pub const POWER_INTENSET_USBREMOVED_Disabled = @as(c_ulong, 0);
pub const POWER_INTENSET_USBREMOVED_Enabled = @as(c_ulong, 1);
pub const POWER_INTENSET_USBREMOVED_Set = @as(c_ulong, 1);
pub const POWER_INTENSET_USBDETECTED_Pos = @as(c_ulong, 7);
pub const POWER_INTENSET_USBDETECTED_Msk = @as(c_ulong, 0x1) << POWER_INTENSET_USBDETECTED_Pos;
pub const POWER_INTENSET_USBDETECTED_Disabled = @as(c_ulong, 0);
pub const POWER_INTENSET_USBDETECTED_Enabled = @as(c_ulong, 1);
pub const POWER_INTENSET_USBDETECTED_Set = @as(c_ulong, 1);
pub const POWER_INTENSET_SLEEPEXIT_Pos = @as(c_ulong, 6);
pub const POWER_INTENSET_SLEEPEXIT_Msk = @as(c_ulong, 0x1) << POWER_INTENSET_SLEEPEXIT_Pos;
pub const POWER_INTENSET_SLEEPEXIT_Disabled = @as(c_ulong, 0);
pub const POWER_INTENSET_SLEEPEXIT_Enabled = @as(c_ulong, 1);
pub const POWER_INTENSET_SLEEPEXIT_Set = @as(c_ulong, 1);
pub const POWER_INTENSET_SLEEPENTER_Pos = @as(c_ulong, 5);
pub const POWER_INTENSET_SLEEPENTER_Msk = @as(c_ulong, 0x1) << POWER_INTENSET_SLEEPENTER_Pos;
pub const POWER_INTENSET_SLEEPENTER_Disabled = @as(c_ulong, 0);
pub const POWER_INTENSET_SLEEPENTER_Enabled = @as(c_ulong, 1);
pub const POWER_INTENSET_SLEEPENTER_Set = @as(c_ulong, 1);
pub const POWER_INTENSET_POFWARN_Pos = @as(c_ulong, 2);
pub const POWER_INTENSET_POFWARN_Msk = @as(c_ulong, 0x1) << POWER_INTENSET_POFWARN_Pos;
pub const POWER_INTENSET_POFWARN_Disabled = @as(c_ulong, 0);
pub const POWER_INTENSET_POFWARN_Enabled = @as(c_ulong, 1);
pub const POWER_INTENSET_POFWARN_Set = @as(c_ulong, 1);
pub const POWER_INTENCLR_USBPWRRDY_Pos = @as(c_ulong, 9);
pub const POWER_INTENCLR_USBPWRRDY_Msk = @as(c_ulong, 0x1) << POWER_INTENCLR_USBPWRRDY_Pos;
pub const POWER_INTENCLR_USBPWRRDY_Disabled = @as(c_ulong, 0);
pub const POWER_INTENCLR_USBPWRRDY_Enabled = @as(c_ulong, 1);
pub const POWER_INTENCLR_USBPWRRDY_Clear = @as(c_ulong, 1);
pub const POWER_INTENCLR_USBREMOVED_Pos = @as(c_ulong, 8);
pub const POWER_INTENCLR_USBREMOVED_Msk = @as(c_ulong, 0x1) << POWER_INTENCLR_USBREMOVED_Pos;
pub const POWER_INTENCLR_USBREMOVED_Disabled = @as(c_ulong, 0);
pub const POWER_INTENCLR_USBREMOVED_Enabled = @as(c_ulong, 1);
pub const POWER_INTENCLR_USBREMOVED_Clear = @as(c_ulong, 1);
pub const POWER_INTENCLR_USBDETECTED_Pos = @as(c_ulong, 7);
pub const POWER_INTENCLR_USBDETECTED_Msk = @as(c_ulong, 0x1) << POWER_INTENCLR_USBDETECTED_Pos;
pub const POWER_INTENCLR_USBDETECTED_Disabled = @as(c_ulong, 0);
pub const POWER_INTENCLR_USBDETECTED_Enabled = @as(c_ulong, 1);
pub const POWER_INTENCLR_USBDETECTED_Clear = @as(c_ulong, 1);
pub const POWER_INTENCLR_SLEEPEXIT_Pos = @as(c_ulong, 6);
pub const POWER_INTENCLR_SLEEPEXIT_Msk = @as(c_ulong, 0x1) << POWER_INTENCLR_SLEEPEXIT_Pos;
pub const POWER_INTENCLR_SLEEPEXIT_Disabled = @as(c_ulong, 0);
pub const POWER_INTENCLR_SLEEPEXIT_Enabled = @as(c_ulong, 1);
pub const POWER_INTENCLR_SLEEPEXIT_Clear = @as(c_ulong, 1);
pub const POWER_INTENCLR_SLEEPENTER_Pos = @as(c_ulong, 5);
pub const POWER_INTENCLR_SLEEPENTER_Msk = @as(c_ulong, 0x1) << POWER_INTENCLR_SLEEPENTER_Pos;
pub const POWER_INTENCLR_SLEEPENTER_Disabled = @as(c_ulong, 0);
pub const POWER_INTENCLR_SLEEPENTER_Enabled = @as(c_ulong, 1);
pub const POWER_INTENCLR_SLEEPENTER_Clear = @as(c_ulong, 1);
pub const POWER_INTENCLR_POFWARN_Pos = @as(c_ulong, 2);
pub const POWER_INTENCLR_POFWARN_Msk = @as(c_ulong, 0x1) << POWER_INTENCLR_POFWARN_Pos;
pub const POWER_INTENCLR_POFWARN_Disabled = @as(c_ulong, 0);
pub const POWER_INTENCLR_POFWARN_Enabled = @as(c_ulong, 1);
pub const POWER_INTENCLR_POFWARN_Clear = @as(c_ulong, 1);
pub const POWER_RESETREAS_VBUS_Pos = @as(c_ulong, 20);
pub const POWER_RESETREAS_VBUS_Msk = @as(c_ulong, 0x1) << POWER_RESETREAS_VBUS_Pos;
pub const POWER_RESETREAS_VBUS_NotDetected = @as(c_ulong, 0);
pub const POWER_RESETREAS_VBUS_Detected = @as(c_ulong, 1);
pub const POWER_RESETREAS_NFC_Pos = @as(c_ulong, 19);
pub const POWER_RESETREAS_NFC_Msk = @as(c_ulong, 0x1) << POWER_RESETREAS_NFC_Pos;
pub const POWER_RESETREAS_NFC_NotDetected = @as(c_ulong, 0);
pub const POWER_RESETREAS_NFC_Detected = @as(c_ulong, 1);
pub const POWER_RESETREAS_DIF_Pos = @as(c_ulong, 18);
pub const POWER_RESETREAS_DIF_Msk = @as(c_ulong, 0x1) << POWER_RESETREAS_DIF_Pos;
pub const POWER_RESETREAS_DIF_NotDetected = @as(c_ulong, 0);
pub const POWER_RESETREAS_DIF_Detected = @as(c_ulong, 1);
pub const POWER_RESETREAS_LPCOMP_Pos = @as(c_ulong, 17);
pub const POWER_RESETREAS_LPCOMP_Msk = @as(c_ulong, 0x1) << POWER_RESETREAS_LPCOMP_Pos;
pub const POWER_RESETREAS_LPCOMP_NotDetected = @as(c_ulong, 0);
pub const POWER_RESETREAS_LPCOMP_Detected = @as(c_ulong, 1);
pub const POWER_RESETREAS_OFF_Pos = @as(c_ulong, 16);
pub const POWER_RESETREAS_OFF_Msk = @as(c_ulong, 0x1) << POWER_RESETREAS_OFF_Pos;
pub const POWER_RESETREAS_OFF_NotDetected = @as(c_ulong, 0);
pub const POWER_RESETREAS_OFF_Detected = @as(c_ulong, 1);
pub const POWER_RESETREAS_LOCKUP_Pos = @as(c_ulong, 3);
pub const POWER_RESETREAS_LOCKUP_Msk = @as(c_ulong, 0x1) << POWER_RESETREAS_LOCKUP_Pos;
pub const POWER_RESETREAS_LOCKUP_NotDetected = @as(c_ulong, 0);
pub const POWER_RESETREAS_LOCKUP_Detected = @as(c_ulong, 1);
pub const POWER_RESETREAS_SREQ_Pos = @as(c_ulong, 2);
pub const POWER_RESETREAS_SREQ_Msk = @as(c_ulong, 0x1) << POWER_RESETREAS_SREQ_Pos;
pub const POWER_RESETREAS_SREQ_NotDetected = @as(c_ulong, 0);
pub const POWER_RESETREAS_SREQ_Detected = @as(c_ulong, 1);
pub const POWER_RESETREAS_DOG_Pos = @as(c_ulong, 1);
pub const POWER_RESETREAS_DOG_Msk = @as(c_ulong, 0x1) << POWER_RESETREAS_DOG_Pos;
pub const POWER_RESETREAS_DOG_NotDetected = @as(c_ulong, 0);
pub const POWER_RESETREAS_DOG_Detected = @as(c_ulong, 1);
pub const POWER_RESETREAS_RESETPIN_Pos = @as(c_ulong, 0);
pub const POWER_RESETREAS_RESETPIN_Msk = @as(c_ulong, 0x1) << POWER_RESETREAS_RESETPIN_Pos;
pub const POWER_RESETREAS_RESETPIN_NotDetected = @as(c_ulong, 0);
pub const POWER_RESETREAS_RESETPIN_Detected = @as(c_ulong, 1);
pub const POWER_RAMSTATUS_RAMBLOCK3_Pos = @as(c_ulong, 3);
pub const POWER_RAMSTATUS_RAMBLOCK3_Msk = @as(c_ulong, 0x1) << POWER_RAMSTATUS_RAMBLOCK3_Pos;
pub const POWER_RAMSTATUS_RAMBLOCK3_Off = @as(c_ulong, 0);
pub const POWER_RAMSTATUS_RAMBLOCK3_On = @as(c_ulong, 1);
pub const POWER_RAMSTATUS_RAMBLOCK2_Pos = @as(c_ulong, 2);
pub const POWER_RAMSTATUS_RAMBLOCK2_Msk = @as(c_ulong, 0x1) << POWER_RAMSTATUS_RAMBLOCK2_Pos;
pub const POWER_RAMSTATUS_RAMBLOCK2_Off = @as(c_ulong, 0);
pub const POWER_RAMSTATUS_RAMBLOCK2_On = @as(c_ulong, 1);
pub const POWER_RAMSTATUS_RAMBLOCK1_Pos = @as(c_ulong, 1);
pub const POWER_RAMSTATUS_RAMBLOCK1_Msk = @as(c_ulong, 0x1) << POWER_RAMSTATUS_RAMBLOCK1_Pos;
pub const POWER_RAMSTATUS_RAMBLOCK1_Off = @as(c_ulong, 0);
pub const POWER_RAMSTATUS_RAMBLOCK1_On = @as(c_ulong, 1);
pub const POWER_RAMSTATUS_RAMBLOCK0_Pos = @as(c_ulong, 0);
pub const POWER_RAMSTATUS_RAMBLOCK0_Msk = @as(c_ulong, 0x1) << POWER_RAMSTATUS_RAMBLOCK0_Pos;
pub const POWER_RAMSTATUS_RAMBLOCK0_Off = @as(c_ulong, 0);
pub const POWER_RAMSTATUS_RAMBLOCK0_On = @as(c_ulong, 1);
pub const POWER_USBREGSTATUS_OUTPUTRDY_Pos = @as(c_ulong, 1);
pub const POWER_USBREGSTATUS_OUTPUTRDY_Msk = @as(c_ulong, 0x1) << POWER_USBREGSTATUS_OUTPUTRDY_Pos;
pub const POWER_USBREGSTATUS_OUTPUTRDY_NotReady = @as(c_ulong, 0);
pub const POWER_USBREGSTATUS_OUTPUTRDY_Ready = @as(c_ulong, 1);
pub const POWER_USBREGSTATUS_VBUSDETECT_Pos = @as(c_ulong, 0);
pub const POWER_USBREGSTATUS_VBUSDETECT_Msk = @as(c_ulong, 0x1) << POWER_USBREGSTATUS_VBUSDETECT_Pos;
pub const POWER_USBREGSTATUS_VBUSDETECT_NoVbus = @as(c_ulong, 0);
pub const POWER_USBREGSTATUS_VBUSDETECT_VbusPresent = @as(c_ulong, 1);
pub const POWER_SYSTEMOFF_SYSTEMOFF_Pos = @as(c_ulong, 0);
pub const POWER_SYSTEMOFF_SYSTEMOFF_Msk = @as(c_ulong, 0x1) << POWER_SYSTEMOFF_SYSTEMOFF_Pos;
pub const POWER_SYSTEMOFF_SYSTEMOFF_Enter = @as(c_ulong, 1);
pub const POWER_POFCON_THRESHOLDVDDH_Pos = @as(c_ulong, 8);
pub const POWER_POFCON_THRESHOLDVDDH_Msk = @as(c_ulong, 0xF) << POWER_POFCON_THRESHOLDVDDH_Pos;
pub const POWER_POFCON_THRESHOLDVDDH_V27 = @as(c_ulong, 0);
pub const POWER_POFCON_THRESHOLDVDDH_V28 = @as(c_ulong, 1);
pub const POWER_POFCON_THRESHOLDVDDH_V29 = @as(c_ulong, 2);
pub const POWER_POFCON_THRESHOLDVDDH_V30 = @as(c_ulong, 3);
pub const POWER_POFCON_THRESHOLDVDDH_V31 = @as(c_ulong, 4);
pub const POWER_POFCON_THRESHOLDVDDH_V32 = @as(c_ulong, 5);
pub const POWER_POFCON_THRESHOLDVDDH_V33 = @as(c_ulong, 6);
pub const POWER_POFCON_THRESHOLDVDDH_V34 = @as(c_ulong, 7);
pub const POWER_POFCON_THRESHOLDVDDH_V35 = @as(c_ulong, 8);
pub const POWER_POFCON_THRESHOLDVDDH_V36 = @as(c_ulong, 9);
pub const POWER_POFCON_THRESHOLDVDDH_V37 = @as(c_ulong, 10);
pub const POWER_POFCON_THRESHOLDVDDH_V38 = @as(c_ulong, 11);
pub const POWER_POFCON_THRESHOLDVDDH_V39 = @as(c_ulong, 12);
pub const POWER_POFCON_THRESHOLDVDDH_V40 = @as(c_ulong, 13);
pub const POWER_POFCON_THRESHOLDVDDH_V41 = @as(c_ulong, 14);
pub const POWER_POFCON_THRESHOLDVDDH_V42 = @as(c_ulong, 15);
pub const POWER_POFCON_THRESHOLD_Pos = @as(c_ulong, 1);
pub const POWER_POFCON_THRESHOLD_Msk = @as(c_ulong, 0xF) << POWER_POFCON_THRESHOLD_Pos;
pub const POWER_POFCON_THRESHOLD_V17 = @as(c_ulong, 4);
pub const POWER_POFCON_THRESHOLD_V18 = @as(c_ulong, 5);
pub const POWER_POFCON_THRESHOLD_V19 = @as(c_ulong, 6);
pub const POWER_POFCON_THRESHOLD_V20 = @as(c_ulong, 7);
pub const POWER_POFCON_THRESHOLD_V21 = @as(c_ulong, 8);
pub const POWER_POFCON_THRESHOLD_V22 = @as(c_ulong, 9);
pub const POWER_POFCON_THRESHOLD_V23 = @as(c_ulong, 10);
pub const POWER_POFCON_THRESHOLD_V24 = @as(c_ulong, 11);
pub const POWER_POFCON_THRESHOLD_V25 = @as(c_ulong, 12);
pub const POWER_POFCON_THRESHOLD_V26 = @as(c_ulong, 13);
pub const POWER_POFCON_THRESHOLD_V27 = @as(c_ulong, 14);
pub const POWER_POFCON_THRESHOLD_V28 = @as(c_ulong, 15);
pub const POWER_POFCON_POF_Pos = @as(c_ulong, 0);
pub const POWER_POFCON_POF_Msk = @as(c_ulong, 0x1) << POWER_POFCON_POF_Pos;
pub const POWER_POFCON_POF_Disabled = @as(c_ulong, 0);
pub const POWER_POFCON_POF_Enabled = @as(c_ulong, 1);
pub const POWER_GPREGRET_GPREGRET_Pos = @as(c_ulong, 0);
pub const POWER_GPREGRET_GPREGRET_Msk = @as(c_ulong, 0xFF) << POWER_GPREGRET_GPREGRET_Pos;
pub const POWER_GPREGRET2_GPREGRET_Pos = @as(c_ulong, 0);
pub const POWER_GPREGRET2_GPREGRET_Msk = @as(c_ulong, 0xFF) << POWER_GPREGRET2_GPREGRET_Pos;
pub const POWER_DCDCEN_DCDCEN_Pos = @as(c_ulong, 0);
pub const POWER_DCDCEN_DCDCEN_Msk = @as(c_ulong, 0x1) << POWER_DCDCEN_DCDCEN_Pos;
pub const POWER_DCDCEN_DCDCEN_Disabled = @as(c_ulong, 0);
pub const POWER_DCDCEN_DCDCEN_Enabled = @as(c_ulong, 1);
pub const POWER_DCDCEN0_DCDCEN_Pos = @as(c_ulong, 0);
pub const POWER_DCDCEN0_DCDCEN_Msk = @as(c_ulong, 0x1) << POWER_DCDCEN0_DCDCEN_Pos;
pub const POWER_DCDCEN0_DCDCEN_Disabled = @as(c_ulong, 0);
pub const POWER_DCDCEN0_DCDCEN_Enabled = @as(c_ulong, 1);
pub const POWER_MAINREGSTATUS_MAINREGSTATUS_Pos = @as(c_ulong, 0);
pub const POWER_MAINREGSTATUS_MAINREGSTATUS_Msk = @as(c_ulong, 0x1) << POWER_MAINREGSTATUS_MAINREGSTATUS_Pos;
pub const POWER_MAINREGSTATUS_MAINREGSTATUS_Normal = @as(c_ulong, 0);
pub const POWER_MAINREGSTATUS_MAINREGSTATUS_High = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S15RETENTION_Pos = @as(c_ulong, 31);
pub const POWER_RAM_POWER_S15RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S15RETENTION_Pos;
pub const POWER_RAM_POWER_S15RETENTION_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S15RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S14RETENTION_Pos = @as(c_ulong, 30);
pub const POWER_RAM_POWER_S14RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S14RETENTION_Pos;
pub const POWER_RAM_POWER_S14RETENTION_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S14RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S13RETENTION_Pos = @as(c_ulong, 29);
pub const POWER_RAM_POWER_S13RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S13RETENTION_Pos;
pub const POWER_RAM_POWER_S13RETENTION_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S13RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S12RETENTION_Pos = @as(c_ulong, 28);
pub const POWER_RAM_POWER_S12RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S12RETENTION_Pos;
pub const POWER_RAM_POWER_S12RETENTION_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S12RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S11RETENTION_Pos = @as(c_ulong, 27);
pub const POWER_RAM_POWER_S11RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S11RETENTION_Pos;
pub const POWER_RAM_POWER_S11RETENTION_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S11RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S10RETENTION_Pos = @as(c_ulong, 26);
pub const POWER_RAM_POWER_S10RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S10RETENTION_Pos;
pub const POWER_RAM_POWER_S10RETENTION_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S10RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S9RETENTION_Pos = @as(c_ulong, 25);
pub const POWER_RAM_POWER_S9RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S9RETENTION_Pos;
pub const POWER_RAM_POWER_S9RETENTION_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S9RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S8RETENTION_Pos = @as(c_ulong, 24);
pub const POWER_RAM_POWER_S8RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S8RETENTION_Pos;
pub const POWER_RAM_POWER_S8RETENTION_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S8RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S7RETENTION_Pos = @as(c_ulong, 23);
pub const POWER_RAM_POWER_S7RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S7RETENTION_Pos;
pub const POWER_RAM_POWER_S7RETENTION_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S7RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S6RETENTION_Pos = @as(c_ulong, 22);
pub const POWER_RAM_POWER_S6RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S6RETENTION_Pos;
pub const POWER_RAM_POWER_S6RETENTION_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S6RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S5RETENTION_Pos = @as(c_ulong, 21);
pub const POWER_RAM_POWER_S5RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S5RETENTION_Pos;
pub const POWER_RAM_POWER_S5RETENTION_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S5RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S4RETENTION_Pos = @as(c_ulong, 20);
pub const POWER_RAM_POWER_S4RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S4RETENTION_Pos;
pub const POWER_RAM_POWER_S4RETENTION_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S4RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S3RETENTION_Pos = @as(c_ulong, 19);
pub const POWER_RAM_POWER_S3RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S3RETENTION_Pos;
pub const POWER_RAM_POWER_S3RETENTION_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S3RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S2RETENTION_Pos = @as(c_ulong, 18);
pub const POWER_RAM_POWER_S2RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S2RETENTION_Pos;
pub const POWER_RAM_POWER_S2RETENTION_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S2RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S1RETENTION_Pos = @as(c_ulong, 17);
pub const POWER_RAM_POWER_S1RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S1RETENTION_Pos;
pub const POWER_RAM_POWER_S1RETENTION_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S1RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S0RETENTION_Pos = @as(c_ulong, 16);
pub const POWER_RAM_POWER_S0RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S0RETENTION_Pos;
pub const POWER_RAM_POWER_S0RETENTION_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S0RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S15POWER_Pos = @as(c_ulong, 15);
pub const POWER_RAM_POWER_S15POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S15POWER_Pos;
pub const POWER_RAM_POWER_S15POWER_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S15POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S14POWER_Pos = @as(c_ulong, 14);
pub const POWER_RAM_POWER_S14POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S14POWER_Pos;
pub const POWER_RAM_POWER_S14POWER_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S14POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S13POWER_Pos = @as(c_ulong, 13);
pub const POWER_RAM_POWER_S13POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S13POWER_Pos;
pub const POWER_RAM_POWER_S13POWER_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S13POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S12POWER_Pos = @as(c_ulong, 12);
pub const POWER_RAM_POWER_S12POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S12POWER_Pos;
pub const POWER_RAM_POWER_S12POWER_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S12POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S11POWER_Pos = @as(c_ulong, 11);
pub const POWER_RAM_POWER_S11POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S11POWER_Pos;
pub const POWER_RAM_POWER_S11POWER_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S11POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S10POWER_Pos = @as(c_ulong, 10);
pub const POWER_RAM_POWER_S10POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S10POWER_Pos;
pub const POWER_RAM_POWER_S10POWER_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S10POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S9POWER_Pos = @as(c_ulong, 9);
pub const POWER_RAM_POWER_S9POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S9POWER_Pos;
pub const POWER_RAM_POWER_S9POWER_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S9POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S8POWER_Pos = @as(c_ulong, 8);
pub const POWER_RAM_POWER_S8POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S8POWER_Pos;
pub const POWER_RAM_POWER_S8POWER_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S8POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S7POWER_Pos = @as(c_ulong, 7);
pub const POWER_RAM_POWER_S7POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S7POWER_Pos;
pub const POWER_RAM_POWER_S7POWER_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S7POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S6POWER_Pos = @as(c_ulong, 6);
pub const POWER_RAM_POWER_S6POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S6POWER_Pos;
pub const POWER_RAM_POWER_S6POWER_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S6POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S5POWER_Pos = @as(c_ulong, 5);
pub const POWER_RAM_POWER_S5POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S5POWER_Pos;
pub const POWER_RAM_POWER_S5POWER_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S5POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S4POWER_Pos = @as(c_ulong, 4);
pub const POWER_RAM_POWER_S4POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S4POWER_Pos;
pub const POWER_RAM_POWER_S4POWER_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S4POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S3POWER_Pos = @as(c_ulong, 3);
pub const POWER_RAM_POWER_S3POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S3POWER_Pos;
pub const POWER_RAM_POWER_S3POWER_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S3POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S2POWER_Pos = @as(c_ulong, 2);
pub const POWER_RAM_POWER_S2POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S2POWER_Pos;
pub const POWER_RAM_POWER_S2POWER_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S2POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S1POWER_Pos = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S1POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S1POWER_Pos;
pub const POWER_RAM_POWER_S1POWER_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S1POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWER_S0POWER_Pos = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S0POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWER_S0POWER_Pos;
pub const POWER_RAM_POWER_S0POWER_Off = @as(c_ulong, 0);
pub const POWER_RAM_POWER_S0POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S15RETENTION_Pos = @as(c_ulong, 31);
pub const POWER_RAM_POWERSET_S15RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S15RETENTION_Pos;
pub const POWER_RAM_POWERSET_S15RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S14RETENTION_Pos = @as(c_ulong, 30);
pub const POWER_RAM_POWERSET_S14RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S14RETENTION_Pos;
pub const POWER_RAM_POWERSET_S14RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S13RETENTION_Pos = @as(c_ulong, 29);
pub const POWER_RAM_POWERSET_S13RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S13RETENTION_Pos;
pub const POWER_RAM_POWERSET_S13RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S12RETENTION_Pos = @as(c_ulong, 28);
pub const POWER_RAM_POWERSET_S12RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S12RETENTION_Pos;
pub const POWER_RAM_POWERSET_S12RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S11RETENTION_Pos = @as(c_ulong, 27);
pub const POWER_RAM_POWERSET_S11RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S11RETENTION_Pos;
pub const POWER_RAM_POWERSET_S11RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S10RETENTION_Pos = @as(c_ulong, 26);
pub const POWER_RAM_POWERSET_S10RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S10RETENTION_Pos;
pub const POWER_RAM_POWERSET_S10RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S9RETENTION_Pos = @as(c_ulong, 25);
pub const POWER_RAM_POWERSET_S9RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S9RETENTION_Pos;
pub const POWER_RAM_POWERSET_S9RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S8RETENTION_Pos = @as(c_ulong, 24);
pub const POWER_RAM_POWERSET_S8RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S8RETENTION_Pos;
pub const POWER_RAM_POWERSET_S8RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S7RETENTION_Pos = @as(c_ulong, 23);
pub const POWER_RAM_POWERSET_S7RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S7RETENTION_Pos;
pub const POWER_RAM_POWERSET_S7RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S6RETENTION_Pos = @as(c_ulong, 22);
pub const POWER_RAM_POWERSET_S6RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S6RETENTION_Pos;
pub const POWER_RAM_POWERSET_S6RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S5RETENTION_Pos = @as(c_ulong, 21);
pub const POWER_RAM_POWERSET_S5RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S5RETENTION_Pos;
pub const POWER_RAM_POWERSET_S5RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S4RETENTION_Pos = @as(c_ulong, 20);
pub const POWER_RAM_POWERSET_S4RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S4RETENTION_Pos;
pub const POWER_RAM_POWERSET_S4RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S3RETENTION_Pos = @as(c_ulong, 19);
pub const POWER_RAM_POWERSET_S3RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S3RETENTION_Pos;
pub const POWER_RAM_POWERSET_S3RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S2RETENTION_Pos = @as(c_ulong, 18);
pub const POWER_RAM_POWERSET_S2RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S2RETENTION_Pos;
pub const POWER_RAM_POWERSET_S2RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S1RETENTION_Pos = @as(c_ulong, 17);
pub const POWER_RAM_POWERSET_S1RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S1RETENTION_Pos;
pub const POWER_RAM_POWERSET_S1RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S0RETENTION_Pos = @as(c_ulong, 16);
pub const POWER_RAM_POWERSET_S0RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S0RETENTION_Pos;
pub const POWER_RAM_POWERSET_S0RETENTION_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S15POWER_Pos = @as(c_ulong, 15);
pub const POWER_RAM_POWERSET_S15POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S15POWER_Pos;
pub const POWER_RAM_POWERSET_S15POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S14POWER_Pos = @as(c_ulong, 14);
pub const POWER_RAM_POWERSET_S14POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S14POWER_Pos;
pub const POWER_RAM_POWERSET_S14POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S13POWER_Pos = @as(c_ulong, 13);
pub const POWER_RAM_POWERSET_S13POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S13POWER_Pos;
pub const POWER_RAM_POWERSET_S13POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S12POWER_Pos = @as(c_ulong, 12);
pub const POWER_RAM_POWERSET_S12POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S12POWER_Pos;
pub const POWER_RAM_POWERSET_S12POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S11POWER_Pos = @as(c_ulong, 11);
pub const POWER_RAM_POWERSET_S11POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S11POWER_Pos;
pub const POWER_RAM_POWERSET_S11POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S10POWER_Pos = @as(c_ulong, 10);
pub const POWER_RAM_POWERSET_S10POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S10POWER_Pos;
pub const POWER_RAM_POWERSET_S10POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S9POWER_Pos = @as(c_ulong, 9);
pub const POWER_RAM_POWERSET_S9POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S9POWER_Pos;
pub const POWER_RAM_POWERSET_S9POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S8POWER_Pos = @as(c_ulong, 8);
pub const POWER_RAM_POWERSET_S8POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S8POWER_Pos;
pub const POWER_RAM_POWERSET_S8POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S7POWER_Pos = @as(c_ulong, 7);
pub const POWER_RAM_POWERSET_S7POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S7POWER_Pos;
pub const POWER_RAM_POWERSET_S7POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S6POWER_Pos = @as(c_ulong, 6);
pub const POWER_RAM_POWERSET_S6POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S6POWER_Pos;
pub const POWER_RAM_POWERSET_S6POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S5POWER_Pos = @as(c_ulong, 5);
pub const POWER_RAM_POWERSET_S5POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S5POWER_Pos;
pub const POWER_RAM_POWERSET_S5POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S4POWER_Pos = @as(c_ulong, 4);
pub const POWER_RAM_POWERSET_S4POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S4POWER_Pos;
pub const POWER_RAM_POWERSET_S4POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S3POWER_Pos = @as(c_ulong, 3);
pub const POWER_RAM_POWERSET_S3POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S3POWER_Pos;
pub const POWER_RAM_POWERSET_S3POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S2POWER_Pos = @as(c_ulong, 2);
pub const POWER_RAM_POWERSET_S2POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S2POWER_Pos;
pub const POWER_RAM_POWERSET_S2POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S1POWER_Pos = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S1POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S1POWER_Pos;
pub const POWER_RAM_POWERSET_S1POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERSET_S0POWER_Pos = @as(c_ulong, 0);
pub const POWER_RAM_POWERSET_S0POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERSET_S0POWER_Pos;
pub const POWER_RAM_POWERSET_S0POWER_On = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S15RETENTION_Pos = @as(c_ulong, 31);
pub const POWER_RAM_POWERCLR_S15RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S15RETENTION_Pos;
pub const POWER_RAM_POWERCLR_S15RETENTION_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S14RETENTION_Pos = @as(c_ulong, 30);
pub const POWER_RAM_POWERCLR_S14RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S14RETENTION_Pos;
pub const POWER_RAM_POWERCLR_S14RETENTION_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S13RETENTION_Pos = @as(c_ulong, 29);
pub const POWER_RAM_POWERCLR_S13RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S13RETENTION_Pos;
pub const POWER_RAM_POWERCLR_S13RETENTION_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S12RETENTION_Pos = @as(c_ulong, 28);
pub const POWER_RAM_POWERCLR_S12RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S12RETENTION_Pos;
pub const POWER_RAM_POWERCLR_S12RETENTION_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S11RETENTION_Pos = @as(c_ulong, 27);
pub const POWER_RAM_POWERCLR_S11RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S11RETENTION_Pos;
pub const POWER_RAM_POWERCLR_S11RETENTION_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S10RETENTION_Pos = @as(c_ulong, 26);
pub const POWER_RAM_POWERCLR_S10RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S10RETENTION_Pos;
pub const POWER_RAM_POWERCLR_S10RETENTION_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S9RETENTION_Pos = @as(c_ulong, 25);
pub const POWER_RAM_POWERCLR_S9RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S9RETENTION_Pos;
pub const POWER_RAM_POWERCLR_S9RETENTION_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S8RETENTION_Pos = @as(c_ulong, 24);
pub const POWER_RAM_POWERCLR_S8RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S8RETENTION_Pos;
pub const POWER_RAM_POWERCLR_S8RETENTION_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S7RETENTION_Pos = @as(c_ulong, 23);
pub const POWER_RAM_POWERCLR_S7RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S7RETENTION_Pos;
pub const POWER_RAM_POWERCLR_S7RETENTION_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S6RETENTION_Pos = @as(c_ulong, 22);
pub const POWER_RAM_POWERCLR_S6RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S6RETENTION_Pos;
pub const POWER_RAM_POWERCLR_S6RETENTION_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S5RETENTION_Pos = @as(c_ulong, 21);
pub const POWER_RAM_POWERCLR_S5RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S5RETENTION_Pos;
pub const POWER_RAM_POWERCLR_S5RETENTION_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S4RETENTION_Pos = @as(c_ulong, 20);
pub const POWER_RAM_POWERCLR_S4RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S4RETENTION_Pos;
pub const POWER_RAM_POWERCLR_S4RETENTION_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S3RETENTION_Pos = @as(c_ulong, 19);
pub const POWER_RAM_POWERCLR_S3RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S3RETENTION_Pos;
pub const POWER_RAM_POWERCLR_S3RETENTION_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S2RETENTION_Pos = @as(c_ulong, 18);
pub const POWER_RAM_POWERCLR_S2RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S2RETENTION_Pos;
pub const POWER_RAM_POWERCLR_S2RETENTION_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S1RETENTION_Pos = @as(c_ulong, 17);
pub const POWER_RAM_POWERCLR_S1RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S1RETENTION_Pos;
pub const POWER_RAM_POWERCLR_S1RETENTION_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S0RETENTION_Pos = @as(c_ulong, 16);
pub const POWER_RAM_POWERCLR_S0RETENTION_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S0RETENTION_Pos;
pub const POWER_RAM_POWERCLR_S0RETENTION_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S15POWER_Pos = @as(c_ulong, 15);
pub const POWER_RAM_POWERCLR_S15POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S15POWER_Pos;
pub const POWER_RAM_POWERCLR_S15POWER_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S14POWER_Pos = @as(c_ulong, 14);
pub const POWER_RAM_POWERCLR_S14POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S14POWER_Pos;
pub const POWER_RAM_POWERCLR_S14POWER_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S13POWER_Pos = @as(c_ulong, 13);
pub const POWER_RAM_POWERCLR_S13POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S13POWER_Pos;
pub const POWER_RAM_POWERCLR_S13POWER_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S12POWER_Pos = @as(c_ulong, 12);
pub const POWER_RAM_POWERCLR_S12POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S12POWER_Pos;
pub const POWER_RAM_POWERCLR_S12POWER_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S11POWER_Pos = @as(c_ulong, 11);
pub const POWER_RAM_POWERCLR_S11POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S11POWER_Pos;
pub const POWER_RAM_POWERCLR_S11POWER_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S10POWER_Pos = @as(c_ulong, 10);
pub const POWER_RAM_POWERCLR_S10POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S10POWER_Pos;
pub const POWER_RAM_POWERCLR_S10POWER_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S9POWER_Pos = @as(c_ulong, 9);
pub const POWER_RAM_POWERCLR_S9POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S9POWER_Pos;
pub const POWER_RAM_POWERCLR_S9POWER_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S8POWER_Pos = @as(c_ulong, 8);
pub const POWER_RAM_POWERCLR_S8POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S8POWER_Pos;
pub const POWER_RAM_POWERCLR_S8POWER_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S7POWER_Pos = @as(c_ulong, 7);
pub const POWER_RAM_POWERCLR_S7POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S7POWER_Pos;
pub const POWER_RAM_POWERCLR_S7POWER_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S6POWER_Pos = @as(c_ulong, 6);
pub const POWER_RAM_POWERCLR_S6POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S6POWER_Pos;
pub const POWER_RAM_POWERCLR_S6POWER_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S5POWER_Pos = @as(c_ulong, 5);
pub const POWER_RAM_POWERCLR_S5POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S5POWER_Pos;
pub const POWER_RAM_POWERCLR_S5POWER_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S4POWER_Pos = @as(c_ulong, 4);
pub const POWER_RAM_POWERCLR_S4POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S4POWER_Pos;
pub const POWER_RAM_POWERCLR_S4POWER_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S3POWER_Pos = @as(c_ulong, 3);
pub const POWER_RAM_POWERCLR_S3POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S3POWER_Pos;
pub const POWER_RAM_POWERCLR_S3POWER_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S2POWER_Pos = @as(c_ulong, 2);
pub const POWER_RAM_POWERCLR_S2POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S2POWER_Pos;
pub const POWER_RAM_POWERCLR_S2POWER_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S1POWER_Pos = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S1POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S1POWER_Pos;
pub const POWER_RAM_POWERCLR_S1POWER_Off = @as(c_ulong, 1);
pub const POWER_RAM_POWERCLR_S0POWER_Pos = @as(c_ulong, 0);
pub const POWER_RAM_POWERCLR_S0POWER_Msk = @as(c_ulong, 0x1) << POWER_RAM_POWERCLR_S0POWER_Pos;
pub const POWER_RAM_POWERCLR_S0POWER_Off = @as(c_ulong, 1);
pub const PPI_TASKS_CHG_EN_EN_Pos = @as(c_ulong, 0);
pub const PPI_TASKS_CHG_EN_EN_Msk = @as(c_ulong, 0x1) << PPI_TASKS_CHG_EN_EN_Pos;
pub const PPI_TASKS_CHG_EN_EN_Trigger = @as(c_ulong, 1);
pub const PPI_TASKS_CHG_DIS_DIS_Pos = @as(c_ulong, 0);
pub const PPI_TASKS_CHG_DIS_DIS_Msk = @as(c_ulong, 0x1) << PPI_TASKS_CHG_DIS_DIS_Pos;
pub const PPI_TASKS_CHG_DIS_DIS_Trigger = @as(c_ulong, 1);
pub const PPI_CHEN_CH31_Pos = @as(c_ulong, 31);
pub const PPI_CHEN_CH31_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH31_Pos;
pub const PPI_CHEN_CH31_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH31_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH30_Pos = @as(c_ulong, 30);
pub const PPI_CHEN_CH30_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH30_Pos;
pub const PPI_CHEN_CH30_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH30_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH29_Pos = @as(c_ulong, 29);
pub const PPI_CHEN_CH29_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH29_Pos;
pub const PPI_CHEN_CH29_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH29_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH28_Pos = @as(c_ulong, 28);
pub const PPI_CHEN_CH28_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH28_Pos;
pub const PPI_CHEN_CH28_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH28_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH27_Pos = @as(c_ulong, 27);
pub const PPI_CHEN_CH27_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH27_Pos;
pub const PPI_CHEN_CH27_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH27_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH26_Pos = @as(c_ulong, 26);
pub const PPI_CHEN_CH26_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH26_Pos;
pub const PPI_CHEN_CH26_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH26_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH25_Pos = @as(c_ulong, 25);
pub const PPI_CHEN_CH25_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH25_Pos;
pub const PPI_CHEN_CH25_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH25_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH24_Pos = @as(c_ulong, 24);
pub const PPI_CHEN_CH24_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH24_Pos;
pub const PPI_CHEN_CH24_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH24_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH23_Pos = @as(c_ulong, 23);
pub const PPI_CHEN_CH23_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH23_Pos;
pub const PPI_CHEN_CH23_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH23_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH22_Pos = @as(c_ulong, 22);
pub const PPI_CHEN_CH22_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH22_Pos;
pub const PPI_CHEN_CH22_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH22_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH21_Pos = @as(c_ulong, 21);
pub const PPI_CHEN_CH21_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH21_Pos;
pub const PPI_CHEN_CH21_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH21_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH20_Pos = @as(c_ulong, 20);
pub const PPI_CHEN_CH20_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH20_Pos;
pub const PPI_CHEN_CH20_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH20_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH19_Pos = @as(c_ulong, 19);
pub const PPI_CHEN_CH19_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH19_Pos;
pub const PPI_CHEN_CH19_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH19_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH18_Pos = @as(c_ulong, 18);
pub const PPI_CHEN_CH18_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH18_Pos;
pub const PPI_CHEN_CH18_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH18_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH17_Pos = @as(c_ulong, 17);
pub const PPI_CHEN_CH17_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH17_Pos;
pub const PPI_CHEN_CH17_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH17_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH16_Pos = @as(c_ulong, 16);
pub const PPI_CHEN_CH16_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH16_Pos;
pub const PPI_CHEN_CH16_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH16_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH15_Pos = @as(c_ulong, 15);
pub const PPI_CHEN_CH15_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH15_Pos;
pub const PPI_CHEN_CH15_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH15_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH14_Pos = @as(c_ulong, 14);
pub const PPI_CHEN_CH14_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH14_Pos;
pub const PPI_CHEN_CH14_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH14_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH13_Pos = @as(c_ulong, 13);
pub const PPI_CHEN_CH13_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH13_Pos;
pub const PPI_CHEN_CH13_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH13_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH12_Pos = @as(c_ulong, 12);
pub const PPI_CHEN_CH12_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH12_Pos;
pub const PPI_CHEN_CH12_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH12_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH11_Pos = @as(c_ulong, 11);
pub const PPI_CHEN_CH11_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH11_Pos;
pub const PPI_CHEN_CH11_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH11_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH10_Pos = @as(c_ulong, 10);
pub const PPI_CHEN_CH10_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH10_Pos;
pub const PPI_CHEN_CH10_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH10_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH9_Pos = @as(c_ulong, 9);
pub const PPI_CHEN_CH9_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH9_Pos;
pub const PPI_CHEN_CH9_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH9_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH8_Pos = @as(c_ulong, 8);
pub const PPI_CHEN_CH8_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH8_Pos;
pub const PPI_CHEN_CH8_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH8_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH7_Pos = @as(c_ulong, 7);
pub const PPI_CHEN_CH7_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH7_Pos;
pub const PPI_CHEN_CH7_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH7_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH6_Pos = @as(c_ulong, 6);
pub const PPI_CHEN_CH6_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH6_Pos;
pub const PPI_CHEN_CH6_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH6_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH5_Pos = @as(c_ulong, 5);
pub const PPI_CHEN_CH5_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH5_Pos;
pub const PPI_CHEN_CH5_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH5_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH4_Pos = @as(c_ulong, 4);
pub const PPI_CHEN_CH4_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH4_Pos;
pub const PPI_CHEN_CH4_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH4_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH3_Pos = @as(c_ulong, 3);
pub const PPI_CHEN_CH3_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH3_Pos;
pub const PPI_CHEN_CH3_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH3_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH2_Pos = @as(c_ulong, 2);
pub const PPI_CHEN_CH2_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH2_Pos;
pub const PPI_CHEN_CH2_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH2_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH1_Pos = @as(c_ulong, 1);
pub const PPI_CHEN_CH1_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH1_Pos;
pub const PPI_CHEN_CH1_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH1_Enabled = @as(c_ulong, 1);
pub const PPI_CHEN_CH0_Pos = @as(c_ulong, 0);
pub const PPI_CHEN_CH0_Msk = @as(c_ulong, 0x1) << PPI_CHEN_CH0_Pos;
pub const PPI_CHEN_CH0_Disabled = @as(c_ulong, 0);
pub const PPI_CHEN_CH0_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH31_Pos = @as(c_ulong, 31);
pub const PPI_CHENSET_CH31_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH31_Pos;
pub const PPI_CHENSET_CH31_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH31_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH31_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH30_Pos = @as(c_ulong, 30);
pub const PPI_CHENSET_CH30_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH30_Pos;
pub const PPI_CHENSET_CH30_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH30_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH30_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH29_Pos = @as(c_ulong, 29);
pub const PPI_CHENSET_CH29_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH29_Pos;
pub const PPI_CHENSET_CH29_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH29_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH29_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH28_Pos = @as(c_ulong, 28);
pub const PPI_CHENSET_CH28_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH28_Pos;
pub const PPI_CHENSET_CH28_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH28_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH28_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH27_Pos = @as(c_ulong, 27);
pub const PPI_CHENSET_CH27_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH27_Pos;
pub const PPI_CHENSET_CH27_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH27_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH27_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH26_Pos = @as(c_ulong, 26);
pub const PPI_CHENSET_CH26_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH26_Pos;
pub const PPI_CHENSET_CH26_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH26_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH26_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH25_Pos = @as(c_ulong, 25);
pub const PPI_CHENSET_CH25_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH25_Pos;
pub const PPI_CHENSET_CH25_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH25_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH25_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH24_Pos = @as(c_ulong, 24);
pub const PPI_CHENSET_CH24_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH24_Pos;
pub const PPI_CHENSET_CH24_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH24_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH24_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH23_Pos = @as(c_ulong, 23);
pub const PPI_CHENSET_CH23_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH23_Pos;
pub const PPI_CHENSET_CH23_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH23_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH23_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH22_Pos = @as(c_ulong, 22);
pub const PPI_CHENSET_CH22_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH22_Pos;
pub const PPI_CHENSET_CH22_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH22_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH22_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH21_Pos = @as(c_ulong, 21);
pub const PPI_CHENSET_CH21_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH21_Pos;
pub const PPI_CHENSET_CH21_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH21_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH21_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH20_Pos = @as(c_ulong, 20);
pub const PPI_CHENSET_CH20_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH20_Pos;
pub const PPI_CHENSET_CH20_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH20_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH20_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH19_Pos = @as(c_ulong, 19);
pub const PPI_CHENSET_CH19_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH19_Pos;
pub const PPI_CHENSET_CH19_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH19_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH19_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH18_Pos = @as(c_ulong, 18);
pub const PPI_CHENSET_CH18_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH18_Pos;
pub const PPI_CHENSET_CH18_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH18_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH18_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH17_Pos = @as(c_ulong, 17);
pub const PPI_CHENSET_CH17_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH17_Pos;
pub const PPI_CHENSET_CH17_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH17_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH17_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH16_Pos = @as(c_ulong, 16);
pub const PPI_CHENSET_CH16_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH16_Pos;
pub const PPI_CHENSET_CH16_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH16_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH16_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH15_Pos = @as(c_ulong, 15);
pub const PPI_CHENSET_CH15_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH15_Pos;
pub const PPI_CHENSET_CH15_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH15_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH15_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH14_Pos = @as(c_ulong, 14);
pub const PPI_CHENSET_CH14_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH14_Pos;
pub const PPI_CHENSET_CH14_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH14_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH14_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH13_Pos = @as(c_ulong, 13);
pub const PPI_CHENSET_CH13_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH13_Pos;
pub const PPI_CHENSET_CH13_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH13_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH13_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH12_Pos = @as(c_ulong, 12);
pub const PPI_CHENSET_CH12_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH12_Pos;
pub const PPI_CHENSET_CH12_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH12_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH12_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH11_Pos = @as(c_ulong, 11);
pub const PPI_CHENSET_CH11_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH11_Pos;
pub const PPI_CHENSET_CH11_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH11_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH11_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH10_Pos = @as(c_ulong, 10);
pub const PPI_CHENSET_CH10_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH10_Pos;
pub const PPI_CHENSET_CH10_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH10_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH10_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH9_Pos = @as(c_ulong, 9);
pub const PPI_CHENSET_CH9_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH9_Pos;
pub const PPI_CHENSET_CH9_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH9_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH9_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH8_Pos = @as(c_ulong, 8);
pub const PPI_CHENSET_CH8_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH8_Pos;
pub const PPI_CHENSET_CH8_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH8_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH8_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH7_Pos = @as(c_ulong, 7);
pub const PPI_CHENSET_CH7_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH7_Pos;
pub const PPI_CHENSET_CH7_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH7_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH7_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH6_Pos = @as(c_ulong, 6);
pub const PPI_CHENSET_CH6_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH6_Pos;
pub const PPI_CHENSET_CH6_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH6_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH6_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH5_Pos = @as(c_ulong, 5);
pub const PPI_CHENSET_CH5_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH5_Pos;
pub const PPI_CHENSET_CH5_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH5_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH5_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH4_Pos = @as(c_ulong, 4);
pub const PPI_CHENSET_CH4_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH4_Pos;
pub const PPI_CHENSET_CH4_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH4_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH4_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH3_Pos = @as(c_ulong, 3);
pub const PPI_CHENSET_CH3_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH3_Pos;
pub const PPI_CHENSET_CH3_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH3_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH3_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH2_Pos = @as(c_ulong, 2);
pub const PPI_CHENSET_CH2_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH2_Pos;
pub const PPI_CHENSET_CH2_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH2_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH2_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH1_Pos = @as(c_ulong, 1);
pub const PPI_CHENSET_CH1_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH1_Pos;
pub const PPI_CHENSET_CH1_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH1_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH1_Set = @as(c_ulong, 1);
pub const PPI_CHENSET_CH0_Pos = @as(c_ulong, 0);
pub const PPI_CHENSET_CH0_Msk = @as(c_ulong, 0x1) << PPI_CHENSET_CH0_Pos;
pub const PPI_CHENSET_CH0_Disabled = @as(c_ulong, 0);
pub const PPI_CHENSET_CH0_Enabled = @as(c_ulong, 1);
pub const PPI_CHENSET_CH0_Set = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH31_Pos = @as(c_ulong, 31);
pub const PPI_CHENCLR_CH31_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH31_Pos;
pub const PPI_CHENCLR_CH31_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH31_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH31_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH30_Pos = @as(c_ulong, 30);
pub const PPI_CHENCLR_CH30_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH30_Pos;
pub const PPI_CHENCLR_CH30_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH30_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH30_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH29_Pos = @as(c_ulong, 29);
pub const PPI_CHENCLR_CH29_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH29_Pos;
pub const PPI_CHENCLR_CH29_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH29_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH29_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH28_Pos = @as(c_ulong, 28);
pub const PPI_CHENCLR_CH28_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH28_Pos;
pub const PPI_CHENCLR_CH28_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH28_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH28_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH27_Pos = @as(c_ulong, 27);
pub const PPI_CHENCLR_CH27_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH27_Pos;
pub const PPI_CHENCLR_CH27_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH27_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH27_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH26_Pos = @as(c_ulong, 26);
pub const PPI_CHENCLR_CH26_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH26_Pos;
pub const PPI_CHENCLR_CH26_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH26_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH26_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH25_Pos = @as(c_ulong, 25);
pub const PPI_CHENCLR_CH25_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH25_Pos;
pub const PPI_CHENCLR_CH25_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH25_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH25_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH24_Pos = @as(c_ulong, 24);
pub const PPI_CHENCLR_CH24_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH24_Pos;
pub const PPI_CHENCLR_CH24_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH24_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH24_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH23_Pos = @as(c_ulong, 23);
pub const PPI_CHENCLR_CH23_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH23_Pos;
pub const PPI_CHENCLR_CH23_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH23_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH23_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH22_Pos = @as(c_ulong, 22);
pub const PPI_CHENCLR_CH22_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH22_Pos;
pub const PPI_CHENCLR_CH22_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH22_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH22_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH21_Pos = @as(c_ulong, 21);
pub const PPI_CHENCLR_CH21_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH21_Pos;
pub const PPI_CHENCLR_CH21_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH21_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH21_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH20_Pos = @as(c_ulong, 20);
pub const PPI_CHENCLR_CH20_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH20_Pos;
pub const PPI_CHENCLR_CH20_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH20_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH20_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH19_Pos = @as(c_ulong, 19);
pub const PPI_CHENCLR_CH19_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH19_Pos;
pub const PPI_CHENCLR_CH19_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH19_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH19_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH18_Pos = @as(c_ulong, 18);
pub const PPI_CHENCLR_CH18_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH18_Pos;
pub const PPI_CHENCLR_CH18_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH18_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH18_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH17_Pos = @as(c_ulong, 17);
pub const PPI_CHENCLR_CH17_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH17_Pos;
pub const PPI_CHENCLR_CH17_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH17_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH17_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH16_Pos = @as(c_ulong, 16);
pub const PPI_CHENCLR_CH16_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH16_Pos;
pub const PPI_CHENCLR_CH16_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH16_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH16_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH15_Pos = @as(c_ulong, 15);
pub const PPI_CHENCLR_CH15_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH15_Pos;
pub const PPI_CHENCLR_CH15_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH15_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH15_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH14_Pos = @as(c_ulong, 14);
pub const PPI_CHENCLR_CH14_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH14_Pos;
pub const PPI_CHENCLR_CH14_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH14_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH14_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH13_Pos = @as(c_ulong, 13);
pub const PPI_CHENCLR_CH13_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH13_Pos;
pub const PPI_CHENCLR_CH13_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH13_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH13_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH12_Pos = @as(c_ulong, 12);
pub const PPI_CHENCLR_CH12_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH12_Pos;
pub const PPI_CHENCLR_CH12_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH12_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH12_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH11_Pos = @as(c_ulong, 11);
pub const PPI_CHENCLR_CH11_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH11_Pos;
pub const PPI_CHENCLR_CH11_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH11_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH11_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH10_Pos = @as(c_ulong, 10);
pub const PPI_CHENCLR_CH10_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH10_Pos;
pub const PPI_CHENCLR_CH10_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH10_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH10_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH9_Pos = @as(c_ulong, 9);
pub const PPI_CHENCLR_CH9_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH9_Pos;
pub const PPI_CHENCLR_CH9_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH9_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH9_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH8_Pos = @as(c_ulong, 8);
pub const PPI_CHENCLR_CH8_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH8_Pos;
pub const PPI_CHENCLR_CH8_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH8_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH8_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH7_Pos = @as(c_ulong, 7);
pub const PPI_CHENCLR_CH7_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH7_Pos;
pub const PPI_CHENCLR_CH7_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH7_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH7_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH6_Pos = @as(c_ulong, 6);
pub const PPI_CHENCLR_CH6_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH6_Pos;
pub const PPI_CHENCLR_CH6_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH6_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH6_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH5_Pos = @as(c_ulong, 5);
pub const PPI_CHENCLR_CH5_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH5_Pos;
pub const PPI_CHENCLR_CH5_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH5_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH5_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH4_Pos = @as(c_ulong, 4);
pub const PPI_CHENCLR_CH4_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH4_Pos;
pub const PPI_CHENCLR_CH4_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH4_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH4_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH3_Pos = @as(c_ulong, 3);
pub const PPI_CHENCLR_CH3_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH3_Pos;
pub const PPI_CHENCLR_CH3_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH3_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH3_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH2_Pos = @as(c_ulong, 2);
pub const PPI_CHENCLR_CH2_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH2_Pos;
pub const PPI_CHENCLR_CH2_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH2_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH2_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH1_Pos = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH1_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH1_Pos;
pub const PPI_CHENCLR_CH1_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH1_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH1_Clear = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH0_Pos = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH0_Msk = @as(c_ulong, 0x1) << PPI_CHENCLR_CH0_Pos;
pub const PPI_CHENCLR_CH0_Disabled = @as(c_ulong, 0);
pub const PPI_CHENCLR_CH0_Enabled = @as(c_ulong, 1);
pub const PPI_CHENCLR_CH0_Clear = @as(c_ulong, 1);
pub const PPI_CH_EEP_EEP_Pos = @as(c_ulong, 0);
pub const PPI_CH_EEP_EEP_Msk = @as(c_ulong, 0xFFFFFFFF) << PPI_CH_EEP_EEP_Pos;
pub const PPI_CH_TEP_TEP_Pos = @as(c_ulong, 0);
pub const PPI_CH_TEP_TEP_Msk = @as(c_ulong, 0xFFFFFFFF) << PPI_CH_TEP_TEP_Pos;
pub const PPI_CHG_CH31_Pos = @as(c_ulong, 31);
pub const PPI_CHG_CH31_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH31_Pos;
pub const PPI_CHG_CH31_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH31_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH30_Pos = @as(c_ulong, 30);
pub const PPI_CHG_CH30_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH30_Pos;
pub const PPI_CHG_CH30_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH30_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH29_Pos = @as(c_ulong, 29);
pub const PPI_CHG_CH29_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH29_Pos;
pub const PPI_CHG_CH29_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH29_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH28_Pos = @as(c_ulong, 28);
pub const PPI_CHG_CH28_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH28_Pos;
pub const PPI_CHG_CH28_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH28_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH27_Pos = @as(c_ulong, 27);
pub const PPI_CHG_CH27_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH27_Pos;
pub const PPI_CHG_CH27_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH27_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH26_Pos = @as(c_ulong, 26);
pub const PPI_CHG_CH26_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH26_Pos;
pub const PPI_CHG_CH26_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH26_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH25_Pos = @as(c_ulong, 25);
pub const PPI_CHG_CH25_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH25_Pos;
pub const PPI_CHG_CH25_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH25_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH24_Pos = @as(c_ulong, 24);
pub const PPI_CHG_CH24_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH24_Pos;
pub const PPI_CHG_CH24_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH24_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH23_Pos = @as(c_ulong, 23);
pub const PPI_CHG_CH23_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH23_Pos;
pub const PPI_CHG_CH23_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH23_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH22_Pos = @as(c_ulong, 22);
pub const PPI_CHG_CH22_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH22_Pos;
pub const PPI_CHG_CH22_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH22_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH21_Pos = @as(c_ulong, 21);
pub const PPI_CHG_CH21_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH21_Pos;
pub const PPI_CHG_CH21_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH21_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH20_Pos = @as(c_ulong, 20);
pub const PPI_CHG_CH20_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH20_Pos;
pub const PPI_CHG_CH20_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH20_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH19_Pos = @as(c_ulong, 19);
pub const PPI_CHG_CH19_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH19_Pos;
pub const PPI_CHG_CH19_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH19_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH18_Pos = @as(c_ulong, 18);
pub const PPI_CHG_CH18_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH18_Pos;
pub const PPI_CHG_CH18_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH18_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH17_Pos = @as(c_ulong, 17);
pub const PPI_CHG_CH17_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH17_Pos;
pub const PPI_CHG_CH17_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH17_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH16_Pos = @as(c_ulong, 16);
pub const PPI_CHG_CH16_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH16_Pos;
pub const PPI_CHG_CH16_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH16_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH15_Pos = @as(c_ulong, 15);
pub const PPI_CHG_CH15_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH15_Pos;
pub const PPI_CHG_CH15_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH15_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH14_Pos = @as(c_ulong, 14);
pub const PPI_CHG_CH14_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH14_Pos;
pub const PPI_CHG_CH14_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH14_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH13_Pos = @as(c_ulong, 13);
pub const PPI_CHG_CH13_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH13_Pos;
pub const PPI_CHG_CH13_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH13_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH12_Pos = @as(c_ulong, 12);
pub const PPI_CHG_CH12_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH12_Pos;
pub const PPI_CHG_CH12_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH12_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH11_Pos = @as(c_ulong, 11);
pub const PPI_CHG_CH11_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH11_Pos;
pub const PPI_CHG_CH11_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH11_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH10_Pos = @as(c_ulong, 10);
pub const PPI_CHG_CH10_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH10_Pos;
pub const PPI_CHG_CH10_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH10_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH9_Pos = @as(c_ulong, 9);
pub const PPI_CHG_CH9_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH9_Pos;
pub const PPI_CHG_CH9_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH9_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH8_Pos = @as(c_ulong, 8);
pub const PPI_CHG_CH8_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH8_Pos;
pub const PPI_CHG_CH8_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH8_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH7_Pos = @as(c_ulong, 7);
pub const PPI_CHG_CH7_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH7_Pos;
pub const PPI_CHG_CH7_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH7_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH6_Pos = @as(c_ulong, 6);
pub const PPI_CHG_CH6_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH6_Pos;
pub const PPI_CHG_CH6_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH6_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH5_Pos = @as(c_ulong, 5);
pub const PPI_CHG_CH5_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH5_Pos;
pub const PPI_CHG_CH5_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH5_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH4_Pos = @as(c_ulong, 4);
pub const PPI_CHG_CH4_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH4_Pos;
pub const PPI_CHG_CH4_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH4_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH3_Pos = @as(c_ulong, 3);
pub const PPI_CHG_CH3_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH3_Pos;
pub const PPI_CHG_CH3_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH3_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH2_Pos = @as(c_ulong, 2);
pub const PPI_CHG_CH2_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH2_Pos;
pub const PPI_CHG_CH2_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH2_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH1_Pos = @as(c_ulong, 1);
pub const PPI_CHG_CH1_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH1_Pos;
pub const PPI_CHG_CH1_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH1_Included = @as(c_ulong, 1);
pub const PPI_CHG_CH0_Pos = @as(c_ulong, 0);
pub const PPI_CHG_CH0_Msk = @as(c_ulong, 0x1) << PPI_CHG_CH0_Pos;
pub const PPI_CHG_CH0_Excluded = @as(c_ulong, 0);
pub const PPI_CHG_CH0_Included = @as(c_ulong, 1);
pub const PPI_FORK_TEP_TEP_Pos = @as(c_ulong, 0);
pub const PPI_FORK_TEP_TEP_Msk = @as(c_ulong, 0xFFFFFFFF) << PPI_FORK_TEP_TEP_Pos;
pub const PWM_TASKS_STOP_TASKS_STOP_Pos = @as(c_ulong, 0);
pub const PWM_TASKS_STOP_TASKS_STOP_Msk = @as(c_ulong, 0x1) << PWM_TASKS_STOP_TASKS_STOP_Pos;
pub const PWM_TASKS_STOP_TASKS_STOP_Trigger = @as(c_ulong, 1);
pub const PWM_TASKS_SEQSTART_TASKS_SEQSTART_Pos = @as(c_ulong, 0);
pub const PWM_TASKS_SEQSTART_TASKS_SEQSTART_Msk = @as(c_ulong, 0x1) << PWM_TASKS_SEQSTART_TASKS_SEQSTART_Pos;
pub const PWM_TASKS_SEQSTART_TASKS_SEQSTART_Trigger = @as(c_ulong, 1);
pub const PWM_TASKS_NEXTSTEP_TASKS_NEXTSTEP_Pos = @as(c_ulong, 0);
pub const PWM_TASKS_NEXTSTEP_TASKS_NEXTSTEP_Msk = @as(c_ulong, 0x1) << PWM_TASKS_NEXTSTEP_TASKS_NEXTSTEP_Pos;
pub const PWM_TASKS_NEXTSTEP_TASKS_NEXTSTEP_Trigger = @as(c_ulong, 1);
pub const PWM_EVENTS_STOPPED_EVENTS_STOPPED_Pos = @as(c_ulong, 0);
pub const PWM_EVENTS_STOPPED_EVENTS_STOPPED_Msk = @as(c_ulong, 0x1) << PWM_EVENTS_STOPPED_EVENTS_STOPPED_Pos;
pub const PWM_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated = @as(c_ulong, 0);
pub const PWM_EVENTS_STOPPED_EVENTS_STOPPED_Generated = @as(c_ulong, 1);
pub const PWM_EVENTS_SEQSTARTED_EVENTS_SEQSTARTED_Pos = @as(c_ulong, 0);
pub const PWM_EVENTS_SEQSTARTED_EVENTS_SEQSTARTED_Msk = @as(c_ulong, 0x1) << PWM_EVENTS_SEQSTARTED_EVENTS_SEQSTARTED_Pos;
pub const PWM_EVENTS_SEQSTARTED_EVENTS_SEQSTARTED_NotGenerated = @as(c_ulong, 0);
pub const PWM_EVENTS_SEQSTARTED_EVENTS_SEQSTARTED_Generated = @as(c_ulong, 1);
pub const PWM_EVENTS_SEQEND_EVENTS_SEQEND_Pos = @as(c_ulong, 0);
pub const PWM_EVENTS_SEQEND_EVENTS_SEQEND_Msk = @as(c_ulong, 0x1) << PWM_EVENTS_SEQEND_EVENTS_SEQEND_Pos;
pub const PWM_EVENTS_SEQEND_EVENTS_SEQEND_NotGenerated = @as(c_ulong, 0);
pub const PWM_EVENTS_SEQEND_EVENTS_SEQEND_Generated = @as(c_ulong, 1);
pub const PWM_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Pos = @as(c_ulong, 0);
pub const PWM_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Msk = @as(c_ulong, 0x1) << PWM_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Pos;
pub const PWM_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_NotGenerated = @as(c_ulong, 0);
pub const PWM_EVENTS_PWMPERIODEND_EVENTS_PWMPERIODEND_Generated = @as(c_ulong, 1);
pub const PWM_EVENTS_LOOPSDONE_EVENTS_LOOPSDONE_Pos = @as(c_ulong, 0);
pub const PWM_EVENTS_LOOPSDONE_EVENTS_LOOPSDONE_Msk = @as(c_ulong, 0x1) << PWM_EVENTS_LOOPSDONE_EVENTS_LOOPSDONE_Pos;
pub const PWM_EVENTS_LOOPSDONE_EVENTS_LOOPSDONE_NotGenerated = @as(c_ulong, 0);
pub const PWM_EVENTS_LOOPSDONE_EVENTS_LOOPSDONE_Generated = @as(c_ulong, 1);
pub const PWM_SHORTS_LOOPSDONE_STOP_Pos = @as(c_ulong, 4);
pub const PWM_SHORTS_LOOPSDONE_STOP_Msk = @as(c_ulong, 0x1) << PWM_SHORTS_LOOPSDONE_STOP_Pos;
pub const PWM_SHORTS_LOOPSDONE_STOP_Disabled = @as(c_ulong, 0);
pub const PWM_SHORTS_LOOPSDONE_STOP_Enabled = @as(c_ulong, 1);
pub const PWM_SHORTS_LOOPSDONE_SEQSTART1_Pos = @as(c_ulong, 3);
pub const PWM_SHORTS_LOOPSDONE_SEQSTART1_Msk = @as(c_ulong, 0x1) << PWM_SHORTS_LOOPSDONE_SEQSTART1_Pos;
pub const PWM_SHORTS_LOOPSDONE_SEQSTART1_Disabled = @as(c_ulong, 0);
pub const PWM_SHORTS_LOOPSDONE_SEQSTART1_Enabled = @as(c_ulong, 1);
pub const PWM_SHORTS_LOOPSDONE_SEQSTART0_Pos = @as(c_ulong, 2);
pub const PWM_SHORTS_LOOPSDONE_SEQSTART0_Msk = @as(c_ulong, 0x1) << PWM_SHORTS_LOOPSDONE_SEQSTART0_Pos;
pub const PWM_SHORTS_LOOPSDONE_SEQSTART0_Disabled = @as(c_ulong, 0);
pub const PWM_SHORTS_LOOPSDONE_SEQSTART0_Enabled = @as(c_ulong, 1);
pub const PWM_SHORTS_SEQEND1_STOP_Pos = @as(c_ulong, 1);
pub const PWM_SHORTS_SEQEND1_STOP_Msk = @as(c_ulong, 0x1) << PWM_SHORTS_SEQEND1_STOP_Pos;
pub const PWM_SHORTS_SEQEND1_STOP_Disabled = @as(c_ulong, 0);
pub const PWM_SHORTS_SEQEND1_STOP_Enabled = @as(c_ulong, 1);
pub const PWM_SHORTS_SEQEND0_STOP_Pos = @as(c_ulong, 0);
pub const PWM_SHORTS_SEQEND0_STOP_Msk = @as(c_ulong, 0x1) << PWM_SHORTS_SEQEND0_STOP_Pos;
pub const PWM_SHORTS_SEQEND0_STOP_Disabled = @as(c_ulong, 0);
pub const PWM_SHORTS_SEQEND0_STOP_Enabled = @as(c_ulong, 1);
pub const PWM_INTEN_LOOPSDONE_Pos = @as(c_ulong, 7);
pub const PWM_INTEN_LOOPSDONE_Msk = @as(c_ulong, 0x1) << PWM_INTEN_LOOPSDONE_Pos;
pub const PWM_INTEN_LOOPSDONE_Disabled = @as(c_ulong, 0);
pub const PWM_INTEN_LOOPSDONE_Enabled = @as(c_ulong, 1);
pub const PWM_INTEN_PWMPERIODEND_Pos = @as(c_ulong, 6);
pub const PWM_INTEN_PWMPERIODEND_Msk = @as(c_ulong, 0x1) << PWM_INTEN_PWMPERIODEND_Pos;
pub const PWM_INTEN_PWMPERIODEND_Disabled = @as(c_ulong, 0);
pub const PWM_INTEN_PWMPERIODEND_Enabled = @as(c_ulong, 1);
pub const PWM_INTEN_SEQEND1_Pos = @as(c_ulong, 5);
pub const PWM_INTEN_SEQEND1_Msk = @as(c_ulong, 0x1) << PWM_INTEN_SEQEND1_Pos;
pub const PWM_INTEN_SEQEND1_Disabled = @as(c_ulong, 0);
pub const PWM_INTEN_SEQEND1_Enabled = @as(c_ulong, 1);
pub const PWM_INTEN_SEQEND0_Pos = @as(c_ulong, 4);
pub const PWM_INTEN_SEQEND0_Msk = @as(c_ulong, 0x1) << PWM_INTEN_SEQEND0_Pos;
pub const PWM_INTEN_SEQEND0_Disabled = @as(c_ulong, 0);
pub const PWM_INTEN_SEQEND0_Enabled = @as(c_ulong, 1);
pub const PWM_INTEN_SEQSTARTED1_Pos = @as(c_ulong, 3);
pub const PWM_INTEN_SEQSTARTED1_Msk = @as(c_ulong, 0x1) << PWM_INTEN_SEQSTARTED1_Pos;
pub const PWM_INTEN_SEQSTARTED1_Disabled = @as(c_ulong, 0);
pub const PWM_INTEN_SEQSTARTED1_Enabled = @as(c_ulong, 1);
pub const PWM_INTEN_SEQSTARTED0_Pos = @as(c_ulong, 2);
pub const PWM_INTEN_SEQSTARTED0_Msk = @as(c_ulong, 0x1) << PWM_INTEN_SEQSTARTED0_Pos;
pub const PWM_INTEN_SEQSTARTED0_Disabled = @as(c_ulong, 0);
pub const PWM_INTEN_SEQSTARTED0_Enabled = @as(c_ulong, 1);
pub const PWM_INTEN_STOPPED_Pos = @as(c_ulong, 1);
pub const PWM_INTEN_STOPPED_Msk = @as(c_ulong, 0x1) << PWM_INTEN_STOPPED_Pos;
pub const PWM_INTEN_STOPPED_Disabled = @as(c_ulong, 0);
pub const PWM_INTEN_STOPPED_Enabled = @as(c_ulong, 1);
pub const PWM_INTENSET_LOOPSDONE_Pos = @as(c_ulong, 7);
pub const PWM_INTENSET_LOOPSDONE_Msk = @as(c_ulong, 0x1) << PWM_INTENSET_LOOPSDONE_Pos;
pub const PWM_INTENSET_LOOPSDONE_Disabled = @as(c_ulong, 0);
pub const PWM_INTENSET_LOOPSDONE_Enabled = @as(c_ulong, 1);
pub const PWM_INTENSET_LOOPSDONE_Set = @as(c_ulong, 1);
pub const PWM_INTENSET_PWMPERIODEND_Pos = @as(c_ulong, 6);
pub const PWM_INTENSET_PWMPERIODEND_Msk = @as(c_ulong, 0x1) << PWM_INTENSET_PWMPERIODEND_Pos;
pub const PWM_INTENSET_PWMPERIODEND_Disabled = @as(c_ulong, 0);
pub const PWM_INTENSET_PWMPERIODEND_Enabled = @as(c_ulong, 1);
pub const PWM_INTENSET_PWMPERIODEND_Set = @as(c_ulong, 1);
pub const PWM_INTENSET_SEQEND1_Pos = @as(c_ulong, 5);
pub const PWM_INTENSET_SEQEND1_Msk = @as(c_ulong, 0x1) << PWM_INTENSET_SEQEND1_Pos;
pub const PWM_INTENSET_SEQEND1_Disabled = @as(c_ulong, 0);
pub const PWM_INTENSET_SEQEND1_Enabled = @as(c_ulong, 1);
pub const PWM_INTENSET_SEQEND1_Set = @as(c_ulong, 1);
pub const PWM_INTENSET_SEQEND0_Pos = @as(c_ulong, 4);
pub const PWM_INTENSET_SEQEND0_Msk = @as(c_ulong, 0x1) << PWM_INTENSET_SEQEND0_Pos;
pub const PWM_INTENSET_SEQEND0_Disabled = @as(c_ulong, 0);
pub const PWM_INTENSET_SEQEND0_Enabled = @as(c_ulong, 1);
pub const PWM_INTENSET_SEQEND0_Set = @as(c_ulong, 1);
pub const PWM_INTENSET_SEQSTARTED1_Pos = @as(c_ulong, 3);
pub const PWM_INTENSET_SEQSTARTED1_Msk = @as(c_ulong, 0x1) << PWM_INTENSET_SEQSTARTED1_Pos;
pub const PWM_INTENSET_SEQSTARTED1_Disabled = @as(c_ulong, 0);
pub const PWM_INTENSET_SEQSTARTED1_Enabled = @as(c_ulong, 1);
pub const PWM_INTENSET_SEQSTARTED1_Set = @as(c_ulong, 1);
pub const PWM_INTENSET_SEQSTARTED0_Pos = @as(c_ulong, 2);
pub const PWM_INTENSET_SEQSTARTED0_Msk = @as(c_ulong, 0x1) << PWM_INTENSET_SEQSTARTED0_Pos;
pub const PWM_INTENSET_SEQSTARTED0_Disabled = @as(c_ulong, 0);
pub const PWM_INTENSET_SEQSTARTED0_Enabled = @as(c_ulong, 1);
pub const PWM_INTENSET_SEQSTARTED0_Set = @as(c_ulong, 1);
pub const PWM_INTENSET_STOPPED_Pos = @as(c_ulong, 1);
pub const PWM_INTENSET_STOPPED_Msk = @as(c_ulong, 0x1) << PWM_INTENSET_STOPPED_Pos;
pub const PWM_INTENSET_STOPPED_Disabled = @as(c_ulong, 0);
pub const PWM_INTENSET_STOPPED_Enabled = @as(c_ulong, 1);
pub const PWM_INTENSET_STOPPED_Set = @as(c_ulong, 1);
pub const PWM_INTENCLR_LOOPSDONE_Pos = @as(c_ulong, 7);
pub const PWM_INTENCLR_LOOPSDONE_Msk = @as(c_ulong, 0x1) << PWM_INTENCLR_LOOPSDONE_Pos;
pub const PWM_INTENCLR_LOOPSDONE_Disabled = @as(c_ulong, 0);
pub const PWM_INTENCLR_LOOPSDONE_Enabled = @as(c_ulong, 1);
pub const PWM_INTENCLR_LOOPSDONE_Clear = @as(c_ulong, 1);
pub const PWM_INTENCLR_PWMPERIODEND_Pos = @as(c_ulong, 6);
pub const PWM_INTENCLR_PWMPERIODEND_Msk = @as(c_ulong, 0x1) << PWM_INTENCLR_PWMPERIODEND_Pos;
pub const PWM_INTENCLR_PWMPERIODEND_Disabled = @as(c_ulong, 0);
pub const PWM_INTENCLR_PWMPERIODEND_Enabled = @as(c_ulong, 1);
pub const PWM_INTENCLR_PWMPERIODEND_Clear = @as(c_ulong, 1);
pub const PWM_INTENCLR_SEQEND1_Pos = @as(c_ulong, 5);
pub const PWM_INTENCLR_SEQEND1_Msk = @as(c_ulong, 0x1) << PWM_INTENCLR_SEQEND1_Pos;
pub const PWM_INTENCLR_SEQEND1_Disabled = @as(c_ulong, 0);
pub const PWM_INTENCLR_SEQEND1_Enabled = @as(c_ulong, 1);
pub const PWM_INTENCLR_SEQEND1_Clear = @as(c_ulong, 1);
pub const PWM_INTENCLR_SEQEND0_Pos = @as(c_ulong, 4);
pub const PWM_INTENCLR_SEQEND0_Msk = @as(c_ulong, 0x1) << PWM_INTENCLR_SEQEND0_Pos;
pub const PWM_INTENCLR_SEQEND0_Disabled = @as(c_ulong, 0);
pub const PWM_INTENCLR_SEQEND0_Enabled = @as(c_ulong, 1);
pub const PWM_INTENCLR_SEQEND0_Clear = @as(c_ulong, 1);
pub const PWM_INTENCLR_SEQSTARTED1_Pos = @as(c_ulong, 3);
pub const PWM_INTENCLR_SEQSTARTED1_Msk = @as(c_ulong, 0x1) << PWM_INTENCLR_SEQSTARTED1_Pos;
pub const PWM_INTENCLR_SEQSTARTED1_Disabled = @as(c_ulong, 0);
pub const PWM_INTENCLR_SEQSTARTED1_Enabled = @as(c_ulong, 1);
pub const PWM_INTENCLR_SEQSTARTED1_Clear = @as(c_ulong, 1);
pub const PWM_INTENCLR_SEQSTARTED0_Pos = @as(c_ulong, 2);
pub const PWM_INTENCLR_SEQSTARTED0_Msk = @as(c_ulong, 0x1) << PWM_INTENCLR_SEQSTARTED0_Pos;
pub const PWM_INTENCLR_SEQSTARTED0_Disabled = @as(c_ulong, 0);
pub const PWM_INTENCLR_SEQSTARTED0_Enabled = @as(c_ulong, 1);
pub const PWM_INTENCLR_SEQSTARTED0_Clear = @as(c_ulong, 1);
pub const PWM_INTENCLR_STOPPED_Pos = @as(c_ulong, 1);
pub const PWM_INTENCLR_STOPPED_Msk = @as(c_ulong, 0x1) << PWM_INTENCLR_STOPPED_Pos;
pub const PWM_INTENCLR_STOPPED_Disabled = @as(c_ulong, 0);
pub const PWM_INTENCLR_STOPPED_Enabled = @as(c_ulong, 1);
pub const PWM_INTENCLR_STOPPED_Clear = @as(c_ulong, 1);
pub const PWM_ENABLE_ENABLE_Pos = @as(c_ulong, 0);
pub const PWM_ENABLE_ENABLE_Msk = @as(c_ulong, 0x1) << PWM_ENABLE_ENABLE_Pos;
pub const PWM_ENABLE_ENABLE_Disabled = @as(c_ulong, 0);
pub const PWM_ENABLE_ENABLE_Enabled = @as(c_ulong, 1);
pub const PWM_MODE_UPDOWN_Pos = @as(c_ulong, 0);
pub const PWM_MODE_UPDOWN_Msk = @as(c_ulong, 0x1) << PWM_MODE_UPDOWN_Pos;
pub const PWM_MODE_UPDOWN_Up = @as(c_ulong, 0);
pub const PWM_MODE_UPDOWN_UpAndDown = @as(c_ulong, 1);
pub const PWM_COUNTERTOP_COUNTERTOP_Pos = @as(c_ulong, 0);
pub const PWM_COUNTERTOP_COUNTERTOP_Msk = @as(c_ulong, 0x7FFF) << PWM_COUNTERTOP_COUNTERTOP_Pos;
pub const PWM_PRESCALER_PRESCALER_Pos = @as(c_ulong, 0);
pub const PWM_PRESCALER_PRESCALER_Msk = @as(c_ulong, 0x7) << PWM_PRESCALER_PRESCALER_Pos;
pub const PWM_PRESCALER_PRESCALER_DIV_1 = @as(c_ulong, 0);
pub const PWM_PRESCALER_PRESCALER_DIV_2 = @as(c_ulong, 1);
pub const PWM_PRESCALER_PRESCALER_DIV_4 = @as(c_ulong, 2);
pub const PWM_PRESCALER_PRESCALER_DIV_8 = @as(c_ulong, 3);
pub const PWM_PRESCALER_PRESCALER_DIV_16 = @as(c_ulong, 4);
pub const PWM_PRESCALER_PRESCALER_DIV_32 = @as(c_ulong, 5);
pub const PWM_PRESCALER_PRESCALER_DIV_64 = @as(c_ulong, 6);
pub const PWM_PRESCALER_PRESCALER_DIV_128 = @as(c_ulong, 7);
pub const PWM_DECODER_MODE_Pos = @as(c_ulong, 8);
pub const PWM_DECODER_MODE_Msk = @as(c_ulong, 0x1) << PWM_DECODER_MODE_Pos;
pub const PWM_DECODER_MODE_RefreshCount = @as(c_ulong, 0);
pub const PWM_DECODER_MODE_NextStep = @as(c_ulong, 1);
pub const PWM_DECODER_LOAD_Pos = @as(c_ulong, 0);
pub const PWM_DECODER_LOAD_Msk = @as(c_ulong, 0x3) << PWM_DECODER_LOAD_Pos;
pub const PWM_DECODER_LOAD_Common = @as(c_ulong, 0);
pub const PWM_DECODER_LOAD_Grouped = @as(c_ulong, 1);
pub const PWM_DECODER_LOAD_Individual = @as(c_ulong, 2);
pub const PWM_DECODER_LOAD_WaveForm = @as(c_ulong, 3);
pub const PWM_LOOP_CNT_Pos = @as(c_ulong, 0);
pub const PWM_LOOP_CNT_Msk = @as(c_ulong, 0xFFFF) << PWM_LOOP_CNT_Pos;
pub const PWM_LOOP_CNT_Disabled = @as(c_ulong, 0);
pub const PWM_SEQ_PTR_PTR_Pos = @as(c_ulong, 0);
pub const PWM_SEQ_PTR_PTR_Msk = @as(c_ulong, 0xFFFFFFFF) << PWM_SEQ_PTR_PTR_Pos;
pub const PWM_SEQ_CNT_CNT_Pos = @as(c_ulong, 0);
pub const PWM_SEQ_CNT_CNT_Msk = @as(c_ulong, 0x7FFF) << PWM_SEQ_CNT_CNT_Pos;
pub const PWM_SEQ_CNT_CNT_Disabled = @as(c_ulong, 0);
pub const PWM_SEQ_REFRESH_CNT_Pos = @as(c_ulong, 0);
pub const PWM_SEQ_REFRESH_CNT_Msk = @as(c_ulong, 0xFFFFFF) << PWM_SEQ_REFRESH_CNT_Pos;
pub const PWM_SEQ_REFRESH_CNT_Continuous = @as(c_ulong, 0);
pub const PWM_SEQ_ENDDELAY_CNT_Pos = @as(c_ulong, 0);
pub const PWM_SEQ_ENDDELAY_CNT_Msk = @as(c_ulong, 0xFFFFFF) << PWM_SEQ_ENDDELAY_CNT_Pos;
pub const PWM_PSEL_OUT_CONNECT_Pos = @as(c_ulong, 31);
pub const PWM_PSEL_OUT_CONNECT_Msk = @as(c_ulong, 0x1) << PWM_PSEL_OUT_CONNECT_Pos;
pub const PWM_PSEL_OUT_CONNECT_Connected = @as(c_ulong, 0);
pub const PWM_PSEL_OUT_CONNECT_Disconnected = @as(c_ulong, 1);
pub const PWM_PSEL_OUT_PORT_Pos = @as(c_ulong, 5);
pub const PWM_PSEL_OUT_PORT_Msk = @as(c_ulong, 0x1) << PWM_PSEL_OUT_PORT_Pos;
pub const PWM_PSEL_OUT_PIN_Pos = @as(c_ulong, 0);
pub const PWM_PSEL_OUT_PIN_Msk = @as(c_ulong, 0x1F) << PWM_PSEL_OUT_PIN_Pos;
pub const QDEC_TASKS_START_TASKS_START_Pos = @as(c_ulong, 0);
pub const QDEC_TASKS_START_TASKS_START_Msk = @as(c_ulong, 0x1) << QDEC_TASKS_START_TASKS_START_Pos;
pub const QDEC_TASKS_START_TASKS_START_Trigger = @as(c_ulong, 1);
pub const QDEC_TASKS_STOP_TASKS_STOP_Pos = @as(c_ulong, 0);
pub const QDEC_TASKS_STOP_TASKS_STOP_Msk = @as(c_ulong, 0x1) << QDEC_TASKS_STOP_TASKS_STOP_Pos;
pub const QDEC_TASKS_STOP_TASKS_STOP_Trigger = @as(c_ulong, 1);
pub const QDEC_TASKS_READCLRACC_TASKS_READCLRACC_Pos = @as(c_ulong, 0);
pub const QDEC_TASKS_READCLRACC_TASKS_READCLRACC_Msk = @as(c_ulong, 0x1) << QDEC_TASKS_READCLRACC_TASKS_READCLRACC_Pos;
pub const QDEC_TASKS_READCLRACC_TASKS_READCLRACC_Trigger = @as(c_ulong, 1);
pub const QDEC_TASKS_RDCLRACC_TASKS_RDCLRACC_Pos = @as(c_ulong, 0);
pub const QDEC_TASKS_RDCLRACC_TASKS_RDCLRACC_Msk = @as(c_ulong, 0x1) << QDEC_TASKS_RDCLRACC_TASKS_RDCLRACC_Pos;
pub const QDEC_TASKS_RDCLRACC_TASKS_RDCLRACC_Trigger = @as(c_ulong, 1);
pub const QDEC_TASKS_RDCLRDBL_TASKS_RDCLRDBL_Pos = @as(c_ulong, 0);
pub const QDEC_TASKS_RDCLRDBL_TASKS_RDCLRDBL_Msk = @as(c_ulong, 0x1) << QDEC_TASKS_RDCLRDBL_TASKS_RDCLRDBL_Pos;
pub const QDEC_TASKS_RDCLRDBL_TASKS_RDCLRDBL_Trigger = @as(c_ulong, 1);
pub const QDEC_EVENTS_SAMPLERDY_EVENTS_SAMPLERDY_Pos = @as(c_ulong, 0);
pub const QDEC_EVENTS_SAMPLERDY_EVENTS_SAMPLERDY_Msk = @as(c_ulong, 0x1) << QDEC_EVENTS_SAMPLERDY_EVENTS_SAMPLERDY_Pos;
pub const QDEC_EVENTS_SAMPLERDY_EVENTS_SAMPLERDY_NotGenerated = @as(c_ulong, 0);
pub const QDEC_EVENTS_SAMPLERDY_EVENTS_SAMPLERDY_Generated = @as(c_ulong, 1);
pub const QDEC_EVENTS_REPORTRDY_EVENTS_REPORTRDY_Pos = @as(c_ulong, 0);
pub const QDEC_EVENTS_REPORTRDY_EVENTS_REPORTRDY_Msk = @as(c_ulong, 0x1) << QDEC_EVENTS_REPORTRDY_EVENTS_REPORTRDY_Pos;
pub const QDEC_EVENTS_REPORTRDY_EVENTS_REPORTRDY_NotGenerated = @as(c_ulong, 0);
pub const QDEC_EVENTS_REPORTRDY_EVENTS_REPORTRDY_Generated = @as(c_ulong, 1);
pub const QDEC_EVENTS_ACCOF_EVENTS_ACCOF_Pos = @as(c_ulong, 0);
pub const QDEC_EVENTS_ACCOF_EVENTS_ACCOF_Msk = @as(c_ulong, 0x1) << QDEC_EVENTS_ACCOF_EVENTS_ACCOF_Pos;
pub const QDEC_EVENTS_ACCOF_EVENTS_ACCOF_NotGenerated = @as(c_ulong, 0);
pub const QDEC_EVENTS_ACCOF_EVENTS_ACCOF_Generated = @as(c_ulong, 1);
pub const QDEC_EVENTS_DBLRDY_EVENTS_DBLRDY_Pos = @as(c_ulong, 0);
pub const QDEC_EVENTS_DBLRDY_EVENTS_DBLRDY_Msk = @as(c_ulong, 0x1) << QDEC_EVENTS_DBLRDY_EVENTS_DBLRDY_Pos;
pub const QDEC_EVENTS_DBLRDY_EVENTS_DBLRDY_NotGenerated = @as(c_ulong, 0);
pub const QDEC_EVENTS_DBLRDY_EVENTS_DBLRDY_Generated = @as(c_ulong, 1);
pub const QDEC_EVENTS_STOPPED_EVENTS_STOPPED_Pos = @as(c_ulong, 0);
pub const QDEC_EVENTS_STOPPED_EVENTS_STOPPED_Msk = @as(c_ulong, 0x1) << QDEC_EVENTS_STOPPED_EVENTS_STOPPED_Pos;
pub const QDEC_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated = @as(c_ulong, 0);
pub const QDEC_EVENTS_STOPPED_EVENTS_STOPPED_Generated = @as(c_ulong, 1);
pub const QDEC_SHORTS_SAMPLERDY_READCLRACC_Pos = @as(c_ulong, 6);
pub const QDEC_SHORTS_SAMPLERDY_READCLRACC_Msk = @as(c_ulong, 0x1) << QDEC_SHORTS_SAMPLERDY_READCLRACC_Pos;
pub const QDEC_SHORTS_SAMPLERDY_READCLRACC_Disabled = @as(c_ulong, 0);
pub const QDEC_SHORTS_SAMPLERDY_READCLRACC_Enabled = @as(c_ulong, 1);
pub const QDEC_SHORTS_DBLRDY_STOP_Pos = @as(c_ulong, 5);
pub const QDEC_SHORTS_DBLRDY_STOP_Msk = @as(c_ulong, 0x1) << QDEC_SHORTS_DBLRDY_STOP_Pos;
pub const QDEC_SHORTS_DBLRDY_STOP_Disabled = @as(c_ulong, 0);
pub const QDEC_SHORTS_DBLRDY_STOP_Enabled = @as(c_ulong, 1);
pub const QDEC_SHORTS_DBLRDY_RDCLRDBL_Pos = @as(c_ulong, 4);
pub const QDEC_SHORTS_DBLRDY_RDCLRDBL_Msk = @as(c_ulong, 0x1) << QDEC_SHORTS_DBLRDY_RDCLRDBL_Pos;
pub const QDEC_SHORTS_DBLRDY_RDCLRDBL_Disabled = @as(c_ulong, 0);
pub const QDEC_SHORTS_DBLRDY_RDCLRDBL_Enabled = @as(c_ulong, 1);
pub const QDEC_SHORTS_REPORTRDY_STOP_Pos = @as(c_ulong, 3);
pub const QDEC_SHORTS_REPORTRDY_STOP_Msk = @as(c_ulong, 0x1) << QDEC_SHORTS_REPORTRDY_STOP_Pos;
pub const QDEC_SHORTS_REPORTRDY_STOP_Disabled = @as(c_ulong, 0);
pub const QDEC_SHORTS_REPORTRDY_STOP_Enabled = @as(c_ulong, 1);
pub const QDEC_SHORTS_REPORTRDY_RDCLRACC_Pos = @as(c_ulong, 2);
pub const QDEC_SHORTS_REPORTRDY_RDCLRACC_Msk = @as(c_ulong, 0x1) << QDEC_SHORTS_REPORTRDY_RDCLRACC_Pos;
pub const QDEC_SHORTS_REPORTRDY_RDCLRACC_Disabled = @as(c_ulong, 0);
pub const QDEC_SHORTS_REPORTRDY_RDCLRACC_Enabled = @as(c_ulong, 1);
pub const QDEC_SHORTS_SAMPLERDY_STOP_Pos = @as(c_ulong, 1);
pub const QDEC_SHORTS_SAMPLERDY_STOP_Msk = @as(c_ulong, 0x1) << QDEC_SHORTS_SAMPLERDY_STOP_Pos;
pub const QDEC_SHORTS_SAMPLERDY_STOP_Disabled = @as(c_ulong, 0);
pub const QDEC_SHORTS_SAMPLERDY_STOP_Enabled = @as(c_ulong, 1);
pub const QDEC_SHORTS_REPORTRDY_READCLRACC_Pos = @as(c_ulong, 0);
pub const QDEC_SHORTS_REPORTRDY_READCLRACC_Msk = @as(c_ulong, 0x1) << QDEC_SHORTS_REPORTRDY_READCLRACC_Pos;
pub const QDEC_SHORTS_REPORTRDY_READCLRACC_Disabled = @as(c_ulong, 0);
pub const QDEC_SHORTS_REPORTRDY_READCLRACC_Enabled = @as(c_ulong, 1);
pub const QDEC_INTENSET_STOPPED_Pos = @as(c_ulong, 4);
pub const QDEC_INTENSET_STOPPED_Msk = @as(c_ulong, 0x1) << QDEC_INTENSET_STOPPED_Pos;
pub const QDEC_INTENSET_STOPPED_Disabled = @as(c_ulong, 0);
pub const QDEC_INTENSET_STOPPED_Enabled = @as(c_ulong, 1);
pub const QDEC_INTENSET_STOPPED_Set = @as(c_ulong, 1);
pub const QDEC_INTENSET_DBLRDY_Pos = @as(c_ulong, 3);
pub const QDEC_INTENSET_DBLRDY_Msk = @as(c_ulong, 0x1) << QDEC_INTENSET_DBLRDY_Pos;
pub const QDEC_INTENSET_DBLRDY_Disabled = @as(c_ulong, 0);
pub const QDEC_INTENSET_DBLRDY_Enabled = @as(c_ulong, 1);
pub const QDEC_INTENSET_DBLRDY_Set = @as(c_ulong, 1);
pub const QDEC_INTENSET_ACCOF_Pos = @as(c_ulong, 2);
pub const QDEC_INTENSET_ACCOF_Msk = @as(c_ulong, 0x1) << QDEC_INTENSET_ACCOF_Pos;
pub const QDEC_INTENSET_ACCOF_Disabled = @as(c_ulong, 0);
pub const QDEC_INTENSET_ACCOF_Enabled = @as(c_ulong, 1);
pub const QDEC_INTENSET_ACCOF_Set = @as(c_ulong, 1);
pub const QDEC_INTENSET_REPORTRDY_Pos = @as(c_ulong, 1);
pub const QDEC_INTENSET_REPORTRDY_Msk = @as(c_ulong, 0x1) << QDEC_INTENSET_REPORTRDY_Pos;
pub const QDEC_INTENSET_REPORTRDY_Disabled = @as(c_ulong, 0);
pub const QDEC_INTENSET_REPORTRDY_Enabled = @as(c_ulong, 1);
pub const QDEC_INTENSET_REPORTRDY_Set = @as(c_ulong, 1);
pub const QDEC_INTENSET_SAMPLERDY_Pos = @as(c_ulong, 0);
pub const QDEC_INTENSET_SAMPLERDY_Msk = @as(c_ulong, 0x1) << QDEC_INTENSET_SAMPLERDY_Pos;
pub const QDEC_INTENSET_SAMPLERDY_Disabled = @as(c_ulong, 0);
pub const QDEC_INTENSET_SAMPLERDY_Enabled = @as(c_ulong, 1);
pub const QDEC_INTENSET_SAMPLERDY_Set = @as(c_ulong, 1);
pub const QDEC_INTENCLR_STOPPED_Pos = @as(c_ulong, 4);
pub const QDEC_INTENCLR_STOPPED_Msk = @as(c_ulong, 0x1) << QDEC_INTENCLR_STOPPED_Pos;
pub const QDEC_INTENCLR_STOPPED_Disabled = @as(c_ulong, 0);
pub const QDEC_INTENCLR_STOPPED_Enabled = @as(c_ulong, 1);
pub const QDEC_INTENCLR_STOPPED_Clear = @as(c_ulong, 1);
pub const QDEC_INTENCLR_DBLRDY_Pos = @as(c_ulong, 3);
pub const QDEC_INTENCLR_DBLRDY_Msk = @as(c_ulong, 0x1) << QDEC_INTENCLR_DBLRDY_Pos;
pub const QDEC_INTENCLR_DBLRDY_Disabled = @as(c_ulong, 0);
pub const QDEC_INTENCLR_DBLRDY_Enabled = @as(c_ulong, 1);
pub const QDEC_INTENCLR_DBLRDY_Clear = @as(c_ulong, 1);
pub const QDEC_INTENCLR_ACCOF_Pos = @as(c_ulong, 2);
pub const QDEC_INTENCLR_ACCOF_Msk = @as(c_ulong, 0x1) << QDEC_INTENCLR_ACCOF_Pos;
pub const QDEC_INTENCLR_ACCOF_Disabled = @as(c_ulong, 0);
pub const QDEC_INTENCLR_ACCOF_Enabled = @as(c_ulong, 1);
pub const QDEC_INTENCLR_ACCOF_Clear = @as(c_ulong, 1);
pub const QDEC_INTENCLR_REPORTRDY_Pos = @as(c_ulong, 1);
pub const QDEC_INTENCLR_REPORTRDY_Msk = @as(c_ulong, 0x1) << QDEC_INTENCLR_REPORTRDY_Pos;
pub const QDEC_INTENCLR_REPORTRDY_Disabled = @as(c_ulong, 0);
pub const QDEC_INTENCLR_REPORTRDY_Enabled = @as(c_ulong, 1);
pub const QDEC_INTENCLR_REPORTRDY_Clear = @as(c_ulong, 1);
pub const QDEC_INTENCLR_SAMPLERDY_Pos = @as(c_ulong, 0);
pub const QDEC_INTENCLR_SAMPLERDY_Msk = @as(c_ulong, 0x1) << QDEC_INTENCLR_SAMPLERDY_Pos;
pub const QDEC_INTENCLR_SAMPLERDY_Disabled = @as(c_ulong, 0);
pub const QDEC_INTENCLR_SAMPLERDY_Enabled = @as(c_ulong, 1);
pub const QDEC_INTENCLR_SAMPLERDY_Clear = @as(c_ulong, 1);
pub const QDEC_ENABLE_ENABLE_Pos = @as(c_ulong, 0);
pub const QDEC_ENABLE_ENABLE_Msk = @as(c_ulong, 0x1) << QDEC_ENABLE_ENABLE_Pos;
pub const QDEC_ENABLE_ENABLE_Disabled = @as(c_ulong, 0);
pub const QDEC_ENABLE_ENABLE_Enabled = @as(c_ulong, 1);
pub const QDEC_LEDPOL_LEDPOL_Pos = @as(c_ulong, 0);
pub const QDEC_LEDPOL_LEDPOL_Msk = @as(c_ulong, 0x1) << QDEC_LEDPOL_LEDPOL_Pos;
pub const QDEC_LEDPOL_LEDPOL_ActiveLow = @as(c_ulong, 0);
pub const QDEC_LEDPOL_LEDPOL_ActiveHigh = @as(c_ulong, 1);
pub const QDEC_SAMPLEPER_SAMPLEPER_Pos = @as(c_ulong, 0);
pub const QDEC_SAMPLEPER_SAMPLEPER_Msk = @as(c_ulong, 0xF) << QDEC_SAMPLEPER_SAMPLEPER_Pos;
pub const QDEC_SAMPLEPER_SAMPLEPER_128us = @as(c_ulong, 0);
pub const QDEC_SAMPLEPER_SAMPLEPER_256us = @as(c_ulong, 1);
pub const QDEC_SAMPLEPER_SAMPLEPER_512us = @as(c_ulong, 2);
pub const QDEC_SAMPLEPER_SAMPLEPER_1024us = @as(c_ulong, 3);
pub const QDEC_SAMPLEPER_SAMPLEPER_2048us = @as(c_ulong, 4);
pub const QDEC_SAMPLEPER_SAMPLEPER_4096us = @as(c_ulong, 5);
pub const QDEC_SAMPLEPER_SAMPLEPER_8192us = @as(c_ulong, 6);
pub const QDEC_SAMPLEPER_SAMPLEPER_16384us = @as(c_ulong, 7);
pub const QDEC_SAMPLEPER_SAMPLEPER_32ms = @as(c_ulong, 8);
pub const QDEC_SAMPLEPER_SAMPLEPER_65ms = @as(c_ulong, 9);
pub const QDEC_SAMPLEPER_SAMPLEPER_131ms = @as(c_ulong, 10);
pub const QDEC_SAMPLE_SAMPLE_Pos = @as(c_ulong, 0);
pub const QDEC_SAMPLE_SAMPLE_Msk = @as(c_ulong, 0xFFFFFFFF) << QDEC_SAMPLE_SAMPLE_Pos;
pub const QDEC_REPORTPER_REPORTPER_Pos = @as(c_ulong, 0);
pub const QDEC_REPORTPER_REPORTPER_Msk = @as(c_ulong, 0xF) << QDEC_REPORTPER_REPORTPER_Pos;
pub const QDEC_REPORTPER_REPORTPER_10Smpl = @as(c_ulong, 0);
pub const QDEC_REPORTPER_REPORTPER_40Smpl = @as(c_ulong, 1);
pub const QDEC_REPORTPER_REPORTPER_80Smpl = @as(c_ulong, 2);
pub const QDEC_REPORTPER_REPORTPER_120Smpl = @as(c_ulong, 3);
pub const QDEC_REPORTPER_REPORTPER_160Smpl = @as(c_ulong, 4);
pub const QDEC_REPORTPER_REPORTPER_200Smpl = @as(c_ulong, 5);
pub const QDEC_REPORTPER_REPORTPER_240Smpl = @as(c_ulong, 6);
pub const QDEC_REPORTPER_REPORTPER_280Smpl = @as(c_ulong, 7);
pub const QDEC_REPORTPER_REPORTPER_1Smpl = @as(c_ulong, 8);
pub const QDEC_ACC_ACC_Pos = @as(c_ulong, 0);
pub const QDEC_ACC_ACC_Msk = @as(c_ulong, 0xFFFFFFFF) << QDEC_ACC_ACC_Pos;
pub const QDEC_ACCREAD_ACCREAD_Pos = @as(c_ulong, 0);
pub const QDEC_ACCREAD_ACCREAD_Msk = @as(c_ulong, 0xFFFFFFFF) << QDEC_ACCREAD_ACCREAD_Pos;
pub const QDEC_PSEL_LED_CONNECT_Pos = @as(c_ulong, 31);
pub const QDEC_PSEL_LED_CONNECT_Msk = @as(c_ulong, 0x1) << QDEC_PSEL_LED_CONNECT_Pos;
pub const QDEC_PSEL_LED_CONNECT_Connected = @as(c_ulong, 0);
pub const QDEC_PSEL_LED_CONNECT_Disconnected = @as(c_ulong, 1);
pub const QDEC_PSEL_LED_PORT_Pos = @as(c_ulong, 5);
pub const QDEC_PSEL_LED_PORT_Msk = @as(c_ulong, 0x1) << QDEC_PSEL_LED_PORT_Pos;
pub const QDEC_PSEL_LED_PIN_Pos = @as(c_ulong, 0);
pub const QDEC_PSEL_LED_PIN_Msk = @as(c_ulong, 0x1F) << QDEC_PSEL_LED_PIN_Pos;
pub const QDEC_PSEL_A_CONNECT_Pos = @as(c_ulong, 31);
pub const QDEC_PSEL_A_CONNECT_Msk = @as(c_ulong, 0x1) << QDEC_PSEL_A_CONNECT_Pos;
pub const QDEC_PSEL_A_CONNECT_Connected = @as(c_ulong, 0);
pub const QDEC_PSEL_A_CONNECT_Disconnected = @as(c_ulong, 1);
pub const QDEC_PSEL_A_PORT_Pos = @as(c_ulong, 5);
pub const QDEC_PSEL_A_PORT_Msk = @as(c_ulong, 0x1) << QDEC_PSEL_A_PORT_Pos;
pub const QDEC_PSEL_A_PIN_Pos = @as(c_ulong, 0);
pub const QDEC_PSEL_A_PIN_Msk = @as(c_ulong, 0x1F) << QDEC_PSEL_A_PIN_Pos;
pub const QDEC_PSEL_B_CONNECT_Pos = @as(c_ulong, 31);
pub const QDEC_PSEL_B_CONNECT_Msk = @as(c_ulong, 0x1) << QDEC_PSEL_B_CONNECT_Pos;
pub const QDEC_PSEL_B_CONNECT_Connected = @as(c_ulong, 0);
pub const QDEC_PSEL_B_CONNECT_Disconnected = @as(c_ulong, 1);
pub const QDEC_PSEL_B_PORT_Pos = @as(c_ulong, 5);
pub const QDEC_PSEL_B_PORT_Msk = @as(c_ulong, 0x1) << QDEC_PSEL_B_PORT_Pos;
pub const QDEC_PSEL_B_PIN_Pos = @as(c_ulong, 0);
pub const QDEC_PSEL_B_PIN_Msk = @as(c_ulong, 0x1F) << QDEC_PSEL_B_PIN_Pos;
pub const QDEC_DBFEN_DBFEN_Pos = @as(c_ulong, 0);
pub const QDEC_DBFEN_DBFEN_Msk = @as(c_ulong, 0x1) << QDEC_DBFEN_DBFEN_Pos;
pub const QDEC_DBFEN_DBFEN_Disabled = @as(c_ulong, 0);
pub const QDEC_DBFEN_DBFEN_Enabled = @as(c_ulong, 1);
pub const QDEC_LEDPRE_LEDPRE_Pos = @as(c_ulong, 0);
pub const QDEC_LEDPRE_LEDPRE_Msk = @as(c_ulong, 0x1FF) << QDEC_LEDPRE_LEDPRE_Pos;
pub const QDEC_ACCDBL_ACCDBL_Pos = @as(c_ulong, 0);
pub const QDEC_ACCDBL_ACCDBL_Msk = @as(c_ulong, 0xF) << QDEC_ACCDBL_ACCDBL_Pos;
pub const QDEC_ACCDBLREAD_ACCDBLREAD_Pos = @as(c_ulong, 0);
pub const QDEC_ACCDBLREAD_ACCDBLREAD_Msk = @as(c_ulong, 0xF) << QDEC_ACCDBLREAD_ACCDBLREAD_Pos;
pub const QSPI_TASKS_ACTIVATE_TASKS_ACTIVATE_Pos = @as(c_ulong, 0);
pub const QSPI_TASKS_ACTIVATE_TASKS_ACTIVATE_Msk = @as(c_ulong, 0x1) << QSPI_TASKS_ACTIVATE_TASKS_ACTIVATE_Pos;
pub const QSPI_TASKS_ACTIVATE_TASKS_ACTIVATE_Trigger = @as(c_ulong, 1);
pub const QSPI_TASKS_READSTART_TASKS_READSTART_Pos = @as(c_ulong, 0);
pub const QSPI_TASKS_READSTART_TASKS_READSTART_Msk = @as(c_ulong, 0x1) << QSPI_TASKS_READSTART_TASKS_READSTART_Pos;
pub const QSPI_TASKS_READSTART_TASKS_READSTART_Trigger = @as(c_ulong, 1);
pub const QSPI_TASKS_WRITESTART_TASKS_WRITESTART_Pos = @as(c_ulong, 0);
pub const QSPI_TASKS_WRITESTART_TASKS_WRITESTART_Msk = @as(c_ulong, 0x1) << QSPI_TASKS_WRITESTART_TASKS_WRITESTART_Pos;
pub const QSPI_TASKS_WRITESTART_TASKS_WRITESTART_Trigger = @as(c_ulong, 1);
pub const QSPI_TASKS_ERASESTART_TASKS_ERASESTART_Pos = @as(c_ulong, 0);
pub const QSPI_TASKS_ERASESTART_TASKS_ERASESTART_Msk = @as(c_ulong, 0x1) << QSPI_TASKS_ERASESTART_TASKS_ERASESTART_Pos;
pub const QSPI_TASKS_ERASESTART_TASKS_ERASESTART_Trigger = @as(c_ulong, 1);
pub const QSPI_TASKS_DEACTIVATE_TASKS_DEACTIVATE_Pos = @as(c_ulong, 0);
pub const QSPI_TASKS_DEACTIVATE_TASKS_DEACTIVATE_Msk = @as(c_ulong, 0x1) << QSPI_TASKS_DEACTIVATE_TASKS_DEACTIVATE_Pos;
pub const QSPI_TASKS_DEACTIVATE_TASKS_DEACTIVATE_Trigger = @as(c_ulong, 1);
pub const QSPI_EVENTS_READY_EVENTS_READY_Pos = @as(c_ulong, 0);
pub const QSPI_EVENTS_READY_EVENTS_READY_Msk = @as(c_ulong, 0x1) << QSPI_EVENTS_READY_EVENTS_READY_Pos;
pub const QSPI_EVENTS_READY_EVENTS_READY_NotGenerated = @as(c_ulong, 0);
pub const QSPI_EVENTS_READY_EVENTS_READY_Generated = @as(c_ulong, 1);
pub const QSPI_INTEN_READY_Pos = @as(c_ulong, 0);
pub const QSPI_INTEN_READY_Msk = @as(c_ulong, 0x1) << QSPI_INTEN_READY_Pos;
pub const QSPI_INTEN_READY_Disabled = @as(c_ulong, 0);
pub const QSPI_INTEN_READY_Enabled = @as(c_ulong, 1);
pub const QSPI_INTENSET_READY_Pos = @as(c_ulong, 0);
pub const QSPI_INTENSET_READY_Msk = @as(c_ulong, 0x1) << QSPI_INTENSET_READY_Pos;
pub const QSPI_INTENSET_READY_Disabled = @as(c_ulong, 0);
pub const QSPI_INTENSET_READY_Enabled = @as(c_ulong, 1);
pub const QSPI_INTENSET_READY_Set = @as(c_ulong, 1);
pub const QSPI_INTENCLR_READY_Pos = @as(c_ulong, 0);
pub const QSPI_INTENCLR_READY_Msk = @as(c_ulong, 0x1) << QSPI_INTENCLR_READY_Pos;
pub const QSPI_INTENCLR_READY_Disabled = @as(c_ulong, 0);
pub const QSPI_INTENCLR_READY_Enabled = @as(c_ulong, 1);
pub const QSPI_INTENCLR_READY_Clear = @as(c_ulong, 1);
pub const QSPI_ENABLE_ENABLE_Pos = @as(c_ulong, 0);
pub const QSPI_ENABLE_ENABLE_Msk = @as(c_ulong, 0x1) << QSPI_ENABLE_ENABLE_Pos;
pub const QSPI_ENABLE_ENABLE_Disabled = @as(c_ulong, 0);
pub const QSPI_ENABLE_ENABLE_Enabled = @as(c_ulong, 1);
pub const QSPI_READ_SRC_SRC_Pos = @as(c_ulong, 0);
pub const QSPI_READ_SRC_SRC_Msk = @as(c_ulong, 0xFFFFFFFF) << QSPI_READ_SRC_SRC_Pos;
pub const QSPI_READ_DST_DST_Pos = @as(c_ulong, 0);
pub const QSPI_READ_DST_DST_Msk = @as(c_ulong, 0xFFFFFFFF) << QSPI_READ_DST_DST_Pos;
pub const QSPI_READ_CNT_CNT_Pos = @as(c_ulong, 0);
pub const QSPI_READ_CNT_CNT_Msk = @as(c_ulong, 0x3FFFF) << QSPI_READ_CNT_CNT_Pos;
pub const QSPI_WRITE_DST_DST_Pos = @as(c_ulong, 0);
pub const QSPI_WRITE_DST_DST_Msk = @as(c_ulong, 0xFFFFFFFF) << QSPI_WRITE_DST_DST_Pos;
pub const QSPI_WRITE_SRC_SRC_Pos = @as(c_ulong, 0);
pub const QSPI_WRITE_SRC_SRC_Msk = @as(c_ulong, 0xFFFFFFFF) << QSPI_WRITE_SRC_SRC_Pos;
pub const QSPI_WRITE_CNT_CNT_Pos = @as(c_ulong, 0);
pub const QSPI_WRITE_CNT_CNT_Msk = @as(c_ulong, 0x3FFFF) << QSPI_WRITE_CNT_CNT_Pos;
pub const QSPI_ERASE_PTR_PTR_Pos = @as(c_ulong, 0);
pub const QSPI_ERASE_PTR_PTR_Msk = @as(c_ulong, 0xFFFFFFFF) << QSPI_ERASE_PTR_PTR_Pos;
pub const QSPI_ERASE_LEN_LEN_Pos = @as(c_ulong, 0);
pub const QSPI_ERASE_LEN_LEN_Msk = @as(c_ulong, 0x3) << QSPI_ERASE_LEN_LEN_Pos;
pub const QSPI_ERASE_LEN_LEN_4KB = @as(c_ulong, 0);
pub const QSPI_ERASE_LEN_LEN_64KB = @as(c_ulong, 1);
pub const QSPI_ERASE_LEN_LEN_All = @as(c_ulong, 2);
pub const QSPI_PSEL_SCK_CONNECT_Pos = @as(c_ulong, 31);
pub const QSPI_PSEL_SCK_CONNECT_Msk = @as(c_ulong, 0x1) << QSPI_PSEL_SCK_CONNECT_Pos;
pub const QSPI_PSEL_SCK_CONNECT_Connected = @as(c_ulong, 0);
pub const QSPI_PSEL_SCK_CONNECT_Disconnected = @as(c_ulong, 1);
pub const QSPI_PSEL_SCK_PORT_Pos = @as(c_ulong, 5);
pub const QSPI_PSEL_SCK_PORT_Msk = @as(c_ulong, 0x1) << QSPI_PSEL_SCK_PORT_Pos;
pub const QSPI_PSEL_SCK_PIN_Pos = @as(c_ulong, 0);
pub const QSPI_PSEL_SCK_PIN_Msk = @as(c_ulong, 0x1F) << QSPI_PSEL_SCK_PIN_Pos;
pub const QSPI_PSEL_CSN_CONNECT_Pos = @as(c_ulong, 31);
pub const QSPI_PSEL_CSN_CONNECT_Msk = @as(c_ulong, 0x1) << QSPI_PSEL_CSN_CONNECT_Pos;
pub const QSPI_PSEL_CSN_CONNECT_Connected = @as(c_ulong, 0);
pub const QSPI_PSEL_CSN_CONNECT_Disconnected = @as(c_ulong, 1);
pub const QSPI_PSEL_CSN_PORT_Pos = @as(c_ulong, 5);
pub const QSPI_PSEL_CSN_PORT_Msk = @as(c_ulong, 0x1) << QSPI_PSEL_CSN_PORT_Pos;
pub const QSPI_PSEL_CSN_PIN_Pos = @as(c_ulong, 0);
pub const QSPI_PSEL_CSN_PIN_Msk = @as(c_ulong, 0x1F) << QSPI_PSEL_CSN_PIN_Pos;
pub const QSPI_PSEL_IO0_CONNECT_Pos = @as(c_ulong, 31);
pub const QSPI_PSEL_IO0_CONNECT_Msk = @as(c_ulong, 0x1) << QSPI_PSEL_IO0_CONNECT_Pos;
pub const QSPI_PSEL_IO0_CONNECT_Connected = @as(c_ulong, 0);
pub const QSPI_PSEL_IO0_CONNECT_Disconnected = @as(c_ulong, 1);
pub const QSPI_PSEL_IO0_PORT_Pos = @as(c_ulong, 5);
pub const QSPI_PSEL_IO0_PORT_Msk = @as(c_ulong, 0x1) << QSPI_PSEL_IO0_PORT_Pos;
pub const QSPI_PSEL_IO0_PIN_Pos = @as(c_ulong, 0);
pub const QSPI_PSEL_IO0_PIN_Msk = @as(c_ulong, 0x1F) << QSPI_PSEL_IO0_PIN_Pos;
pub const QSPI_PSEL_IO1_CONNECT_Pos = @as(c_ulong, 31);
pub const QSPI_PSEL_IO1_CONNECT_Msk = @as(c_ulong, 0x1) << QSPI_PSEL_IO1_CONNECT_Pos;
pub const QSPI_PSEL_IO1_CONNECT_Connected = @as(c_ulong, 0);
pub const QSPI_PSEL_IO1_CONNECT_Disconnected = @as(c_ulong, 1);
pub const QSPI_PSEL_IO1_PORT_Pos = @as(c_ulong, 5);
pub const QSPI_PSEL_IO1_PORT_Msk = @as(c_ulong, 0x1) << QSPI_PSEL_IO1_PORT_Pos;
pub const QSPI_PSEL_IO1_PIN_Pos = @as(c_ulong, 0);
pub const QSPI_PSEL_IO1_PIN_Msk = @as(c_ulong, 0x1F) << QSPI_PSEL_IO1_PIN_Pos;
pub const QSPI_PSEL_IO2_CONNECT_Pos = @as(c_ulong, 31);
pub const QSPI_PSEL_IO2_CONNECT_Msk = @as(c_ulong, 0x1) << QSPI_PSEL_IO2_CONNECT_Pos;
pub const QSPI_PSEL_IO2_CONNECT_Connected = @as(c_ulong, 0);
pub const QSPI_PSEL_IO2_CONNECT_Disconnected = @as(c_ulong, 1);
pub const QSPI_PSEL_IO2_PORT_Pos = @as(c_ulong, 5);
pub const QSPI_PSEL_IO2_PORT_Msk = @as(c_ulong, 0x1) << QSPI_PSEL_IO2_PORT_Pos;
pub const QSPI_PSEL_IO2_PIN_Pos = @as(c_ulong, 0);
pub const QSPI_PSEL_IO2_PIN_Msk = @as(c_ulong, 0x1F) << QSPI_PSEL_IO2_PIN_Pos;
pub const QSPI_PSEL_IO3_CONNECT_Pos = @as(c_ulong, 31);
pub const QSPI_PSEL_IO3_CONNECT_Msk = @as(c_ulong, 0x1) << QSPI_PSEL_IO3_CONNECT_Pos;
pub const QSPI_PSEL_IO3_CONNECT_Connected = @as(c_ulong, 0);
pub const QSPI_PSEL_IO3_CONNECT_Disconnected = @as(c_ulong, 1);
pub const QSPI_PSEL_IO3_PORT_Pos = @as(c_ulong, 5);
pub const QSPI_PSEL_IO3_PORT_Msk = @as(c_ulong, 0x1) << QSPI_PSEL_IO3_PORT_Pos;
pub const QSPI_PSEL_IO3_PIN_Pos = @as(c_ulong, 0);
pub const QSPI_PSEL_IO3_PIN_Msk = @as(c_ulong, 0x1F) << QSPI_PSEL_IO3_PIN_Pos;
pub const QSPI_XIPOFFSET_XIPOFFSET_Pos = @as(c_ulong, 0);
pub const QSPI_XIPOFFSET_XIPOFFSET_Msk = @as(c_ulong, 0xFFFFFFFF) << QSPI_XIPOFFSET_XIPOFFSET_Pos;
pub const QSPI_IFCONFIG0_PPSIZE_Pos = @as(c_ulong, 12);
pub const QSPI_IFCONFIG0_PPSIZE_Msk = @as(c_ulong, 0x1) << QSPI_IFCONFIG0_PPSIZE_Pos;
pub const QSPI_IFCONFIG0_PPSIZE_256Bytes = @as(c_ulong, 0);
pub const QSPI_IFCONFIG0_PPSIZE_512Bytes = @as(c_ulong, 1);
pub const QSPI_IFCONFIG0_DPMENABLE_Pos = @as(c_ulong, 7);
pub const QSPI_IFCONFIG0_DPMENABLE_Msk = @as(c_ulong, 0x1) << QSPI_IFCONFIG0_DPMENABLE_Pos;
pub const QSPI_IFCONFIG0_DPMENABLE_Disable = @as(c_ulong, 0);
pub const QSPI_IFCONFIG0_DPMENABLE_Enable = @as(c_ulong, 1);
pub const QSPI_IFCONFIG0_ADDRMODE_Pos = @as(c_ulong, 6);
pub const QSPI_IFCONFIG0_ADDRMODE_Msk = @as(c_ulong, 0x1) << QSPI_IFCONFIG0_ADDRMODE_Pos;
pub const QSPI_IFCONFIG0_ADDRMODE_24BIT = @as(c_ulong, 0);
pub const QSPI_IFCONFIG0_ADDRMODE_32BIT = @as(c_ulong, 1);
pub const QSPI_IFCONFIG0_WRITEOC_Pos = @as(c_ulong, 3);
pub const QSPI_IFCONFIG0_WRITEOC_Msk = @as(c_ulong, 0x7) << QSPI_IFCONFIG0_WRITEOC_Pos;
pub const QSPI_IFCONFIG0_WRITEOC_PP = @as(c_ulong, 0);
pub const QSPI_IFCONFIG0_WRITEOC_PP2O = @as(c_ulong, 1);
pub const QSPI_IFCONFIG0_WRITEOC_PP4O = @as(c_ulong, 2);
pub const QSPI_IFCONFIG0_WRITEOC_PP4IO = @as(c_ulong, 3);
pub const QSPI_IFCONFIG0_READOC_Pos = @as(c_ulong, 0);
pub const QSPI_IFCONFIG0_READOC_Msk = @as(c_ulong, 0x7) << QSPI_IFCONFIG0_READOC_Pos;
pub const QSPI_IFCONFIG0_READOC_FASTREAD = @as(c_ulong, 0);
pub const QSPI_IFCONFIG0_READOC_READ2O = @as(c_ulong, 1);
pub const QSPI_IFCONFIG0_READOC_READ2IO = @as(c_ulong, 2);
pub const QSPI_IFCONFIG0_READOC_READ4O = @as(c_ulong, 3);
pub const QSPI_IFCONFIG0_READOC_READ4IO = @as(c_ulong, 4);
pub const QSPI_IFCONFIG1_SCKFREQ_Pos = @as(c_ulong, 28);
pub const QSPI_IFCONFIG1_SCKFREQ_Msk = @as(c_ulong, 0xF) << QSPI_IFCONFIG1_SCKFREQ_Pos;
pub const QSPI_IFCONFIG1_SPIMODE_Pos = @as(c_ulong, 25);
pub const QSPI_IFCONFIG1_SPIMODE_Msk = @as(c_ulong, 0x1) << QSPI_IFCONFIG1_SPIMODE_Pos;
pub const QSPI_IFCONFIG1_SPIMODE_MODE0 = @as(c_ulong, 0);
pub const QSPI_IFCONFIG1_SPIMODE_MODE3 = @as(c_ulong, 1);
pub const QSPI_IFCONFIG1_DPMEN_Pos = @as(c_ulong, 24);
pub const QSPI_IFCONFIG1_DPMEN_Msk = @as(c_ulong, 0x1) << QSPI_IFCONFIG1_DPMEN_Pos;
pub const QSPI_IFCONFIG1_DPMEN_Exit = @as(c_ulong, 0);
pub const QSPI_IFCONFIG1_DPMEN_Enter = @as(c_ulong, 1);
pub const QSPI_IFCONFIG1_SCKDELAY_Pos = @as(c_ulong, 0);
pub const QSPI_IFCONFIG1_SCKDELAY_Msk = @as(c_ulong, 0xFF) << QSPI_IFCONFIG1_SCKDELAY_Pos;
pub const QSPI_STATUS_SREG_Pos = @as(c_ulong, 24);
pub const QSPI_STATUS_SREG_Msk = @as(c_ulong, 0xFF) << QSPI_STATUS_SREG_Pos;
pub const QSPI_STATUS_READY_Pos = @as(c_ulong, 3);
pub const QSPI_STATUS_READY_Msk = @as(c_ulong, 0x1) << QSPI_STATUS_READY_Pos;
pub const QSPI_STATUS_READY_BUSY = @as(c_ulong, 0);
pub const QSPI_STATUS_READY_READY = @as(c_ulong, 1);
pub const QSPI_STATUS_DPM_Pos = @as(c_ulong, 2);
pub const QSPI_STATUS_DPM_Msk = @as(c_ulong, 0x1) << QSPI_STATUS_DPM_Pos;
pub const QSPI_STATUS_DPM_Disabled = @as(c_ulong, 0);
pub const QSPI_STATUS_DPM_Enabled = @as(c_ulong, 1);
pub const QSPI_DPMDUR_EXIT_Pos = @as(c_ulong, 16);
pub const QSPI_DPMDUR_EXIT_Msk = @as(c_ulong, 0xFFFF) << QSPI_DPMDUR_EXIT_Pos;
pub const QSPI_DPMDUR_ENTER_Pos = @as(c_ulong, 0);
pub const QSPI_DPMDUR_ENTER_Msk = @as(c_ulong, 0xFFFF) << QSPI_DPMDUR_ENTER_Pos;
pub const QSPI_ADDRCONF_WREN_Pos = @as(c_ulong, 27);
pub const QSPI_ADDRCONF_WREN_Msk = @as(c_ulong, 0x1) << QSPI_ADDRCONF_WREN_Pos;
pub const QSPI_ADDRCONF_WREN_Disable = @as(c_ulong, 0);
pub const QSPI_ADDRCONF_WREN_Enable = @as(c_ulong, 1);
pub const QSPI_ADDRCONF_WIPWAIT_Pos = @as(c_ulong, 26);
pub const QSPI_ADDRCONF_WIPWAIT_Msk = @as(c_ulong, 0x1) << QSPI_ADDRCONF_WIPWAIT_Pos;
pub const QSPI_ADDRCONF_WIPWAIT_Disable = @as(c_ulong, 0);
pub const QSPI_ADDRCONF_WIPWAIT_Enable = @as(c_ulong, 1);
pub const QSPI_ADDRCONF_MODE_Pos = @as(c_ulong, 24);
pub const QSPI_ADDRCONF_MODE_Msk = @as(c_ulong, 0x3) << QSPI_ADDRCONF_MODE_Pos;
pub const QSPI_ADDRCONF_MODE_NoInstr = @as(c_ulong, 0);
pub const QSPI_ADDRCONF_MODE_Opcode = @as(c_ulong, 1);
pub const QSPI_ADDRCONF_MODE_OpByte0 = @as(c_ulong, 2);
pub const QSPI_ADDRCONF_MODE_All = @as(c_ulong, 3);
pub const QSPI_ADDRCONF_BYTE1_Pos = @as(c_ulong, 16);
pub const QSPI_ADDRCONF_BYTE1_Msk = @as(c_ulong, 0xFF) << QSPI_ADDRCONF_BYTE1_Pos;
pub const QSPI_ADDRCONF_BYTE0_Pos = @as(c_ulong, 8);
pub const QSPI_ADDRCONF_BYTE0_Msk = @as(c_ulong, 0xFF) << QSPI_ADDRCONF_BYTE0_Pos;
pub const QSPI_ADDRCONF_OPCODE_Pos = @as(c_ulong, 0);
pub const QSPI_ADDRCONF_OPCODE_Msk = @as(c_ulong, 0xFF) << QSPI_ADDRCONF_OPCODE_Pos;
pub const QSPI_CINSTRCONF_LFSTOP_Pos = @as(c_ulong, 17);
pub const QSPI_CINSTRCONF_LFSTOP_Msk = @as(c_ulong, 0x1) << QSPI_CINSTRCONF_LFSTOP_Pos;
pub const QSPI_CINSTRCONF_LFSTOP_Stop = @as(c_ulong, 1);
pub const QSPI_CINSTRCONF_LFEN_Pos = @as(c_ulong, 16);
pub const QSPI_CINSTRCONF_LFEN_Msk = @as(c_ulong, 0x1) << QSPI_CINSTRCONF_LFEN_Pos;
pub const QSPI_CINSTRCONF_LFEN_Disable = @as(c_ulong, 0);
pub const QSPI_CINSTRCONF_LFEN_Enable = @as(c_ulong, 1);
pub const QSPI_CINSTRCONF_WREN_Pos = @as(c_ulong, 15);
pub const QSPI_CINSTRCONF_WREN_Msk = @as(c_ulong, 0x1) << QSPI_CINSTRCONF_WREN_Pos;
pub const QSPI_CINSTRCONF_WREN_Disable = @as(c_ulong, 0);
pub const QSPI_CINSTRCONF_WREN_Enable = @as(c_ulong, 1);
pub const QSPI_CINSTRCONF_WIPWAIT_Pos = @as(c_ulong, 14);
pub const QSPI_CINSTRCONF_WIPWAIT_Msk = @as(c_ulong, 0x1) << QSPI_CINSTRCONF_WIPWAIT_Pos;
pub const QSPI_CINSTRCONF_WIPWAIT_Disable = @as(c_ulong, 0);
pub const QSPI_CINSTRCONF_WIPWAIT_Enable = @as(c_ulong, 1);
pub const QSPI_CINSTRCONF_LIO3_Pos = @as(c_ulong, 13);
pub const QSPI_CINSTRCONF_LIO3_Msk = @as(c_ulong, 0x1) << QSPI_CINSTRCONF_LIO3_Pos;
pub const QSPI_CINSTRCONF_LIO2_Pos = @as(c_ulong, 12);
pub const QSPI_CINSTRCONF_LIO2_Msk = @as(c_ulong, 0x1) << QSPI_CINSTRCONF_LIO2_Pos;
pub const QSPI_CINSTRCONF_LENGTH_Pos = @as(c_ulong, 8);
pub const QSPI_CINSTRCONF_LENGTH_Msk = @as(c_ulong, 0xF) << QSPI_CINSTRCONF_LENGTH_Pos;
pub const QSPI_CINSTRCONF_LENGTH_1B = @as(c_ulong, 1);
pub const QSPI_CINSTRCONF_LENGTH_2B = @as(c_ulong, 2);
pub const QSPI_CINSTRCONF_LENGTH_3B = @as(c_ulong, 3);
pub const QSPI_CINSTRCONF_LENGTH_4B = @as(c_ulong, 4);
pub const QSPI_CINSTRCONF_LENGTH_5B = @as(c_ulong, 5);
pub const QSPI_CINSTRCONF_LENGTH_6B = @as(c_ulong, 6);
pub const QSPI_CINSTRCONF_LENGTH_7B = @as(c_ulong, 7);
pub const QSPI_CINSTRCONF_LENGTH_8B = @as(c_ulong, 8);
pub const QSPI_CINSTRCONF_LENGTH_9B = @as(c_ulong, 9);
pub const QSPI_CINSTRCONF_OPCODE_Pos = @as(c_ulong, 0);
pub const QSPI_CINSTRCONF_OPCODE_Msk = @as(c_ulong, 0xFF) << QSPI_CINSTRCONF_OPCODE_Pos;
pub const QSPI_CINSTRDAT0_BYTE3_Pos = @as(c_ulong, 24);
pub const QSPI_CINSTRDAT0_BYTE3_Msk = @as(c_ulong, 0xFF) << QSPI_CINSTRDAT0_BYTE3_Pos;
pub const QSPI_CINSTRDAT0_BYTE2_Pos = @as(c_ulong, 16);
pub const QSPI_CINSTRDAT0_BYTE2_Msk = @as(c_ulong, 0xFF) << QSPI_CINSTRDAT0_BYTE2_Pos;
pub const QSPI_CINSTRDAT0_BYTE1_Pos = @as(c_ulong, 8);
pub const QSPI_CINSTRDAT0_BYTE1_Msk = @as(c_ulong, 0xFF) << QSPI_CINSTRDAT0_BYTE1_Pos;
pub const QSPI_CINSTRDAT0_BYTE0_Pos = @as(c_ulong, 0);
pub const QSPI_CINSTRDAT0_BYTE0_Msk = @as(c_ulong, 0xFF) << QSPI_CINSTRDAT0_BYTE0_Pos;
pub const QSPI_CINSTRDAT1_BYTE7_Pos = @as(c_ulong, 24);
pub const QSPI_CINSTRDAT1_BYTE7_Msk = @as(c_ulong, 0xFF) << QSPI_CINSTRDAT1_BYTE7_Pos;
pub const QSPI_CINSTRDAT1_BYTE6_Pos = @as(c_ulong, 16);
pub const QSPI_CINSTRDAT1_BYTE6_Msk = @as(c_ulong, 0xFF) << QSPI_CINSTRDAT1_BYTE6_Pos;
pub const QSPI_CINSTRDAT1_BYTE5_Pos = @as(c_ulong, 8);
pub const QSPI_CINSTRDAT1_BYTE5_Msk = @as(c_ulong, 0xFF) << QSPI_CINSTRDAT1_BYTE5_Pos;
pub const QSPI_CINSTRDAT1_BYTE4_Pos = @as(c_ulong, 0);
pub const QSPI_CINSTRDAT1_BYTE4_Msk = @as(c_ulong, 0xFF) << QSPI_CINSTRDAT1_BYTE4_Pos;
pub const QSPI_IFTIMING_RXDELAY_Pos = @as(c_ulong, 8);
pub const QSPI_IFTIMING_RXDELAY_Msk = @as(c_ulong, 0x7) << QSPI_IFTIMING_RXDELAY_Pos;
pub const RADIO_TASKS_TXEN_TASKS_TXEN_Pos = @as(c_ulong, 0);
pub const RADIO_TASKS_TXEN_TASKS_TXEN_Msk = @as(c_ulong, 0x1) << RADIO_TASKS_TXEN_TASKS_TXEN_Pos;
pub const RADIO_TASKS_TXEN_TASKS_TXEN_Trigger = @as(c_ulong, 1);
pub const RADIO_TASKS_RXEN_TASKS_RXEN_Pos = @as(c_ulong, 0);
pub const RADIO_TASKS_RXEN_TASKS_RXEN_Msk = @as(c_ulong, 0x1) << RADIO_TASKS_RXEN_TASKS_RXEN_Pos;
pub const RADIO_TASKS_RXEN_TASKS_RXEN_Trigger = @as(c_ulong, 1);
pub const RADIO_TASKS_START_TASKS_START_Pos = @as(c_ulong, 0);
pub const RADIO_TASKS_START_TASKS_START_Msk = @as(c_ulong, 0x1) << RADIO_TASKS_START_TASKS_START_Pos;
pub const RADIO_TASKS_START_TASKS_START_Trigger = @as(c_ulong, 1);
pub const RADIO_TASKS_STOP_TASKS_STOP_Pos = @as(c_ulong, 0);
pub const RADIO_TASKS_STOP_TASKS_STOP_Msk = @as(c_ulong, 0x1) << RADIO_TASKS_STOP_TASKS_STOP_Pos;
pub const RADIO_TASKS_STOP_TASKS_STOP_Trigger = @as(c_ulong, 1);
pub const RADIO_TASKS_DISABLE_TASKS_DISABLE_Pos = @as(c_ulong, 0);
pub const RADIO_TASKS_DISABLE_TASKS_DISABLE_Msk = @as(c_ulong, 0x1) << RADIO_TASKS_DISABLE_TASKS_DISABLE_Pos;
pub const RADIO_TASKS_DISABLE_TASKS_DISABLE_Trigger = @as(c_ulong, 1);
pub const RADIO_TASKS_RSSISTART_TASKS_RSSISTART_Pos = @as(c_ulong, 0);
pub const RADIO_TASKS_RSSISTART_TASKS_RSSISTART_Msk = @as(c_ulong, 0x1) << RADIO_TASKS_RSSISTART_TASKS_RSSISTART_Pos;
pub const RADIO_TASKS_RSSISTART_TASKS_RSSISTART_Trigger = @as(c_ulong, 1);
pub const RADIO_TASKS_RSSISTOP_TASKS_RSSISTOP_Pos = @as(c_ulong, 0);
pub const RADIO_TASKS_RSSISTOP_TASKS_RSSISTOP_Msk = @as(c_ulong, 0x1) << RADIO_TASKS_RSSISTOP_TASKS_RSSISTOP_Pos;
pub const RADIO_TASKS_RSSISTOP_TASKS_RSSISTOP_Trigger = @as(c_ulong, 1);
pub const RADIO_TASKS_BCSTART_TASKS_BCSTART_Pos = @as(c_ulong, 0);
pub const RADIO_TASKS_BCSTART_TASKS_BCSTART_Msk = @as(c_ulong, 0x1) << RADIO_TASKS_BCSTART_TASKS_BCSTART_Pos;
pub const RADIO_TASKS_BCSTART_TASKS_BCSTART_Trigger = @as(c_ulong, 1);
pub const RADIO_TASKS_BCSTOP_TASKS_BCSTOP_Pos = @as(c_ulong, 0);
pub const RADIO_TASKS_BCSTOP_TASKS_BCSTOP_Msk = @as(c_ulong, 0x1) << RADIO_TASKS_BCSTOP_TASKS_BCSTOP_Pos;
pub const RADIO_TASKS_BCSTOP_TASKS_BCSTOP_Trigger = @as(c_ulong, 1);
pub const RADIO_TASKS_EDSTART_TASKS_EDSTART_Pos = @as(c_ulong, 0);
pub const RADIO_TASKS_EDSTART_TASKS_EDSTART_Msk = @as(c_ulong, 0x1) << RADIO_TASKS_EDSTART_TASKS_EDSTART_Pos;
pub const RADIO_TASKS_EDSTART_TASKS_EDSTART_Trigger = @as(c_ulong, 1);
pub const RADIO_TASKS_EDSTOP_TASKS_EDSTOP_Pos = @as(c_ulong, 0);
pub const RADIO_TASKS_EDSTOP_TASKS_EDSTOP_Msk = @as(c_ulong, 0x1) << RADIO_TASKS_EDSTOP_TASKS_EDSTOP_Pos;
pub const RADIO_TASKS_EDSTOP_TASKS_EDSTOP_Trigger = @as(c_ulong, 1);
pub const RADIO_TASKS_CCASTART_TASKS_CCASTART_Pos = @as(c_ulong, 0);
pub const RADIO_TASKS_CCASTART_TASKS_CCASTART_Msk = @as(c_ulong, 0x1) << RADIO_TASKS_CCASTART_TASKS_CCASTART_Pos;
pub const RADIO_TASKS_CCASTART_TASKS_CCASTART_Trigger = @as(c_ulong, 1);
pub const RADIO_TASKS_CCASTOP_TASKS_CCASTOP_Pos = @as(c_ulong, 0);
pub const RADIO_TASKS_CCASTOP_TASKS_CCASTOP_Msk = @as(c_ulong, 0x1) << RADIO_TASKS_CCASTOP_TASKS_CCASTOP_Pos;
pub const RADIO_TASKS_CCASTOP_TASKS_CCASTOP_Trigger = @as(c_ulong, 1);
pub const RADIO_EVENTS_READY_EVENTS_READY_Pos = @as(c_ulong, 0);
pub const RADIO_EVENTS_READY_EVENTS_READY_Msk = @as(c_ulong, 0x1) << RADIO_EVENTS_READY_EVENTS_READY_Pos;
pub const RADIO_EVENTS_READY_EVENTS_READY_NotGenerated = @as(c_ulong, 0);
pub const RADIO_EVENTS_READY_EVENTS_READY_Generated = @as(c_ulong, 1);
pub const RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_Pos = @as(c_ulong, 0);
pub const RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_Msk = @as(c_ulong, 0x1) << RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_Pos;
pub const RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_NotGenerated = @as(c_ulong, 0);
pub const RADIO_EVENTS_ADDRESS_EVENTS_ADDRESS_Generated = @as(c_ulong, 1);
pub const RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_Pos = @as(c_ulong, 0);
pub const RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_Msk = @as(c_ulong, 0x1) << RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_Pos;
pub const RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_NotGenerated = @as(c_ulong, 0);
pub const RADIO_EVENTS_PAYLOAD_EVENTS_PAYLOAD_Generated = @as(c_ulong, 1);
pub const RADIO_EVENTS_END_EVENTS_END_Pos = @as(c_ulong, 0);
pub const RADIO_EVENTS_END_EVENTS_END_Msk = @as(c_ulong, 0x1) << RADIO_EVENTS_END_EVENTS_END_Pos;
pub const RADIO_EVENTS_END_EVENTS_END_NotGenerated = @as(c_ulong, 0);
pub const RADIO_EVENTS_END_EVENTS_END_Generated = @as(c_ulong, 1);
pub const RADIO_EVENTS_DISABLED_EVENTS_DISABLED_Pos = @as(c_ulong, 0);
pub const RADIO_EVENTS_DISABLED_EVENTS_DISABLED_Msk = @as(c_ulong, 0x1) << RADIO_EVENTS_DISABLED_EVENTS_DISABLED_Pos;
pub const RADIO_EVENTS_DISABLED_EVENTS_DISABLED_NotGenerated = @as(c_ulong, 0);
pub const RADIO_EVENTS_DISABLED_EVENTS_DISABLED_Generated = @as(c_ulong, 1);
pub const RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_Pos = @as(c_ulong, 0);
pub const RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_Msk = @as(c_ulong, 0x1) << RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_Pos;
pub const RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_NotGenerated = @as(c_ulong, 0);
pub const RADIO_EVENTS_DEVMATCH_EVENTS_DEVMATCH_Generated = @as(c_ulong, 1);
pub const RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_Pos = @as(c_ulong, 0);
pub const RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_Msk = @as(c_ulong, 0x1) << RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_Pos;
pub const RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_NotGenerated = @as(c_ulong, 0);
pub const RADIO_EVENTS_DEVMISS_EVENTS_DEVMISS_Generated = @as(c_ulong, 1);
pub const RADIO_EVENTS_RSSIEND_EVENTS_RSSIEND_Pos = @as(c_ulong, 0);
pub const RADIO_EVENTS_RSSIEND_EVENTS_RSSIEND_Msk = @as(c_ulong, 0x1) << RADIO_EVENTS_RSSIEND_EVENTS_RSSIEND_Pos;
pub const RADIO_EVENTS_RSSIEND_EVENTS_RSSIEND_NotGenerated = @as(c_ulong, 0);
pub const RADIO_EVENTS_RSSIEND_EVENTS_RSSIEND_Generated = @as(c_ulong, 1);
pub const RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_Pos = @as(c_ulong, 0);
pub const RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_Msk = @as(c_ulong, 0x1) << RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_Pos;
pub const RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_NotGenerated = @as(c_ulong, 0);
pub const RADIO_EVENTS_BCMATCH_EVENTS_BCMATCH_Generated = @as(c_ulong, 1);
pub const RADIO_EVENTS_CRCOK_EVENTS_CRCOK_Pos = @as(c_ulong, 0);
pub const RADIO_EVENTS_CRCOK_EVENTS_CRCOK_Msk = @as(c_ulong, 0x1) << RADIO_EVENTS_CRCOK_EVENTS_CRCOK_Pos;
pub const RADIO_EVENTS_CRCOK_EVENTS_CRCOK_NotGenerated = @as(c_ulong, 0);
pub const RADIO_EVENTS_CRCOK_EVENTS_CRCOK_Generated = @as(c_ulong, 1);
pub const RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_Pos = @as(c_ulong, 0);
pub const RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_Msk = @as(c_ulong, 0x1) << RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_Pos;
pub const RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_NotGenerated = @as(c_ulong, 0);
pub const RADIO_EVENTS_CRCERROR_EVENTS_CRCERROR_Generated = @as(c_ulong, 1);
pub const RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_Pos = @as(c_ulong, 0);
pub const RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_Msk = @as(c_ulong, 0x1) << RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_Pos;
pub const RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_NotGenerated = @as(c_ulong, 0);
pub const RADIO_EVENTS_FRAMESTART_EVENTS_FRAMESTART_Generated = @as(c_ulong, 1);
pub const RADIO_EVENTS_EDEND_EVENTS_EDEND_Pos = @as(c_ulong, 0);
pub const RADIO_EVENTS_EDEND_EVENTS_EDEND_Msk = @as(c_ulong, 0x1) << RADIO_EVENTS_EDEND_EVENTS_EDEND_Pos;
pub const RADIO_EVENTS_EDEND_EVENTS_EDEND_NotGenerated = @as(c_ulong, 0);
pub const RADIO_EVENTS_EDEND_EVENTS_EDEND_Generated = @as(c_ulong, 1);
pub const RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_Pos = @as(c_ulong, 0);
pub const RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_Msk = @as(c_ulong, 0x1) << RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_Pos;
pub const RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_NotGenerated = @as(c_ulong, 0);
pub const RADIO_EVENTS_EDSTOPPED_EVENTS_EDSTOPPED_Generated = @as(c_ulong, 1);
pub const RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_Pos = @as(c_ulong, 0);
pub const RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_Msk = @as(c_ulong, 0x1) << RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_Pos;
pub const RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_NotGenerated = @as(c_ulong, 0);
pub const RADIO_EVENTS_CCAIDLE_EVENTS_CCAIDLE_Generated = @as(c_ulong, 1);
pub const RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_Pos = @as(c_ulong, 0);
pub const RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_Msk = @as(c_ulong, 0x1) << RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_Pos;
pub const RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_NotGenerated = @as(c_ulong, 0);
pub const RADIO_EVENTS_CCABUSY_EVENTS_CCABUSY_Generated = @as(c_ulong, 1);
pub const RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_Pos = @as(c_ulong, 0);
pub const RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_Msk = @as(c_ulong, 0x1) << RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_Pos;
pub const RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_NotGenerated = @as(c_ulong, 0);
pub const RADIO_EVENTS_CCASTOPPED_EVENTS_CCASTOPPED_Generated = @as(c_ulong, 1);
pub const RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_Pos = @as(c_ulong, 0);
pub const RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_Msk = @as(c_ulong, 0x1) << RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_Pos;
pub const RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_NotGenerated = @as(c_ulong, 0);
pub const RADIO_EVENTS_RATEBOOST_EVENTS_RATEBOOST_Generated = @as(c_ulong, 1);
pub const RADIO_EVENTS_TXREADY_EVENTS_TXREADY_Pos = @as(c_ulong, 0);
pub const RADIO_EVENTS_TXREADY_EVENTS_TXREADY_Msk = @as(c_ulong, 0x1) << RADIO_EVENTS_TXREADY_EVENTS_TXREADY_Pos;
pub const RADIO_EVENTS_TXREADY_EVENTS_TXREADY_NotGenerated = @as(c_ulong, 0);
pub const RADIO_EVENTS_TXREADY_EVENTS_TXREADY_Generated = @as(c_ulong, 1);
pub const RADIO_EVENTS_RXREADY_EVENTS_RXREADY_Pos = @as(c_ulong, 0);
pub const RADIO_EVENTS_RXREADY_EVENTS_RXREADY_Msk = @as(c_ulong, 0x1) << RADIO_EVENTS_RXREADY_EVENTS_RXREADY_Pos;
pub const RADIO_EVENTS_RXREADY_EVENTS_RXREADY_NotGenerated = @as(c_ulong, 0);
pub const RADIO_EVENTS_RXREADY_EVENTS_RXREADY_Generated = @as(c_ulong, 1);
pub const RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_Pos = @as(c_ulong, 0);
pub const RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_Msk = @as(c_ulong, 0x1) << RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_Pos;
pub const RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_NotGenerated = @as(c_ulong, 0);
pub const RADIO_EVENTS_MHRMATCH_EVENTS_MHRMATCH_Generated = @as(c_ulong, 1);
pub const RADIO_EVENTS_PHYEND_EVENTS_PHYEND_Pos = @as(c_ulong, 0);
pub const RADIO_EVENTS_PHYEND_EVENTS_PHYEND_Msk = @as(c_ulong, 0x1) << RADIO_EVENTS_PHYEND_EVENTS_PHYEND_Pos;
pub const RADIO_EVENTS_PHYEND_EVENTS_PHYEND_NotGenerated = @as(c_ulong, 0);
pub const RADIO_EVENTS_PHYEND_EVENTS_PHYEND_Generated = @as(c_ulong, 1);
pub const RADIO_SHORTS_PHYEND_START_Pos = @as(c_ulong, 21);
pub const RADIO_SHORTS_PHYEND_START_Msk = @as(c_ulong, 0x1) << RADIO_SHORTS_PHYEND_START_Pos;
pub const RADIO_SHORTS_PHYEND_START_Disabled = @as(c_ulong, 0);
pub const RADIO_SHORTS_PHYEND_START_Enabled = @as(c_ulong, 1);
pub const RADIO_SHORTS_PHYEND_DISABLE_Pos = @as(c_ulong, 20);
pub const RADIO_SHORTS_PHYEND_DISABLE_Msk = @as(c_ulong, 0x1) << RADIO_SHORTS_PHYEND_DISABLE_Pos;
pub const RADIO_SHORTS_PHYEND_DISABLE_Disabled = @as(c_ulong, 0);
pub const RADIO_SHORTS_PHYEND_DISABLE_Enabled = @as(c_ulong, 1);
pub const RADIO_SHORTS_RXREADY_START_Pos = @as(c_ulong, 19);
pub const RADIO_SHORTS_RXREADY_START_Msk = @as(c_ulong, 0x1) << RADIO_SHORTS_RXREADY_START_Pos;
pub const RADIO_SHORTS_RXREADY_START_Disabled = @as(c_ulong, 0);
pub const RADIO_SHORTS_RXREADY_START_Enabled = @as(c_ulong, 1);
pub const RADIO_SHORTS_TXREADY_START_Pos = @as(c_ulong, 18);
pub const RADIO_SHORTS_TXREADY_START_Msk = @as(c_ulong, 0x1) << RADIO_SHORTS_TXREADY_START_Pos;
pub const RADIO_SHORTS_TXREADY_START_Disabled = @as(c_ulong, 0);
pub const RADIO_SHORTS_TXREADY_START_Enabled = @as(c_ulong, 1);
pub const RADIO_SHORTS_CCAIDLE_STOP_Pos = @as(c_ulong, 17);
pub const RADIO_SHORTS_CCAIDLE_STOP_Msk = @as(c_ulong, 0x1) << RADIO_SHORTS_CCAIDLE_STOP_Pos;
pub const RADIO_SHORTS_CCAIDLE_STOP_Disabled = @as(c_ulong, 0);
pub const RADIO_SHORTS_CCAIDLE_STOP_Enabled = @as(c_ulong, 1);
pub const RADIO_SHORTS_EDEND_DISABLE_Pos = @as(c_ulong, 16);
pub const RADIO_SHORTS_EDEND_DISABLE_Msk = @as(c_ulong, 0x1) << RADIO_SHORTS_EDEND_DISABLE_Pos;
pub const RADIO_SHORTS_EDEND_DISABLE_Disabled = @as(c_ulong, 0);
pub const RADIO_SHORTS_EDEND_DISABLE_Enabled = @as(c_ulong, 1);
pub const RADIO_SHORTS_READY_EDSTART_Pos = @as(c_ulong, 15);
pub const RADIO_SHORTS_READY_EDSTART_Msk = @as(c_ulong, 0x1) << RADIO_SHORTS_READY_EDSTART_Pos;
pub const RADIO_SHORTS_READY_EDSTART_Disabled = @as(c_ulong, 0);
pub const RADIO_SHORTS_READY_EDSTART_Enabled = @as(c_ulong, 1);
pub const RADIO_SHORTS_FRAMESTART_BCSTART_Pos = @as(c_ulong, 14);
pub const RADIO_SHORTS_FRAMESTART_BCSTART_Msk = @as(c_ulong, 0x1) << RADIO_SHORTS_FRAMESTART_BCSTART_Pos;
pub const RADIO_SHORTS_FRAMESTART_BCSTART_Disabled = @as(c_ulong, 0);
pub const RADIO_SHORTS_FRAMESTART_BCSTART_Enabled = @as(c_ulong, 1);
pub const RADIO_SHORTS_CCABUSY_DISABLE_Pos = @as(c_ulong, 13);
pub const RADIO_SHORTS_CCABUSY_DISABLE_Msk = @as(c_ulong, 0x1) << RADIO_SHORTS_CCABUSY_DISABLE_Pos;
pub const RADIO_SHORTS_CCABUSY_DISABLE_Disabled = @as(c_ulong, 0);
pub const RADIO_SHORTS_CCABUSY_DISABLE_Enabled = @as(c_ulong, 1);
pub const RADIO_SHORTS_CCAIDLE_TXEN_Pos = @as(c_ulong, 12);
pub const RADIO_SHORTS_CCAIDLE_TXEN_Msk = @as(c_ulong, 0x1) << RADIO_SHORTS_CCAIDLE_TXEN_Pos;
pub const RADIO_SHORTS_CCAIDLE_TXEN_Disabled = @as(c_ulong, 0);
pub const RADIO_SHORTS_CCAIDLE_TXEN_Enabled = @as(c_ulong, 1);
pub const RADIO_SHORTS_RXREADY_CCASTART_Pos = @as(c_ulong, 11);
pub const RADIO_SHORTS_RXREADY_CCASTART_Msk = @as(c_ulong, 0x1) << RADIO_SHORTS_RXREADY_CCASTART_Pos;
pub const RADIO_SHORTS_RXREADY_CCASTART_Disabled = @as(c_ulong, 0);
pub const RADIO_SHORTS_RXREADY_CCASTART_Enabled = @as(c_ulong, 1);
pub const RADIO_SHORTS_DISABLED_RSSISTOP_Pos = @as(c_ulong, 8);
pub const RADIO_SHORTS_DISABLED_RSSISTOP_Msk = @as(c_ulong, 0x1) << RADIO_SHORTS_DISABLED_RSSISTOP_Pos;
pub const RADIO_SHORTS_DISABLED_RSSISTOP_Disabled = @as(c_ulong, 0);
pub const RADIO_SHORTS_DISABLED_RSSISTOP_Enabled = @as(c_ulong, 1);
pub const RADIO_SHORTS_ADDRESS_BCSTART_Pos = @as(c_ulong, 6);
pub const RADIO_SHORTS_ADDRESS_BCSTART_Msk = @as(c_ulong, 0x1) << RADIO_SHORTS_ADDRESS_BCSTART_Pos;
pub const RADIO_SHORTS_ADDRESS_BCSTART_Disabled = @as(c_ulong, 0);
pub const RADIO_SHORTS_ADDRESS_BCSTART_Enabled = @as(c_ulong, 1);
pub const RADIO_SHORTS_END_START_Pos = @as(c_ulong, 5);
pub const RADIO_SHORTS_END_START_Msk = @as(c_ulong, 0x1) << RADIO_SHORTS_END_START_Pos;
pub const RADIO_SHORTS_END_START_Disabled = @as(c_ulong, 0);
pub const RADIO_SHORTS_END_START_Enabled = @as(c_ulong, 1);
pub const RADIO_SHORTS_ADDRESS_RSSISTART_Pos = @as(c_ulong, 4);
pub const RADIO_SHORTS_ADDRESS_RSSISTART_Msk = @as(c_ulong, 0x1) << RADIO_SHORTS_ADDRESS_RSSISTART_Pos;
pub const RADIO_SHORTS_ADDRESS_RSSISTART_Disabled = @as(c_ulong, 0);
pub const RADIO_SHORTS_ADDRESS_RSSISTART_Enabled = @as(c_ulong, 1);
pub const RADIO_SHORTS_DISABLED_RXEN_Pos = @as(c_ulong, 3);
pub const RADIO_SHORTS_DISABLED_RXEN_Msk = @as(c_ulong, 0x1) << RADIO_SHORTS_DISABLED_RXEN_Pos;
pub const RADIO_SHORTS_DISABLED_RXEN_Disabled = @as(c_ulong, 0);
pub const RADIO_SHORTS_DISABLED_RXEN_Enabled = @as(c_ulong, 1);
pub const RADIO_SHORTS_DISABLED_TXEN_Pos = @as(c_ulong, 2);
pub const RADIO_SHORTS_DISABLED_TXEN_Msk = @as(c_ulong, 0x1) << RADIO_SHORTS_DISABLED_TXEN_Pos;
pub const RADIO_SHORTS_DISABLED_TXEN_Disabled = @as(c_ulong, 0);
pub const RADIO_SHORTS_DISABLED_TXEN_Enabled = @as(c_ulong, 1);
pub const RADIO_SHORTS_END_DISABLE_Pos = @as(c_ulong, 1);
pub const RADIO_SHORTS_END_DISABLE_Msk = @as(c_ulong, 0x1) << RADIO_SHORTS_END_DISABLE_Pos;
pub const RADIO_SHORTS_END_DISABLE_Disabled = @as(c_ulong, 0);
pub const RADIO_SHORTS_END_DISABLE_Enabled = @as(c_ulong, 1);
pub const RADIO_SHORTS_READY_START_Pos = @as(c_ulong, 0);
pub const RADIO_SHORTS_READY_START_Msk = @as(c_ulong, 0x1) << RADIO_SHORTS_READY_START_Pos;
pub const RADIO_SHORTS_READY_START_Disabled = @as(c_ulong, 0);
pub const RADIO_SHORTS_READY_START_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENSET_PHYEND_Pos = @as(c_ulong, 27);
pub const RADIO_INTENSET_PHYEND_Msk = @as(c_ulong, 0x1) << RADIO_INTENSET_PHYEND_Pos;
pub const RADIO_INTENSET_PHYEND_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENSET_PHYEND_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENSET_PHYEND_Set = @as(c_ulong, 1);
pub const RADIO_INTENSET_MHRMATCH_Pos = @as(c_ulong, 23);
pub const RADIO_INTENSET_MHRMATCH_Msk = @as(c_ulong, 0x1) << RADIO_INTENSET_MHRMATCH_Pos;
pub const RADIO_INTENSET_MHRMATCH_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENSET_MHRMATCH_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENSET_MHRMATCH_Set = @as(c_ulong, 1);
pub const RADIO_INTENSET_RXREADY_Pos = @as(c_ulong, 22);
pub const RADIO_INTENSET_RXREADY_Msk = @as(c_ulong, 0x1) << RADIO_INTENSET_RXREADY_Pos;
pub const RADIO_INTENSET_RXREADY_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENSET_RXREADY_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENSET_RXREADY_Set = @as(c_ulong, 1);
pub const RADIO_INTENSET_TXREADY_Pos = @as(c_ulong, 21);
pub const RADIO_INTENSET_TXREADY_Msk = @as(c_ulong, 0x1) << RADIO_INTENSET_TXREADY_Pos;
pub const RADIO_INTENSET_TXREADY_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENSET_TXREADY_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENSET_TXREADY_Set = @as(c_ulong, 1);
pub const RADIO_INTENSET_RATEBOOST_Pos = @as(c_ulong, 20);
pub const RADIO_INTENSET_RATEBOOST_Msk = @as(c_ulong, 0x1) << RADIO_INTENSET_RATEBOOST_Pos;
pub const RADIO_INTENSET_RATEBOOST_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENSET_RATEBOOST_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENSET_RATEBOOST_Set = @as(c_ulong, 1);
pub const RADIO_INTENSET_CCASTOPPED_Pos = @as(c_ulong, 19);
pub const RADIO_INTENSET_CCASTOPPED_Msk = @as(c_ulong, 0x1) << RADIO_INTENSET_CCASTOPPED_Pos;
pub const RADIO_INTENSET_CCASTOPPED_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENSET_CCASTOPPED_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENSET_CCASTOPPED_Set = @as(c_ulong, 1);
pub const RADIO_INTENSET_CCABUSY_Pos = @as(c_ulong, 18);
pub const RADIO_INTENSET_CCABUSY_Msk = @as(c_ulong, 0x1) << RADIO_INTENSET_CCABUSY_Pos;
pub const RADIO_INTENSET_CCABUSY_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENSET_CCABUSY_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENSET_CCABUSY_Set = @as(c_ulong, 1);
pub const RADIO_INTENSET_CCAIDLE_Pos = @as(c_ulong, 17);
pub const RADIO_INTENSET_CCAIDLE_Msk = @as(c_ulong, 0x1) << RADIO_INTENSET_CCAIDLE_Pos;
pub const RADIO_INTENSET_CCAIDLE_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENSET_CCAIDLE_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENSET_CCAIDLE_Set = @as(c_ulong, 1);
pub const RADIO_INTENSET_EDSTOPPED_Pos = @as(c_ulong, 16);
pub const RADIO_INTENSET_EDSTOPPED_Msk = @as(c_ulong, 0x1) << RADIO_INTENSET_EDSTOPPED_Pos;
pub const RADIO_INTENSET_EDSTOPPED_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENSET_EDSTOPPED_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENSET_EDSTOPPED_Set = @as(c_ulong, 1);
pub const RADIO_INTENSET_EDEND_Pos = @as(c_ulong, 15);
pub const RADIO_INTENSET_EDEND_Msk = @as(c_ulong, 0x1) << RADIO_INTENSET_EDEND_Pos;
pub const RADIO_INTENSET_EDEND_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENSET_EDEND_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENSET_EDEND_Set = @as(c_ulong, 1);
pub const RADIO_INTENSET_FRAMESTART_Pos = @as(c_ulong, 14);
pub const RADIO_INTENSET_FRAMESTART_Msk = @as(c_ulong, 0x1) << RADIO_INTENSET_FRAMESTART_Pos;
pub const RADIO_INTENSET_FRAMESTART_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENSET_FRAMESTART_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENSET_FRAMESTART_Set = @as(c_ulong, 1);
pub const RADIO_INTENSET_CRCERROR_Pos = @as(c_ulong, 13);
pub const RADIO_INTENSET_CRCERROR_Msk = @as(c_ulong, 0x1) << RADIO_INTENSET_CRCERROR_Pos;
pub const RADIO_INTENSET_CRCERROR_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENSET_CRCERROR_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENSET_CRCERROR_Set = @as(c_ulong, 1);
pub const RADIO_INTENSET_CRCOK_Pos = @as(c_ulong, 12);
pub const RADIO_INTENSET_CRCOK_Msk = @as(c_ulong, 0x1) << RADIO_INTENSET_CRCOK_Pos;
pub const RADIO_INTENSET_CRCOK_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENSET_CRCOK_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENSET_CRCOK_Set = @as(c_ulong, 1);
pub const RADIO_INTENSET_BCMATCH_Pos = @as(c_ulong, 10);
pub const RADIO_INTENSET_BCMATCH_Msk = @as(c_ulong, 0x1) << RADIO_INTENSET_BCMATCH_Pos;
pub const RADIO_INTENSET_BCMATCH_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENSET_BCMATCH_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENSET_BCMATCH_Set = @as(c_ulong, 1);
pub const RADIO_INTENSET_RSSIEND_Pos = @as(c_ulong, 7);
pub const RADIO_INTENSET_RSSIEND_Msk = @as(c_ulong, 0x1) << RADIO_INTENSET_RSSIEND_Pos;
pub const RADIO_INTENSET_RSSIEND_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENSET_RSSIEND_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENSET_RSSIEND_Set = @as(c_ulong, 1);
pub const RADIO_INTENSET_DEVMISS_Pos = @as(c_ulong, 6);
pub const RADIO_INTENSET_DEVMISS_Msk = @as(c_ulong, 0x1) << RADIO_INTENSET_DEVMISS_Pos;
pub const RADIO_INTENSET_DEVMISS_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENSET_DEVMISS_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENSET_DEVMISS_Set = @as(c_ulong, 1);
pub const RADIO_INTENSET_DEVMATCH_Pos = @as(c_ulong, 5);
pub const RADIO_INTENSET_DEVMATCH_Msk = @as(c_ulong, 0x1) << RADIO_INTENSET_DEVMATCH_Pos;
pub const RADIO_INTENSET_DEVMATCH_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENSET_DEVMATCH_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENSET_DEVMATCH_Set = @as(c_ulong, 1);
pub const RADIO_INTENSET_DISABLED_Pos = @as(c_ulong, 4);
pub const RADIO_INTENSET_DISABLED_Msk = @as(c_ulong, 0x1) << RADIO_INTENSET_DISABLED_Pos;
pub const RADIO_INTENSET_DISABLED_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENSET_DISABLED_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENSET_DISABLED_Set = @as(c_ulong, 1);
pub const RADIO_INTENSET_END_Pos = @as(c_ulong, 3);
pub const RADIO_INTENSET_END_Msk = @as(c_ulong, 0x1) << RADIO_INTENSET_END_Pos;
pub const RADIO_INTENSET_END_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENSET_END_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENSET_END_Set = @as(c_ulong, 1);
pub const RADIO_INTENSET_PAYLOAD_Pos = @as(c_ulong, 2);
pub const RADIO_INTENSET_PAYLOAD_Msk = @as(c_ulong, 0x1) << RADIO_INTENSET_PAYLOAD_Pos;
pub const RADIO_INTENSET_PAYLOAD_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENSET_PAYLOAD_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENSET_PAYLOAD_Set = @as(c_ulong, 1);
pub const RADIO_INTENSET_ADDRESS_Pos = @as(c_ulong, 1);
pub const RADIO_INTENSET_ADDRESS_Msk = @as(c_ulong, 0x1) << RADIO_INTENSET_ADDRESS_Pos;
pub const RADIO_INTENSET_ADDRESS_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENSET_ADDRESS_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENSET_ADDRESS_Set = @as(c_ulong, 1);
pub const RADIO_INTENSET_READY_Pos = @as(c_ulong, 0);
pub const RADIO_INTENSET_READY_Msk = @as(c_ulong, 0x1) << RADIO_INTENSET_READY_Pos;
pub const RADIO_INTENSET_READY_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENSET_READY_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENSET_READY_Set = @as(c_ulong, 1);
pub const RADIO_INTENCLR_PHYEND_Pos = @as(c_ulong, 27);
pub const RADIO_INTENCLR_PHYEND_Msk = @as(c_ulong, 0x1) << RADIO_INTENCLR_PHYEND_Pos;
pub const RADIO_INTENCLR_PHYEND_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENCLR_PHYEND_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENCLR_PHYEND_Clear = @as(c_ulong, 1);
pub const RADIO_INTENCLR_MHRMATCH_Pos = @as(c_ulong, 23);
pub const RADIO_INTENCLR_MHRMATCH_Msk = @as(c_ulong, 0x1) << RADIO_INTENCLR_MHRMATCH_Pos;
pub const RADIO_INTENCLR_MHRMATCH_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENCLR_MHRMATCH_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENCLR_MHRMATCH_Clear = @as(c_ulong, 1);
pub const RADIO_INTENCLR_RXREADY_Pos = @as(c_ulong, 22);
pub const RADIO_INTENCLR_RXREADY_Msk = @as(c_ulong, 0x1) << RADIO_INTENCLR_RXREADY_Pos;
pub const RADIO_INTENCLR_RXREADY_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENCLR_RXREADY_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENCLR_RXREADY_Clear = @as(c_ulong, 1);
pub const RADIO_INTENCLR_TXREADY_Pos = @as(c_ulong, 21);
pub const RADIO_INTENCLR_TXREADY_Msk = @as(c_ulong, 0x1) << RADIO_INTENCLR_TXREADY_Pos;
pub const RADIO_INTENCLR_TXREADY_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENCLR_TXREADY_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENCLR_TXREADY_Clear = @as(c_ulong, 1);
pub const RADIO_INTENCLR_RATEBOOST_Pos = @as(c_ulong, 20);
pub const RADIO_INTENCLR_RATEBOOST_Msk = @as(c_ulong, 0x1) << RADIO_INTENCLR_RATEBOOST_Pos;
pub const RADIO_INTENCLR_RATEBOOST_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENCLR_RATEBOOST_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENCLR_RATEBOOST_Clear = @as(c_ulong, 1);
pub const RADIO_INTENCLR_CCASTOPPED_Pos = @as(c_ulong, 19);
pub const RADIO_INTENCLR_CCASTOPPED_Msk = @as(c_ulong, 0x1) << RADIO_INTENCLR_CCASTOPPED_Pos;
pub const RADIO_INTENCLR_CCASTOPPED_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENCLR_CCASTOPPED_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENCLR_CCASTOPPED_Clear = @as(c_ulong, 1);
pub const RADIO_INTENCLR_CCABUSY_Pos = @as(c_ulong, 18);
pub const RADIO_INTENCLR_CCABUSY_Msk = @as(c_ulong, 0x1) << RADIO_INTENCLR_CCABUSY_Pos;
pub const RADIO_INTENCLR_CCABUSY_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENCLR_CCABUSY_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENCLR_CCABUSY_Clear = @as(c_ulong, 1);
pub const RADIO_INTENCLR_CCAIDLE_Pos = @as(c_ulong, 17);
pub const RADIO_INTENCLR_CCAIDLE_Msk = @as(c_ulong, 0x1) << RADIO_INTENCLR_CCAIDLE_Pos;
pub const RADIO_INTENCLR_CCAIDLE_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENCLR_CCAIDLE_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENCLR_CCAIDLE_Clear = @as(c_ulong, 1);
pub const RADIO_INTENCLR_EDSTOPPED_Pos = @as(c_ulong, 16);
pub const RADIO_INTENCLR_EDSTOPPED_Msk = @as(c_ulong, 0x1) << RADIO_INTENCLR_EDSTOPPED_Pos;
pub const RADIO_INTENCLR_EDSTOPPED_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENCLR_EDSTOPPED_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENCLR_EDSTOPPED_Clear = @as(c_ulong, 1);
pub const RADIO_INTENCLR_EDEND_Pos = @as(c_ulong, 15);
pub const RADIO_INTENCLR_EDEND_Msk = @as(c_ulong, 0x1) << RADIO_INTENCLR_EDEND_Pos;
pub const RADIO_INTENCLR_EDEND_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENCLR_EDEND_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENCLR_EDEND_Clear = @as(c_ulong, 1);
pub const RADIO_INTENCLR_FRAMESTART_Pos = @as(c_ulong, 14);
pub const RADIO_INTENCLR_FRAMESTART_Msk = @as(c_ulong, 0x1) << RADIO_INTENCLR_FRAMESTART_Pos;
pub const RADIO_INTENCLR_FRAMESTART_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENCLR_FRAMESTART_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENCLR_FRAMESTART_Clear = @as(c_ulong, 1);
pub const RADIO_INTENCLR_CRCERROR_Pos = @as(c_ulong, 13);
pub const RADIO_INTENCLR_CRCERROR_Msk = @as(c_ulong, 0x1) << RADIO_INTENCLR_CRCERROR_Pos;
pub const RADIO_INTENCLR_CRCERROR_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENCLR_CRCERROR_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENCLR_CRCERROR_Clear = @as(c_ulong, 1);
pub const RADIO_INTENCLR_CRCOK_Pos = @as(c_ulong, 12);
pub const RADIO_INTENCLR_CRCOK_Msk = @as(c_ulong, 0x1) << RADIO_INTENCLR_CRCOK_Pos;
pub const RADIO_INTENCLR_CRCOK_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENCLR_CRCOK_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENCLR_CRCOK_Clear = @as(c_ulong, 1);
pub const RADIO_INTENCLR_BCMATCH_Pos = @as(c_ulong, 10);
pub const RADIO_INTENCLR_BCMATCH_Msk = @as(c_ulong, 0x1) << RADIO_INTENCLR_BCMATCH_Pos;
pub const RADIO_INTENCLR_BCMATCH_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENCLR_BCMATCH_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENCLR_BCMATCH_Clear = @as(c_ulong, 1);
pub const RADIO_INTENCLR_RSSIEND_Pos = @as(c_ulong, 7);
pub const RADIO_INTENCLR_RSSIEND_Msk = @as(c_ulong, 0x1) << RADIO_INTENCLR_RSSIEND_Pos;
pub const RADIO_INTENCLR_RSSIEND_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENCLR_RSSIEND_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENCLR_RSSIEND_Clear = @as(c_ulong, 1);
pub const RADIO_INTENCLR_DEVMISS_Pos = @as(c_ulong, 6);
pub const RADIO_INTENCLR_DEVMISS_Msk = @as(c_ulong, 0x1) << RADIO_INTENCLR_DEVMISS_Pos;
pub const RADIO_INTENCLR_DEVMISS_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENCLR_DEVMISS_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENCLR_DEVMISS_Clear = @as(c_ulong, 1);
pub const RADIO_INTENCLR_DEVMATCH_Pos = @as(c_ulong, 5);
pub const RADIO_INTENCLR_DEVMATCH_Msk = @as(c_ulong, 0x1) << RADIO_INTENCLR_DEVMATCH_Pos;
pub const RADIO_INTENCLR_DEVMATCH_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENCLR_DEVMATCH_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENCLR_DEVMATCH_Clear = @as(c_ulong, 1);
pub const RADIO_INTENCLR_DISABLED_Pos = @as(c_ulong, 4);
pub const RADIO_INTENCLR_DISABLED_Msk = @as(c_ulong, 0x1) << RADIO_INTENCLR_DISABLED_Pos;
pub const RADIO_INTENCLR_DISABLED_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENCLR_DISABLED_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENCLR_DISABLED_Clear = @as(c_ulong, 1);
pub const RADIO_INTENCLR_END_Pos = @as(c_ulong, 3);
pub const RADIO_INTENCLR_END_Msk = @as(c_ulong, 0x1) << RADIO_INTENCLR_END_Pos;
pub const RADIO_INTENCLR_END_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENCLR_END_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENCLR_END_Clear = @as(c_ulong, 1);
pub const RADIO_INTENCLR_PAYLOAD_Pos = @as(c_ulong, 2);
pub const RADIO_INTENCLR_PAYLOAD_Msk = @as(c_ulong, 0x1) << RADIO_INTENCLR_PAYLOAD_Pos;
pub const RADIO_INTENCLR_PAYLOAD_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENCLR_PAYLOAD_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENCLR_PAYLOAD_Clear = @as(c_ulong, 1);
pub const RADIO_INTENCLR_ADDRESS_Pos = @as(c_ulong, 1);
pub const RADIO_INTENCLR_ADDRESS_Msk = @as(c_ulong, 0x1) << RADIO_INTENCLR_ADDRESS_Pos;
pub const RADIO_INTENCLR_ADDRESS_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENCLR_ADDRESS_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENCLR_ADDRESS_Clear = @as(c_ulong, 1);
pub const RADIO_INTENCLR_READY_Pos = @as(c_ulong, 0);
pub const RADIO_INTENCLR_READY_Msk = @as(c_ulong, 0x1) << RADIO_INTENCLR_READY_Pos;
pub const RADIO_INTENCLR_READY_Disabled = @as(c_ulong, 0);
pub const RADIO_INTENCLR_READY_Enabled = @as(c_ulong, 1);
pub const RADIO_INTENCLR_READY_Clear = @as(c_ulong, 1);
pub const RADIO_CRCSTATUS_CRCSTATUS_Pos = @as(c_ulong, 0);
pub const RADIO_CRCSTATUS_CRCSTATUS_Msk = @as(c_ulong, 0x1) << RADIO_CRCSTATUS_CRCSTATUS_Pos;
pub const RADIO_CRCSTATUS_CRCSTATUS_CRCError = @as(c_ulong, 0);
pub const RADIO_CRCSTATUS_CRCSTATUS_CRCOk = @as(c_ulong, 1);
pub const RADIO_RXMATCH_RXMATCH_Pos = @as(c_ulong, 0);
pub const RADIO_RXMATCH_RXMATCH_Msk = @as(c_ulong, 0x7) << RADIO_RXMATCH_RXMATCH_Pos;
pub const RADIO_RXCRC_RXCRC_Pos = @as(c_ulong, 0);
pub const RADIO_RXCRC_RXCRC_Msk = @as(c_ulong, 0xFFFFFF) << RADIO_RXCRC_RXCRC_Pos;
pub const RADIO_DAI_DAI_Pos = @as(c_ulong, 0);
pub const RADIO_DAI_DAI_Msk = @as(c_ulong, 0x7) << RADIO_DAI_DAI_Pos;
pub const RADIO_PDUSTAT_CISTAT_Pos = @as(c_ulong, 1);
pub const RADIO_PDUSTAT_CISTAT_Msk = @as(c_ulong, 0x3) << RADIO_PDUSTAT_CISTAT_Pos;
pub const RADIO_PDUSTAT_CISTAT_LR125kbit = @as(c_ulong, 0);
pub const RADIO_PDUSTAT_CISTAT_LR500kbit = @as(c_ulong, 1);
pub const RADIO_PDUSTAT_PDUSTAT_Pos = @as(c_ulong, 0);
pub const RADIO_PDUSTAT_PDUSTAT_Msk = @as(c_ulong, 0x1) << RADIO_PDUSTAT_PDUSTAT_Pos;
pub const RADIO_PDUSTAT_PDUSTAT_LessThan = @as(c_ulong, 0);
pub const RADIO_PDUSTAT_PDUSTAT_GreaterThan = @as(c_ulong, 1);
pub const RADIO_PACKETPTR_PACKETPTR_Pos = @as(c_ulong, 0);
pub const RADIO_PACKETPTR_PACKETPTR_Msk = @as(c_ulong, 0xFFFFFFFF) << RADIO_PACKETPTR_PACKETPTR_Pos;
pub const RADIO_FREQUENCY_MAP_Pos = @as(c_ulong, 8);
pub const RADIO_FREQUENCY_MAP_Msk = @as(c_ulong, 0x1) << RADIO_FREQUENCY_MAP_Pos;
pub const RADIO_FREQUENCY_MAP_Default = @as(c_ulong, 0);
pub const RADIO_FREQUENCY_MAP_Low = @as(c_ulong, 1);
pub const RADIO_FREQUENCY_FREQUENCY_Pos = @as(c_ulong, 0);
pub const RADIO_FREQUENCY_FREQUENCY_Msk = @as(c_ulong, 0x7F) << RADIO_FREQUENCY_FREQUENCY_Pos;
pub const RADIO_TXPOWER_TXPOWER_Pos = @as(c_ulong, 0);
pub const RADIO_TXPOWER_TXPOWER_Msk = @as(c_ulong, 0xFF) << RADIO_TXPOWER_TXPOWER_Pos;
pub const RADIO_TXPOWER_TXPOWER_0dBm = @as(c_ulong, 0x0);
pub const RADIO_TXPOWER_TXPOWER_Pos2dBm = @as(c_ulong, 0x2);
pub const RADIO_TXPOWER_TXPOWER_Pos3dBm = @as(c_ulong, 0x3);
pub const RADIO_TXPOWER_TXPOWER_Pos4dBm = @as(c_ulong, 0x4);
pub const RADIO_TXPOWER_TXPOWER_Pos5dBm = @as(c_ulong, 0x5);
pub const RADIO_TXPOWER_TXPOWER_Pos6dBm = @as(c_ulong, 0x6);
pub const RADIO_TXPOWER_TXPOWER_Pos7dBm = @as(c_ulong, 0x7);
pub const RADIO_TXPOWER_TXPOWER_Pos8dBm = @as(c_ulong, 0x8);
pub const RADIO_TXPOWER_TXPOWER_Neg40dBm = @as(c_ulong, 0xD8);
pub const RADIO_TXPOWER_TXPOWER_Neg30dBm = @as(c_ulong, 0xE2);
pub const RADIO_TXPOWER_TXPOWER_Neg20dBm = @as(c_ulong, 0xEC);
pub const RADIO_TXPOWER_TXPOWER_Neg16dBm = @as(c_ulong, 0xF0);
pub const RADIO_TXPOWER_TXPOWER_Neg12dBm = @as(c_ulong, 0xF4);
pub const RADIO_TXPOWER_TXPOWER_Neg8dBm = @as(c_ulong, 0xF8);
pub const RADIO_TXPOWER_TXPOWER_Neg4dBm = @as(c_ulong, 0xFC);
pub const RADIO_MODE_MODE_Pos = @as(c_ulong, 0);
pub const RADIO_MODE_MODE_Msk = @as(c_ulong, 0xF) << RADIO_MODE_MODE_Pos;
pub const RADIO_MODE_MODE_Nrf_1Mbit = @as(c_ulong, 0);
pub const RADIO_MODE_MODE_Nrf_2Mbit = @as(c_ulong, 1);
pub const RADIO_MODE_MODE_Ble_1Mbit = @as(c_ulong, 3);
pub const RADIO_MODE_MODE_Ble_2Mbit = @as(c_ulong, 4);
pub const RADIO_MODE_MODE_Ble_LR125Kbit = @as(c_ulong, 5);
pub const RADIO_MODE_MODE_Ble_LR500Kbit = @as(c_ulong, 6);
pub const RADIO_MODE_MODE_Ieee802154_250Kbit = @as(c_ulong, 15);
pub const RADIO_PCNF0_TERMLEN_Pos = @as(c_ulong, 29);
pub const RADIO_PCNF0_TERMLEN_Msk = @as(c_ulong, 0x3) << RADIO_PCNF0_TERMLEN_Pos;
pub const RADIO_PCNF0_CRCINC_Pos = @as(c_ulong, 26);
pub const RADIO_PCNF0_CRCINC_Msk = @as(c_ulong, 0x1) << RADIO_PCNF0_CRCINC_Pos;
pub const RADIO_PCNF0_CRCINC_Exclude = @as(c_ulong, 0);
pub const RADIO_PCNF0_CRCINC_Include = @as(c_ulong, 1);
pub const RADIO_PCNF0_PLEN_Pos = @as(c_ulong, 24);
pub const RADIO_PCNF0_PLEN_Msk = @as(c_ulong, 0x3) << RADIO_PCNF0_PLEN_Pos;
pub const RADIO_PCNF0_PLEN_8bit = @as(c_ulong, 0);
pub const RADIO_PCNF0_PLEN_16bit = @as(c_ulong, 1);
pub const RADIO_PCNF0_PLEN_32bitZero = @as(c_ulong, 2);
pub const RADIO_PCNF0_PLEN_LongRange = @as(c_ulong, 3);
pub const RADIO_PCNF0_CILEN_Pos = @as(c_ulong, 22);
pub const RADIO_PCNF0_CILEN_Msk = @as(c_ulong, 0x3) << RADIO_PCNF0_CILEN_Pos;
pub const RADIO_PCNF0_S1INCL_Pos = @as(c_ulong, 20);
pub const RADIO_PCNF0_S1INCL_Msk = @as(c_ulong, 0x1) << RADIO_PCNF0_S1INCL_Pos;
pub const RADIO_PCNF0_S1INCL_Automatic = @as(c_ulong, 0);
pub const RADIO_PCNF0_S1INCL_Include = @as(c_ulong, 1);
pub const RADIO_PCNF0_S1LEN_Pos = @as(c_ulong, 16);
pub const RADIO_PCNF0_S1LEN_Msk = @as(c_ulong, 0xF) << RADIO_PCNF0_S1LEN_Pos;
pub const RADIO_PCNF0_S0LEN_Pos = @as(c_ulong, 8);
pub const RADIO_PCNF0_S0LEN_Msk = @as(c_ulong, 0x1) << RADIO_PCNF0_S0LEN_Pos;
pub const RADIO_PCNF0_LFLEN_Pos = @as(c_ulong, 0);
pub const RADIO_PCNF0_LFLEN_Msk = @as(c_ulong, 0xF) << RADIO_PCNF0_LFLEN_Pos;
pub const RADIO_PCNF1_WHITEEN_Pos = @as(c_ulong, 25);
pub const RADIO_PCNF1_WHITEEN_Msk = @as(c_ulong, 0x1) << RADIO_PCNF1_WHITEEN_Pos;
pub const RADIO_PCNF1_WHITEEN_Disabled = @as(c_ulong, 0);
pub const RADIO_PCNF1_WHITEEN_Enabled = @as(c_ulong, 1);
pub const RADIO_PCNF1_ENDIAN_Pos = @as(c_ulong, 24);
pub const RADIO_PCNF1_ENDIAN_Msk = @as(c_ulong, 0x1) << RADIO_PCNF1_ENDIAN_Pos;
pub const RADIO_PCNF1_ENDIAN_Little = @as(c_ulong, 0);
pub const RADIO_PCNF1_ENDIAN_Big = @as(c_ulong, 1);
pub const RADIO_PCNF1_BALEN_Pos = @as(c_ulong, 16);
pub const RADIO_PCNF1_BALEN_Msk = @as(c_ulong, 0x7) << RADIO_PCNF1_BALEN_Pos;
pub const RADIO_PCNF1_STATLEN_Pos = @as(c_ulong, 8);
pub const RADIO_PCNF1_STATLEN_Msk = @as(c_ulong, 0xFF) << RADIO_PCNF1_STATLEN_Pos;
pub const RADIO_PCNF1_MAXLEN_Pos = @as(c_ulong, 0);
pub const RADIO_PCNF1_MAXLEN_Msk = @as(c_ulong, 0xFF) << RADIO_PCNF1_MAXLEN_Pos;
pub const RADIO_BASE0_BASE0_Pos = @as(c_ulong, 0);
pub const RADIO_BASE0_BASE0_Msk = @as(c_ulong, 0xFFFFFFFF) << RADIO_BASE0_BASE0_Pos;
pub const RADIO_BASE1_BASE1_Pos = @as(c_ulong, 0);
pub const RADIO_BASE1_BASE1_Msk = @as(c_ulong, 0xFFFFFFFF) << RADIO_BASE1_BASE1_Pos;
pub const RADIO_PREFIX0_AP3_Pos = @as(c_ulong, 24);
pub const RADIO_PREFIX0_AP3_Msk = @as(c_ulong, 0xFF) << RADIO_PREFIX0_AP3_Pos;
pub const RADIO_PREFIX0_AP2_Pos = @as(c_ulong, 16);
pub const RADIO_PREFIX0_AP2_Msk = @as(c_ulong, 0xFF) << RADIO_PREFIX0_AP2_Pos;
pub const RADIO_PREFIX0_AP1_Pos = @as(c_ulong, 8);
pub const RADIO_PREFIX0_AP1_Msk = @as(c_ulong, 0xFF) << RADIO_PREFIX0_AP1_Pos;
pub const RADIO_PREFIX0_AP0_Pos = @as(c_ulong, 0);
pub const RADIO_PREFIX0_AP0_Msk = @as(c_ulong, 0xFF) << RADIO_PREFIX0_AP0_Pos;
pub const RADIO_PREFIX1_AP7_Pos = @as(c_ulong, 24);
pub const RADIO_PREFIX1_AP7_Msk = @as(c_ulong, 0xFF) << RADIO_PREFIX1_AP7_Pos;
pub const RADIO_PREFIX1_AP6_Pos = @as(c_ulong, 16);
pub const RADIO_PREFIX1_AP6_Msk = @as(c_ulong, 0xFF) << RADIO_PREFIX1_AP6_Pos;
pub const RADIO_PREFIX1_AP5_Pos = @as(c_ulong, 8);
pub const RADIO_PREFIX1_AP5_Msk = @as(c_ulong, 0xFF) << RADIO_PREFIX1_AP5_Pos;
pub const RADIO_PREFIX1_AP4_Pos = @as(c_ulong, 0);
pub const RADIO_PREFIX1_AP4_Msk = @as(c_ulong, 0xFF) << RADIO_PREFIX1_AP4_Pos;
pub const RADIO_TXADDRESS_TXADDRESS_Pos = @as(c_ulong, 0);
pub const RADIO_TXADDRESS_TXADDRESS_Msk = @as(c_ulong, 0x7) << RADIO_TXADDRESS_TXADDRESS_Pos;
pub const RADIO_RXADDRESSES_ADDR7_Pos = @as(c_ulong, 7);
pub const RADIO_RXADDRESSES_ADDR7_Msk = @as(c_ulong, 0x1) << RADIO_RXADDRESSES_ADDR7_Pos;
pub const RADIO_RXADDRESSES_ADDR7_Disabled = @as(c_ulong, 0);
pub const RADIO_RXADDRESSES_ADDR7_Enabled = @as(c_ulong, 1);
pub const RADIO_RXADDRESSES_ADDR6_Pos = @as(c_ulong, 6);
pub const RADIO_RXADDRESSES_ADDR6_Msk = @as(c_ulong, 0x1) << RADIO_RXADDRESSES_ADDR6_Pos;
pub const RADIO_RXADDRESSES_ADDR6_Disabled = @as(c_ulong, 0);
pub const RADIO_RXADDRESSES_ADDR6_Enabled = @as(c_ulong, 1);
pub const RADIO_RXADDRESSES_ADDR5_Pos = @as(c_ulong, 5);
pub const RADIO_RXADDRESSES_ADDR5_Msk = @as(c_ulong, 0x1) << RADIO_RXADDRESSES_ADDR5_Pos;
pub const RADIO_RXADDRESSES_ADDR5_Disabled = @as(c_ulong, 0);
pub const RADIO_RXADDRESSES_ADDR5_Enabled = @as(c_ulong, 1);
pub const RADIO_RXADDRESSES_ADDR4_Pos = @as(c_ulong, 4);
pub const RADIO_RXADDRESSES_ADDR4_Msk = @as(c_ulong, 0x1) << RADIO_RXADDRESSES_ADDR4_Pos;
pub const RADIO_RXADDRESSES_ADDR4_Disabled = @as(c_ulong, 0);
pub const RADIO_RXADDRESSES_ADDR4_Enabled = @as(c_ulong, 1);
pub const RADIO_RXADDRESSES_ADDR3_Pos = @as(c_ulong, 3);
pub const RADIO_RXADDRESSES_ADDR3_Msk = @as(c_ulong, 0x1) << RADIO_RXADDRESSES_ADDR3_Pos;
pub const RADIO_RXADDRESSES_ADDR3_Disabled = @as(c_ulong, 0);
pub const RADIO_RXADDRESSES_ADDR3_Enabled = @as(c_ulong, 1);
pub const RADIO_RXADDRESSES_ADDR2_Pos = @as(c_ulong, 2);
pub const RADIO_RXADDRESSES_ADDR2_Msk = @as(c_ulong, 0x1) << RADIO_RXADDRESSES_ADDR2_Pos;
pub const RADIO_RXADDRESSES_ADDR2_Disabled = @as(c_ulong, 0);
pub const RADIO_RXADDRESSES_ADDR2_Enabled = @as(c_ulong, 1);
pub const RADIO_RXADDRESSES_ADDR1_Pos = @as(c_ulong, 1);
pub const RADIO_RXADDRESSES_ADDR1_Msk = @as(c_ulong, 0x1) << RADIO_RXADDRESSES_ADDR1_Pos;
pub const RADIO_RXADDRESSES_ADDR1_Disabled = @as(c_ulong, 0);
pub const RADIO_RXADDRESSES_ADDR1_Enabled = @as(c_ulong, 1);
pub const RADIO_RXADDRESSES_ADDR0_Pos = @as(c_ulong, 0);
pub const RADIO_RXADDRESSES_ADDR0_Msk = @as(c_ulong, 0x1) << RADIO_RXADDRESSES_ADDR0_Pos;
pub const RADIO_RXADDRESSES_ADDR0_Disabled = @as(c_ulong, 0);
pub const RADIO_RXADDRESSES_ADDR0_Enabled = @as(c_ulong, 1);
pub const RADIO_CRCCNF_SKIPADDR_Pos = @as(c_ulong, 8);
pub const RADIO_CRCCNF_SKIPADDR_Msk = @as(c_ulong, 0x3) << RADIO_CRCCNF_SKIPADDR_Pos;
pub const RADIO_CRCCNF_SKIPADDR_Include = @as(c_ulong, 0);
pub const RADIO_CRCCNF_SKIPADDR_Skip = @as(c_ulong, 1);
pub const RADIO_CRCCNF_SKIPADDR_Ieee802154 = @as(c_ulong, 2);
pub const RADIO_CRCCNF_LEN_Pos = @as(c_ulong, 0);
pub const RADIO_CRCCNF_LEN_Msk = @as(c_ulong, 0x3) << RADIO_CRCCNF_LEN_Pos;
pub const RADIO_CRCCNF_LEN_Disabled = @as(c_ulong, 0);
pub const RADIO_CRCCNF_LEN_One = @as(c_ulong, 1);
pub const RADIO_CRCCNF_LEN_Two = @as(c_ulong, 2);
pub const RADIO_CRCCNF_LEN_Three = @as(c_ulong, 3);
pub const RADIO_CRCPOLY_CRCPOLY_Pos = @as(c_ulong, 0);
pub const RADIO_CRCPOLY_CRCPOLY_Msk = @as(c_ulong, 0xFFFFFF) << RADIO_CRCPOLY_CRCPOLY_Pos;
pub const RADIO_CRCINIT_CRCINIT_Pos = @as(c_ulong, 0);
pub const RADIO_CRCINIT_CRCINIT_Msk = @as(c_ulong, 0xFFFFFF) << RADIO_CRCINIT_CRCINIT_Pos;
pub const RADIO_TIFS_TIFS_Pos = @as(c_ulong, 0);
pub const RADIO_TIFS_TIFS_Msk = @as(c_ulong, 0x3FF) << RADIO_TIFS_TIFS_Pos;
pub const RADIO_RSSISAMPLE_RSSISAMPLE_Pos = @as(c_ulong, 0);
pub const RADIO_RSSISAMPLE_RSSISAMPLE_Msk = @as(c_ulong, 0x7F) << RADIO_RSSISAMPLE_RSSISAMPLE_Pos;
pub const RADIO_STATE_STATE_Pos = @as(c_ulong, 0);
pub const RADIO_STATE_STATE_Msk = @as(c_ulong, 0xF) << RADIO_STATE_STATE_Pos;
pub const RADIO_STATE_STATE_Disabled = @as(c_ulong, 0);
pub const RADIO_STATE_STATE_RxRu = @as(c_ulong, 1);
pub const RADIO_STATE_STATE_RxIdle = @as(c_ulong, 2);
pub const RADIO_STATE_STATE_Rx = @as(c_ulong, 3);
pub const RADIO_STATE_STATE_RxDisable = @as(c_ulong, 4);
pub const RADIO_STATE_STATE_TxRu = @as(c_ulong, 9);
pub const RADIO_STATE_STATE_TxIdle = @as(c_ulong, 10);
pub const RADIO_STATE_STATE_Tx = @as(c_ulong, 11);
pub const RADIO_STATE_STATE_TxDisable = @as(c_ulong, 12);
pub const RADIO_DATAWHITEIV_DATAWHITEIV_Pos = @as(c_ulong, 0);
pub const RADIO_DATAWHITEIV_DATAWHITEIV_Msk = @as(c_ulong, 0x7F) << RADIO_DATAWHITEIV_DATAWHITEIV_Pos;
pub const RADIO_BCC_BCC_Pos = @as(c_ulong, 0);
pub const RADIO_BCC_BCC_Msk = @as(c_ulong, 0xFFFFFFFF) << RADIO_BCC_BCC_Pos;
pub const RADIO_DAB_DAB_Pos = @as(c_ulong, 0);
pub const RADIO_DAB_DAB_Msk = @as(c_ulong, 0xFFFFFFFF) << RADIO_DAB_DAB_Pos;
pub const RADIO_DAP_DAP_Pos = @as(c_ulong, 0);
pub const RADIO_DAP_DAP_Msk = @as(c_ulong, 0xFFFF) << RADIO_DAP_DAP_Pos;
pub const RADIO_DACNF_TXADD7_Pos = @as(c_ulong, 15);
pub const RADIO_DACNF_TXADD7_Msk = @as(c_ulong, 0x1) << RADIO_DACNF_TXADD7_Pos;
pub const RADIO_DACNF_TXADD6_Pos = @as(c_ulong, 14);
pub const RADIO_DACNF_TXADD6_Msk = @as(c_ulong, 0x1) << RADIO_DACNF_TXADD6_Pos;
pub const RADIO_DACNF_TXADD5_Pos = @as(c_ulong, 13);
pub const RADIO_DACNF_TXADD5_Msk = @as(c_ulong, 0x1) << RADIO_DACNF_TXADD5_Pos;
pub const RADIO_DACNF_TXADD4_Pos = @as(c_ulong, 12);
pub const RADIO_DACNF_TXADD4_Msk = @as(c_ulong, 0x1) << RADIO_DACNF_TXADD4_Pos;
pub const RADIO_DACNF_TXADD3_Pos = @as(c_ulong, 11);
pub const RADIO_DACNF_TXADD3_Msk = @as(c_ulong, 0x1) << RADIO_DACNF_TXADD3_Pos;
pub const RADIO_DACNF_TXADD2_Pos = @as(c_ulong, 10);
pub const RADIO_DACNF_TXADD2_Msk = @as(c_ulong, 0x1) << RADIO_DACNF_TXADD2_Pos;
pub const RADIO_DACNF_TXADD1_Pos = @as(c_ulong, 9);
pub const RADIO_DACNF_TXADD1_Msk = @as(c_ulong, 0x1) << RADIO_DACNF_TXADD1_Pos;
pub const RADIO_DACNF_TXADD0_Pos = @as(c_ulong, 8);
pub const RADIO_DACNF_TXADD0_Msk = @as(c_ulong, 0x1) << RADIO_DACNF_TXADD0_Pos;
pub const RADIO_DACNF_ENA7_Pos = @as(c_ulong, 7);
pub const RADIO_DACNF_ENA7_Msk = @as(c_ulong, 0x1) << RADIO_DACNF_ENA7_Pos;
pub const RADIO_DACNF_ENA7_Disabled = @as(c_ulong, 0);
pub const RADIO_DACNF_ENA7_Enabled = @as(c_ulong, 1);
pub const RADIO_DACNF_ENA6_Pos = @as(c_ulong, 6);
pub const RADIO_DACNF_ENA6_Msk = @as(c_ulong, 0x1) << RADIO_DACNF_ENA6_Pos;
pub const RADIO_DACNF_ENA6_Disabled = @as(c_ulong, 0);
pub const RADIO_DACNF_ENA6_Enabled = @as(c_ulong, 1);
pub const RADIO_DACNF_ENA5_Pos = @as(c_ulong, 5);
pub const RADIO_DACNF_ENA5_Msk = @as(c_ulong, 0x1) << RADIO_DACNF_ENA5_Pos;
pub const RADIO_DACNF_ENA5_Disabled = @as(c_ulong, 0);
pub const RADIO_DACNF_ENA5_Enabled = @as(c_ulong, 1);
pub const RADIO_DACNF_ENA4_Pos = @as(c_ulong, 4);
pub const RADIO_DACNF_ENA4_Msk = @as(c_ulong, 0x1) << RADIO_DACNF_ENA4_Pos;
pub const RADIO_DACNF_ENA4_Disabled = @as(c_ulong, 0);
pub const RADIO_DACNF_ENA4_Enabled = @as(c_ulong, 1);
pub const RADIO_DACNF_ENA3_Pos = @as(c_ulong, 3);
pub const RADIO_DACNF_ENA3_Msk = @as(c_ulong, 0x1) << RADIO_DACNF_ENA3_Pos;
pub const RADIO_DACNF_ENA3_Disabled = @as(c_ulong, 0);
pub const RADIO_DACNF_ENA3_Enabled = @as(c_ulong, 1);
pub const RADIO_DACNF_ENA2_Pos = @as(c_ulong, 2);
pub const RADIO_DACNF_ENA2_Msk = @as(c_ulong, 0x1) << RADIO_DACNF_ENA2_Pos;
pub const RADIO_DACNF_ENA2_Disabled = @as(c_ulong, 0);
pub const RADIO_DACNF_ENA2_Enabled = @as(c_ulong, 1);
pub const RADIO_DACNF_ENA1_Pos = @as(c_ulong, 1);
pub const RADIO_DACNF_ENA1_Msk = @as(c_ulong, 0x1) << RADIO_DACNF_ENA1_Pos;
pub const RADIO_DACNF_ENA1_Disabled = @as(c_ulong, 0);
pub const RADIO_DACNF_ENA1_Enabled = @as(c_ulong, 1);
pub const RADIO_DACNF_ENA0_Pos = @as(c_ulong, 0);
pub const RADIO_DACNF_ENA0_Msk = @as(c_ulong, 0x1) << RADIO_DACNF_ENA0_Pos;
pub const RADIO_DACNF_ENA0_Disabled = @as(c_ulong, 0);
pub const RADIO_DACNF_ENA0_Enabled = @as(c_ulong, 1);
pub const RADIO_MHRMATCHCONF_MHRMATCHCONF_Pos = @as(c_ulong, 0);
pub const RADIO_MHRMATCHCONF_MHRMATCHCONF_Msk = @as(c_ulong, 0xFFFFFFFF) << RADIO_MHRMATCHCONF_MHRMATCHCONF_Pos;
pub const RADIO_MHRMATCHMAS_MHRMATCHMAS_Pos = @as(c_ulong, 0);
pub const RADIO_MHRMATCHMAS_MHRMATCHMAS_Msk = @as(c_ulong, 0xFFFFFFFF) << RADIO_MHRMATCHMAS_MHRMATCHMAS_Pos;
pub const RADIO_MODECNF0_DTX_Pos = @as(c_ulong, 8);
pub const RADIO_MODECNF0_DTX_Msk = @as(c_ulong, 0x3) << RADIO_MODECNF0_DTX_Pos;
pub const RADIO_MODECNF0_DTX_B1 = @as(c_ulong, 0);
pub const RADIO_MODECNF0_DTX_B0 = @as(c_ulong, 1);
pub const RADIO_MODECNF0_DTX_Center = @as(c_ulong, 2);
pub const RADIO_MODECNF0_RU_Pos = @as(c_ulong, 0);
pub const RADIO_MODECNF0_RU_Msk = @as(c_ulong, 0x1) << RADIO_MODECNF0_RU_Pos;
pub const RADIO_MODECNF0_RU_Default = @as(c_ulong, 0);
pub const RADIO_MODECNF0_RU_Fast = @as(c_ulong, 1);
pub const RADIO_SFD_SFD_Pos = @as(c_ulong, 0);
pub const RADIO_SFD_SFD_Msk = @as(c_ulong, 0xFF) << RADIO_SFD_SFD_Pos;
pub const RADIO_EDCNT_EDCNT_Pos = @as(c_ulong, 0);
pub const RADIO_EDCNT_EDCNT_Msk = @as(c_ulong, 0x1FFFFF) << RADIO_EDCNT_EDCNT_Pos;
pub const RADIO_EDSAMPLE_EDLVL_Pos = @as(c_ulong, 0);
pub const RADIO_EDSAMPLE_EDLVL_Msk = @as(c_ulong, 0xFF) << RADIO_EDSAMPLE_EDLVL_Pos;
pub const RADIO_CCACTRL_CCACORRCNT_Pos = @as(c_ulong, 24);
pub const RADIO_CCACTRL_CCACORRCNT_Msk = @as(c_ulong, 0xFF) << RADIO_CCACTRL_CCACORRCNT_Pos;
pub const RADIO_CCACTRL_CCACORRTHRES_Pos = @as(c_ulong, 16);
pub const RADIO_CCACTRL_CCACORRTHRES_Msk = @as(c_ulong, 0xFF) << RADIO_CCACTRL_CCACORRTHRES_Pos;
pub const RADIO_CCACTRL_CCAEDTHRES_Pos = @as(c_ulong, 8);
pub const RADIO_CCACTRL_CCAEDTHRES_Msk = @as(c_ulong, 0xFF) << RADIO_CCACTRL_CCAEDTHRES_Pos;
pub const RADIO_CCACTRL_CCAMODE_Pos = @as(c_ulong, 0);
pub const RADIO_CCACTRL_CCAMODE_Msk = @as(c_ulong, 0x7) << RADIO_CCACTRL_CCAMODE_Pos;
pub const RADIO_CCACTRL_CCAMODE_EdMode = @as(c_ulong, 0);
pub const RADIO_CCACTRL_CCAMODE_CarrierMode = @as(c_ulong, 1);
pub const RADIO_CCACTRL_CCAMODE_CarrierAndEdMode = @as(c_ulong, 2);
pub const RADIO_CCACTRL_CCAMODE_CarrierOrEdMode = @as(c_ulong, 3);
pub const RADIO_CCACTRL_CCAMODE_EdModeTest1 = @as(c_ulong, 4);
pub const RADIO_POWER_POWER_Pos = @as(c_ulong, 0);
pub const RADIO_POWER_POWER_Msk = @as(c_ulong, 0x1) << RADIO_POWER_POWER_Pos;
pub const RADIO_POWER_POWER_Disabled = @as(c_ulong, 0);
pub const RADIO_POWER_POWER_Enabled = @as(c_ulong, 1);
pub const RNG_TASKS_START_TASKS_START_Pos = @as(c_ulong, 0);
pub const RNG_TASKS_START_TASKS_START_Msk = @as(c_ulong, 0x1) << RNG_TASKS_START_TASKS_START_Pos;
pub const RNG_TASKS_START_TASKS_START_Trigger = @as(c_ulong, 1);
pub const RNG_TASKS_STOP_TASKS_STOP_Pos = @as(c_ulong, 0);
pub const RNG_TASKS_STOP_TASKS_STOP_Msk = @as(c_ulong, 0x1) << RNG_TASKS_STOP_TASKS_STOP_Pos;
pub const RNG_TASKS_STOP_TASKS_STOP_Trigger = @as(c_ulong, 1);
pub const RNG_EVENTS_VALRDY_EVENTS_VALRDY_Pos = @as(c_ulong, 0);
pub const RNG_EVENTS_VALRDY_EVENTS_VALRDY_Msk = @as(c_ulong, 0x1) << RNG_EVENTS_VALRDY_EVENTS_VALRDY_Pos;
pub const RNG_EVENTS_VALRDY_EVENTS_VALRDY_NotGenerated = @as(c_ulong, 0);
pub const RNG_EVENTS_VALRDY_EVENTS_VALRDY_Generated = @as(c_ulong, 1);
pub const RNG_SHORTS_VALRDY_STOP_Pos = @as(c_ulong, 0);
pub const RNG_SHORTS_VALRDY_STOP_Msk = @as(c_ulong, 0x1) << RNG_SHORTS_VALRDY_STOP_Pos;
pub const RNG_SHORTS_VALRDY_STOP_Disabled = @as(c_ulong, 0);
pub const RNG_SHORTS_VALRDY_STOP_Enabled = @as(c_ulong, 1);
pub const RNG_INTENSET_VALRDY_Pos = @as(c_ulong, 0);
pub const RNG_INTENSET_VALRDY_Msk = @as(c_ulong, 0x1) << RNG_INTENSET_VALRDY_Pos;
pub const RNG_INTENSET_VALRDY_Disabled = @as(c_ulong, 0);
pub const RNG_INTENSET_VALRDY_Enabled = @as(c_ulong, 1);
pub const RNG_INTENSET_VALRDY_Set = @as(c_ulong, 1);
pub const RNG_INTENCLR_VALRDY_Pos = @as(c_ulong, 0);
pub const RNG_INTENCLR_VALRDY_Msk = @as(c_ulong, 0x1) << RNG_INTENCLR_VALRDY_Pos;
pub const RNG_INTENCLR_VALRDY_Disabled = @as(c_ulong, 0);
pub const RNG_INTENCLR_VALRDY_Enabled = @as(c_ulong, 1);
pub const RNG_INTENCLR_VALRDY_Clear = @as(c_ulong, 1);
pub const RNG_CONFIG_DERCEN_Pos = @as(c_ulong, 0);
pub const RNG_CONFIG_DERCEN_Msk = @as(c_ulong, 0x1) << RNG_CONFIG_DERCEN_Pos;
pub const RNG_CONFIG_DERCEN_Disabled = @as(c_ulong, 0);
pub const RNG_CONFIG_DERCEN_Enabled = @as(c_ulong, 1);
pub const RNG_VALUE_VALUE_Pos = @as(c_ulong, 0);
pub const RNG_VALUE_VALUE_Msk = @as(c_ulong, 0xFF) << RNG_VALUE_VALUE_Pos;
pub const RTC_TASKS_START_TASKS_START_Pos = @as(c_ulong, 0);
pub const RTC_TASKS_START_TASKS_START_Msk = @as(c_ulong, 0x1) << RTC_TASKS_START_TASKS_START_Pos;
pub const RTC_TASKS_START_TASKS_START_Trigger = @as(c_ulong, 1);
pub const RTC_TASKS_STOP_TASKS_STOP_Pos = @as(c_ulong, 0);
pub const RTC_TASKS_STOP_TASKS_STOP_Msk = @as(c_ulong, 0x1) << RTC_TASKS_STOP_TASKS_STOP_Pos;
pub const RTC_TASKS_STOP_TASKS_STOP_Trigger = @as(c_ulong, 1);
pub const RTC_TASKS_CLEAR_TASKS_CLEAR_Pos = @as(c_ulong, 0);
pub const RTC_TASKS_CLEAR_TASKS_CLEAR_Msk = @as(c_ulong, 0x1) << RTC_TASKS_CLEAR_TASKS_CLEAR_Pos;
pub const RTC_TASKS_CLEAR_TASKS_CLEAR_Trigger = @as(c_ulong, 1);
pub const RTC_TASKS_TRIGOVRFLW_TASKS_TRIGOVRFLW_Pos = @as(c_ulong, 0);
pub const RTC_TASKS_TRIGOVRFLW_TASKS_TRIGOVRFLW_Msk = @as(c_ulong, 0x1) << RTC_TASKS_TRIGOVRFLW_TASKS_TRIGOVRFLW_Pos;
pub const RTC_TASKS_TRIGOVRFLW_TASKS_TRIGOVRFLW_Trigger = @as(c_ulong, 1);
pub const RTC_EVENTS_TICK_EVENTS_TICK_Pos = @as(c_ulong, 0);
pub const RTC_EVENTS_TICK_EVENTS_TICK_Msk = @as(c_ulong, 0x1) << RTC_EVENTS_TICK_EVENTS_TICK_Pos;
pub const RTC_EVENTS_TICK_EVENTS_TICK_NotGenerated = @as(c_ulong, 0);
pub const RTC_EVENTS_TICK_EVENTS_TICK_Generated = @as(c_ulong, 1);
pub const RTC_EVENTS_OVRFLW_EVENTS_OVRFLW_Pos = @as(c_ulong, 0);
pub const RTC_EVENTS_OVRFLW_EVENTS_OVRFLW_Msk = @as(c_ulong, 0x1) << RTC_EVENTS_OVRFLW_EVENTS_OVRFLW_Pos;
pub const RTC_EVENTS_OVRFLW_EVENTS_OVRFLW_NotGenerated = @as(c_ulong, 0);
pub const RTC_EVENTS_OVRFLW_EVENTS_OVRFLW_Generated = @as(c_ulong, 1);
pub const RTC_EVENTS_COMPARE_EVENTS_COMPARE_Pos = @as(c_ulong, 0);
pub const RTC_EVENTS_COMPARE_EVENTS_COMPARE_Msk = @as(c_ulong, 0x1) << RTC_EVENTS_COMPARE_EVENTS_COMPARE_Pos;
pub const RTC_EVENTS_COMPARE_EVENTS_COMPARE_NotGenerated = @as(c_ulong, 0);
pub const RTC_EVENTS_COMPARE_EVENTS_COMPARE_Generated = @as(c_ulong, 1);
pub const RTC_INTENSET_COMPARE3_Pos = @as(c_ulong, 19);
pub const RTC_INTENSET_COMPARE3_Msk = @as(c_ulong, 0x1) << RTC_INTENSET_COMPARE3_Pos;
pub const RTC_INTENSET_COMPARE3_Disabled = @as(c_ulong, 0);
pub const RTC_INTENSET_COMPARE3_Enabled = @as(c_ulong, 1);
pub const RTC_INTENSET_COMPARE3_Set = @as(c_ulong, 1);
pub const RTC_INTENSET_COMPARE2_Pos = @as(c_ulong, 18);
pub const RTC_INTENSET_COMPARE2_Msk = @as(c_ulong, 0x1) << RTC_INTENSET_COMPARE2_Pos;
pub const RTC_INTENSET_COMPARE2_Disabled = @as(c_ulong, 0);
pub const RTC_INTENSET_COMPARE2_Enabled = @as(c_ulong, 1);
pub const RTC_INTENSET_COMPARE2_Set = @as(c_ulong, 1);
pub const RTC_INTENSET_COMPARE1_Pos = @as(c_ulong, 17);
pub const RTC_INTENSET_COMPARE1_Msk = @as(c_ulong, 0x1) << RTC_INTENSET_COMPARE1_Pos;
pub const RTC_INTENSET_COMPARE1_Disabled = @as(c_ulong, 0);
pub const RTC_INTENSET_COMPARE1_Enabled = @as(c_ulong, 1);
pub const RTC_INTENSET_COMPARE1_Set = @as(c_ulong, 1);
pub const RTC_INTENSET_COMPARE0_Pos = @as(c_ulong, 16);
pub const RTC_INTENSET_COMPARE0_Msk = @as(c_ulong, 0x1) << RTC_INTENSET_COMPARE0_Pos;
pub const RTC_INTENSET_COMPARE0_Disabled = @as(c_ulong, 0);
pub const RTC_INTENSET_COMPARE0_Enabled = @as(c_ulong, 1);
pub const RTC_INTENSET_COMPARE0_Set = @as(c_ulong, 1);
pub const RTC_INTENSET_OVRFLW_Pos = @as(c_ulong, 1);
pub const RTC_INTENSET_OVRFLW_Msk = @as(c_ulong, 0x1) << RTC_INTENSET_OVRFLW_Pos;
pub const RTC_INTENSET_OVRFLW_Disabled = @as(c_ulong, 0);
pub const RTC_INTENSET_OVRFLW_Enabled = @as(c_ulong, 1);
pub const RTC_INTENSET_OVRFLW_Set = @as(c_ulong, 1);
pub const RTC_INTENSET_TICK_Pos = @as(c_ulong, 0);
pub const RTC_INTENSET_TICK_Msk = @as(c_ulong, 0x1) << RTC_INTENSET_TICK_Pos;
pub const RTC_INTENSET_TICK_Disabled = @as(c_ulong, 0);
pub const RTC_INTENSET_TICK_Enabled = @as(c_ulong, 1);
pub const RTC_INTENSET_TICK_Set = @as(c_ulong, 1);
pub const RTC_INTENCLR_COMPARE3_Pos = @as(c_ulong, 19);
pub const RTC_INTENCLR_COMPARE3_Msk = @as(c_ulong, 0x1) << RTC_INTENCLR_COMPARE3_Pos;
pub const RTC_INTENCLR_COMPARE3_Disabled = @as(c_ulong, 0);
pub const RTC_INTENCLR_COMPARE3_Enabled = @as(c_ulong, 1);
pub const RTC_INTENCLR_COMPARE3_Clear = @as(c_ulong, 1);
pub const RTC_INTENCLR_COMPARE2_Pos = @as(c_ulong, 18);
pub const RTC_INTENCLR_COMPARE2_Msk = @as(c_ulong, 0x1) << RTC_INTENCLR_COMPARE2_Pos;
pub const RTC_INTENCLR_COMPARE2_Disabled = @as(c_ulong, 0);
pub const RTC_INTENCLR_COMPARE2_Enabled = @as(c_ulong, 1);
pub const RTC_INTENCLR_COMPARE2_Clear = @as(c_ulong, 1);
pub const RTC_INTENCLR_COMPARE1_Pos = @as(c_ulong, 17);
pub const RTC_INTENCLR_COMPARE1_Msk = @as(c_ulong, 0x1) << RTC_INTENCLR_COMPARE1_Pos;
pub const RTC_INTENCLR_COMPARE1_Disabled = @as(c_ulong, 0);
pub const RTC_INTENCLR_COMPARE1_Enabled = @as(c_ulong, 1);
pub const RTC_INTENCLR_COMPARE1_Clear = @as(c_ulong, 1);
pub const RTC_INTENCLR_COMPARE0_Pos = @as(c_ulong, 16);
pub const RTC_INTENCLR_COMPARE0_Msk = @as(c_ulong, 0x1) << RTC_INTENCLR_COMPARE0_Pos;
pub const RTC_INTENCLR_COMPARE0_Disabled = @as(c_ulong, 0);
pub const RTC_INTENCLR_COMPARE0_Enabled = @as(c_ulong, 1);
pub const RTC_INTENCLR_COMPARE0_Clear = @as(c_ulong, 1);
pub const RTC_INTENCLR_OVRFLW_Pos = @as(c_ulong, 1);
pub const RTC_INTENCLR_OVRFLW_Msk = @as(c_ulong, 0x1) << RTC_INTENCLR_OVRFLW_Pos;
pub const RTC_INTENCLR_OVRFLW_Disabled = @as(c_ulong, 0);
pub const RTC_INTENCLR_OVRFLW_Enabled = @as(c_ulong, 1);
pub const RTC_INTENCLR_OVRFLW_Clear = @as(c_ulong, 1);
pub const RTC_INTENCLR_TICK_Pos = @as(c_ulong, 0);
pub const RTC_INTENCLR_TICK_Msk = @as(c_ulong, 0x1) << RTC_INTENCLR_TICK_Pos;
pub const RTC_INTENCLR_TICK_Disabled = @as(c_ulong, 0);
pub const RTC_INTENCLR_TICK_Enabled = @as(c_ulong, 1);
pub const RTC_INTENCLR_TICK_Clear = @as(c_ulong, 1);
pub const RTC_EVTEN_COMPARE3_Pos = @as(c_ulong, 19);
pub const RTC_EVTEN_COMPARE3_Msk = @as(c_ulong, 0x1) << RTC_EVTEN_COMPARE3_Pos;
pub const RTC_EVTEN_COMPARE3_Disabled = @as(c_ulong, 0);
pub const RTC_EVTEN_COMPARE3_Enabled = @as(c_ulong, 1);
pub const RTC_EVTEN_COMPARE2_Pos = @as(c_ulong, 18);
pub const RTC_EVTEN_COMPARE2_Msk = @as(c_ulong, 0x1) << RTC_EVTEN_COMPARE2_Pos;
pub const RTC_EVTEN_COMPARE2_Disabled = @as(c_ulong, 0);
pub const RTC_EVTEN_COMPARE2_Enabled = @as(c_ulong, 1);
pub const RTC_EVTEN_COMPARE1_Pos = @as(c_ulong, 17);
pub const RTC_EVTEN_COMPARE1_Msk = @as(c_ulong, 0x1) << RTC_EVTEN_COMPARE1_Pos;
pub const RTC_EVTEN_COMPARE1_Disabled = @as(c_ulong, 0);
pub const RTC_EVTEN_COMPARE1_Enabled = @as(c_ulong, 1);
pub const RTC_EVTEN_COMPARE0_Pos = @as(c_ulong, 16);
pub const RTC_EVTEN_COMPARE0_Msk = @as(c_ulong, 0x1) << RTC_EVTEN_COMPARE0_Pos;
pub const RTC_EVTEN_COMPARE0_Disabled = @as(c_ulong, 0);
pub const RTC_EVTEN_COMPARE0_Enabled = @as(c_ulong, 1);
pub const RTC_EVTEN_OVRFLW_Pos = @as(c_ulong, 1);
pub const RTC_EVTEN_OVRFLW_Msk = @as(c_ulong, 0x1) << RTC_EVTEN_OVRFLW_Pos;
pub const RTC_EVTEN_OVRFLW_Disabled = @as(c_ulong, 0);
pub const RTC_EVTEN_OVRFLW_Enabled = @as(c_ulong, 1);
pub const RTC_EVTEN_TICK_Pos = @as(c_ulong, 0);
pub const RTC_EVTEN_TICK_Msk = @as(c_ulong, 0x1) << RTC_EVTEN_TICK_Pos;
pub const RTC_EVTEN_TICK_Disabled = @as(c_ulong, 0);
pub const RTC_EVTEN_TICK_Enabled = @as(c_ulong, 1);
pub const RTC_EVTENSET_COMPARE3_Pos = @as(c_ulong, 19);
pub const RTC_EVTENSET_COMPARE3_Msk = @as(c_ulong, 0x1) << RTC_EVTENSET_COMPARE3_Pos;
pub const RTC_EVTENSET_COMPARE3_Disabled = @as(c_ulong, 0);
pub const RTC_EVTENSET_COMPARE3_Enabled = @as(c_ulong, 1);
pub const RTC_EVTENSET_COMPARE3_Set = @as(c_ulong, 1);
pub const RTC_EVTENSET_COMPARE2_Pos = @as(c_ulong, 18);
pub const RTC_EVTENSET_COMPARE2_Msk = @as(c_ulong, 0x1) << RTC_EVTENSET_COMPARE2_Pos;
pub const RTC_EVTENSET_COMPARE2_Disabled = @as(c_ulong, 0);
pub const RTC_EVTENSET_COMPARE2_Enabled = @as(c_ulong, 1);
pub const RTC_EVTENSET_COMPARE2_Set = @as(c_ulong, 1);
pub const RTC_EVTENSET_COMPARE1_Pos = @as(c_ulong, 17);
pub const RTC_EVTENSET_COMPARE1_Msk = @as(c_ulong, 0x1) << RTC_EVTENSET_COMPARE1_Pos;
pub const RTC_EVTENSET_COMPARE1_Disabled = @as(c_ulong, 0);
pub const RTC_EVTENSET_COMPARE1_Enabled = @as(c_ulong, 1);
pub const RTC_EVTENSET_COMPARE1_Set = @as(c_ulong, 1);
pub const RTC_EVTENSET_COMPARE0_Pos = @as(c_ulong, 16);
pub const RTC_EVTENSET_COMPARE0_Msk = @as(c_ulong, 0x1) << RTC_EVTENSET_COMPARE0_Pos;
pub const RTC_EVTENSET_COMPARE0_Disabled = @as(c_ulong, 0);
pub const RTC_EVTENSET_COMPARE0_Enabled = @as(c_ulong, 1);
pub const RTC_EVTENSET_COMPARE0_Set = @as(c_ulong, 1);
pub const RTC_EVTENSET_OVRFLW_Pos = @as(c_ulong, 1);
pub const RTC_EVTENSET_OVRFLW_Msk = @as(c_ulong, 0x1) << RTC_EVTENSET_OVRFLW_Pos;
pub const RTC_EVTENSET_OVRFLW_Disabled = @as(c_ulong, 0);
pub const RTC_EVTENSET_OVRFLW_Enabled = @as(c_ulong, 1);
pub const RTC_EVTENSET_OVRFLW_Set = @as(c_ulong, 1);
pub const RTC_EVTENSET_TICK_Pos = @as(c_ulong, 0);
pub const RTC_EVTENSET_TICK_Msk = @as(c_ulong, 0x1) << RTC_EVTENSET_TICK_Pos;
pub const RTC_EVTENSET_TICK_Disabled = @as(c_ulong, 0);
pub const RTC_EVTENSET_TICK_Enabled = @as(c_ulong, 1);
pub const RTC_EVTENSET_TICK_Set = @as(c_ulong, 1);
pub const RTC_EVTENCLR_COMPARE3_Pos = @as(c_ulong, 19);
pub const RTC_EVTENCLR_COMPARE3_Msk = @as(c_ulong, 0x1) << RTC_EVTENCLR_COMPARE3_Pos;
pub const RTC_EVTENCLR_COMPARE3_Disabled = @as(c_ulong, 0);
pub const RTC_EVTENCLR_COMPARE3_Enabled = @as(c_ulong, 1);
pub const RTC_EVTENCLR_COMPARE3_Clear = @as(c_ulong, 1);
pub const RTC_EVTENCLR_COMPARE2_Pos = @as(c_ulong, 18);
pub const RTC_EVTENCLR_COMPARE2_Msk = @as(c_ulong, 0x1) << RTC_EVTENCLR_COMPARE2_Pos;
pub const RTC_EVTENCLR_COMPARE2_Disabled = @as(c_ulong, 0);
pub const RTC_EVTENCLR_COMPARE2_Enabled = @as(c_ulong, 1);
pub const RTC_EVTENCLR_COMPARE2_Clear = @as(c_ulong, 1);
pub const RTC_EVTENCLR_COMPARE1_Pos = @as(c_ulong, 17);
pub const RTC_EVTENCLR_COMPARE1_Msk = @as(c_ulong, 0x1) << RTC_EVTENCLR_COMPARE1_Pos;
pub const RTC_EVTENCLR_COMPARE1_Disabled = @as(c_ulong, 0);
pub const RTC_EVTENCLR_COMPARE1_Enabled = @as(c_ulong, 1);
pub const RTC_EVTENCLR_COMPARE1_Clear = @as(c_ulong, 1);
pub const RTC_EVTENCLR_COMPARE0_Pos = @as(c_ulong, 16);
pub const RTC_EVTENCLR_COMPARE0_Msk = @as(c_ulong, 0x1) << RTC_EVTENCLR_COMPARE0_Pos;
pub const RTC_EVTENCLR_COMPARE0_Disabled = @as(c_ulong, 0);
pub const RTC_EVTENCLR_COMPARE0_Enabled = @as(c_ulong, 1);
pub const RTC_EVTENCLR_COMPARE0_Clear = @as(c_ulong, 1);
pub const RTC_EVTENCLR_OVRFLW_Pos = @as(c_ulong, 1);
pub const RTC_EVTENCLR_OVRFLW_Msk = @as(c_ulong, 0x1) << RTC_EVTENCLR_OVRFLW_Pos;
pub const RTC_EVTENCLR_OVRFLW_Disabled = @as(c_ulong, 0);
pub const RTC_EVTENCLR_OVRFLW_Enabled = @as(c_ulong, 1);
pub const RTC_EVTENCLR_OVRFLW_Clear = @as(c_ulong, 1);
pub const RTC_EVTENCLR_TICK_Pos = @as(c_ulong, 0);
pub const RTC_EVTENCLR_TICK_Msk = @as(c_ulong, 0x1) << RTC_EVTENCLR_TICK_Pos;
pub const RTC_EVTENCLR_TICK_Disabled = @as(c_ulong, 0);
pub const RTC_EVTENCLR_TICK_Enabled = @as(c_ulong, 1);
pub const RTC_EVTENCLR_TICK_Clear = @as(c_ulong, 1);
pub const RTC_COUNTER_COUNTER_Pos = @as(c_ulong, 0);
pub const RTC_COUNTER_COUNTER_Msk = @as(c_ulong, 0xFFFFFF) << RTC_COUNTER_COUNTER_Pos;
pub const RTC_PRESCALER_PRESCALER_Pos = @as(c_ulong, 0);
pub const RTC_PRESCALER_PRESCALER_Msk = @as(c_ulong, 0xFFF) << RTC_PRESCALER_PRESCALER_Pos;
pub const RTC_CC_COMPARE_Pos = @as(c_ulong, 0);
pub const RTC_CC_COMPARE_Msk = @as(c_ulong, 0xFFFFFF) << RTC_CC_COMPARE_Pos;
pub const SAADC_TASKS_START_TASKS_START_Pos = @as(c_ulong, 0);
pub const SAADC_TASKS_START_TASKS_START_Msk = @as(c_ulong, 0x1) << SAADC_TASKS_START_TASKS_START_Pos;
pub const SAADC_TASKS_START_TASKS_START_Trigger = @as(c_ulong, 1);
pub const SAADC_TASKS_SAMPLE_TASKS_SAMPLE_Pos = @as(c_ulong, 0);
pub const SAADC_TASKS_SAMPLE_TASKS_SAMPLE_Msk = @as(c_ulong, 0x1) << SAADC_TASKS_SAMPLE_TASKS_SAMPLE_Pos;
pub const SAADC_TASKS_SAMPLE_TASKS_SAMPLE_Trigger = @as(c_ulong, 1);
pub const SAADC_TASKS_STOP_TASKS_STOP_Pos = @as(c_ulong, 0);
pub const SAADC_TASKS_STOP_TASKS_STOP_Msk = @as(c_ulong, 0x1) << SAADC_TASKS_STOP_TASKS_STOP_Pos;
pub const SAADC_TASKS_STOP_TASKS_STOP_Trigger = @as(c_ulong, 1);
pub const SAADC_TASKS_CALIBRATEOFFSET_TASKS_CALIBRATEOFFSET_Pos = @as(c_ulong, 0);
pub const SAADC_TASKS_CALIBRATEOFFSET_TASKS_CALIBRATEOFFSET_Msk = @as(c_ulong, 0x1) << SAADC_TASKS_CALIBRATEOFFSET_TASKS_CALIBRATEOFFSET_Pos;
pub const SAADC_TASKS_CALIBRATEOFFSET_TASKS_CALIBRATEOFFSET_Trigger = @as(c_ulong, 1);
pub const SAADC_EVENTS_STARTED_EVENTS_STARTED_Pos = @as(c_ulong, 0);
pub const SAADC_EVENTS_STARTED_EVENTS_STARTED_Msk = @as(c_ulong, 0x1) << SAADC_EVENTS_STARTED_EVENTS_STARTED_Pos;
pub const SAADC_EVENTS_STARTED_EVENTS_STARTED_NotGenerated = @as(c_ulong, 0);
pub const SAADC_EVENTS_STARTED_EVENTS_STARTED_Generated = @as(c_ulong, 1);
pub const SAADC_EVENTS_END_EVENTS_END_Pos = @as(c_ulong, 0);
pub const SAADC_EVENTS_END_EVENTS_END_Msk = @as(c_ulong, 0x1) << SAADC_EVENTS_END_EVENTS_END_Pos;
pub const SAADC_EVENTS_END_EVENTS_END_NotGenerated = @as(c_ulong, 0);
pub const SAADC_EVENTS_END_EVENTS_END_Generated = @as(c_ulong, 1);
pub const SAADC_EVENTS_DONE_EVENTS_DONE_Pos = @as(c_ulong, 0);
pub const SAADC_EVENTS_DONE_EVENTS_DONE_Msk = @as(c_ulong, 0x1) << SAADC_EVENTS_DONE_EVENTS_DONE_Pos;
pub const SAADC_EVENTS_DONE_EVENTS_DONE_NotGenerated = @as(c_ulong, 0);
pub const SAADC_EVENTS_DONE_EVENTS_DONE_Generated = @as(c_ulong, 1);
pub const SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_Pos = @as(c_ulong, 0);
pub const SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_Msk = @as(c_ulong, 0x1) << SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_Pos;
pub const SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_NotGenerated = @as(c_ulong, 0);
pub const SAADC_EVENTS_RESULTDONE_EVENTS_RESULTDONE_Generated = @as(c_ulong, 1);
pub const SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_Pos = @as(c_ulong, 0);
pub const SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_Msk = @as(c_ulong, 0x1) << SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_Pos;
pub const SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_NotGenerated = @as(c_ulong, 0);
pub const SAADC_EVENTS_CALIBRATEDONE_EVENTS_CALIBRATEDONE_Generated = @as(c_ulong, 1);
pub const SAADC_EVENTS_STOPPED_EVENTS_STOPPED_Pos = @as(c_ulong, 0);
pub const SAADC_EVENTS_STOPPED_EVENTS_STOPPED_Msk = @as(c_ulong, 0x1) << SAADC_EVENTS_STOPPED_EVENTS_STOPPED_Pos;
pub const SAADC_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated = @as(c_ulong, 0);
pub const SAADC_EVENTS_STOPPED_EVENTS_STOPPED_Generated = @as(c_ulong, 1);
pub const SAADC_EVENTS_CH_LIMITH_LIMITH_Pos = @as(c_ulong, 0);
pub const SAADC_EVENTS_CH_LIMITH_LIMITH_Msk = @as(c_ulong, 0x1) << SAADC_EVENTS_CH_LIMITH_LIMITH_Pos;
pub const SAADC_EVENTS_CH_LIMITH_LIMITH_NotGenerated = @as(c_ulong, 0);
pub const SAADC_EVENTS_CH_LIMITH_LIMITH_Generated = @as(c_ulong, 1);
pub const SAADC_EVENTS_CH_LIMITL_LIMITL_Pos = @as(c_ulong, 0);
pub const SAADC_EVENTS_CH_LIMITL_LIMITL_Msk = @as(c_ulong, 0x1) << SAADC_EVENTS_CH_LIMITL_LIMITL_Pos;
pub const SAADC_EVENTS_CH_LIMITL_LIMITL_NotGenerated = @as(c_ulong, 0);
pub const SAADC_EVENTS_CH_LIMITL_LIMITL_Generated = @as(c_ulong, 1);
pub const SAADC_INTEN_CH7LIMITL_Pos = @as(c_ulong, 21);
pub const SAADC_INTEN_CH7LIMITL_Msk = @as(c_ulong, 0x1) << SAADC_INTEN_CH7LIMITL_Pos;
pub const SAADC_INTEN_CH7LIMITL_Disabled = @as(c_ulong, 0);
pub const SAADC_INTEN_CH7LIMITL_Enabled = @as(c_ulong, 1);
pub const SAADC_INTEN_CH7LIMITH_Pos = @as(c_ulong, 20);
pub const SAADC_INTEN_CH7LIMITH_Msk = @as(c_ulong, 0x1) << SAADC_INTEN_CH7LIMITH_Pos;
pub const SAADC_INTEN_CH7LIMITH_Disabled = @as(c_ulong, 0);
pub const SAADC_INTEN_CH7LIMITH_Enabled = @as(c_ulong, 1);
pub const SAADC_INTEN_CH6LIMITL_Pos = @as(c_ulong, 19);
pub const SAADC_INTEN_CH6LIMITL_Msk = @as(c_ulong, 0x1) << SAADC_INTEN_CH6LIMITL_Pos;
pub const SAADC_INTEN_CH6LIMITL_Disabled = @as(c_ulong, 0);
pub const SAADC_INTEN_CH6LIMITL_Enabled = @as(c_ulong, 1);
pub const SAADC_INTEN_CH6LIMITH_Pos = @as(c_ulong, 18);
pub const SAADC_INTEN_CH6LIMITH_Msk = @as(c_ulong, 0x1) << SAADC_INTEN_CH6LIMITH_Pos;
pub const SAADC_INTEN_CH6LIMITH_Disabled = @as(c_ulong, 0);
pub const SAADC_INTEN_CH6LIMITH_Enabled = @as(c_ulong, 1);
pub const SAADC_INTEN_CH5LIMITL_Pos = @as(c_ulong, 17);
pub const SAADC_INTEN_CH5LIMITL_Msk = @as(c_ulong, 0x1) << SAADC_INTEN_CH5LIMITL_Pos;
pub const SAADC_INTEN_CH5LIMITL_Disabled = @as(c_ulong, 0);
pub const SAADC_INTEN_CH5LIMITL_Enabled = @as(c_ulong, 1);
pub const SAADC_INTEN_CH5LIMITH_Pos = @as(c_ulong, 16);
pub const SAADC_INTEN_CH5LIMITH_Msk = @as(c_ulong, 0x1) << SAADC_INTEN_CH5LIMITH_Pos;
pub const SAADC_INTEN_CH5LIMITH_Disabled = @as(c_ulong, 0);
pub const SAADC_INTEN_CH5LIMITH_Enabled = @as(c_ulong, 1);
pub const SAADC_INTEN_CH4LIMITL_Pos = @as(c_ulong, 15);
pub const SAADC_INTEN_CH4LIMITL_Msk = @as(c_ulong, 0x1) << SAADC_INTEN_CH4LIMITL_Pos;
pub const SAADC_INTEN_CH4LIMITL_Disabled = @as(c_ulong, 0);
pub const SAADC_INTEN_CH4LIMITL_Enabled = @as(c_ulong, 1);
pub const SAADC_INTEN_CH4LIMITH_Pos = @as(c_ulong, 14);
pub const SAADC_INTEN_CH4LIMITH_Msk = @as(c_ulong, 0x1) << SAADC_INTEN_CH4LIMITH_Pos;
pub const SAADC_INTEN_CH4LIMITH_Disabled = @as(c_ulong, 0);
pub const SAADC_INTEN_CH4LIMITH_Enabled = @as(c_ulong, 1);
pub const SAADC_INTEN_CH3LIMITL_Pos = @as(c_ulong, 13);
pub const SAADC_INTEN_CH3LIMITL_Msk = @as(c_ulong, 0x1) << SAADC_INTEN_CH3LIMITL_Pos;
pub const SAADC_INTEN_CH3LIMITL_Disabled = @as(c_ulong, 0);
pub const SAADC_INTEN_CH3LIMITL_Enabled = @as(c_ulong, 1);
pub const SAADC_INTEN_CH3LIMITH_Pos = @as(c_ulong, 12);
pub const SAADC_INTEN_CH3LIMITH_Msk = @as(c_ulong, 0x1) << SAADC_INTEN_CH3LIMITH_Pos;
pub const SAADC_INTEN_CH3LIMITH_Disabled = @as(c_ulong, 0);
pub const SAADC_INTEN_CH3LIMITH_Enabled = @as(c_ulong, 1);
pub const SAADC_INTEN_CH2LIMITL_Pos = @as(c_ulong, 11);
pub const SAADC_INTEN_CH2LIMITL_Msk = @as(c_ulong, 0x1) << SAADC_INTEN_CH2LIMITL_Pos;
pub const SAADC_INTEN_CH2LIMITL_Disabled = @as(c_ulong, 0);
pub const SAADC_INTEN_CH2LIMITL_Enabled = @as(c_ulong, 1);
pub const SAADC_INTEN_CH2LIMITH_Pos = @as(c_ulong, 10);
pub const SAADC_INTEN_CH2LIMITH_Msk = @as(c_ulong, 0x1) << SAADC_INTEN_CH2LIMITH_Pos;
pub const SAADC_INTEN_CH2LIMITH_Disabled = @as(c_ulong, 0);
pub const SAADC_INTEN_CH2LIMITH_Enabled = @as(c_ulong, 1);
pub const SAADC_INTEN_CH1LIMITL_Pos = @as(c_ulong, 9);
pub const SAADC_INTEN_CH1LIMITL_Msk = @as(c_ulong, 0x1) << SAADC_INTEN_CH1LIMITL_Pos;
pub const SAADC_INTEN_CH1LIMITL_Disabled = @as(c_ulong, 0);
pub const SAADC_INTEN_CH1LIMITL_Enabled = @as(c_ulong, 1);
pub const SAADC_INTEN_CH1LIMITH_Pos = @as(c_ulong, 8);
pub const SAADC_INTEN_CH1LIMITH_Msk = @as(c_ulong, 0x1) << SAADC_INTEN_CH1LIMITH_Pos;
pub const SAADC_INTEN_CH1LIMITH_Disabled = @as(c_ulong, 0);
pub const SAADC_INTEN_CH1LIMITH_Enabled = @as(c_ulong, 1);
pub const SAADC_INTEN_CH0LIMITL_Pos = @as(c_ulong, 7);
pub const SAADC_INTEN_CH0LIMITL_Msk = @as(c_ulong, 0x1) << SAADC_INTEN_CH0LIMITL_Pos;
pub const SAADC_INTEN_CH0LIMITL_Disabled = @as(c_ulong, 0);
pub const SAADC_INTEN_CH0LIMITL_Enabled = @as(c_ulong, 1);
pub const SAADC_INTEN_CH0LIMITH_Pos = @as(c_ulong, 6);
pub const SAADC_INTEN_CH0LIMITH_Msk = @as(c_ulong, 0x1) << SAADC_INTEN_CH0LIMITH_Pos;
pub const SAADC_INTEN_CH0LIMITH_Disabled = @as(c_ulong, 0);
pub const SAADC_INTEN_CH0LIMITH_Enabled = @as(c_ulong, 1);
pub const SAADC_INTEN_STOPPED_Pos = @as(c_ulong, 5);
pub const SAADC_INTEN_STOPPED_Msk = @as(c_ulong, 0x1) << SAADC_INTEN_STOPPED_Pos;
pub const SAADC_INTEN_STOPPED_Disabled = @as(c_ulong, 0);
pub const SAADC_INTEN_STOPPED_Enabled = @as(c_ulong, 1);
pub const SAADC_INTEN_CALIBRATEDONE_Pos = @as(c_ulong, 4);
pub const SAADC_INTEN_CALIBRATEDONE_Msk = @as(c_ulong, 0x1) << SAADC_INTEN_CALIBRATEDONE_Pos;
pub const SAADC_INTEN_CALIBRATEDONE_Disabled = @as(c_ulong, 0);
pub const SAADC_INTEN_CALIBRATEDONE_Enabled = @as(c_ulong, 1);
pub const SAADC_INTEN_RESULTDONE_Pos = @as(c_ulong, 3);
pub const SAADC_INTEN_RESULTDONE_Msk = @as(c_ulong, 0x1) << SAADC_INTEN_RESULTDONE_Pos;
pub const SAADC_INTEN_RESULTDONE_Disabled = @as(c_ulong, 0);
pub const SAADC_INTEN_RESULTDONE_Enabled = @as(c_ulong, 1);
pub const SAADC_INTEN_DONE_Pos = @as(c_ulong, 2);
pub const SAADC_INTEN_DONE_Msk = @as(c_ulong, 0x1) << SAADC_INTEN_DONE_Pos;
pub const SAADC_INTEN_DONE_Disabled = @as(c_ulong, 0);
pub const SAADC_INTEN_DONE_Enabled = @as(c_ulong, 1);
pub const SAADC_INTEN_END_Pos = @as(c_ulong, 1);
pub const SAADC_INTEN_END_Msk = @as(c_ulong, 0x1) << SAADC_INTEN_END_Pos;
pub const SAADC_INTEN_END_Disabled = @as(c_ulong, 0);
pub const SAADC_INTEN_END_Enabled = @as(c_ulong, 1);
pub const SAADC_INTEN_STARTED_Pos = @as(c_ulong, 0);
pub const SAADC_INTEN_STARTED_Msk = @as(c_ulong, 0x1) << SAADC_INTEN_STARTED_Pos;
pub const SAADC_INTEN_STARTED_Disabled = @as(c_ulong, 0);
pub const SAADC_INTEN_STARTED_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH7LIMITL_Pos = @as(c_ulong, 21);
pub const SAADC_INTENSET_CH7LIMITL_Msk = @as(c_ulong, 0x1) << SAADC_INTENSET_CH7LIMITL_Pos;
pub const SAADC_INTENSET_CH7LIMITL_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENSET_CH7LIMITL_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH7LIMITL_Set = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH7LIMITH_Pos = @as(c_ulong, 20);
pub const SAADC_INTENSET_CH7LIMITH_Msk = @as(c_ulong, 0x1) << SAADC_INTENSET_CH7LIMITH_Pos;
pub const SAADC_INTENSET_CH7LIMITH_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENSET_CH7LIMITH_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH7LIMITH_Set = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH6LIMITL_Pos = @as(c_ulong, 19);
pub const SAADC_INTENSET_CH6LIMITL_Msk = @as(c_ulong, 0x1) << SAADC_INTENSET_CH6LIMITL_Pos;
pub const SAADC_INTENSET_CH6LIMITL_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENSET_CH6LIMITL_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH6LIMITL_Set = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH6LIMITH_Pos = @as(c_ulong, 18);
pub const SAADC_INTENSET_CH6LIMITH_Msk = @as(c_ulong, 0x1) << SAADC_INTENSET_CH6LIMITH_Pos;
pub const SAADC_INTENSET_CH6LIMITH_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENSET_CH6LIMITH_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH6LIMITH_Set = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH5LIMITL_Pos = @as(c_ulong, 17);
pub const SAADC_INTENSET_CH5LIMITL_Msk = @as(c_ulong, 0x1) << SAADC_INTENSET_CH5LIMITL_Pos;
pub const SAADC_INTENSET_CH5LIMITL_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENSET_CH5LIMITL_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH5LIMITL_Set = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH5LIMITH_Pos = @as(c_ulong, 16);
pub const SAADC_INTENSET_CH5LIMITH_Msk = @as(c_ulong, 0x1) << SAADC_INTENSET_CH5LIMITH_Pos;
pub const SAADC_INTENSET_CH5LIMITH_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENSET_CH5LIMITH_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH5LIMITH_Set = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH4LIMITL_Pos = @as(c_ulong, 15);
pub const SAADC_INTENSET_CH4LIMITL_Msk = @as(c_ulong, 0x1) << SAADC_INTENSET_CH4LIMITL_Pos;
pub const SAADC_INTENSET_CH4LIMITL_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENSET_CH4LIMITL_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH4LIMITL_Set = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH4LIMITH_Pos = @as(c_ulong, 14);
pub const SAADC_INTENSET_CH4LIMITH_Msk = @as(c_ulong, 0x1) << SAADC_INTENSET_CH4LIMITH_Pos;
pub const SAADC_INTENSET_CH4LIMITH_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENSET_CH4LIMITH_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH4LIMITH_Set = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH3LIMITL_Pos = @as(c_ulong, 13);
pub const SAADC_INTENSET_CH3LIMITL_Msk = @as(c_ulong, 0x1) << SAADC_INTENSET_CH3LIMITL_Pos;
pub const SAADC_INTENSET_CH3LIMITL_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENSET_CH3LIMITL_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH3LIMITL_Set = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH3LIMITH_Pos = @as(c_ulong, 12);
pub const SAADC_INTENSET_CH3LIMITH_Msk = @as(c_ulong, 0x1) << SAADC_INTENSET_CH3LIMITH_Pos;
pub const SAADC_INTENSET_CH3LIMITH_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENSET_CH3LIMITH_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH3LIMITH_Set = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH2LIMITL_Pos = @as(c_ulong, 11);
pub const SAADC_INTENSET_CH2LIMITL_Msk = @as(c_ulong, 0x1) << SAADC_INTENSET_CH2LIMITL_Pos;
pub const SAADC_INTENSET_CH2LIMITL_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENSET_CH2LIMITL_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH2LIMITL_Set = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH2LIMITH_Pos = @as(c_ulong, 10);
pub const SAADC_INTENSET_CH2LIMITH_Msk = @as(c_ulong, 0x1) << SAADC_INTENSET_CH2LIMITH_Pos;
pub const SAADC_INTENSET_CH2LIMITH_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENSET_CH2LIMITH_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH2LIMITH_Set = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH1LIMITL_Pos = @as(c_ulong, 9);
pub const SAADC_INTENSET_CH1LIMITL_Msk = @as(c_ulong, 0x1) << SAADC_INTENSET_CH1LIMITL_Pos;
pub const SAADC_INTENSET_CH1LIMITL_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENSET_CH1LIMITL_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH1LIMITL_Set = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH1LIMITH_Pos = @as(c_ulong, 8);
pub const SAADC_INTENSET_CH1LIMITH_Msk = @as(c_ulong, 0x1) << SAADC_INTENSET_CH1LIMITH_Pos;
pub const SAADC_INTENSET_CH1LIMITH_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENSET_CH1LIMITH_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH1LIMITH_Set = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH0LIMITL_Pos = @as(c_ulong, 7);
pub const SAADC_INTENSET_CH0LIMITL_Msk = @as(c_ulong, 0x1) << SAADC_INTENSET_CH0LIMITL_Pos;
pub const SAADC_INTENSET_CH0LIMITL_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENSET_CH0LIMITL_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH0LIMITL_Set = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH0LIMITH_Pos = @as(c_ulong, 6);
pub const SAADC_INTENSET_CH0LIMITH_Msk = @as(c_ulong, 0x1) << SAADC_INTENSET_CH0LIMITH_Pos;
pub const SAADC_INTENSET_CH0LIMITH_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENSET_CH0LIMITH_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENSET_CH0LIMITH_Set = @as(c_ulong, 1);
pub const SAADC_INTENSET_STOPPED_Pos = @as(c_ulong, 5);
pub const SAADC_INTENSET_STOPPED_Msk = @as(c_ulong, 0x1) << SAADC_INTENSET_STOPPED_Pos;
pub const SAADC_INTENSET_STOPPED_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENSET_STOPPED_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENSET_STOPPED_Set = @as(c_ulong, 1);
pub const SAADC_INTENSET_CALIBRATEDONE_Pos = @as(c_ulong, 4);
pub const SAADC_INTENSET_CALIBRATEDONE_Msk = @as(c_ulong, 0x1) << SAADC_INTENSET_CALIBRATEDONE_Pos;
pub const SAADC_INTENSET_CALIBRATEDONE_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENSET_CALIBRATEDONE_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENSET_CALIBRATEDONE_Set = @as(c_ulong, 1);
pub const SAADC_INTENSET_RESULTDONE_Pos = @as(c_ulong, 3);
pub const SAADC_INTENSET_RESULTDONE_Msk = @as(c_ulong, 0x1) << SAADC_INTENSET_RESULTDONE_Pos;
pub const SAADC_INTENSET_RESULTDONE_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENSET_RESULTDONE_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENSET_RESULTDONE_Set = @as(c_ulong, 1);
pub const SAADC_INTENSET_DONE_Pos = @as(c_ulong, 2);
pub const SAADC_INTENSET_DONE_Msk = @as(c_ulong, 0x1) << SAADC_INTENSET_DONE_Pos;
pub const SAADC_INTENSET_DONE_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENSET_DONE_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENSET_DONE_Set = @as(c_ulong, 1);
pub const SAADC_INTENSET_END_Pos = @as(c_ulong, 1);
pub const SAADC_INTENSET_END_Msk = @as(c_ulong, 0x1) << SAADC_INTENSET_END_Pos;
pub const SAADC_INTENSET_END_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENSET_END_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENSET_END_Set = @as(c_ulong, 1);
pub const SAADC_INTENSET_STARTED_Pos = @as(c_ulong, 0);
pub const SAADC_INTENSET_STARTED_Msk = @as(c_ulong, 0x1) << SAADC_INTENSET_STARTED_Pos;
pub const SAADC_INTENSET_STARTED_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENSET_STARTED_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENSET_STARTED_Set = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH7LIMITL_Pos = @as(c_ulong, 21);
pub const SAADC_INTENCLR_CH7LIMITL_Msk = @as(c_ulong, 0x1) << SAADC_INTENCLR_CH7LIMITL_Pos;
pub const SAADC_INTENCLR_CH7LIMITL_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENCLR_CH7LIMITL_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH7LIMITL_Clear = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH7LIMITH_Pos = @as(c_ulong, 20);
pub const SAADC_INTENCLR_CH7LIMITH_Msk = @as(c_ulong, 0x1) << SAADC_INTENCLR_CH7LIMITH_Pos;
pub const SAADC_INTENCLR_CH7LIMITH_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENCLR_CH7LIMITH_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH7LIMITH_Clear = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH6LIMITL_Pos = @as(c_ulong, 19);
pub const SAADC_INTENCLR_CH6LIMITL_Msk = @as(c_ulong, 0x1) << SAADC_INTENCLR_CH6LIMITL_Pos;
pub const SAADC_INTENCLR_CH6LIMITL_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENCLR_CH6LIMITL_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH6LIMITL_Clear = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH6LIMITH_Pos = @as(c_ulong, 18);
pub const SAADC_INTENCLR_CH6LIMITH_Msk = @as(c_ulong, 0x1) << SAADC_INTENCLR_CH6LIMITH_Pos;
pub const SAADC_INTENCLR_CH6LIMITH_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENCLR_CH6LIMITH_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH6LIMITH_Clear = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH5LIMITL_Pos = @as(c_ulong, 17);
pub const SAADC_INTENCLR_CH5LIMITL_Msk = @as(c_ulong, 0x1) << SAADC_INTENCLR_CH5LIMITL_Pos;
pub const SAADC_INTENCLR_CH5LIMITL_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENCLR_CH5LIMITL_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH5LIMITL_Clear = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH5LIMITH_Pos = @as(c_ulong, 16);
pub const SAADC_INTENCLR_CH5LIMITH_Msk = @as(c_ulong, 0x1) << SAADC_INTENCLR_CH5LIMITH_Pos;
pub const SAADC_INTENCLR_CH5LIMITH_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENCLR_CH5LIMITH_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH5LIMITH_Clear = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH4LIMITL_Pos = @as(c_ulong, 15);
pub const SAADC_INTENCLR_CH4LIMITL_Msk = @as(c_ulong, 0x1) << SAADC_INTENCLR_CH4LIMITL_Pos;
pub const SAADC_INTENCLR_CH4LIMITL_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENCLR_CH4LIMITL_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH4LIMITL_Clear = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH4LIMITH_Pos = @as(c_ulong, 14);
pub const SAADC_INTENCLR_CH4LIMITH_Msk = @as(c_ulong, 0x1) << SAADC_INTENCLR_CH4LIMITH_Pos;
pub const SAADC_INTENCLR_CH4LIMITH_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENCLR_CH4LIMITH_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH4LIMITH_Clear = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH3LIMITL_Pos = @as(c_ulong, 13);
pub const SAADC_INTENCLR_CH3LIMITL_Msk = @as(c_ulong, 0x1) << SAADC_INTENCLR_CH3LIMITL_Pos;
pub const SAADC_INTENCLR_CH3LIMITL_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENCLR_CH3LIMITL_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH3LIMITL_Clear = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH3LIMITH_Pos = @as(c_ulong, 12);
pub const SAADC_INTENCLR_CH3LIMITH_Msk = @as(c_ulong, 0x1) << SAADC_INTENCLR_CH3LIMITH_Pos;
pub const SAADC_INTENCLR_CH3LIMITH_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENCLR_CH3LIMITH_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH3LIMITH_Clear = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH2LIMITL_Pos = @as(c_ulong, 11);
pub const SAADC_INTENCLR_CH2LIMITL_Msk = @as(c_ulong, 0x1) << SAADC_INTENCLR_CH2LIMITL_Pos;
pub const SAADC_INTENCLR_CH2LIMITL_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENCLR_CH2LIMITL_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH2LIMITL_Clear = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH2LIMITH_Pos = @as(c_ulong, 10);
pub const SAADC_INTENCLR_CH2LIMITH_Msk = @as(c_ulong, 0x1) << SAADC_INTENCLR_CH2LIMITH_Pos;
pub const SAADC_INTENCLR_CH2LIMITH_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENCLR_CH2LIMITH_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH2LIMITH_Clear = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH1LIMITL_Pos = @as(c_ulong, 9);
pub const SAADC_INTENCLR_CH1LIMITL_Msk = @as(c_ulong, 0x1) << SAADC_INTENCLR_CH1LIMITL_Pos;
pub const SAADC_INTENCLR_CH1LIMITL_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENCLR_CH1LIMITL_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH1LIMITL_Clear = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH1LIMITH_Pos = @as(c_ulong, 8);
pub const SAADC_INTENCLR_CH1LIMITH_Msk = @as(c_ulong, 0x1) << SAADC_INTENCLR_CH1LIMITH_Pos;
pub const SAADC_INTENCLR_CH1LIMITH_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENCLR_CH1LIMITH_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH1LIMITH_Clear = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH0LIMITL_Pos = @as(c_ulong, 7);
pub const SAADC_INTENCLR_CH0LIMITL_Msk = @as(c_ulong, 0x1) << SAADC_INTENCLR_CH0LIMITL_Pos;
pub const SAADC_INTENCLR_CH0LIMITL_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENCLR_CH0LIMITL_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH0LIMITL_Clear = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH0LIMITH_Pos = @as(c_ulong, 6);
pub const SAADC_INTENCLR_CH0LIMITH_Msk = @as(c_ulong, 0x1) << SAADC_INTENCLR_CH0LIMITH_Pos;
pub const SAADC_INTENCLR_CH0LIMITH_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENCLR_CH0LIMITH_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CH0LIMITH_Clear = @as(c_ulong, 1);
pub const SAADC_INTENCLR_STOPPED_Pos = @as(c_ulong, 5);
pub const SAADC_INTENCLR_STOPPED_Msk = @as(c_ulong, 0x1) << SAADC_INTENCLR_STOPPED_Pos;
pub const SAADC_INTENCLR_STOPPED_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENCLR_STOPPED_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENCLR_STOPPED_Clear = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CALIBRATEDONE_Pos = @as(c_ulong, 4);
pub const SAADC_INTENCLR_CALIBRATEDONE_Msk = @as(c_ulong, 0x1) << SAADC_INTENCLR_CALIBRATEDONE_Pos;
pub const SAADC_INTENCLR_CALIBRATEDONE_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENCLR_CALIBRATEDONE_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENCLR_CALIBRATEDONE_Clear = @as(c_ulong, 1);
pub const SAADC_INTENCLR_RESULTDONE_Pos = @as(c_ulong, 3);
pub const SAADC_INTENCLR_RESULTDONE_Msk = @as(c_ulong, 0x1) << SAADC_INTENCLR_RESULTDONE_Pos;
pub const SAADC_INTENCLR_RESULTDONE_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENCLR_RESULTDONE_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENCLR_RESULTDONE_Clear = @as(c_ulong, 1);
pub const SAADC_INTENCLR_DONE_Pos = @as(c_ulong, 2);
pub const SAADC_INTENCLR_DONE_Msk = @as(c_ulong, 0x1) << SAADC_INTENCLR_DONE_Pos;
pub const SAADC_INTENCLR_DONE_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENCLR_DONE_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENCLR_DONE_Clear = @as(c_ulong, 1);
pub const SAADC_INTENCLR_END_Pos = @as(c_ulong, 1);
pub const SAADC_INTENCLR_END_Msk = @as(c_ulong, 0x1) << SAADC_INTENCLR_END_Pos;
pub const SAADC_INTENCLR_END_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENCLR_END_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENCLR_END_Clear = @as(c_ulong, 1);
pub const SAADC_INTENCLR_STARTED_Pos = @as(c_ulong, 0);
pub const SAADC_INTENCLR_STARTED_Msk = @as(c_ulong, 0x1) << SAADC_INTENCLR_STARTED_Pos;
pub const SAADC_INTENCLR_STARTED_Disabled = @as(c_ulong, 0);
pub const SAADC_INTENCLR_STARTED_Enabled = @as(c_ulong, 1);
pub const SAADC_INTENCLR_STARTED_Clear = @as(c_ulong, 1);
pub const SAADC_STATUS_STATUS_Pos = @as(c_ulong, 0);
pub const SAADC_STATUS_STATUS_Msk = @as(c_ulong, 0x1) << SAADC_STATUS_STATUS_Pos;
pub const SAADC_STATUS_STATUS_Ready = @as(c_ulong, 0);
pub const SAADC_STATUS_STATUS_Busy = @as(c_ulong, 1);
pub const SAADC_ENABLE_ENABLE_Pos = @as(c_ulong, 0);
pub const SAADC_ENABLE_ENABLE_Msk = @as(c_ulong, 0x1) << SAADC_ENABLE_ENABLE_Pos;
pub const SAADC_ENABLE_ENABLE_Disabled = @as(c_ulong, 0);
pub const SAADC_ENABLE_ENABLE_Enabled = @as(c_ulong, 1);
pub const SAADC_CH_PSELP_PSELP_Pos = @as(c_ulong, 0);
pub const SAADC_CH_PSELP_PSELP_Msk = @as(c_ulong, 0x1F) << SAADC_CH_PSELP_PSELP_Pos;
pub const SAADC_CH_PSELP_PSELP_NC = @as(c_ulong, 0);
pub const SAADC_CH_PSELP_PSELP_AnalogInput0 = @as(c_ulong, 1);
pub const SAADC_CH_PSELP_PSELP_AnalogInput1 = @as(c_ulong, 2);
pub const SAADC_CH_PSELP_PSELP_AnalogInput2 = @as(c_ulong, 3);
pub const SAADC_CH_PSELP_PSELP_AnalogInput3 = @as(c_ulong, 4);
pub const SAADC_CH_PSELP_PSELP_AnalogInput4 = @as(c_ulong, 5);
pub const SAADC_CH_PSELP_PSELP_AnalogInput5 = @as(c_ulong, 6);
pub const SAADC_CH_PSELP_PSELP_AnalogInput6 = @as(c_ulong, 7);
pub const SAADC_CH_PSELP_PSELP_AnalogInput7 = @as(c_ulong, 8);
pub const SAADC_CH_PSELP_PSELP_VDD = @as(c_ulong, 9);
pub const SAADC_CH_PSELP_PSELP_VDDHDIV5 = @as(c_ulong, 0x0D);
pub const SAADC_CH_PSELN_PSELN_Pos = @as(c_ulong, 0);
pub const SAADC_CH_PSELN_PSELN_Msk = @as(c_ulong, 0x1F) << SAADC_CH_PSELN_PSELN_Pos;
pub const SAADC_CH_PSELN_PSELN_NC = @as(c_ulong, 0);
pub const SAADC_CH_PSELN_PSELN_AnalogInput0 = @as(c_ulong, 1);
pub const SAADC_CH_PSELN_PSELN_AnalogInput1 = @as(c_ulong, 2);
pub const SAADC_CH_PSELN_PSELN_AnalogInput2 = @as(c_ulong, 3);
pub const SAADC_CH_PSELN_PSELN_AnalogInput3 = @as(c_ulong, 4);
pub const SAADC_CH_PSELN_PSELN_AnalogInput4 = @as(c_ulong, 5);
pub const SAADC_CH_PSELN_PSELN_AnalogInput5 = @as(c_ulong, 6);
pub const SAADC_CH_PSELN_PSELN_AnalogInput6 = @as(c_ulong, 7);
pub const SAADC_CH_PSELN_PSELN_AnalogInput7 = @as(c_ulong, 8);
pub const SAADC_CH_PSELN_PSELN_VDD = @as(c_ulong, 9);
pub const SAADC_CH_PSELN_PSELN_VDDHDIV5 = @as(c_ulong, 0x0D);
pub const SAADC_CH_CONFIG_BURST_Pos = @as(c_ulong, 24);
pub const SAADC_CH_CONFIG_BURST_Msk = @as(c_ulong, 0x1) << SAADC_CH_CONFIG_BURST_Pos;
pub const SAADC_CH_CONFIG_BURST_Disabled = @as(c_ulong, 0);
pub const SAADC_CH_CONFIG_BURST_Enabled = @as(c_ulong, 1);
pub const SAADC_CH_CONFIG_MODE_Pos = @as(c_ulong, 20);
pub const SAADC_CH_CONFIG_MODE_Msk = @as(c_ulong, 0x1) << SAADC_CH_CONFIG_MODE_Pos;
pub const SAADC_CH_CONFIG_MODE_SE = @as(c_ulong, 0);
pub const SAADC_CH_CONFIG_MODE_Diff = @as(c_ulong, 1);
pub const SAADC_CH_CONFIG_TACQ_Pos = @as(c_ulong, 16);
pub const SAADC_CH_CONFIG_TACQ_Msk = @as(c_ulong, 0x7) << SAADC_CH_CONFIG_TACQ_Pos;
pub const SAADC_CH_CONFIG_TACQ_3us = @as(c_ulong, 0);
pub const SAADC_CH_CONFIG_TACQ_5us = @as(c_ulong, 1);
pub const SAADC_CH_CONFIG_TACQ_10us = @as(c_ulong, 2);
pub const SAADC_CH_CONFIG_TACQ_15us = @as(c_ulong, 3);
pub const SAADC_CH_CONFIG_TACQ_20us = @as(c_ulong, 4);
pub const SAADC_CH_CONFIG_TACQ_40us = @as(c_ulong, 5);
pub const SAADC_CH_CONFIG_REFSEL_Pos = @as(c_ulong, 12);
pub const SAADC_CH_CONFIG_REFSEL_Msk = @as(c_ulong, 0x1) << SAADC_CH_CONFIG_REFSEL_Pos;
pub const SAADC_CH_CONFIG_REFSEL_Internal = @as(c_ulong, 0);
pub const SAADC_CH_CONFIG_REFSEL_VDD1_4 = @as(c_ulong, 1);
pub const SAADC_CH_CONFIG_GAIN_Pos = @as(c_ulong, 8);
pub const SAADC_CH_CONFIG_GAIN_Msk = @as(c_ulong, 0x7) << SAADC_CH_CONFIG_GAIN_Pos;
pub const SAADC_CH_CONFIG_GAIN_Gain1_6 = @as(c_ulong, 0);
pub const SAADC_CH_CONFIG_GAIN_Gain1_5 = @as(c_ulong, 1);
pub const SAADC_CH_CONFIG_GAIN_Gain1_4 = @as(c_ulong, 2);
pub const SAADC_CH_CONFIG_GAIN_Gain1_3 = @as(c_ulong, 3);
pub const SAADC_CH_CONFIG_GAIN_Gain1_2 = @as(c_ulong, 4);
pub const SAADC_CH_CONFIG_GAIN_Gain1 = @as(c_ulong, 5);
pub const SAADC_CH_CONFIG_GAIN_Gain2 = @as(c_ulong, 6);
pub const SAADC_CH_CONFIG_GAIN_Gain4 = @as(c_ulong, 7);
pub const SAADC_CH_CONFIG_RESN_Pos = @as(c_ulong, 4);
pub const SAADC_CH_CONFIG_RESN_Msk = @as(c_ulong, 0x3) << SAADC_CH_CONFIG_RESN_Pos;
pub const SAADC_CH_CONFIG_RESN_Bypass = @as(c_ulong, 0);
pub const SAADC_CH_CONFIG_RESN_Pulldown = @as(c_ulong, 1);
pub const SAADC_CH_CONFIG_RESN_Pullup = @as(c_ulong, 2);
pub const SAADC_CH_CONFIG_RESN_VDD1_2 = @as(c_ulong, 3);
pub const SAADC_CH_CONFIG_RESP_Pos = @as(c_ulong, 0);
pub const SAADC_CH_CONFIG_RESP_Msk = @as(c_ulong, 0x3) << SAADC_CH_CONFIG_RESP_Pos;
pub const SAADC_CH_CONFIG_RESP_Bypass = @as(c_ulong, 0);
pub const SAADC_CH_CONFIG_RESP_Pulldown = @as(c_ulong, 1);
pub const SAADC_CH_CONFIG_RESP_Pullup = @as(c_ulong, 2);
pub const SAADC_CH_CONFIG_RESP_VDD1_2 = @as(c_ulong, 3);
pub const SAADC_CH_LIMIT_HIGH_Pos = @as(c_ulong, 16);
pub const SAADC_CH_LIMIT_HIGH_Msk = @as(c_ulong, 0xFFFF) << SAADC_CH_LIMIT_HIGH_Pos;
pub const SAADC_CH_LIMIT_LOW_Pos = @as(c_ulong, 0);
pub const SAADC_CH_LIMIT_LOW_Msk = @as(c_ulong, 0xFFFF) << SAADC_CH_LIMIT_LOW_Pos;
pub const SAADC_RESOLUTION_VAL_Pos = @as(c_ulong, 0);
pub const SAADC_RESOLUTION_VAL_Msk = @as(c_ulong, 0x7) << SAADC_RESOLUTION_VAL_Pos;
pub const SAADC_RESOLUTION_VAL_8bit = @as(c_ulong, 0);
pub const SAADC_RESOLUTION_VAL_10bit = @as(c_ulong, 1);
pub const SAADC_RESOLUTION_VAL_12bit = @as(c_ulong, 2);
pub const SAADC_RESOLUTION_VAL_14bit = @as(c_ulong, 3);
pub const SAADC_OVERSAMPLE_OVERSAMPLE_Pos = @as(c_ulong, 0);
pub const SAADC_OVERSAMPLE_OVERSAMPLE_Msk = @as(c_ulong, 0xF) << SAADC_OVERSAMPLE_OVERSAMPLE_Pos;
pub const SAADC_OVERSAMPLE_OVERSAMPLE_Bypass = @as(c_ulong, 0);
pub const SAADC_OVERSAMPLE_OVERSAMPLE_Over2x = @as(c_ulong, 1);
pub const SAADC_OVERSAMPLE_OVERSAMPLE_Over4x = @as(c_ulong, 2);
pub const SAADC_OVERSAMPLE_OVERSAMPLE_Over8x = @as(c_ulong, 3);
pub const SAADC_OVERSAMPLE_OVERSAMPLE_Over16x = @as(c_ulong, 4);
pub const SAADC_OVERSAMPLE_OVERSAMPLE_Over32x = @as(c_ulong, 5);
pub const SAADC_OVERSAMPLE_OVERSAMPLE_Over64x = @as(c_ulong, 6);
pub const SAADC_OVERSAMPLE_OVERSAMPLE_Over128x = @as(c_ulong, 7);
pub const SAADC_OVERSAMPLE_OVERSAMPLE_Over256x = @as(c_ulong, 8);
pub const SAADC_SAMPLERATE_MODE_Pos = @as(c_ulong, 12);
pub const SAADC_SAMPLERATE_MODE_Msk = @as(c_ulong, 0x1) << SAADC_SAMPLERATE_MODE_Pos;
pub const SAADC_SAMPLERATE_MODE_Task = @as(c_ulong, 0);
pub const SAADC_SAMPLERATE_MODE_Timers = @as(c_ulong, 1);
pub const SAADC_SAMPLERATE_CC_Pos = @as(c_ulong, 0);
pub const SAADC_SAMPLERATE_CC_Msk = @as(c_ulong, 0x7FF) << SAADC_SAMPLERATE_CC_Pos;
pub const SAADC_RESULT_PTR_PTR_Pos = @as(c_ulong, 0);
pub const SAADC_RESULT_PTR_PTR_Msk = @as(c_ulong, 0xFFFFFFFF) << SAADC_RESULT_PTR_PTR_Pos;
pub const SAADC_RESULT_MAXCNT_MAXCNT_Pos = @as(c_ulong, 0);
pub const SAADC_RESULT_MAXCNT_MAXCNT_Msk = @as(c_ulong, 0x7FFF) << SAADC_RESULT_MAXCNT_MAXCNT_Pos;
pub const SAADC_RESULT_AMOUNT_AMOUNT_Pos = @as(c_ulong, 0);
pub const SAADC_RESULT_AMOUNT_AMOUNT_Msk = @as(c_ulong, 0x7FFF) << SAADC_RESULT_AMOUNT_AMOUNT_Pos;
pub const SPI_EVENTS_READY_EVENTS_READY_Pos = @as(c_ulong, 0);
pub const SPI_EVENTS_READY_EVENTS_READY_Msk = @as(c_ulong, 0x1) << SPI_EVENTS_READY_EVENTS_READY_Pos;
pub const SPI_EVENTS_READY_EVENTS_READY_NotGenerated = @as(c_ulong, 0);
pub const SPI_EVENTS_READY_EVENTS_READY_Generated = @as(c_ulong, 1);
pub const SPI_INTENSET_READY_Pos = @as(c_ulong, 2);
pub const SPI_INTENSET_READY_Msk = @as(c_ulong, 0x1) << SPI_INTENSET_READY_Pos;
pub const SPI_INTENSET_READY_Disabled = @as(c_ulong, 0);
pub const SPI_INTENSET_READY_Enabled = @as(c_ulong, 1);
pub const SPI_INTENSET_READY_Set = @as(c_ulong, 1);
pub const SPI_INTENCLR_READY_Pos = @as(c_ulong, 2);
pub const SPI_INTENCLR_READY_Msk = @as(c_ulong, 0x1) << SPI_INTENCLR_READY_Pos;
pub const SPI_INTENCLR_READY_Disabled = @as(c_ulong, 0);
pub const SPI_INTENCLR_READY_Enabled = @as(c_ulong, 1);
pub const SPI_INTENCLR_READY_Clear = @as(c_ulong, 1);
pub const SPI_ENABLE_ENABLE_Pos = @as(c_ulong, 0);
pub const SPI_ENABLE_ENABLE_Msk = @as(c_ulong, 0xF) << SPI_ENABLE_ENABLE_Pos;
pub const SPI_ENABLE_ENABLE_Disabled = @as(c_ulong, 0);
pub const SPI_ENABLE_ENABLE_Enabled = @as(c_ulong, 1);
pub const SPI_PSEL_SCK_CONNECT_Pos = @as(c_ulong, 31);
pub const SPI_PSEL_SCK_CONNECT_Msk = @as(c_ulong, 0x1) << SPI_PSEL_SCK_CONNECT_Pos;
pub const SPI_PSEL_SCK_CONNECT_Connected = @as(c_ulong, 0);
pub const SPI_PSEL_SCK_CONNECT_Disconnected = @as(c_ulong, 1);
pub const SPI_PSEL_SCK_PORT_Pos = @as(c_ulong, 5);
pub const SPI_PSEL_SCK_PORT_Msk = @as(c_ulong, 0x1) << SPI_PSEL_SCK_PORT_Pos;
pub const SPI_PSEL_SCK_PIN_Pos = @as(c_ulong, 0);
pub const SPI_PSEL_SCK_PIN_Msk = @as(c_ulong, 0x1F) << SPI_PSEL_SCK_PIN_Pos;
pub const SPI_PSEL_MOSI_CONNECT_Pos = @as(c_ulong, 31);
pub const SPI_PSEL_MOSI_CONNECT_Msk = @as(c_ulong, 0x1) << SPI_PSEL_MOSI_CONNECT_Pos;
pub const SPI_PSEL_MOSI_CONNECT_Connected = @as(c_ulong, 0);
pub const SPI_PSEL_MOSI_CONNECT_Disconnected = @as(c_ulong, 1);
pub const SPI_PSEL_MOSI_PORT_Pos = @as(c_ulong, 5);
pub const SPI_PSEL_MOSI_PORT_Msk = @as(c_ulong, 0x1) << SPI_PSEL_MOSI_PORT_Pos;
pub const SPI_PSEL_MOSI_PIN_Pos = @as(c_ulong, 0);
pub const SPI_PSEL_MOSI_PIN_Msk = @as(c_ulong, 0x1F) << SPI_PSEL_MOSI_PIN_Pos;
pub const SPI_PSEL_MISO_CONNECT_Pos = @as(c_ulong, 31);
pub const SPI_PSEL_MISO_CONNECT_Msk = @as(c_ulong, 0x1) << SPI_PSEL_MISO_CONNECT_Pos;
pub const SPI_PSEL_MISO_CONNECT_Connected = @as(c_ulong, 0);
pub const SPI_PSEL_MISO_CONNECT_Disconnected = @as(c_ulong, 1);
pub const SPI_PSEL_MISO_PORT_Pos = @as(c_ulong, 5);
pub const SPI_PSEL_MISO_PORT_Msk = @as(c_ulong, 0x1) << SPI_PSEL_MISO_PORT_Pos;
pub const SPI_PSEL_MISO_PIN_Pos = @as(c_ulong, 0);
pub const SPI_PSEL_MISO_PIN_Msk = @as(c_ulong, 0x1F) << SPI_PSEL_MISO_PIN_Pos;
pub const SPI_RXD_RXD_Pos = @as(c_ulong, 0);
pub const SPI_RXD_RXD_Msk = @as(c_ulong, 0xFF) << SPI_RXD_RXD_Pos;
pub const SPI_TXD_TXD_Pos = @as(c_ulong, 0);
pub const SPI_TXD_TXD_Msk = @as(c_ulong, 0xFF) << SPI_TXD_TXD_Pos;
pub const SPI_FREQUENCY_FREQUENCY_Pos = @as(c_ulong, 0);
pub const SPI_FREQUENCY_FREQUENCY_Msk = @as(c_ulong, 0xFFFFFFFF) << SPI_FREQUENCY_FREQUENCY_Pos;
pub const SPI_FREQUENCY_FREQUENCY_K125 = @as(c_ulong, 0x02000000);
pub const SPI_FREQUENCY_FREQUENCY_K250 = @as(c_ulong, 0x04000000);
pub const SPI_FREQUENCY_FREQUENCY_K500 = @as(c_ulong, 0x08000000);
pub const SPI_FREQUENCY_FREQUENCY_M1 = @as(c_ulong, 0x10000000);
pub const SPI_FREQUENCY_FREQUENCY_M2 = @as(c_ulong, 0x20000000);
pub const SPI_FREQUENCY_FREQUENCY_M4 = @as(c_ulong, 0x40000000);
pub const SPI_FREQUENCY_FREQUENCY_M8 = @as(c_ulong, 0x80000000);
pub const SPI_CONFIG_CPOL_Pos = @as(c_ulong, 2);
pub const SPI_CONFIG_CPOL_Msk = @as(c_ulong, 0x1) << SPI_CONFIG_CPOL_Pos;
pub const SPI_CONFIG_CPOL_ActiveHigh = @as(c_ulong, 0);
pub const SPI_CONFIG_CPOL_ActiveLow = @as(c_ulong, 1);
pub const SPI_CONFIG_CPHA_Pos = @as(c_ulong, 1);
pub const SPI_CONFIG_CPHA_Msk = @as(c_ulong, 0x1) << SPI_CONFIG_CPHA_Pos;
pub const SPI_CONFIG_CPHA_Leading = @as(c_ulong, 0);
pub const SPI_CONFIG_CPHA_Trailing = @as(c_ulong, 1);
pub const SPI_CONFIG_ORDER_Pos = @as(c_ulong, 0);
pub const SPI_CONFIG_ORDER_Msk = @as(c_ulong, 0x1) << SPI_CONFIG_ORDER_Pos;
pub const SPI_CONFIG_ORDER_MsbFirst = @as(c_ulong, 0);
pub const SPI_CONFIG_ORDER_LsbFirst = @as(c_ulong, 1);
pub const SPIM_TASKS_START_TASKS_START_Pos = @as(c_ulong, 0);
pub const SPIM_TASKS_START_TASKS_START_Msk = @as(c_ulong, 0x1) << SPIM_TASKS_START_TASKS_START_Pos;
pub const SPIM_TASKS_START_TASKS_START_Trigger = @as(c_ulong, 1);
pub const SPIM_TASKS_STOP_TASKS_STOP_Pos = @as(c_ulong, 0);
pub const SPIM_TASKS_STOP_TASKS_STOP_Msk = @as(c_ulong, 0x1) << SPIM_TASKS_STOP_TASKS_STOP_Pos;
pub const SPIM_TASKS_STOP_TASKS_STOP_Trigger = @as(c_ulong, 1);
pub const SPIM_TASKS_SUSPEND_TASKS_SUSPEND_Pos = @as(c_ulong, 0);
pub const SPIM_TASKS_SUSPEND_TASKS_SUSPEND_Msk = @as(c_ulong, 0x1) << SPIM_TASKS_SUSPEND_TASKS_SUSPEND_Pos;
pub const SPIM_TASKS_SUSPEND_TASKS_SUSPEND_Trigger = @as(c_ulong, 1);
pub const SPIM_TASKS_RESUME_TASKS_RESUME_Pos = @as(c_ulong, 0);
pub const SPIM_TASKS_RESUME_TASKS_RESUME_Msk = @as(c_ulong, 0x1) << SPIM_TASKS_RESUME_TASKS_RESUME_Pos;
pub const SPIM_TASKS_RESUME_TASKS_RESUME_Trigger = @as(c_ulong, 1);
pub const SPIM_EVENTS_STOPPED_EVENTS_STOPPED_Pos = @as(c_ulong, 0);
pub const SPIM_EVENTS_STOPPED_EVENTS_STOPPED_Msk = @as(c_ulong, 0x1) << SPIM_EVENTS_STOPPED_EVENTS_STOPPED_Pos;
pub const SPIM_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated = @as(c_ulong, 0);
pub const SPIM_EVENTS_STOPPED_EVENTS_STOPPED_Generated = @as(c_ulong, 1);
pub const SPIM_EVENTS_ENDRX_EVENTS_ENDRX_Pos = @as(c_ulong, 0);
pub const SPIM_EVENTS_ENDRX_EVENTS_ENDRX_Msk = @as(c_ulong, 0x1) << SPIM_EVENTS_ENDRX_EVENTS_ENDRX_Pos;
pub const SPIM_EVENTS_ENDRX_EVENTS_ENDRX_NotGenerated = @as(c_ulong, 0);
pub const SPIM_EVENTS_ENDRX_EVENTS_ENDRX_Generated = @as(c_ulong, 1);
pub const SPIM_EVENTS_END_EVENTS_END_Pos = @as(c_ulong, 0);
pub const SPIM_EVENTS_END_EVENTS_END_Msk = @as(c_ulong, 0x1) << SPIM_EVENTS_END_EVENTS_END_Pos;
pub const SPIM_EVENTS_END_EVENTS_END_NotGenerated = @as(c_ulong, 0);
pub const SPIM_EVENTS_END_EVENTS_END_Generated = @as(c_ulong, 1);
pub const SPIM_EVENTS_ENDTX_EVENTS_ENDTX_Pos = @as(c_ulong, 0);
pub const SPIM_EVENTS_ENDTX_EVENTS_ENDTX_Msk = @as(c_ulong, 0x1) << SPIM_EVENTS_ENDTX_EVENTS_ENDTX_Pos;
pub const SPIM_EVENTS_ENDTX_EVENTS_ENDTX_NotGenerated = @as(c_ulong, 0);
pub const SPIM_EVENTS_ENDTX_EVENTS_ENDTX_Generated = @as(c_ulong, 1);
pub const SPIM_EVENTS_STARTED_EVENTS_STARTED_Pos = @as(c_ulong, 0);
pub const SPIM_EVENTS_STARTED_EVENTS_STARTED_Msk = @as(c_ulong, 0x1) << SPIM_EVENTS_STARTED_EVENTS_STARTED_Pos;
pub const SPIM_EVENTS_STARTED_EVENTS_STARTED_NotGenerated = @as(c_ulong, 0);
pub const SPIM_EVENTS_STARTED_EVENTS_STARTED_Generated = @as(c_ulong, 1);
pub const SPIM_SHORTS_END_START_Pos = @as(c_ulong, 17);
pub const SPIM_SHORTS_END_START_Msk = @as(c_ulong, 0x1) << SPIM_SHORTS_END_START_Pos;
pub const SPIM_SHORTS_END_START_Disabled = @as(c_ulong, 0);
pub const SPIM_SHORTS_END_START_Enabled = @as(c_ulong, 1);
pub const SPIM_INTENSET_STARTED_Pos = @as(c_ulong, 19);
pub const SPIM_INTENSET_STARTED_Msk = @as(c_ulong, 0x1) << SPIM_INTENSET_STARTED_Pos;
pub const SPIM_INTENSET_STARTED_Disabled = @as(c_ulong, 0);
pub const SPIM_INTENSET_STARTED_Enabled = @as(c_ulong, 1);
pub const SPIM_INTENSET_STARTED_Set = @as(c_ulong, 1);
pub const SPIM_INTENSET_ENDTX_Pos = @as(c_ulong, 8);
pub const SPIM_INTENSET_ENDTX_Msk = @as(c_ulong, 0x1) << SPIM_INTENSET_ENDTX_Pos;
pub const SPIM_INTENSET_ENDTX_Disabled = @as(c_ulong, 0);
pub const SPIM_INTENSET_ENDTX_Enabled = @as(c_ulong, 1);
pub const SPIM_INTENSET_ENDTX_Set = @as(c_ulong, 1);
pub const SPIM_INTENSET_END_Pos = @as(c_ulong, 6);
pub const SPIM_INTENSET_END_Msk = @as(c_ulong, 0x1) << SPIM_INTENSET_END_Pos;
pub const SPIM_INTENSET_END_Disabled = @as(c_ulong, 0);
pub const SPIM_INTENSET_END_Enabled = @as(c_ulong, 1);
pub const SPIM_INTENSET_END_Set = @as(c_ulong, 1);
pub const SPIM_INTENSET_ENDRX_Pos = @as(c_ulong, 4);
pub const SPIM_INTENSET_ENDRX_Msk = @as(c_ulong, 0x1) << SPIM_INTENSET_ENDRX_Pos;
pub const SPIM_INTENSET_ENDRX_Disabled = @as(c_ulong, 0);
pub const SPIM_INTENSET_ENDRX_Enabled = @as(c_ulong, 1);
pub const SPIM_INTENSET_ENDRX_Set = @as(c_ulong, 1);
pub const SPIM_INTENSET_STOPPED_Pos = @as(c_ulong, 1);
pub const SPIM_INTENSET_STOPPED_Msk = @as(c_ulong, 0x1) << SPIM_INTENSET_STOPPED_Pos;
pub const SPIM_INTENSET_STOPPED_Disabled = @as(c_ulong, 0);
pub const SPIM_INTENSET_STOPPED_Enabled = @as(c_ulong, 1);
pub const SPIM_INTENSET_STOPPED_Set = @as(c_ulong, 1);
pub const SPIM_INTENCLR_STARTED_Pos = @as(c_ulong, 19);
pub const SPIM_INTENCLR_STARTED_Msk = @as(c_ulong, 0x1) << SPIM_INTENCLR_STARTED_Pos;
pub const SPIM_INTENCLR_STARTED_Disabled = @as(c_ulong, 0);
pub const SPIM_INTENCLR_STARTED_Enabled = @as(c_ulong, 1);
pub const SPIM_INTENCLR_STARTED_Clear = @as(c_ulong, 1);
pub const SPIM_INTENCLR_ENDTX_Pos = @as(c_ulong, 8);
pub const SPIM_INTENCLR_ENDTX_Msk = @as(c_ulong, 0x1) << SPIM_INTENCLR_ENDTX_Pos;
pub const SPIM_INTENCLR_ENDTX_Disabled = @as(c_ulong, 0);
pub const SPIM_INTENCLR_ENDTX_Enabled = @as(c_ulong, 1);
pub const SPIM_INTENCLR_ENDTX_Clear = @as(c_ulong, 1);
pub const SPIM_INTENCLR_END_Pos = @as(c_ulong, 6);
pub const SPIM_INTENCLR_END_Msk = @as(c_ulong, 0x1) << SPIM_INTENCLR_END_Pos;
pub const SPIM_INTENCLR_END_Disabled = @as(c_ulong, 0);
pub const SPIM_INTENCLR_END_Enabled = @as(c_ulong, 1);
pub const SPIM_INTENCLR_END_Clear = @as(c_ulong, 1);
pub const SPIM_INTENCLR_ENDRX_Pos = @as(c_ulong, 4);
pub const SPIM_INTENCLR_ENDRX_Msk = @as(c_ulong, 0x1) << SPIM_INTENCLR_ENDRX_Pos;
pub const SPIM_INTENCLR_ENDRX_Disabled = @as(c_ulong, 0);
pub const SPIM_INTENCLR_ENDRX_Enabled = @as(c_ulong, 1);
pub const SPIM_INTENCLR_ENDRX_Clear = @as(c_ulong, 1);
pub const SPIM_INTENCLR_STOPPED_Pos = @as(c_ulong, 1);
pub const SPIM_INTENCLR_STOPPED_Msk = @as(c_ulong, 0x1) << SPIM_INTENCLR_STOPPED_Pos;
pub const SPIM_INTENCLR_STOPPED_Disabled = @as(c_ulong, 0);
pub const SPIM_INTENCLR_STOPPED_Enabled = @as(c_ulong, 1);
pub const SPIM_INTENCLR_STOPPED_Clear = @as(c_ulong, 1);
pub const SPIM_STALLSTAT_RX_Pos = @as(c_ulong, 1);
pub const SPIM_STALLSTAT_RX_Msk = @as(c_ulong, 0x1) << SPIM_STALLSTAT_RX_Pos;
pub const SPIM_STALLSTAT_RX_NOSTALL = @as(c_ulong, 0);
pub const SPIM_STALLSTAT_RX_STALL = @as(c_ulong, 1);
pub const SPIM_STALLSTAT_TX_Pos = @as(c_ulong, 0);
pub const SPIM_STALLSTAT_TX_Msk = @as(c_ulong, 0x1) << SPIM_STALLSTAT_TX_Pos;
pub const SPIM_STALLSTAT_TX_NOSTALL = @as(c_ulong, 0);
pub const SPIM_STALLSTAT_TX_STALL = @as(c_ulong, 1);
pub const SPIM_ENABLE_ENABLE_Pos = @as(c_ulong, 0);
pub const SPIM_ENABLE_ENABLE_Msk = @as(c_ulong, 0xF) << SPIM_ENABLE_ENABLE_Pos;
pub const SPIM_ENABLE_ENABLE_Disabled = @as(c_ulong, 0);
pub const SPIM_ENABLE_ENABLE_Enabled = @as(c_ulong, 7);
pub const SPIM_PSEL_SCK_CONNECT_Pos = @as(c_ulong, 31);
pub const SPIM_PSEL_SCK_CONNECT_Msk = @as(c_ulong, 0x1) << SPIM_PSEL_SCK_CONNECT_Pos;
pub const SPIM_PSEL_SCK_CONNECT_Connected = @as(c_ulong, 0);
pub const SPIM_PSEL_SCK_CONNECT_Disconnected = @as(c_ulong, 1);
pub const SPIM_PSEL_SCK_PORT_Pos = @as(c_ulong, 5);
pub const SPIM_PSEL_SCK_PORT_Msk = @as(c_ulong, 0x1) << SPIM_PSEL_SCK_PORT_Pos;
pub const SPIM_PSEL_SCK_PIN_Pos = @as(c_ulong, 0);
pub const SPIM_PSEL_SCK_PIN_Msk = @as(c_ulong, 0x1F) << SPIM_PSEL_SCK_PIN_Pos;
pub const SPIM_PSEL_MOSI_CONNECT_Pos = @as(c_ulong, 31);
pub const SPIM_PSEL_MOSI_CONNECT_Msk = @as(c_ulong, 0x1) << SPIM_PSEL_MOSI_CONNECT_Pos;
pub const SPIM_PSEL_MOSI_CONNECT_Connected = @as(c_ulong, 0);
pub const SPIM_PSEL_MOSI_CONNECT_Disconnected = @as(c_ulong, 1);
pub const SPIM_PSEL_MOSI_PORT_Pos = @as(c_ulong, 5);
pub const SPIM_PSEL_MOSI_PORT_Msk = @as(c_ulong, 0x1) << SPIM_PSEL_MOSI_PORT_Pos;
pub const SPIM_PSEL_MOSI_PIN_Pos = @as(c_ulong, 0);
pub const SPIM_PSEL_MOSI_PIN_Msk = @as(c_ulong, 0x1F) << SPIM_PSEL_MOSI_PIN_Pos;
pub const SPIM_PSEL_MISO_CONNECT_Pos = @as(c_ulong, 31);
pub const SPIM_PSEL_MISO_CONNECT_Msk = @as(c_ulong, 0x1) << SPIM_PSEL_MISO_CONNECT_Pos;
pub const SPIM_PSEL_MISO_CONNECT_Connected = @as(c_ulong, 0);
pub const SPIM_PSEL_MISO_CONNECT_Disconnected = @as(c_ulong, 1);
pub const SPIM_PSEL_MISO_PORT_Pos = @as(c_ulong, 5);
pub const SPIM_PSEL_MISO_PORT_Msk = @as(c_ulong, 0x1) << SPIM_PSEL_MISO_PORT_Pos;
pub const SPIM_PSEL_MISO_PIN_Pos = @as(c_ulong, 0);
pub const SPIM_PSEL_MISO_PIN_Msk = @as(c_ulong, 0x1F) << SPIM_PSEL_MISO_PIN_Pos;
pub const SPIM_PSEL_CSN_CONNECT_Pos = @as(c_ulong, 31);
pub const SPIM_PSEL_CSN_CONNECT_Msk = @as(c_ulong, 0x1) << SPIM_PSEL_CSN_CONNECT_Pos;
pub const SPIM_PSEL_CSN_CONNECT_Connected = @as(c_ulong, 0);
pub const SPIM_PSEL_CSN_CONNECT_Disconnected = @as(c_ulong, 1);
pub const SPIM_PSEL_CSN_PORT_Pos = @as(c_ulong, 5);
pub const SPIM_PSEL_CSN_PORT_Msk = @as(c_ulong, 0x1) << SPIM_PSEL_CSN_PORT_Pos;
pub const SPIM_PSEL_CSN_PIN_Pos = @as(c_ulong, 0);
pub const SPIM_PSEL_CSN_PIN_Msk = @as(c_ulong, 0x1F) << SPIM_PSEL_CSN_PIN_Pos;
pub const SPIM_FREQUENCY_FREQUENCY_Pos = @as(c_ulong, 0);
pub const SPIM_FREQUENCY_FREQUENCY_Msk = @as(c_ulong, 0xFFFFFFFF) << SPIM_FREQUENCY_FREQUENCY_Pos;
pub const SPIM_FREQUENCY_FREQUENCY_K125 = @as(c_ulong, 0x02000000);
pub const SPIM_FREQUENCY_FREQUENCY_K250 = @as(c_ulong, 0x04000000);
pub const SPIM_FREQUENCY_FREQUENCY_K500 = @as(c_ulong, 0x08000000);
pub const SPIM_FREQUENCY_FREQUENCY_M16 = @as(c_ulong, 0x0A000000);
pub const SPIM_FREQUENCY_FREQUENCY_M1 = @as(c_ulong, 0x10000000);
pub const SPIM_FREQUENCY_FREQUENCY_M32 = @as(c_ulong, 0x14000000);
pub const SPIM_FREQUENCY_FREQUENCY_M2 = @as(c_ulong, 0x20000000);
pub const SPIM_FREQUENCY_FREQUENCY_M4 = @as(c_ulong, 0x40000000);
pub const SPIM_FREQUENCY_FREQUENCY_M8 = @as(c_ulong, 0x80000000);
pub const SPIM_RXD_PTR_PTR_Pos = @as(c_ulong, 0);
pub const SPIM_RXD_PTR_PTR_Msk = @as(c_ulong, 0xFFFFFFFF) << SPIM_RXD_PTR_PTR_Pos;
pub const SPIM_RXD_MAXCNT_MAXCNT_Pos = @as(c_ulong, 0);
pub const SPIM_RXD_MAXCNT_MAXCNT_Msk = @as(c_ulong, 0xFFFF) << SPIM_RXD_MAXCNT_MAXCNT_Pos;
pub const SPIM_RXD_AMOUNT_AMOUNT_Pos = @as(c_ulong, 0);
pub const SPIM_RXD_AMOUNT_AMOUNT_Msk = @as(c_ulong, 0xFFFF) << SPIM_RXD_AMOUNT_AMOUNT_Pos;
pub const SPIM_RXD_LIST_LIST_Pos = @as(c_ulong, 0);
pub const SPIM_RXD_LIST_LIST_Msk = @as(c_ulong, 0x3) << SPIM_RXD_LIST_LIST_Pos;
pub const SPIM_RXD_LIST_LIST_Disabled = @as(c_ulong, 0);
pub const SPIM_RXD_LIST_LIST_ArrayList = @as(c_ulong, 1);
pub const SPIM_TXD_PTR_PTR_Pos = @as(c_ulong, 0);
pub const SPIM_TXD_PTR_PTR_Msk = @as(c_ulong, 0xFFFFFFFF) << SPIM_TXD_PTR_PTR_Pos;
pub const SPIM_TXD_MAXCNT_MAXCNT_Pos = @as(c_ulong, 0);
pub const SPIM_TXD_MAXCNT_MAXCNT_Msk = @as(c_ulong, 0xFFFF) << SPIM_TXD_MAXCNT_MAXCNT_Pos;
pub const SPIM_TXD_AMOUNT_AMOUNT_Pos = @as(c_ulong, 0);
pub const SPIM_TXD_AMOUNT_AMOUNT_Msk = @as(c_ulong, 0xFFFF) << SPIM_TXD_AMOUNT_AMOUNT_Pos;
pub const SPIM_TXD_LIST_LIST_Pos = @as(c_ulong, 0);
pub const SPIM_TXD_LIST_LIST_Msk = @as(c_ulong, 0x3) << SPIM_TXD_LIST_LIST_Pos;
pub const SPIM_TXD_LIST_LIST_Disabled = @as(c_ulong, 0);
pub const SPIM_TXD_LIST_LIST_ArrayList = @as(c_ulong, 1);
pub const SPIM_CONFIG_CPOL_Pos = @as(c_ulong, 2);
pub const SPIM_CONFIG_CPOL_Msk = @as(c_ulong, 0x1) << SPIM_CONFIG_CPOL_Pos;
pub const SPIM_CONFIG_CPOL_ActiveHigh = @as(c_ulong, 0);
pub const SPIM_CONFIG_CPOL_ActiveLow = @as(c_ulong, 1);
pub const SPIM_CONFIG_CPHA_Pos = @as(c_ulong, 1);
pub const SPIM_CONFIG_CPHA_Msk = @as(c_ulong, 0x1) << SPIM_CONFIG_CPHA_Pos;
pub const SPIM_CONFIG_CPHA_Leading = @as(c_ulong, 0);
pub const SPIM_CONFIG_CPHA_Trailing = @as(c_ulong, 1);
pub const SPIM_CONFIG_ORDER_Pos = @as(c_ulong, 0);
pub const SPIM_CONFIG_ORDER_Msk = @as(c_ulong, 0x1) << SPIM_CONFIG_ORDER_Pos;
pub const SPIM_CONFIG_ORDER_MsbFirst = @as(c_ulong, 0);
pub const SPIM_CONFIG_ORDER_LsbFirst = @as(c_ulong, 1);
pub const SPIM_IFTIMING_RXDELAY_RXDELAY_Pos = @as(c_ulong, 0);
pub const SPIM_IFTIMING_RXDELAY_RXDELAY_Msk = @as(c_ulong, 0x7) << SPIM_IFTIMING_RXDELAY_RXDELAY_Pos;
pub const SPIM_IFTIMING_CSNDUR_CSNDUR_Pos = @as(c_ulong, 0);
pub const SPIM_IFTIMING_CSNDUR_CSNDUR_Msk = @as(c_ulong, 0xFF) << SPIM_IFTIMING_CSNDUR_CSNDUR_Pos;
pub const SPIM_CSNPOL_CSNPOL_Pos = @as(c_ulong, 0);
pub const SPIM_CSNPOL_CSNPOL_Msk = @as(c_ulong, 0x1) << SPIM_CSNPOL_CSNPOL_Pos;
pub const SPIM_CSNPOL_CSNPOL_LOW = @as(c_ulong, 0);
pub const SPIM_CSNPOL_CSNPOL_HIGH = @as(c_ulong, 1);
pub const SPIM_PSELDCX_CONNECT_Pos = @as(c_ulong, 31);
pub const SPIM_PSELDCX_CONNECT_Msk = @as(c_ulong, 0x1) << SPIM_PSELDCX_CONNECT_Pos;
pub const SPIM_PSELDCX_CONNECT_Connected = @as(c_ulong, 0);
pub const SPIM_PSELDCX_CONNECT_Disconnected = @as(c_ulong, 1);
pub const SPIM_PSELDCX_PORT_Pos = @as(c_ulong, 5);
pub const SPIM_PSELDCX_PORT_Msk = @as(c_ulong, 0x1) << SPIM_PSELDCX_PORT_Pos;
pub const SPIM_PSELDCX_PIN_Pos = @as(c_ulong, 0);
pub const SPIM_PSELDCX_PIN_Msk = @as(c_ulong, 0x1F) << SPIM_PSELDCX_PIN_Pos;
pub const SPIM_DCXCNT_DCXCNT_Pos = @as(c_ulong, 0);
pub const SPIM_DCXCNT_DCXCNT_Msk = @as(c_ulong, 0xF) << SPIM_DCXCNT_DCXCNT_Pos;
pub const SPIM_ORC_ORC_Pos = @as(c_ulong, 0);
pub const SPIM_ORC_ORC_Msk = @as(c_ulong, 0xFF) << SPIM_ORC_ORC_Pos;
pub const SPIS_TASKS_ACQUIRE_TASKS_ACQUIRE_Pos = @as(c_ulong, 0);
pub const SPIS_TASKS_ACQUIRE_TASKS_ACQUIRE_Msk = @as(c_ulong, 0x1) << SPIS_TASKS_ACQUIRE_TASKS_ACQUIRE_Pos;
pub const SPIS_TASKS_ACQUIRE_TASKS_ACQUIRE_Trigger = @as(c_ulong, 1);
pub const SPIS_TASKS_RELEASE_TASKS_RELEASE_Pos = @as(c_ulong, 0);
pub const SPIS_TASKS_RELEASE_TASKS_RELEASE_Msk = @as(c_ulong, 0x1) << SPIS_TASKS_RELEASE_TASKS_RELEASE_Pos;
pub const SPIS_TASKS_RELEASE_TASKS_RELEASE_Trigger = @as(c_ulong, 1);
pub const SPIS_EVENTS_END_EVENTS_END_Pos = @as(c_ulong, 0);
pub const SPIS_EVENTS_END_EVENTS_END_Msk = @as(c_ulong, 0x1) << SPIS_EVENTS_END_EVENTS_END_Pos;
pub const SPIS_EVENTS_END_EVENTS_END_NotGenerated = @as(c_ulong, 0);
pub const SPIS_EVENTS_END_EVENTS_END_Generated = @as(c_ulong, 1);
pub const SPIS_EVENTS_ENDRX_EVENTS_ENDRX_Pos = @as(c_ulong, 0);
pub const SPIS_EVENTS_ENDRX_EVENTS_ENDRX_Msk = @as(c_ulong, 0x1) << SPIS_EVENTS_ENDRX_EVENTS_ENDRX_Pos;
pub const SPIS_EVENTS_ENDRX_EVENTS_ENDRX_NotGenerated = @as(c_ulong, 0);
pub const SPIS_EVENTS_ENDRX_EVENTS_ENDRX_Generated = @as(c_ulong, 1);
pub const SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_Pos = @as(c_ulong, 0);
pub const SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_Msk = @as(c_ulong, 0x1) << SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_Pos;
pub const SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_NotGenerated = @as(c_ulong, 0);
pub const SPIS_EVENTS_ACQUIRED_EVENTS_ACQUIRED_Generated = @as(c_ulong, 1);
pub const SPIS_SHORTS_END_ACQUIRE_Pos = @as(c_ulong, 2);
pub const SPIS_SHORTS_END_ACQUIRE_Msk = @as(c_ulong, 0x1) << SPIS_SHORTS_END_ACQUIRE_Pos;
pub const SPIS_SHORTS_END_ACQUIRE_Disabled = @as(c_ulong, 0);
pub const SPIS_SHORTS_END_ACQUIRE_Enabled = @as(c_ulong, 1);
pub const SPIS_INTENSET_ACQUIRED_Pos = @as(c_ulong, 10);
pub const SPIS_INTENSET_ACQUIRED_Msk = @as(c_ulong, 0x1) << SPIS_INTENSET_ACQUIRED_Pos;
pub const SPIS_INTENSET_ACQUIRED_Disabled = @as(c_ulong, 0);
pub const SPIS_INTENSET_ACQUIRED_Enabled = @as(c_ulong, 1);
pub const SPIS_INTENSET_ACQUIRED_Set = @as(c_ulong, 1);
pub const SPIS_INTENSET_ENDRX_Pos = @as(c_ulong, 4);
pub const SPIS_INTENSET_ENDRX_Msk = @as(c_ulong, 0x1) << SPIS_INTENSET_ENDRX_Pos;
pub const SPIS_INTENSET_ENDRX_Disabled = @as(c_ulong, 0);
pub const SPIS_INTENSET_ENDRX_Enabled = @as(c_ulong, 1);
pub const SPIS_INTENSET_ENDRX_Set = @as(c_ulong, 1);
pub const SPIS_INTENSET_END_Pos = @as(c_ulong, 1);
pub const SPIS_INTENSET_END_Msk = @as(c_ulong, 0x1) << SPIS_INTENSET_END_Pos;
pub const SPIS_INTENSET_END_Disabled = @as(c_ulong, 0);
pub const SPIS_INTENSET_END_Enabled = @as(c_ulong, 1);
pub const SPIS_INTENSET_END_Set = @as(c_ulong, 1);
pub const SPIS_INTENCLR_ACQUIRED_Pos = @as(c_ulong, 10);
pub const SPIS_INTENCLR_ACQUIRED_Msk = @as(c_ulong, 0x1) << SPIS_INTENCLR_ACQUIRED_Pos;
pub const SPIS_INTENCLR_ACQUIRED_Disabled = @as(c_ulong, 0);
pub const SPIS_INTENCLR_ACQUIRED_Enabled = @as(c_ulong, 1);
pub const SPIS_INTENCLR_ACQUIRED_Clear = @as(c_ulong, 1);
pub const SPIS_INTENCLR_ENDRX_Pos = @as(c_ulong, 4);
pub const SPIS_INTENCLR_ENDRX_Msk = @as(c_ulong, 0x1) << SPIS_INTENCLR_ENDRX_Pos;
pub const SPIS_INTENCLR_ENDRX_Disabled = @as(c_ulong, 0);
pub const SPIS_INTENCLR_ENDRX_Enabled = @as(c_ulong, 1);
pub const SPIS_INTENCLR_ENDRX_Clear = @as(c_ulong, 1);
pub const SPIS_INTENCLR_END_Pos = @as(c_ulong, 1);
pub const SPIS_INTENCLR_END_Msk = @as(c_ulong, 0x1) << SPIS_INTENCLR_END_Pos;
pub const SPIS_INTENCLR_END_Disabled = @as(c_ulong, 0);
pub const SPIS_INTENCLR_END_Enabled = @as(c_ulong, 1);
pub const SPIS_INTENCLR_END_Clear = @as(c_ulong, 1);
pub const SPIS_SEMSTAT_SEMSTAT_Pos = @as(c_ulong, 0);
pub const SPIS_SEMSTAT_SEMSTAT_Msk = @as(c_ulong, 0x3) << SPIS_SEMSTAT_SEMSTAT_Pos;
pub const SPIS_SEMSTAT_SEMSTAT_Free = @as(c_ulong, 0);
pub const SPIS_SEMSTAT_SEMSTAT_CPU = @as(c_ulong, 1);
pub const SPIS_SEMSTAT_SEMSTAT_SPIS = @as(c_ulong, 2);
pub const SPIS_SEMSTAT_SEMSTAT_CPUPending = @as(c_ulong, 3);
pub const SPIS_STATUS_OVERFLOW_Pos = @as(c_ulong, 1);
pub const SPIS_STATUS_OVERFLOW_Msk = @as(c_ulong, 0x1) << SPIS_STATUS_OVERFLOW_Pos;
pub const SPIS_STATUS_OVERFLOW_NotPresent = @as(c_ulong, 0);
pub const SPIS_STATUS_OVERFLOW_Present = @as(c_ulong, 1);
pub const SPIS_STATUS_OVERFLOW_Clear = @as(c_ulong, 1);
pub const SPIS_STATUS_OVERREAD_Pos = @as(c_ulong, 0);
pub const SPIS_STATUS_OVERREAD_Msk = @as(c_ulong, 0x1) << SPIS_STATUS_OVERREAD_Pos;
pub const SPIS_STATUS_OVERREAD_NotPresent = @as(c_ulong, 0);
pub const SPIS_STATUS_OVERREAD_Present = @as(c_ulong, 1);
pub const SPIS_STATUS_OVERREAD_Clear = @as(c_ulong, 1);
pub const SPIS_ENABLE_ENABLE_Pos = @as(c_ulong, 0);
pub const SPIS_ENABLE_ENABLE_Msk = @as(c_ulong, 0xF) << SPIS_ENABLE_ENABLE_Pos;
pub const SPIS_ENABLE_ENABLE_Disabled = @as(c_ulong, 0);
pub const SPIS_ENABLE_ENABLE_Enabled = @as(c_ulong, 2);
pub const SPIS_PSEL_SCK_CONNECT_Pos = @as(c_ulong, 31);
pub const SPIS_PSEL_SCK_CONNECT_Msk = @as(c_ulong, 0x1) << SPIS_PSEL_SCK_CONNECT_Pos;
pub const SPIS_PSEL_SCK_CONNECT_Connected = @as(c_ulong, 0);
pub const SPIS_PSEL_SCK_CONNECT_Disconnected = @as(c_ulong, 1);
pub const SPIS_PSEL_SCK_PORT_Pos = @as(c_ulong, 5);
pub const SPIS_PSEL_SCK_PORT_Msk = @as(c_ulong, 0x1) << SPIS_PSEL_SCK_PORT_Pos;
pub const SPIS_PSEL_SCK_PIN_Pos = @as(c_ulong, 0);
pub const SPIS_PSEL_SCK_PIN_Msk = @as(c_ulong, 0x1F) << SPIS_PSEL_SCK_PIN_Pos;
pub const SPIS_PSEL_MISO_CONNECT_Pos = @as(c_ulong, 31);
pub const SPIS_PSEL_MISO_CONNECT_Msk = @as(c_ulong, 0x1) << SPIS_PSEL_MISO_CONNECT_Pos;
pub const SPIS_PSEL_MISO_CONNECT_Connected = @as(c_ulong, 0);
pub const SPIS_PSEL_MISO_CONNECT_Disconnected = @as(c_ulong, 1);
pub const SPIS_PSEL_MISO_PORT_Pos = @as(c_ulong, 5);
pub const SPIS_PSEL_MISO_PORT_Msk = @as(c_ulong, 0x1) << SPIS_PSEL_MISO_PORT_Pos;
pub const SPIS_PSEL_MISO_PIN_Pos = @as(c_ulong, 0);
pub const SPIS_PSEL_MISO_PIN_Msk = @as(c_ulong, 0x1F) << SPIS_PSEL_MISO_PIN_Pos;
pub const SPIS_PSEL_MOSI_CONNECT_Pos = @as(c_ulong, 31);
pub const SPIS_PSEL_MOSI_CONNECT_Msk = @as(c_ulong, 0x1) << SPIS_PSEL_MOSI_CONNECT_Pos;
pub const SPIS_PSEL_MOSI_CONNECT_Connected = @as(c_ulong, 0);
pub const SPIS_PSEL_MOSI_CONNECT_Disconnected = @as(c_ulong, 1);
pub const SPIS_PSEL_MOSI_PORT_Pos = @as(c_ulong, 5);
pub const SPIS_PSEL_MOSI_PORT_Msk = @as(c_ulong, 0x1) << SPIS_PSEL_MOSI_PORT_Pos;
pub const SPIS_PSEL_MOSI_PIN_Pos = @as(c_ulong, 0);
pub const SPIS_PSEL_MOSI_PIN_Msk = @as(c_ulong, 0x1F) << SPIS_PSEL_MOSI_PIN_Pos;
pub const SPIS_PSEL_CSN_CONNECT_Pos = @as(c_ulong, 31);
pub const SPIS_PSEL_CSN_CONNECT_Msk = @as(c_ulong, 0x1) << SPIS_PSEL_CSN_CONNECT_Pos;
pub const SPIS_PSEL_CSN_CONNECT_Connected = @as(c_ulong, 0);
pub const SPIS_PSEL_CSN_CONNECT_Disconnected = @as(c_ulong, 1);
pub const SPIS_PSEL_CSN_PORT_Pos = @as(c_ulong, 5);
pub const SPIS_PSEL_CSN_PORT_Msk = @as(c_ulong, 0x1) << SPIS_PSEL_CSN_PORT_Pos;
pub const SPIS_PSEL_CSN_PIN_Pos = @as(c_ulong, 0);
pub const SPIS_PSEL_CSN_PIN_Msk = @as(c_ulong, 0x1F) << SPIS_PSEL_CSN_PIN_Pos;
pub const SPIS_RXD_PTR_PTR_Pos = @as(c_ulong, 0);
pub const SPIS_RXD_PTR_PTR_Msk = @as(c_ulong, 0xFFFFFFFF) << SPIS_RXD_PTR_PTR_Pos;
pub const SPIS_RXD_MAXCNT_MAXCNT_Pos = @as(c_ulong, 0);
pub const SPIS_RXD_MAXCNT_MAXCNT_Msk = @as(c_ulong, 0xFFFF) << SPIS_RXD_MAXCNT_MAXCNT_Pos;
pub const SPIS_RXD_AMOUNT_AMOUNT_Pos = @as(c_ulong, 0);
pub const SPIS_RXD_AMOUNT_AMOUNT_Msk = @as(c_ulong, 0xFFFF) << SPIS_RXD_AMOUNT_AMOUNT_Pos;
pub const SPIS_RXD_LIST_LIST_Pos = @as(c_ulong, 0);
pub const SPIS_RXD_LIST_LIST_Msk = @as(c_ulong, 0x3) << SPIS_RXD_LIST_LIST_Pos;
pub const SPIS_RXD_LIST_LIST_Disabled = @as(c_ulong, 0);
pub const SPIS_RXD_LIST_LIST_ArrayList = @as(c_ulong, 1);
pub const SPIS_TXD_PTR_PTR_Pos = @as(c_ulong, 0);
pub const SPIS_TXD_PTR_PTR_Msk = @as(c_ulong, 0xFFFFFFFF) << SPIS_TXD_PTR_PTR_Pos;
pub const SPIS_TXD_MAXCNT_MAXCNT_Pos = @as(c_ulong, 0);
pub const SPIS_TXD_MAXCNT_MAXCNT_Msk = @as(c_ulong, 0xFFFF) << SPIS_TXD_MAXCNT_MAXCNT_Pos;
pub const SPIS_TXD_AMOUNT_AMOUNT_Pos = @as(c_ulong, 0);
pub const SPIS_TXD_AMOUNT_AMOUNT_Msk = @as(c_ulong, 0xFFFF) << SPIS_TXD_AMOUNT_AMOUNT_Pos;
pub const SPIS_TXD_LIST_LIST_Pos = @as(c_ulong, 0);
pub const SPIS_TXD_LIST_LIST_Msk = @as(c_ulong, 0x3) << SPIS_TXD_LIST_LIST_Pos;
pub const SPIS_TXD_LIST_LIST_Disabled = @as(c_ulong, 0);
pub const SPIS_TXD_LIST_LIST_ArrayList = @as(c_ulong, 1);
pub const SPIS_CONFIG_CPOL_Pos = @as(c_ulong, 2);
pub const SPIS_CONFIG_CPOL_Msk = @as(c_ulong, 0x1) << SPIS_CONFIG_CPOL_Pos;
pub const SPIS_CONFIG_CPOL_ActiveHigh = @as(c_ulong, 0);
pub const SPIS_CONFIG_CPOL_ActiveLow = @as(c_ulong, 1);
pub const SPIS_CONFIG_CPHA_Pos = @as(c_ulong, 1);
pub const SPIS_CONFIG_CPHA_Msk = @as(c_ulong, 0x1) << SPIS_CONFIG_CPHA_Pos;
pub const SPIS_CONFIG_CPHA_Leading = @as(c_ulong, 0);
pub const SPIS_CONFIG_CPHA_Trailing = @as(c_ulong, 1);
pub const SPIS_CONFIG_ORDER_Pos = @as(c_ulong, 0);
pub const SPIS_CONFIG_ORDER_Msk = @as(c_ulong, 0x1) << SPIS_CONFIG_ORDER_Pos;
pub const SPIS_CONFIG_ORDER_MsbFirst = @as(c_ulong, 0);
pub const SPIS_CONFIG_ORDER_LsbFirst = @as(c_ulong, 1);
pub const SPIS_DEF_DEF_Pos = @as(c_ulong, 0);
pub const SPIS_DEF_DEF_Msk = @as(c_ulong, 0xFF) << SPIS_DEF_DEF_Pos;
pub const SPIS_ORC_ORC_Pos = @as(c_ulong, 0);
pub const SPIS_ORC_ORC_Msk = @as(c_ulong, 0xFF) << SPIS_ORC_ORC_Pos;
pub const TEMP_TASKS_START_TASKS_START_Pos = @as(c_ulong, 0);
pub const TEMP_TASKS_START_TASKS_START_Msk = @as(c_ulong, 0x1) << TEMP_TASKS_START_TASKS_START_Pos;
pub const TEMP_TASKS_START_TASKS_START_Trigger = @as(c_ulong, 1);
pub const TEMP_TASKS_STOP_TASKS_STOP_Pos = @as(c_ulong, 0);
pub const TEMP_TASKS_STOP_TASKS_STOP_Msk = @as(c_ulong, 0x1) << TEMP_TASKS_STOP_TASKS_STOP_Pos;
pub const TEMP_TASKS_STOP_TASKS_STOP_Trigger = @as(c_ulong, 1);
pub const TEMP_EVENTS_DATARDY_EVENTS_DATARDY_Pos = @as(c_ulong, 0);
pub const TEMP_EVENTS_DATARDY_EVENTS_DATARDY_Msk = @as(c_ulong, 0x1) << TEMP_EVENTS_DATARDY_EVENTS_DATARDY_Pos;
pub const TEMP_EVENTS_DATARDY_EVENTS_DATARDY_NotGenerated = @as(c_ulong, 0);
pub const TEMP_EVENTS_DATARDY_EVENTS_DATARDY_Generated = @as(c_ulong, 1);
pub const TEMP_INTENSET_DATARDY_Pos = @as(c_ulong, 0);
pub const TEMP_INTENSET_DATARDY_Msk = @as(c_ulong, 0x1) << TEMP_INTENSET_DATARDY_Pos;
pub const TEMP_INTENSET_DATARDY_Disabled = @as(c_ulong, 0);
pub const TEMP_INTENSET_DATARDY_Enabled = @as(c_ulong, 1);
pub const TEMP_INTENSET_DATARDY_Set = @as(c_ulong, 1);
pub const TEMP_INTENCLR_DATARDY_Pos = @as(c_ulong, 0);
pub const TEMP_INTENCLR_DATARDY_Msk = @as(c_ulong, 0x1) << TEMP_INTENCLR_DATARDY_Pos;
pub const TEMP_INTENCLR_DATARDY_Disabled = @as(c_ulong, 0);
pub const TEMP_INTENCLR_DATARDY_Enabled = @as(c_ulong, 1);
pub const TEMP_INTENCLR_DATARDY_Clear = @as(c_ulong, 1);
pub const TEMP_TEMP_TEMP_Pos = @as(c_ulong, 0);
pub const TEMP_TEMP_TEMP_Msk = @as(c_ulong, 0xFFFFFFFF) << TEMP_TEMP_TEMP_Pos;
pub const TEMP_A0_A0_Pos = @as(c_ulong, 0);
pub const TEMP_A0_A0_Msk = @as(c_ulong, 0xFFF) << TEMP_A0_A0_Pos;
pub const TEMP_A1_A1_Pos = @as(c_ulong, 0);
pub const TEMP_A1_A1_Msk = @as(c_ulong, 0xFFF) << TEMP_A1_A1_Pos;
pub const TEMP_A2_A2_Pos = @as(c_ulong, 0);
pub const TEMP_A2_A2_Msk = @as(c_ulong, 0xFFF) << TEMP_A2_A2_Pos;
pub const TEMP_A3_A3_Pos = @as(c_ulong, 0);
pub const TEMP_A3_A3_Msk = @as(c_ulong, 0xFFF) << TEMP_A3_A3_Pos;
pub const TEMP_A4_A4_Pos = @as(c_ulong, 0);
pub const TEMP_A4_A4_Msk = @as(c_ulong, 0xFFF) << TEMP_A4_A4_Pos;
pub const TEMP_A5_A5_Pos = @as(c_ulong, 0);
pub const TEMP_A5_A5_Msk = @as(c_ulong, 0xFFF) << TEMP_A5_A5_Pos;
pub const TEMP_B0_B0_Pos = @as(c_ulong, 0);
pub const TEMP_B0_B0_Msk = @as(c_ulong, 0x3FFF) << TEMP_B0_B0_Pos;
pub const TEMP_B1_B1_Pos = @as(c_ulong, 0);
pub const TEMP_B1_B1_Msk = @as(c_ulong, 0x3FFF) << TEMP_B1_B1_Pos;
pub const TEMP_B2_B2_Pos = @as(c_ulong, 0);
pub const TEMP_B2_B2_Msk = @as(c_ulong, 0x3FFF) << TEMP_B2_B2_Pos;
pub const TEMP_B3_B3_Pos = @as(c_ulong, 0);
pub const TEMP_B3_B3_Msk = @as(c_ulong, 0x3FFF) << TEMP_B3_B3_Pos;
pub const TEMP_B4_B4_Pos = @as(c_ulong, 0);
pub const TEMP_B4_B4_Msk = @as(c_ulong, 0x3FFF) << TEMP_B4_B4_Pos;
pub const TEMP_B5_B5_Pos = @as(c_ulong, 0);
pub const TEMP_B5_B5_Msk = @as(c_ulong, 0x3FFF) << TEMP_B5_B5_Pos;
pub const TEMP_T0_T0_Pos = @as(c_ulong, 0);
pub const TEMP_T0_T0_Msk = @as(c_ulong, 0xFF) << TEMP_T0_T0_Pos;
pub const TEMP_T1_T1_Pos = @as(c_ulong, 0);
pub const TEMP_T1_T1_Msk = @as(c_ulong, 0xFF) << TEMP_T1_T1_Pos;
pub const TEMP_T2_T2_Pos = @as(c_ulong, 0);
pub const TEMP_T2_T2_Msk = @as(c_ulong, 0xFF) << TEMP_T2_T2_Pos;
pub const TEMP_T3_T3_Pos = @as(c_ulong, 0);
pub const TEMP_T3_T3_Msk = @as(c_ulong, 0xFF) << TEMP_T3_T3_Pos;
pub const TEMP_T4_T4_Pos = @as(c_ulong, 0);
pub const TEMP_T4_T4_Msk = @as(c_ulong, 0xFF) << TEMP_T4_T4_Pos;
pub const TIMER_TASKS_START_TASKS_START_Pos = @as(c_ulong, 0);
pub const TIMER_TASKS_START_TASKS_START_Msk = @as(c_ulong, 0x1) << TIMER_TASKS_START_TASKS_START_Pos;
pub const TIMER_TASKS_START_TASKS_START_Trigger = @as(c_ulong, 1);
pub const TIMER_TASKS_STOP_TASKS_STOP_Pos = @as(c_ulong, 0);
pub const TIMER_TASKS_STOP_TASKS_STOP_Msk = @as(c_ulong, 0x1) << TIMER_TASKS_STOP_TASKS_STOP_Pos;
pub const TIMER_TASKS_STOP_TASKS_STOP_Trigger = @as(c_ulong, 1);
pub const TIMER_TASKS_COUNT_TASKS_COUNT_Pos = @as(c_ulong, 0);
pub const TIMER_TASKS_COUNT_TASKS_COUNT_Msk = @as(c_ulong, 0x1) << TIMER_TASKS_COUNT_TASKS_COUNT_Pos;
pub const TIMER_TASKS_COUNT_TASKS_COUNT_Trigger = @as(c_ulong, 1);
pub const TIMER_TASKS_CLEAR_TASKS_CLEAR_Pos = @as(c_ulong, 0);
pub const TIMER_TASKS_CLEAR_TASKS_CLEAR_Msk = @as(c_ulong, 0x1) << TIMER_TASKS_CLEAR_TASKS_CLEAR_Pos;
pub const TIMER_TASKS_CLEAR_TASKS_CLEAR_Trigger = @as(c_ulong, 1);
pub const TIMER_TASKS_SHUTDOWN_TASKS_SHUTDOWN_Pos = @as(c_ulong, 0);
pub const TIMER_TASKS_SHUTDOWN_TASKS_SHUTDOWN_Msk = @as(c_ulong, 0x1) << TIMER_TASKS_SHUTDOWN_TASKS_SHUTDOWN_Pos;
pub const TIMER_TASKS_SHUTDOWN_TASKS_SHUTDOWN_Trigger = @as(c_ulong, 1);
pub const TIMER_TASKS_CAPTURE_TASKS_CAPTURE_Pos = @as(c_ulong, 0);
pub const TIMER_TASKS_CAPTURE_TASKS_CAPTURE_Msk = @as(c_ulong, 0x1) << TIMER_TASKS_CAPTURE_TASKS_CAPTURE_Pos;
pub const TIMER_TASKS_CAPTURE_TASKS_CAPTURE_Trigger = @as(c_ulong, 1);
pub const TIMER_EVENTS_COMPARE_EVENTS_COMPARE_Pos = @as(c_ulong, 0);
pub const TIMER_EVENTS_COMPARE_EVENTS_COMPARE_Msk = @as(c_ulong, 0x1) << TIMER_EVENTS_COMPARE_EVENTS_COMPARE_Pos;
pub const TIMER_EVENTS_COMPARE_EVENTS_COMPARE_NotGenerated = @as(c_ulong, 0);
pub const TIMER_EVENTS_COMPARE_EVENTS_COMPARE_Generated = @as(c_ulong, 1);
pub const TIMER_SHORTS_COMPARE5_STOP_Pos = @as(c_ulong, 13);
pub const TIMER_SHORTS_COMPARE5_STOP_Msk = @as(c_ulong, 0x1) << TIMER_SHORTS_COMPARE5_STOP_Pos;
pub const TIMER_SHORTS_COMPARE5_STOP_Disabled = @as(c_ulong, 0);
pub const TIMER_SHORTS_COMPARE5_STOP_Enabled = @as(c_ulong, 1);
pub const TIMER_SHORTS_COMPARE4_STOP_Pos = @as(c_ulong, 12);
pub const TIMER_SHORTS_COMPARE4_STOP_Msk = @as(c_ulong, 0x1) << TIMER_SHORTS_COMPARE4_STOP_Pos;
pub const TIMER_SHORTS_COMPARE4_STOP_Disabled = @as(c_ulong, 0);
pub const TIMER_SHORTS_COMPARE4_STOP_Enabled = @as(c_ulong, 1);
pub const TIMER_SHORTS_COMPARE3_STOP_Pos = @as(c_ulong, 11);
pub const TIMER_SHORTS_COMPARE3_STOP_Msk = @as(c_ulong, 0x1) << TIMER_SHORTS_COMPARE3_STOP_Pos;
pub const TIMER_SHORTS_COMPARE3_STOP_Disabled = @as(c_ulong, 0);
pub const TIMER_SHORTS_COMPARE3_STOP_Enabled = @as(c_ulong, 1);
pub const TIMER_SHORTS_COMPARE2_STOP_Pos = @as(c_ulong, 10);
pub const TIMER_SHORTS_COMPARE2_STOP_Msk = @as(c_ulong, 0x1) << TIMER_SHORTS_COMPARE2_STOP_Pos;
pub const TIMER_SHORTS_COMPARE2_STOP_Disabled = @as(c_ulong, 0);
pub const TIMER_SHORTS_COMPARE2_STOP_Enabled = @as(c_ulong, 1);
pub const TIMER_SHORTS_COMPARE1_STOP_Pos = @as(c_ulong, 9);
pub const TIMER_SHORTS_COMPARE1_STOP_Msk = @as(c_ulong, 0x1) << TIMER_SHORTS_COMPARE1_STOP_Pos;
pub const TIMER_SHORTS_COMPARE1_STOP_Disabled = @as(c_ulong, 0);
pub const TIMER_SHORTS_COMPARE1_STOP_Enabled = @as(c_ulong, 1);
pub const TIMER_SHORTS_COMPARE0_STOP_Pos = @as(c_ulong, 8);
pub const TIMER_SHORTS_COMPARE0_STOP_Msk = @as(c_ulong, 0x1) << TIMER_SHORTS_COMPARE0_STOP_Pos;
pub const TIMER_SHORTS_COMPARE0_STOP_Disabled = @as(c_ulong, 0);
pub const TIMER_SHORTS_COMPARE0_STOP_Enabled = @as(c_ulong, 1);
pub const TIMER_SHORTS_COMPARE5_CLEAR_Pos = @as(c_ulong, 5);
pub const TIMER_SHORTS_COMPARE5_CLEAR_Msk = @as(c_ulong, 0x1) << TIMER_SHORTS_COMPARE5_CLEAR_Pos;
pub const TIMER_SHORTS_COMPARE5_CLEAR_Disabled = @as(c_ulong, 0);
pub const TIMER_SHORTS_COMPARE5_CLEAR_Enabled = @as(c_ulong, 1);
pub const TIMER_SHORTS_COMPARE4_CLEAR_Pos = @as(c_ulong, 4);
pub const TIMER_SHORTS_COMPARE4_CLEAR_Msk = @as(c_ulong, 0x1) << TIMER_SHORTS_COMPARE4_CLEAR_Pos;
pub const TIMER_SHORTS_COMPARE4_CLEAR_Disabled = @as(c_ulong, 0);
pub const TIMER_SHORTS_COMPARE4_CLEAR_Enabled = @as(c_ulong, 1);
pub const TIMER_SHORTS_COMPARE3_CLEAR_Pos = @as(c_ulong, 3);
pub const TIMER_SHORTS_COMPARE3_CLEAR_Msk = @as(c_ulong, 0x1) << TIMER_SHORTS_COMPARE3_CLEAR_Pos;
pub const TIMER_SHORTS_COMPARE3_CLEAR_Disabled = @as(c_ulong, 0);
pub const TIMER_SHORTS_COMPARE3_CLEAR_Enabled = @as(c_ulong, 1);
pub const TIMER_SHORTS_COMPARE2_CLEAR_Pos = @as(c_ulong, 2);
pub const TIMER_SHORTS_COMPARE2_CLEAR_Msk = @as(c_ulong, 0x1) << TIMER_SHORTS_COMPARE2_CLEAR_Pos;
pub const TIMER_SHORTS_COMPARE2_CLEAR_Disabled = @as(c_ulong, 0);
pub const TIMER_SHORTS_COMPARE2_CLEAR_Enabled = @as(c_ulong, 1);
pub const TIMER_SHORTS_COMPARE1_CLEAR_Pos = @as(c_ulong, 1);
pub const TIMER_SHORTS_COMPARE1_CLEAR_Msk = @as(c_ulong, 0x1) << TIMER_SHORTS_COMPARE1_CLEAR_Pos;
pub const TIMER_SHORTS_COMPARE1_CLEAR_Disabled = @as(c_ulong, 0);
pub const TIMER_SHORTS_COMPARE1_CLEAR_Enabled = @as(c_ulong, 1);
pub const TIMER_SHORTS_COMPARE0_CLEAR_Pos = @as(c_ulong, 0);
pub const TIMER_SHORTS_COMPARE0_CLEAR_Msk = @as(c_ulong, 0x1) << TIMER_SHORTS_COMPARE0_CLEAR_Pos;
pub const TIMER_SHORTS_COMPARE0_CLEAR_Disabled = @as(c_ulong, 0);
pub const TIMER_SHORTS_COMPARE0_CLEAR_Enabled = @as(c_ulong, 1);
pub const TIMER_INTENSET_COMPARE5_Pos = @as(c_ulong, 21);
pub const TIMER_INTENSET_COMPARE5_Msk = @as(c_ulong, 0x1) << TIMER_INTENSET_COMPARE5_Pos;
pub const TIMER_INTENSET_COMPARE5_Disabled = @as(c_ulong, 0);
pub const TIMER_INTENSET_COMPARE5_Enabled = @as(c_ulong, 1);
pub const TIMER_INTENSET_COMPARE5_Set = @as(c_ulong, 1);
pub const TIMER_INTENSET_COMPARE4_Pos = @as(c_ulong, 20);
pub const TIMER_INTENSET_COMPARE4_Msk = @as(c_ulong, 0x1) << TIMER_INTENSET_COMPARE4_Pos;
pub const TIMER_INTENSET_COMPARE4_Disabled = @as(c_ulong, 0);
pub const TIMER_INTENSET_COMPARE4_Enabled = @as(c_ulong, 1);
pub const TIMER_INTENSET_COMPARE4_Set = @as(c_ulong, 1);
pub const TIMER_INTENSET_COMPARE3_Pos = @as(c_ulong, 19);
pub const TIMER_INTENSET_COMPARE3_Msk = @as(c_ulong, 0x1) << TIMER_INTENSET_COMPARE3_Pos;
pub const TIMER_INTENSET_COMPARE3_Disabled = @as(c_ulong, 0);
pub const TIMER_INTENSET_COMPARE3_Enabled = @as(c_ulong, 1);
pub const TIMER_INTENSET_COMPARE3_Set = @as(c_ulong, 1);
pub const TIMER_INTENSET_COMPARE2_Pos = @as(c_ulong, 18);
pub const TIMER_INTENSET_COMPARE2_Msk = @as(c_ulong, 0x1) << TIMER_INTENSET_COMPARE2_Pos;
pub const TIMER_INTENSET_COMPARE2_Disabled = @as(c_ulong, 0);
pub const TIMER_INTENSET_COMPARE2_Enabled = @as(c_ulong, 1);
pub const TIMER_INTENSET_COMPARE2_Set = @as(c_ulong, 1);
pub const TIMER_INTENSET_COMPARE1_Pos = @as(c_ulong, 17);
pub const TIMER_INTENSET_COMPARE1_Msk = @as(c_ulong, 0x1) << TIMER_INTENSET_COMPARE1_Pos;
pub const TIMER_INTENSET_COMPARE1_Disabled = @as(c_ulong, 0);
pub const TIMER_INTENSET_COMPARE1_Enabled = @as(c_ulong, 1);
pub const TIMER_INTENSET_COMPARE1_Set = @as(c_ulong, 1);
pub const TIMER_INTENSET_COMPARE0_Pos = @as(c_ulong, 16);
pub const TIMER_INTENSET_COMPARE0_Msk = @as(c_ulong, 0x1) << TIMER_INTENSET_COMPARE0_Pos;
pub const TIMER_INTENSET_COMPARE0_Disabled = @as(c_ulong, 0);
pub const TIMER_INTENSET_COMPARE0_Enabled = @as(c_ulong, 1);
pub const TIMER_INTENSET_COMPARE0_Set = @as(c_ulong, 1);
pub const TIMER_INTENCLR_COMPARE5_Pos = @as(c_ulong, 21);
pub const TIMER_INTENCLR_COMPARE5_Msk = @as(c_ulong, 0x1) << TIMER_INTENCLR_COMPARE5_Pos;
pub const TIMER_INTENCLR_COMPARE5_Disabled = @as(c_ulong, 0);
pub const TIMER_INTENCLR_COMPARE5_Enabled = @as(c_ulong, 1);
pub const TIMER_INTENCLR_COMPARE5_Clear = @as(c_ulong, 1);
pub const TIMER_INTENCLR_COMPARE4_Pos = @as(c_ulong, 20);
pub const TIMER_INTENCLR_COMPARE4_Msk = @as(c_ulong, 0x1) << TIMER_INTENCLR_COMPARE4_Pos;
pub const TIMER_INTENCLR_COMPARE4_Disabled = @as(c_ulong, 0);
pub const TIMER_INTENCLR_COMPARE4_Enabled = @as(c_ulong, 1);
pub const TIMER_INTENCLR_COMPARE4_Clear = @as(c_ulong, 1);
pub const TIMER_INTENCLR_COMPARE3_Pos = @as(c_ulong, 19);
pub const TIMER_INTENCLR_COMPARE3_Msk = @as(c_ulong, 0x1) << TIMER_INTENCLR_COMPARE3_Pos;
pub const TIMER_INTENCLR_COMPARE3_Disabled = @as(c_ulong, 0);
pub const TIMER_INTENCLR_COMPARE3_Enabled = @as(c_ulong, 1);
pub const TIMER_INTENCLR_COMPARE3_Clear = @as(c_ulong, 1);
pub const TIMER_INTENCLR_COMPARE2_Pos = @as(c_ulong, 18);
pub const TIMER_INTENCLR_COMPARE2_Msk = @as(c_ulong, 0x1) << TIMER_INTENCLR_COMPARE2_Pos;
pub const TIMER_INTENCLR_COMPARE2_Disabled = @as(c_ulong, 0);
pub const TIMER_INTENCLR_COMPARE2_Enabled = @as(c_ulong, 1);
pub const TIMER_INTENCLR_COMPARE2_Clear = @as(c_ulong, 1);
pub const TIMER_INTENCLR_COMPARE1_Pos = @as(c_ulong, 17);
pub const TIMER_INTENCLR_COMPARE1_Msk = @as(c_ulong, 0x1) << TIMER_INTENCLR_COMPARE1_Pos;
pub const TIMER_INTENCLR_COMPARE1_Disabled = @as(c_ulong, 0);
pub const TIMER_INTENCLR_COMPARE1_Enabled = @as(c_ulong, 1);
pub const TIMER_INTENCLR_COMPARE1_Clear = @as(c_ulong, 1);
pub const TIMER_INTENCLR_COMPARE0_Pos = @as(c_ulong, 16);
pub const TIMER_INTENCLR_COMPARE0_Msk = @as(c_ulong, 0x1) << TIMER_INTENCLR_COMPARE0_Pos;
pub const TIMER_INTENCLR_COMPARE0_Disabled = @as(c_ulong, 0);
pub const TIMER_INTENCLR_COMPARE0_Enabled = @as(c_ulong, 1);
pub const TIMER_INTENCLR_COMPARE0_Clear = @as(c_ulong, 1);
pub const TIMER_MODE_MODE_Pos = @as(c_ulong, 0);
pub const TIMER_MODE_MODE_Msk = @as(c_ulong, 0x3) << TIMER_MODE_MODE_Pos;
pub const TIMER_MODE_MODE_Timer = @as(c_ulong, 0);
pub const TIMER_MODE_MODE_Counter = @as(c_ulong, 1);
pub const TIMER_MODE_MODE_LowPowerCounter = @as(c_ulong, 2);
pub const TIMER_BITMODE_BITMODE_Pos = @as(c_ulong, 0);
pub const TIMER_BITMODE_BITMODE_Msk = @as(c_ulong, 0x3) << TIMER_BITMODE_BITMODE_Pos;
pub const TIMER_BITMODE_BITMODE_16Bit = @as(c_ulong, 0);
pub const TIMER_BITMODE_BITMODE_08Bit = @as(c_ulong, 1);
pub const TIMER_BITMODE_BITMODE_24Bit = @as(c_ulong, 2);
pub const TIMER_BITMODE_BITMODE_32Bit = @as(c_ulong, 3);
pub const TIMER_PRESCALER_PRESCALER_Pos = @as(c_ulong, 0);
pub const TIMER_PRESCALER_PRESCALER_Msk = @as(c_ulong, 0xF) << TIMER_PRESCALER_PRESCALER_Pos;
pub const TIMER_CC_CC_Pos = @as(c_ulong, 0);
pub const TIMER_CC_CC_Msk = @as(c_ulong, 0xFFFFFFFF) << TIMER_CC_CC_Pos;
pub const TWI_TASKS_STARTRX_TASKS_STARTRX_Pos = @as(c_ulong, 0);
pub const TWI_TASKS_STARTRX_TASKS_STARTRX_Msk = @as(c_ulong, 0x1) << TWI_TASKS_STARTRX_TASKS_STARTRX_Pos;
pub const TWI_TASKS_STARTRX_TASKS_STARTRX_Trigger = @as(c_ulong, 1);
pub const TWI_TASKS_STARTTX_TASKS_STARTTX_Pos = @as(c_ulong, 0);
pub const TWI_TASKS_STARTTX_TASKS_STARTTX_Msk = @as(c_ulong, 0x1) << TWI_TASKS_STARTTX_TASKS_STARTTX_Pos;
pub const TWI_TASKS_STARTTX_TASKS_STARTTX_Trigger = @as(c_ulong, 1);
pub const TWI_TASKS_STOP_TASKS_STOP_Pos = @as(c_ulong, 0);
pub const TWI_TASKS_STOP_TASKS_STOP_Msk = @as(c_ulong, 0x1) << TWI_TASKS_STOP_TASKS_STOP_Pos;
pub const TWI_TASKS_STOP_TASKS_STOP_Trigger = @as(c_ulong, 1);
pub const TWI_TASKS_SUSPEND_TASKS_SUSPEND_Pos = @as(c_ulong, 0);
pub const TWI_TASKS_SUSPEND_TASKS_SUSPEND_Msk = @as(c_ulong, 0x1) << TWI_TASKS_SUSPEND_TASKS_SUSPEND_Pos;
pub const TWI_TASKS_SUSPEND_TASKS_SUSPEND_Trigger = @as(c_ulong, 1);
pub const TWI_TASKS_RESUME_TASKS_RESUME_Pos = @as(c_ulong, 0);
pub const TWI_TASKS_RESUME_TASKS_RESUME_Msk = @as(c_ulong, 0x1) << TWI_TASKS_RESUME_TASKS_RESUME_Pos;
pub const TWI_TASKS_RESUME_TASKS_RESUME_Trigger = @as(c_ulong, 1);
pub const TWI_EVENTS_STOPPED_EVENTS_STOPPED_Pos = @as(c_ulong, 0);
pub const TWI_EVENTS_STOPPED_EVENTS_STOPPED_Msk = @as(c_ulong, 0x1) << TWI_EVENTS_STOPPED_EVENTS_STOPPED_Pos;
pub const TWI_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated = @as(c_ulong, 0);
pub const TWI_EVENTS_STOPPED_EVENTS_STOPPED_Generated = @as(c_ulong, 1);
pub const TWI_EVENTS_RXDREADY_EVENTS_RXDREADY_Pos = @as(c_ulong, 0);
pub const TWI_EVENTS_RXDREADY_EVENTS_RXDREADY_Msk = @as(c_ulong, 0x1) << TWI_EVENTS_RXDREADY_EVENTS_RXDREADY_Pos;
pub const TWI_EVENTS_RXDREADY_EVENTS_RXDREADY_NotGenerated = @as(c_ulong, 0);
pub const TWI_EVENTS_RXDREADY_EVENTS_RXDREADY_Generated = @as(c_ulong, 1);
pub const TWI_EVENTS_TXDSENT_EVENTS_TXDSENT_Pos = @as(c_ulong, 0);
pub const TWI_EVENTS_TXDSENT_EVENTS_TXDSENT_Msk = @as(c_ulong, 0x1) << TWI_EVENTS_TXDSENT_EVENTS_TXDSENT_Pos;
pub const TWI_EVENTS_TXDSENT_EVENTS_TXDSENT_NotGenerated = @as(c_ulong, 0);
pub const TWI_EVENTS_TXDSENT_EVENTS_TXDSENT_Generated = @as(c_ulong, 1);
pub const TWI_EVENTS_ERROR_EVENTS_ERROR_Pos = @as(c_ulong, 0);
pub const TWI_EVENTS_ERROR_EVENTS_ERROR_Msk = @as(c_ulong, 0x1) << TWI_EVENTS_ERROR_EVENTS_ERROR_Pos;
pub const TWI_EVENTS_ERROR_EVENTS_ERROR_NotGenerated = @as(c_ulong, 0);
pub const TWI_EVENTS_ERROR_EVENTS_ERROR_Generated = @as(c_ulong, 1);
pub const TWI_EVENTS_BB_EVENTS_BB_Pos = @as(c_ulong, 0);
pub const TWI_EVENTS_BB_EVENTS_BB_Msk = @as(c_ulong, 0x1) << TWI_EVENTS_BB_EVENTS_BB_Pos;
pub const TWI_EVENTS_BB_EVENTS_BB_NotGenerated = @as(c_ulong, 0);
pub const TWI_EVENTS_BB_EVENTS_BB_Generated = @as(c_ulong, 1);
pub const TWI_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Pos = @as(c_ulong, 0);
pub const TWI_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Msk = @as(c_ulong, 0x1) << TWI_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Pos;
pub const TWI_EVENTS_SUSPENDED_EVENTS_SUSPENDED_NotGenerated = @as(c_ulong, 0);
pub const TWI_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Generated = @as(c_ulong, 1);
pub const TWI_SHORTS_BB_STOP_Pos = @as(c_ulong, 1);
pub const TWI_SHORTS_BB_STOP_Msk = @as(c_ulong, 0x1) << TWI_SHORTS_BB_STOP_Pos;
pub const TWI_SHORTS_BB_STOP_Disabled = @as(c_ulong, 0);
pub const TWI_SHORTS_BB_STOP_Enabled = @as(c_ulong, 1);
pub const TWI_SHORTS_BB_SUSPEND_Pos = @as(c_ulong, 0);
pub const TWI_SHORTS_BB_SUSPEND_Msk = @as(c_ulong, 0x1) << TWI_SHORTS_BB_SUSPEND_Pos;
pub const TWI_SHORTS_BB_SUSPEND_Disabled = @as(c_ulong, 0);
pub const TWI_SHORTS_BB_SUSPEND_Enabled = @as(c_ulong, 1);
pub const TWI_INTENSET_SUSPENDED_Pos = @as(c_ulong, 18);
pub const TWI_INTENSET_SUSPENDED_Msk = @as(c_ulong, 0x1) << TWI_INTENSET_SUSPENDED_Pos;
pub const TWI_INTENSET_SUSPENDED_Disabled = @as(c_ulong, 0);
pub const TWI_INTENSET_SUSPENDED_Enabled = @as(c_ulong, 1);
pub const TWI_INTENSET_SUSPENDED_Set = @as(c_ulong, 1);
pub const TWI_INTENSET_BB_Pos = @as(c_ulong, 14);
pub const TWI_INTENSET_BB_Msk = @as(c_ulong, 0x1) << TWI_INTENSET_BB_Pos;
pub const TWI_INTENSET_BB_Disabled = @as(c_ulong, 0);
pub const TWI_INTENSET_BB_Enabled = @as(c_ulong, 1);
pub const TWI_INTENSET_BB_Set = @as(c_ulong, 1);
pub const TWI_INTENSET_ERROR_Pos = @as(c_ulong, 9);
pub const TWI_INTENSET_ERROR_Msk = @as(c_ulong, 0x1) << TWI_INTENSET_ERROR_Pos;
pub const TWI_INTENSET_ERROR_Disabled = @as(c_ulong, 0);
pub const TWI_INTENSET_ERROR_Enabled = @as(c_ulong, 1);
pub const TWI_INTENSET_ERROR_Set = @as(c_ulong, 1);
pub const TWI_INTENSET_TXDSENT_Pos = @as(c_ulong, 7);
pub const TWI_INTENSET_TXDSENT_Msk = @as(c_ulong, 0x1) << TWI_INTENSET_TXDSENT_Pos;
pub const TWI_INTENSET_TXDSENT_Disabled = @as(c_ulong, 0);
pub const TWI_INTENSET_TXDSENT_Enabled = @as(c_ulong, 1);
pub const TWI_INTENSET_TXDSENT_Set = @as(c_ulong, 1);
pub const TWI_INTENSET_RXDREADY_Pos = @as(c_ulong, 2);
pub const TWI_INTENSET_RXDREADY_Msk = @as(c_ulong, 0x1) << TWI_INTENSET_RXDREADY_Pos;
pub const TWI_INTENSET_RXDREADY_Disabled = @as(c_ulong, 0);
pub const TWI_INTENSET_RXDREADY_Enabled = @as(c_ulong, 1);
pub const TWI_INTENSET_RXDREADY_Set = @as(c_ulong, 1);
pub const TWI_INTENSET_STOPPED_Pos = @as(c_ulong, 1);
pub const TWI_INTENSET_STOPPED_Msk = @as(c_ulong, 0x1) << TWI_INTENSET_STOPPED_Pos;
pub const TWI_INTENSET_STOPPED_Disabled = @as(c_ulong, 0);
pub const TWI_INTENSET_STOPPED_Enabled = @as(c_ulong, 1);
pub const TWI_INTENSET_STOPPED_Set = @as(c_ulong, 1);
pub const TWI_INTENCLR_SUSPENDED_Pos = @as(c_ulong, 18);
pub const TWI_INTENCLR_SUSPENDED_Msk = @as(c_ulong, 0x1) << TWI_INTENCLR_SUSPENDED_Pos;
pub const TWI_INTENCLR_SUSPENDED_Disabled = @as(c_ulong, 0);
pub const TWI_INTENCLR_SUSPENDED_Enabled = @as(c_ulong, 1);
pub const TWI_INTENCLR_SUSPENDED_Clear = @as(c_ulong, 1);
pub const TWI_INTENCLR_BB_Pos = @as(c_ulong, 14);
pub const TWI_INTENCLR_BB_Msk = @as(c_ulong, 0x1) << TWI_INTENCLR_BB_Pos;
pub const TWI_INTENCLR_BB_Disabled = @as(c_ulong, 0);
pub const TWI_INTENCLR_BB_Enabled = @as(c_ulong, 1);
pub const TWI_INTENCLR_BB_Clear = @as(c_ulong, 1);
pub const TWI_INTENCLR_ERROR_Pos = @as(c_ulong, 9);
pub const TWI_INTENCLR_ERROR_Msk = @as(c_ulong, 0x1) << TWI_INTENCLR_ERROR_Pos;
pub const TWI_INTENCLR_ERROR_Disabled = @as(c_ulong, 0);
pub const TWI_INTENCLR_ERROR_Enabled = @as(c_ulong, 1);
pub const TWI_INTENCLR_ERROR_Clear = @as(c_ulong, 1);
pub const TWI_INTENCLR_TXDSENT_Pos = @as(c_ulong, 7);
pub const TWI_INTENCLR_TXDSENT_Msk = @as(c_ulong, 0x1) << TWI_INTENCLR_TXDSENT_Pos;
pub const TWI_INTENCLR_TXDSENT_Disabled = @as(c_ulong, 0);
pub const TWI_INTENCLR_TXDSENT_Enabled = @as(c_ulong, 1);
pub const TWI_INTENCLR_TXDSENT_Clear = @as(c_ulong, 1);
pub const TWI_INTENCLR_RXDREADY_Pos = @as(c_ulong, 2);
pub const TWI_INTENCLR_RXDREADY_Msk = @as(c_ulong, 0x1) << TWI_INTENCLR_RXDREADY_Pos;
pub const TWI_INTENCLR_RXDREADY_Disabled = @as(c_ulong, 0);
pub const TWI_INTENCLR_RXDREADY_Enabled = @as(c_ulong, 1);
pub const TWI_INTENCLR_RXDREADY_Clear = @as(c_ulong, 1);
pub const TWI_INTENCLR_STOPPED_Pos = @as(c_ulong, 1);
pub const TWI_INTENCLR_STOPPED_Msk = @as(c_ulong, 0x1) << TWI_INTENCLR_STOPPED_Pos;
pub const TWI_INTENCLR_STOPPED_Disabled = @as(c_ulong, 0);
pub const TWI_INTENCLR_STOPPED_Enabled = @as(c_ulong, 1);
pub const TWI_INTENCLR_STOPPED_Clear = @as(c_ulong, 1);
pub const TWI_ERRORSRC_DNACK_Pos = @as(c_ulong, 2);
pub const TWI_ERRORSRC_DNACK_Msk = @as(c_ulong, 0x1) << TWI_ERRORSRC_DNACK_Pos;
pub const TWI_ERRORSRC_DNACK_NotPresent = @as(c_ulong, 0);
pub const TWI_ERRORSRC_DNACK_Present = @as(c_ulong, 1);
pub const TWI_ERRORSRC_ANACK_Pos = @as(c_ulong, 1);
pub const TWI_ERRORSRC_ANACK_Msk = @as(c_ulong, 0x1) << TWI_ERRORSRC_ANACK_Pos;
pub const TWI_ERRORSRC_ANACK_NotPresent = @as(c_ulong, 0);
pub const TWI_ERRORSRC_ANACK_Present = @as(c_ulong, 1);
pub const TWI_ERRORSRC_OVERRUN_Pos = @as(c_ulong, 0);
pub const TWI_ERRORSRC_OVERRUN_Msk = @as(c_ulong, 0x1) << TWI_ERRORSRC_OVERRUN_Pos;
pub const TWI_ERRORSRC_OVERRUN_NotPresent = @as(c_ulong, 0);
pub const TWI_ERRORSRC_OVERRUN_Present = @as(c_ulong, 1);
pub const TWI_ENABLE_ENABLE_Pos = @as(c_ulong, 0);
pub const TWI_ENABLE_ENABLE_Msk = @as(c_ulong, 0xF) << TWI_ENABLE_ENABLE_Pos;
pub const TWI_ENABLE_ENABLE_Disabled = @as(c_ulong, 0);
pub const TWI_ENABLE_ENABLE_Enabled = @as(c_ulong, 5);
pub const TWI_PSEL_SCL_CONNECT_Pos = @as(c_ulong, 31);
pub const TWI_PSEL_SCL_CONNECT_Msk = @as(c_ulong, 0x1) << TWI_PSEL_SCL_CONNECT_Pos;
pub const TWI_PSEL_SCL_CONNECT_Connected = @as(c_ulong, 0);
pub const TWI_PSEL_SCL_CONNECT_Disconnected = @as(c_ulong, 1);
pub const TWI_PSEL_SCL_PORT_Pos = @as(c_ulong, 5);
pub const TWI_PSEL_SCL_PORT_Msk = @as(c_ulong, 0x1) << TWI_PSEL_SCL_PORT_Pos;
pub const TWI_PSEL_SCL_PIN_Pos = @as(c_ulong, 0);
pub const TWI_PSEL_SCL_PIN_Msk = @as(c_ulong, 0x1F) << TWI_PSEL_SCL_PIN_Pos;
pub const TWI_PSEL_SDA_CONNECT_Pos = @as(c_ulong, 31);
pub const TWI_PSEL_SDA_CONNECT_Msk = @as(c_ulong, 0x1) << TWI_PSEL_SDA_CONNECT_Pos;
pub const TWI_PSEL_SDA_CONNECT_Connected = @as(c_ulong, 0);
pub const TWI_PSEL_SDA_CONNECT_Disconnected = @as(c_ulong, 1);
pub const TWI_PSEL_SDA_PORT_Pos = @as(c_ulong, 5);
pub const TWI_PSEL_SDA_PORT_Msk = @as(c_ulong, 0x1) << TWI_PSEL_SDA_PORT_Pos;
pub const TWI_PSEL_SDA_PIN_Pos = @as(c_ulong, 0);
pub const TWI_PSEL_SDA_PIN_Msk = @as(c_ulong, 0x1F) << TWI_PSEL_SDA_PIN_Pos;
pub const TWI_RXD_RXD_Pos = @as(c_ulong, 0);
pub const TWI_RXD_RXD_Msk = @as(c_ulong, 0xFF) << TWI_RXD_RXD_Pos;
pub const TWI_TXD_TXD_Pos = @as(c_ulong, 0);
pub const TWI_TXD_TXD_Msk = @as(c_ulong, 0xFF) << TWI_TXD_TXD_Pos;
pub const TWI_FREQUENCY_FREQUENCY_Pos = @as(c_ulong, 0);
pub const TWI_FREQUENCY_FREQUENCY_Msk = @as(c_ulong, 0xFFFFFFFF) << TWI_FREQUENCY_FREQUENCY_Pos;
pub const TWI_FREQUENCY_FREQUENCY_K100 = @as(c_ulong, 0x01980000);
pub const TWI_FREQUENCY_FREQUENCY_K250 = @as(c_ulong, 0x04000000);
pub const TWI_FREQUENCY_FREQUENCY_K400 = @as(c_ulong, 0x06680000);
pub const TWI_ADDRESS_ADDRESS_Pos = @as(c_ulong, 0);
pub const TWI_ADDRESS_ADDRESS_Msk = @as(c_ulong, 0x7F) << TWI_ADDRESS_ADDRESS_Pos;
pub const TWIM_TASKS_STARTRX_TASKS_STARTRX_Pos = @as(c_ulong, 0);
pub const TWIM_TASKS_STARTRX_TASKS_STARTRX_Msk = @as(c_ulong, 0x1) << TWIM_TASKS_STARTRX_TASKS_STARTRX_Pos;
pub const TWIM_TASKS_STARTRX_TASKS_STARTRX_Trigger = @as(c_ulong, 1);
pub const TWIM_TASKS_STARTTX_TASKS_STARTTX_Pos = @as(c_ulong, 0);
pub const TWIM_TASKS_STARTTX_TASKS_STARTTX_Msk = @as(c_ulong, 0x1) << TWIM_TASKS_STARTTX_TASKS_STARTTX_Pos;
pub const TWIM_TASKS_STARTTX_TASKS_STARTTX_Trigger = @as(c_ulong, 1);
pub const TWIM_TASKS_STOP_TASKS_STOP_Pos = @as(c_ulong, 0);
pub const TWIM_TASKS_STOP_TASKS_STOP_Msk = @as(c_ulong, 0x1) << TWIM_TASKS_STOP_TASKS_STOP_Pos;
pub const TWIM_TASKS_STOP_TASKS_STOP_Trigger = @as(c_ulong, 1);
pub const TWIM_TASKS_SUSPEND_TASKS_SUSPEND_Pos = @as(c_ulong, 0);
pub const TWIM_TASKS_SUSPEND_TASKS_SUSPEND_Msk = @as(c_ulong, 0x1) << TWIM_TASKS_SUSPEND_TASKS_SUSPEND_Pos;
pub const TWIM_TASKS_SUSPEND_TASKS_SUSPEND_Trigger = @as(c_ulong, 1);
pub const TWIM_TASKS_RESUME_TASKS_RESUME_Pos = @as(c_ulong, 0);
pub const TWIM_TASKS_RESUME_TASKS_RESUME_Msk = @as(c_ulong, 0x1) << TWIM_TASKS_RESUME_TASKS_RESUME_Pos;
pub const TWIM_TASKS_RESUME_TASKS_RESUME_Trigger = @as(c_ulong, 1);
pub const TWIM_EVENTS_STOPPED_EVENTS_STOPPED_Pos = @as(c_ulong, 0);
pub const TWIM_EVENTS_STOPPED_EVENTS_STOPPED_Msk = @as(c_ulong, 0x1) << TWIM_EVENTS_STOPPED_EVENTS_STOPPED_Pos;
pub const TWIM_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated = @as(c_ulong, 0);
pub const TWIM_EVENTS_STOPPED_EVENTS_STOPPED_Generated = @as(c_ulong, 1);
pub const TWIM_EVENTS_ERROR_EVENTS_ERROR_Pos = @as(c_ulong, 0);
pub const TWIM_EVENTS_ERROR_EVENTS_ERROR_Msk = @as(c_ulong, 0x1) << TWIM_EVENTS_ERROR_EVENTS_ERROR_Pos;
pub const TWIM_EVENTS_ERROR_EVENTS_ERROR_NotGenerated = @as(c_ulong, 0);
pub const TWIM_EVENTS_ERROR_EVENTS_ERROR_Generated = @as(c_ulong, 1);
pub const TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Pos = @as(c_ulong, 0);
pub const TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Msk = @as(c_ulong, 0x1) << TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Pos;
pub const TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_NotGenerated = @as(c_ulong, 0);
pub const TWIM_EVENTS_SUSPENDED_EVENTS_SUSPENDED_Generated = @as(c_ulong, 1);
pub const TWIM_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Pos = @as(c_ulong, 0);
pub const TWIM_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Msk = @as(c_ulong, 0x1) << TWIM_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Pos;
pub const TWIM_EVENTS_RXSTARTED_EVENTS_RXSTARTED_NotGenerated = @as(c_ulong, 0);
pub const TWIM_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Generated = @as(c_ulong, 1);
pub const TWIM_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Pos = @as(c_ulong, 0);
pub const TWIM_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Msk = @as(c_ulong, 0x1) << TWIM_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Pos;
pub const TWIM_EVENTS_TXSTARTED_EVENTS_TXSTARTED_NotGenerated = @as(c_ulong, 0);
pub const TWIM_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Generated = @as(c_ulong, 1);
pub const TWIM_EVENTS_LASTRX_EVENTS_LASTRX_Pos = @as(c_ulong, 0);
pub const TWIM_EVENTS_LASTRX_EVENTS_LASTRX_Msk = @as(c_ulong, 0x1) << TWIM_EVENTS_LASTRX_EVENTS_LASTRX_Pos;
pub const TWIM_EVENTS_LASTRX_EVENTS_LASTRX_NotGenerated = @as(c_ulong, 0);
pub const TWIM_EVENTS_LASTRX_EVENTS_LASTRX_Generated = @as(c_ulong, 1);
pub const TWIM_EVENTS_LASTTX_EVENTS_LASTTX_Pos = @as(c_ulong, 0);
pub const TWIM_EVENTS_LASTTX_EVENTS_LASTTX_Msk = @as(c_ulong, 0x1) << TWIM_EVENTS_LASTTX_EVENTS_LASTTX_Pos;
pub const TWIM_EVENTS_LASTTX_EVENTS_LASTTX_NotGenerated = @as(c_ulong, 0);
pub const TWIM_EVENTS_LASTTX_EVENTS_LASTTX_Generated = @as(c_ulong, 1);
pub const TWIM_SHORTS_LASTRX_STOP_Pos = @as(c_ulong, 12);
pub const TWIM_SHORTS_LASTRX_STOP_Msk = @as(c_ulong, 0x1) << TWIM_SHORTS_LASTRX_STOP_Pos;
pub const TWIM_SHORTS_LASTRX_STOP_Disabled = @as(c_ulong, 0);
pub const TWIM_SHORTS_LASTRX_STOP_Enabled = @as(c_ulong, 1);
pub const TWIM_SHORTS_LASTRX_SUSPEND_Pos = @as(c_ulong, 11);
pub const TWIM_SHORTS_LASTRX_SUSPEND_Msk = @as(c_ulong, 0x1) << TWIM_SHORTS_LASTRX_SUSPEND_Pos;
pub const TWIM_SHORTS_LASTRX_SUSPEND_Disabled = @as(c_ulong, 0);
pub const TWIM_SHORTS_LASTRX_SUSPEND_Enabled = @as(c_ulong, 1);
pub const TWIM_SHORTS_LASTRX_STARTTX_Pos = @as(c_ulong, 10);
pub const TWIM_SHORTS_LASTRX_STARTTX_Msk = @as(c_ulong, 0x1) << TWIM_SHORTS_LASTRX_STARTTX_Pos;
pub const TWIM_SHORTS_LASTRX_STARTTX_Disabled = @as(c_ulong, 0);
pub const TWIM_SHORTS_LASTRX_STARTTX_Enabled = @as(c_ulong, 1);
pub const TWIM_SHORTS_LASTTX_STOP_Pos = @as(c_ulong, 9);
pub const TWIM_SHORTS_LASTTX_STOP_Msk = @as(c_ulong, 0x1) << TWIM_SHORTS_LASTTX_STOP_Pos;
pub const TWIM_SHORTS_LASTTX_STOP_Disabled = @as(c_ulong, 0);
pub const TWIM_SHORTS_LASTTX_STOP_Enabled = @as(c_ulong, 1);
pub const TWIM_SHORTS_LASTTX_SUSPEND_Pos = @as(c_ulong, 8);
pub const TWIM_SHORTS_LASTTX_SUSPEND_Msk = @as(c_ulong, 0x1) << TWIM_SHORTS_LASTTX_SUSPEND_Pos;
pub const TWIM_SHORTS_LASTTX_SUSPEND_Disabled = @as(c_ulong, 0);
pub const TWIM_SHORTS_LASTTX_SUSPEND_Enabled = @as(c_ulong, 1);
pub const TWIM_SHORTS_LASTTX_STARTRX_Pos = @as(c_ulong, 7);
pub const TWIM_SHORTS_LASTTX_STARTRX_Msk = @as(c_ulong, 0x1) << TWIM_SHORTS_LASTTX_STARTRX_Pos;
pub const TWIM_SHORTS_LASTTX_STARTRX_Disabled = @as(c_ulong, 0);
pub const TWIM_SHORTS_LASTTX_STARTRX_Enabled = @as(c_ulong, 1);
pub const TWIM_INTEN_LASTTX_Pos = @as(c_ulong, 24);
pub const TWIM_INTEN_LASTTX_Msk = @as(c_ulong, 0x1) << TWIM_INTEN_LASTTX_Pos;
pub const TWIM_INTEN_LASTTX_Disabled = @as(c_ulong, 0);
pub const TWIM_INTEN_LASTTX_Enabled = @as(c_ulong, 1);
pub const TWIM_INTEN_LASTRX_Pos = @as(c_ulong, 23);
pub const TWIM_INTEN_LASTRX_Msk = @as(c_ulong, 0x1) << TWIM_INTEN_LASTRX_Pos;
pub const TWIM_INTEN_LASTRX_Disabled = @as(c_ulong, 0);
pub const TWIM_INTEN_LASTRX_Enabled = @as(c_ulong, 1);
pub const TWIM_INTEN_TXSTARTED_Pos = @as(c_ulong, 20);
pub const TWIM_INTEN_TXSTARTED_Msk = @as(c_ulong, 0x1) << TWIM_INTEN_TXSTARTED_Pos;
pub const TWIM_INTEN_TXSTARTED_Disabled = @as(c_ulong, 0);
pub const TWIM_INTEN_TXSTARTED_Enabled = @as(c_ulong, 1);
pub const TWIM_INTEN_RXSTARTED_Pos = @as(c_ulong, 19);
pub const TWIM_INTEN_RXSTARTED_Msk = @as(c_ulong, 0x1) << TWIM_INTEN_RXSTARTED_Pos;
pub const TWIM_INTEN_RXSTARTED_Disabled = @as(c_ulong, 0);
pub const TWIM_INTEN_RXSTARTED_Enabled = @as(c_ulong, 1);
pub const TWIM_INTEN_SUSPENDED_Pos = @as(c_ulong, 18);
pub const TWIM_INTEN_SUSPENDED_Msk = @as(c_ulong, 0x1) << TWIM_INTEN_SUSPENDED_Pos;
pub const TWIM_INTEN_SUSPENDED_Disabled = @as(c_ulong, 0);
pub const TWIM_INTEN_SUSPENDED_Enabled = @as(c_ulong, 1);
pub const TWIM_INTEN_ERROR_Pos = @as(c_ulong, 9);
pub const TWIM_INTEN_ERROR_Msk = @as(c_ulong, 0x1) << TWIM_INTEN_ERROR_Pos;
pub const TWIM_INTEN_ERROR_Disabled = @as(c_ulong, 0);
pub const TWIM_INTEN_ERROR_Enabled = @as(c_ulong, 1);
pub const TWIM_INTEN_STOPPED_Pos = @as(c_ulong, 1);
pub const TWIM_INTEN_STOPPED_Msk = @as(c_ulong, 0x1) << TWIM_INTEN_STOPPED_Pos;
pub const TWIM_INTEN_STOPPED_Disabled = @as(c_ulong, 0);
pub const TWIM_INTEN_STOPPED_Enabled = @as(c_ulong, 1);
pub const TWIM_INTENSET_LASTTX_Pos = @as(c_ulong, 24);
pub const TWIM_INTENSET_LASTTX_Msk = @as(c_ulong, 0x1) << TWIM_INTENSET_LASTTX_Pos;
pub const TWIM_INTENSET_LASTTX_Disabled = @as(c_ulong, 0);
pub const TWIM_INTENSET_LASTTX_Enabled = @as(c_ulong, 1);
pub const TWIM_INTENSET_LASTTX_Set = @as(c_ulong, 1);
pub const TWIM_INTENSET_LASTRX_Pos = @as(c_ulong, 23);
pub const TWIM_INTENSET_LASTRX_Msk = @as(c_ulong, 0x1) << TWIM_INTENSET_LASTRX_Pos;
pub const TWIM_INTENSET_LASTRX_Disabled = @as(c_ulong, 0);
pub const TWIM_INTENSET_LASTRX_Enabled = @as(c_ulong, 1);
pub const TWIM_INTENSET_LASTRX_Set = @as(c_ulong, 1);
pub const TWIM_INTENSET_TXSTARTED_Pos = @as(c_ulong, 20);
pub const TWIM_INTENSET_TXSTARTED_Msk = @as(c_ulong, 0x1) << TWIM_INTENSET_TXSTARTED_Pos;
pub const TWIM_INTENSET_TXSTARTED_Disabled = @as(c_ulong, 0);
pub const TWIM_INTENSET_TXSTARTED_Enabled = @as(c_ulong, 1);
pub const TWIM_INTENSET_TXSTARTED_Set = @as(c_ulong, 1);
pub const TWIM_INTENSET_RXSTARTED_Pos = @as(c_ulong, 19);
pub const TWIM_INTENSET_RXSTARTED_Msk = @as(c_ulong, 0x1) << TWIM_INTENSET_RXSTARTED_Pos;
pub const TWIM_INTENSET_RXSTARTED_Disabled = @as(c_ulong, 0);
pub const TWIM_INTENSET_RXSTARTED_Enabled = @as(c_ulong, 1);
pub const TWIM_INTENSET_RXSTARTED_Set = @as(c_ulong, 1);
pub const TWIM_INTENSET_SUSPENDED_Pos = @as(c_ulong, 18);
pub const TWIM_INTENSET_SUSPENDED_Msk = @as(c_ulong, 0x1) << TWIM_INTENSET_SUSPENDED_Pos;
pub const TWIM_INTENSET_SUSPENDED_Disabled = @as(c_ulong, 0);
pub const TWIM_INTENSET_SUSPENDED_Enabled = @as(c_ulong, 1);
pub const TWIM_INTENSET_SUSPENDED_Set = @as(c_ulong, 1);
pub const TWIM_INTENSET_ERROR_Pos = @as(c_ulong, 9);
pub const TWIM_INTENSET_ERROR_Msk = @as(c_ulong, 0x1) << TWIM_INTENSET_ERROR_Pos;
pub const TWIM_INTENSET_ERROR_Disabled = @as(c_ulong, 0);
pub const TWIM_INTENSET_ERROR_Enabled = @as(c_ulong, 1);
pub const TWIM_INTENSET_ERROR_Set = @as(c_ulong, 1);
pub const TWIM_INTENSET_STOPPED_Pos = @as(c_ulong, 1);
pub const TWIM_INTENSET_STOPPED_Msk = @as(c_ulong, 0x1) << TWIM_INTENSET_STOPPED_Pos;
pub const TWIM_INTENSET_STOPPED_Disabled = @as(c_ulong, 0);
pub const TWIM_INTENSET_STOPPED_Enabled = @as(c_ulong, 1);
pub const TWIM_INTENSET_STOPPED_Set = @as(c_ulong, 1);
pub const TWIM_INTENCLR_LASTTX_Pos = @as(c_ulong, 24);
pub const TWIM_INTENCLR_LASTTX_Msk = @as(c_ulong, 0x1) << TWIM_INTENCLR_LASTTX_Pos;
pub const TWIM_INTENCLR_LASTTX_Disabled = @as(c_ulong, 0);
pub const TWIM_INTENCLR_LASTTX_Enabled = @as(c_ulong, 1);
pub const TWIM_INTENCLR_LASTTX_Clear = @as(c_ulong, 1);
pub const TWIM_INTENCLR_LASTRX_Pos = @as(c_ulong, 23);
pub const TWIM_INTENCLR_LASTRX_Msk = @as(c_ulong, 0x1) << TWIM_INTENCLR_LASTRX_Pos;
pub const TWIM_INTENCLR_LASTRX_Disabled = @as(c_ulong, 0);
pub const TWIM_INTENCLR_LASTRX_Enabled = @as(c_ulong, 1);
pub const TWIM_INTENCLR_LASTRX_Clear = @as(c_ulong, 1);
pub const TWIM_INTENCLR_TXSTARTED_Pos = @as(c_ulong, 20);
pub const TWIM_INTENCLR_TXSTARTED_Msk = @as(c_ulong, 0x1) << TWIM_INTENCLR_TXSTARTED_Pos;
pub const TWIM_INTENCLR_TXSTARTED_Disabled = @as(c_ulong, 0);
pub const TWIM_INTENCLR_TXSTARTED_Enabled = @as(c_ulong, 1);
pub const TWIM_INTENCLR_TXSTARTED_Clear = @as(c_ulong, 1);
pub const TWIM_INTENCLR_RXSTARTED_Pos = @as(c_ulong, 19);
pub const TWIM_INTENCLR_RXSTARTED_Msk = @as(c_ulong, 0x1) << TWIM_INTENCLR_RXSTARTED_Pos;
pub const TWIM_INTENCLR_RXSTARTED_Disabled = @as(c_ulong, 0);
pub const TWIM_INTENCLR_RXSTARTED_Enabled = @as(c_ulong, 1);
pub const TWIM_INTENCLR_RXSTARTED_Clear = @as(c_ulong, 1);
pub const TWIM_INTENCLR_SUSPENDED_Pos = @as(c_ulong, 18);
pub const TWIM_INTENCLR_SUSPENDED_Msk = @as(c_ulong, 0x1) << TWIM_INTENCLR_SUSPENDED_Pos;
pub const TWIM_INTENCLR_SUSPENDED_Disabled = @as(c_ulong, 0);
pub const TWIM_INTENCLR_SUSPENDED_Enabled = @as(c_ulong, 1);
pub const TWIM_INTENCLR_SUSPENDED_Clear = @as(c_ulong, 1);
pub const TWIM_INTENCLR_ERROR_Pos = @as(c_ulong, 9);
pub const TWIM_INTENCLR_ERROR_Msk = @as(c_ulong, 0x1) << TWIM_INTENCLR_ERROR_Pos;
pub const TWIM_INTENCLR_ERROR_Disabled = @as(c_ulong, 0);
pub const TWIM_INTENCLR_ERROR_Enabled = @as(c_ulong, 1);
pub const TWIM_INTENCLR_ERROR_Clear = @as(c_ulong, 1);
pub const TWIM_INTENCLR_STOPPED_Pos = @as(c_ulong, 1);
pub const TWIM_INTENCLR_STOPPED_Msk = @as(c_ulong, 0x1) << TWIM_INTENCLR_STOPPED_Pos;
pub const TWIM_INTENCLR_STOPPED_Disabled = @as(c_ulong, 0);
pub const TWIM_INTENCLR_STOPPED_Enabled = @as(c_ulong, 1);
pub const TWIM_INTENCLR_STOPPED_Clear = @as(c_ulong, 1);
pub const TWIM_ERRORSRC_DNACK_Pos = @as(c_ulong, 2);
pub const TWIM_ERRORSRC_DNACK_Msk = @as(c_ulong, 0x1) << TWIM_ERRORSRC_DNACK_Pos;
pub const TWIM_ERRORSRC_DNACK_NotReceived = @as(c_ulong, 0);
pub const TWIM_ERRORSRC_DNACK_Received = @as(c_ulong, 1);
pub const TWIM_ERRORSRC_ANACK_Pos = @as(c_ulong, 1);
pub const TWIM_ERRORSRC_ANACK_Msk = @as(c_ulong, 0x1) << TWIM_ERRORSRC_ANACK_Pos;
pub const TWIM_ERRORSRC_ANACK_NotReceived = @as(c_ulong, 0);
pub const TWIM_ERRORSRC_ANACK_Received = @as(c_ulong, 1);
pub const TWIM_ERRORSRC_OVERRUN_Pos = @as(c_ulong, 0);
pub const TWIM_ERRORSRC_OVERRUN_Msk = @as(c_ulong, 0x1) << TWIM_ERRORSRC_OVERRUN_Pos;
pub const TWIM_ERRORSRC_OVERRUN_NotReceived = @as(c_ulong, 0);
pub const TWIM_ERRORSRC_OVERRUN_Received = @as(c_ulong, 1);
pub const TWIM_ENABLE_ENABLE_Pos = @as(c_ulong, 0);
pub const TWIM_ENABLE_ENABLE_Msk = @as(c_ulong, 0xF) << TWIM_ENABLE_ENABLE_Pos;
pub const TWIM_ENABLE_ENABLE_Disabled = @as(c_ulong, 0);
pub const TWIM_ENABLE_ENABLE_Enabled = @as(c_ulong, 6);
pub const TWIM_PSEL_SCL_CONNECT_Pos = @as(c_ulong, 31);
pub const TWIM_PSEL_SCL_CONNECT_Msk = @as(c_ulong, 0x1) << TWIM_PSEL_SCL_CONNECT_Pos;
pub const TWIM_PSEL_SCL_CONNECT_Connected = @as(c_ulong, 0);
pub const TWIM_PSEL_SCL_CONNECT_Disconnected = @as(c_ulong, 1);
pub const TWIM_PSEL_SCL_PORT_Pos = @as(c_ulong, 5);
pub const TWIM_PSEL_SCL_PORT_Msk = @as(c_ulong, 0x1) << TWIM_PSEL_SCL_PORT_Pos;
pub const TWIM_PSEL_SCL_PIN_Pos = @as(c_ulong, 0);
pub const TWIM_PSEL_SCL_PIN_Msk = @as(c_ulong, 0x1F) << TWIM_PSEL_SCL_PIN_Pos;
pub const TWIM_PSEL_SDA_CONNECT_Pos = @as(c_ulong, 31);
pub const TWIM_PSEL_SDA_CONNECT_Msk = @as(c_ulong, 0x1) << TWIM_PSEL_SDA_CONNECT_Pos;
pub const TWIM_PSEL_SDA_CONNECT_Connected = @as(c_ulong, 0);
pub const TWIM_PSEL_SDA_CONNECT_Disconnected = @as(c_ulong, 1);
pub const TWIM_PSEL_SDA_PORT_Pos = @as(c_ulong, 5);
pub const TWIM_PSEL_SDA_PORT_Msk = @as(c_ulong, 0x1) << TWIM_PSEL_SDA_PORT_Pos;
pub const TWIM_PSEL_SDA_PIN_Pos = @as(c_ulong, 0);
pub const TWIM_PSEL_SDA_PIN_Msk = @as(c_ulong, 0x1F) << TWIM_PSEL_SDA_PIN_Pos;
pub const TWIM_FREQUENCY_FREQUENCY_Pos = @as(c_ulong, 0);
pub const TWIM_FREQUENCY_FREQUENCY_Msk = @as(c_ulong, 0xFFFFFFFF) << TWIM_FREQUENCY_FREQUENCY_Pos;
pub const TWIM_FREQUENCY_FREQUENCY_K100 = @as(c_ulong, 0x01980000);
pub const TWIM_FREQUENCY_FREQUENCY_K250 = @as(c_ulong, 0x04000000);
pub const TWIM_FREQUENCY_FREQUENCY_K400 = @as(c_ulong, 0x06400000);
pub const TWIM_RXD_PTR_PTR_Pos = @as(c_ulong, 0);
pub const TWIM_RXD_PTR_PTR_Msk = @as(c_ulong, 0xFFFFFFFF) << TWIM_RXD_PTR_PTR_Pos;
pub const TWIM_RXD_MAXCNT_MAXCNT_Pos = @as(c_ulong, 0);
pub const TWIM_RXD_MAXCNT_MAXCNT_Msk = @as(c_ulong, 0xFFFF) << TWIM_RXD_MAXCNT_MAXCNT_Pos;
pub const TWIM_RXD_AMOUNT_AMOUNT_Pos = @as(c_ulong, 0);
pub const TWIM_RXD_AMOUNT_AMOUNT_Msk = @as(c_ulong, 0xFFFF) << TWIM_RXD_AMOUNT_AMOUNT_Pos;
pub const TWIM_RXD_LIST_LIST_Pos = @as(c_ulong, 0);
pub const TWIM_RXD_LIST_LIST_Msk = @as(c_ulong, 0x7) << TWIM_RXD_LIST_LIST_Pos;
pub const TWIM_RXD_LIST_LIST_Disabled = @as(c_ulong, 0);
pub const TWIM_RXD_LIST_LIST_ArrayList = @as(c_ulong, 1);
pub const TWIM_TXD_PTR_PTR_Pos = @as(c_ulong, 0);
pub const TWIM_TXD_PTR_PTR_Msk = @as(c_ulong, 0xFFFFFFFF) << TWIM_TXD_PTR_PTR_Pos;
pub const TWIM_TXD_MAXCNT_MAXCNT_Pos = @as(c_ulong, 0);
pub const TWIM_TXD_MAXCNT_MAXCNT_Msk = @as(c_ulong, 0xFFFF) << TWIM_TXD_MAXCNT_MAXCNT_Pos;
pub const TWIM_TXD_AMOUNT_AMOUNT_Pos = @as(c_ulong, 0);
pub const TWIM_TXD_AMOUNT_AMOUNT_Msk = @as(c_ulong, 0xFFFF) << TWIM_TXD_AMOUNT_AMOUNT_Pos;
pub const TWIM_TXD_LIST_LIST_Pos = @as(c_ulong, 0);
pub const TWIM_TXD_LIST_LIST_Msk = @as(c_ulong, 0x7) << TWIM_TXD_LIST_LIST_Pos;
pub const TWIM_TXD_LIST_LIST_Disabled = @as(c_ulong, 0);
pub const TWIM_TXD_LIST_LIST_ArrayList = @as(c_ulong, 1);
pub const TWIM_ADDRESS_ADDRESS_Pos = @as(c_ulong, 0);
pub const TWIM_ADDRESS_ADDRESS_Msk = @as(c_ulong, 0x7F) << TWIM_ADDRESS_ADDRESS_Pos;
pub const TWIS_TASKS_STOP_TASKS_STOP_Pos = @as(c_ulong, 0);
pub const TWIS_TASKS_STOP_TASKS_STOP_Msk = @as(c_ulong, 0x1) << TWIS_TASKS_STOP_TASKS_STOP_Pos;
pub const TWIS_TASKS_STOP_TASKS_STOP_Trigger = @as(c_ulong, 1);
pub const TWIS_TASKS_SUSPEND_TASKS_SUSPEND_Pos = @as(c_ulong, 0);
pub const TWIS_TASKS_SUSPEND_TASKS_SUSPEND_Msk = @as(c_ulong, 0x1) << TWIS_TASKS_SUSPEND_TASKS_SUSPEND_Pos;
pub const TWIS_TASKS_SUSPEND_TASKS_SUSPEND_Trigger = @as(c_ulong, 1);
pub const TWIS_TASKS_RESUME_TASKS_RESUME_Pos = @as(c_ulong, 0);
pub const TWIS_TASKS_RESUME_TASKS_RESUME_Msk = @as(c_ulong, 0x1) << TWIS_TASKS_RESUME_TASKS_RESUME_Pos;
pub const TWIS_TASKS_RESUME_TASKS_RESUME_Trigger = @as(c_ulong, 1);
pub const TWIS_TASKS_PREPARERX_TASKS_PREPARERX_Pos = @as(c_ulong, 0);
pub const TWIS_TASKS_PREPARERX_TASKS_PREPARERX_Msk = @as(c_ulong, 0x1) << TWIS_TASKS_PREPARERX_TASKS_PREPARERX_Pos;
pub const TWIS_TASKS_PREPARERX_TASKS_PREPARERX_Trigger = @as(c_ulong, 1);
pub const TWIS_TASKS_PREPARETX_TASKS_PREPARETX_Pos = @as(c_ulong, 0);
pub const TWIS_TASKS_PREPARETX_TASKS_PREPARETX_Msk = @as(c_ulong, 0x1) << TWIS_TASKS_PREPARETX_TASKS_PREPARETX_Pos;
pub const TWIS_TASKS_PREPARETX_TASKS_PREPARETX_Trigger = @as(c_ulong, 1);
pub const TWIS_EVENTS_STOPPED_EVENTS_STOPPED_Pos = @as(c_ulong, 0);
pub const TWIS_EVENTS_STOPPED_EVENTS_STOPPED_Msk = @as(c_ulong, 0x1) << TWIS_EVENTS_STOPPED_EVENTS_STOPPED_Pos;
pub const TWIS_EVENTS_STOPPED_EVENTS_STOPPED_NotGenerated = @as(c_ulong, 0);
pub const TWIS_EVENTS_STOPPED_EVENTS_STOPPED_Generated = @as(c_ulong, 1);
pub const TWIS_EVENTS_ERROR_EVENTS_ERROR_Pos = @as(c_ulong, 0);
pub const TWIS_EVENTS_ERROR_EVENTS_ERROR_Msk = @as(c_ulong, 0x1) << TWIS_EVENTS_ERROR_EVENTS_ERROR_Pos;
pub const TWIS_EVENTS_ERROR_EVENTS_ERROR_NotGenerated = @as(c_ulong, 0);
pub const TWIS_EVENTS_ERROR_EVENTS_ERROR_Generated = @as(c_ulong, 1);
pub const TWIS_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Pos = @as(c_ulong, 0);
pub const TWIS_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Msk = @as(c_ulong, 0x1) << TWIS_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Pos;
pub const TWIS_EVENTS_RXSTARTED_EVENTS_RXSTARTED_NotGenerated = @as(c_ulong, 0);
pub const TWIS_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Generated = @as(c_ulong, 1);
pub const TWIS_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Pos = @as(c_ulong, 0);
pub const TWIS_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Msk = @as(c_ulong, 0x1) << TWIS_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Pos;
pub const TWIS_EVENTS_TXSTARTED_EVENTS_TXSTARTED_NotGenerated = @as(c_ulong, 0);
pub const TWIS_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Generated = @as(c_ulong, 1);
pub const TWIS_EVENTS_WRITE_EVENTS_WRITE_Pos = @as(c_ulong, 0);
pub const TWIS_EVENTS_WRITE_EVENTS_WRITE_Msk = @as(c_ulong, 0x1) << TWIS_EVENTS_WRITE_EVENTS_WRITE_Pos;
pub const TWIS_EVENTS_WRITE_EVENTS_WRITE_NotGenerated = @as(c_ulong, 0);
pub const TWIS_EVENTS_WRITE_EVENTS_WRITE_Generated = @as(c_ulong, 1);
pub const TWIS_EVENTS_READ_EVENTS_READ_Pos = @as(c_ulong, 0);
pub const TWIS_EVENTS_READ_EVENTS_READ_Msk = @as(c_ulong, 0x1) << TWIS_EVENTS_READ_EVENTS_READ_Pos;
pub const TWIS_EVENTS_READ_EVENTS_READ_NotGenerated = @as(c_ulong, 0);
pub const TWIS_EVENTS_READ_EVENTS_READ_Generated = @as(c_ulong, 1);
pub const TWIS_SHORTS_READ_SUSPEND_Pos = @as(c_ulong, 14);
pub const TWIS_SHORTS_READ_SUSPEND_Msk = @as(c_ulong, 0x1) << TWIS_SHORTS_READ_SUSPEND_Pos;
pub const TWIS_SHORTS_READ_SUSPEND_Disabled = @as(c_ulong, 0);
pub const TWIS_SHORTS_READ_SUSPEND_Enabled = @as(c_ulong, 1);
pub const TWIS_SHORTS_WRITE_SUSPEND_Pos = @as(c_ulong, 13);
pub const TWIS_SHORTS_WRITE_SUSPEND_Msk = @as(c_ulong, 0x1) << TWIS_SHORTS_WRITE_SUSPEND_Pos;
pub const TWIS_SHORTS_WRITE_SUSPEND_Disabled = @as(c_ulong, 0);
pub const TWIS_SHORTS_WRITE_SUSPEND_Enabled = @as(c_ulong, 1);
pub const TWIS_INTEN_READ_Pos = @as(c_ulong, 26);
pub const TWIS_INTEN_READ_Msk = @as(c_ulong, 0x1) << TWIS_INTEN_READ_Pos;
pub const TWIS_INTEN_READ_Disabled = @as(c_ulong, 0);
pub const TWIS_INTEN_READ_Enabled = @as(c_ulong, 1);
pub const TWIS_INTEN_WRITE_Pos = @as(c_ulong, 25);
pub const TWIS_INTEN_WRITE_Msk = @as(c_ulong, 0x1) << TWIS_INTEN_WRITE_Pos;
pub const TWIS_INTEN_WRITE_Disabled = @as(c_ulong, 0);
pub const TWIS_INTEN_WRITE_Enabled = @as(c_ulong, 1);
pub const TWIS_INTEN_TXSTARTED_Pos = @as(c_ulong, 20);
pub const TWIS_INTEN_TXSTARTED_Msk = @as(c_ulong, 0x1) << TWIS_INTEN_TXSTARTED_Pos;
pub const TWIS_INTEN_TXSTARTED_Disabled = @as(c_ulong, 0);
pub const TWIS_INTEN_TXSTARTED_Enabled = @as(c_ulong, 1);
pub const TWIS_INTEN_RXSTARTED_Pos = @as(c_ulong, 19);
pub const TWIS_INTEN_RXSTARTED_Msk = @as(c_ulong, 0x1) << TWIS_INTEN_RXSTARTED_Pos;
pub const TWIS_INTEN_RXSTARTED_Disabled = @as(c_ulong, 0);
pub const TWIS_INTEN_RXSTARTED_Enabled = @as(c_ulong, 1);
pub const TWIS_INTEN_ERROR_Pos = @as(c_ulong, 9);
pub const TWIS_INTEN_ERROR_Msk = @as(c_ulong, 0x1) << TWIS_INTEN_ERROR_Pos;
pub const TWIS_INTEN_ERROR_Disabled = @as(c_ulong, 0);
pub const TWIS_INTEN_ERROR_Enabled = @as(c_ulong, 1);
pub const TWIS_INTEN_STOPPED_Pos = @as(c_ulong, 1);
pub const TWIS_INTEN_STOPPED_Msk = @as(c_ulong, 0x1) << TWIS_INTEN_STOPPED_Pos;
pub const TWIS_INTEN_STOPPED_Disabled = @as(c_ulong, 0);
pub const TWIS_INTEN_STOPPED_Enabled = @as(c_ulong, 1);
pub const TWIS_INTENSET_READ_Pos = @as(c_ulong, 26);
pub const TWIS_INTENSET_READ_Msk = @as(c_ulong, 0x1) << TWIS_INTENSET_READ_Pos;
pub const TWIS_INTENSET_READ_Disabled = @as(c_ulong, 0);
pub const TWIS_INTENSET_READ_Enabled = @as(c_ulong, 1);
pub const TWIS_INTENSET_READ_Set = @as(c_ulong, 1);
pub const TWIS_INTENSET_WRITE_Pos = @as(c_ulong, 25);
pub const TWIS_INTENSET_WRITE_Msk = @as(c_ulong, 0x1) << TWIS_INTENSET_WRITE_Pos;
pub const TWIS_INTENSET_WRITE_Disabled = @as(c_ulong, 0);
pub const TWIS_INTENSET_WRITE_Enabled = @as(c_ulong, 1);
pub const TWIS_INTENSET_WRITE_Set = @as(c_ulong, 1);
pub const TWIS_INTENSET_TXSTARTED_Pos = @as(c_ulong, 20);
pub const TWIS_INTENSET_TXSTARTED_Msk = @as(c_ulong, 0x1) << TWIS_INTENSET_TXSTARTED_Pos;
pub const TWIS_INTENSET_TXSTARTED_Disabled = @as(c_ulong, 0);
pub const TWIS_INTENSET_TXSTARTED_Enabled = @as(c_ulong, 1);
pub const TWIS_INTENSET_TXSTARTED_Set = @as(c_ulong, 1);
pub const TWIS_INTENSET_RXSTARTED_Pos = @as(c_ulong, 19);
pub const TWIS_INTENSET_RXSTARTED_Msk = @as(c_ulong, 0x1) << TWIS_INTENSET_RXSTARTED_Pos;
pub const TWIS_INTENSET_RXSTARTED_Disabled = @as(c_ulong, 0);
pub const TWIS_INTENSET_RXSTARTED_Enabled = @as(c_ulong, 1);
pub const TWIS_INTENSET_RXSTARTED_Set = @as(c_ulong, 1);
pub const TWIS_INTENSET_ERROR_Pos = @as(c_ulong, 9);
pub const TWIS_INTENSET_ERROR_Msk = @as(c_ulong, 0x1) << TWIS_INTENSET_ERROR_Pos;
pub const TWIS_INTENSET_ERROR_Disabled = @as(c_ulong, 0);
pub const TWIS_INTENSET_ERROR_Enabled = @as(c_ulong, 1);
pub const TWIS_INTENSET_ERROR_Set = @as(c_ulong, 1);
pub const TWIS_INTENSET_STOPPED_Pos = @as(c_ulong, 1);
pub const TWIS_INTENSET_STOPPED_Msk = @as(c_ulong, 0x1) << TWIS_INTENSET_STOPPED_Pos;
pub const TWIS_INTENSET_STOPPED_Disabled = @as(c_ulong, 0);
pub const TWIS_INTENSET_STOPPED_Enabled = @as(c_ulong, 1);
pub const TWIS_INTENSET_STOPPED_Set = @as(c_ulong, 1);
pub const TWIS_INTENCLR_READ_Pos = @as(c_ulong, 26);
pub const TWIS_INTENCLR_READ_Msk = @as(c_ulong, 0x1) << TWIS_INTENCLR_READ_Pos;
pub const TWIS_INTENCLR_READ_Disabled = @as(c_ulong, 0);
pub const TWIS_INTENCLR_READ_Enabled = @as(c_ulong, 1);
pub const TWIS_INTENCLR_READ_Clear = @as(c_ulong, 1);
pub const TWIS_INTENCLR_WRITE_Pos = @as(c_ulong, 25);
pub const TWIS_INTENCLR_WRITE_Msk = @as(c_ulong, 0x1) << TWIS_INTENCLR_WRITE_Pos;
pub const TWIS_INTENCLR_WRITE_Disabled = @as(c_ulong, 0);
pub const TWIS_INTENCLR_WRITE_Enabled = @as(c_ulong, 1);
pub const TWIS_INTENCLR_WRITE_Clear = @as(c_ulong, 1);
pub const TWIS_INTENCLR_TXSTARTED_Pos = @as(c_ulong, 20);
pub const TWIS_INTENCLR_TXSTARTED_Msk = @as(c_ulong, 0x1) << TWIS_INTENCLR_TXSTARTED_Pos;
pub const TWIS_INTENCLR_TXSTARTED_Disabled = @as(c_ulong, 0);
pub const TWIS_INTENCLR_TXSTARTED_Enabled = @as(c_ulong, 1);
pub const TWIS_INTENCLR_TXSTARTED_Clear = @as(c_ulong, 1);
pub const TWIS_INTENCLR_RXSTARTED_Pos = @as(c_ulong, 19);
pub const TWIS_INTENCLR_RXSTARTED_Msk = @as(c_ulong, 0x1) << TWIS_INTENCLR_RXSTARTED_Pos;
pub const TWIS_INTENCLR_RXSTARTED_Disabled = @as(c_ulong, 0);
pub const TWIS_INTENCLR_RXSTARTED_Enabled = @as(c_ulong, 1);
pub const TWIS_INTENCLR_RXSTARTED_Clear = @as(c_ulong, 1);
pub const TWIS_INTENCLR_ERROR_Pos = @as(c_ulong, 9);
pub const TWIS_INTENCLR_ERROR_Msk = @as(c_ulong, 0x1) << TWIS_INTENCLR_ERROR_Pos;
pub const TWIS_INTENCLR_ERROR_Disabled = @as(c_ulong, 0);
pub const TWIS_INTENCLR_ERROR_Enabled = @as(c_ulong, 1);
pub const TWIS_INTENCLR_ERROR_Clear = @as(c_ulong, 1);
pub const TWIS_INTENCLR_STOPPED_Pos = @as(c_ulong, 1);
pub const TWIS_INTENCLR_STOPPED_Msk = @as(c_ulong, 0x1) << TWIS_INTENCLR_STOPPED_Pos;
pub const TWIS_INTENCLR_STOPPED_Disabled = @as(c_ulong, 0);
pub const TWIS_INTENCLR_STOPPED_Enabled = @as(c_ulong, 1);
pub const TWIS_INTENCLR_STOPPED_Clear = @as(c_ulong, 1);
pub const TWIS_ERRORSRC_OVERREAD_Pos = @as(c_ulong, 3);
pub const TWIS_ERRORSRC_OVERREAD_Msk = @as(c_ulong, 0x1) << TWIS_ERRORSRC_OVERREAD_Pos;
pub const TWIS_ERRORSRC_OVERREAD_NotDetected = @as(c_ulong, 0);
pub const TWIS_ERRORSRC_OVERREAD_Detected = @as(c_ulong, 1);
pub const TWIS_ERRORSRC_DNACK_Pos = @as(c_ulong, 2);
pub const TWIS_ERRORSRC_DNACK_Msk = @as(c_ulong, 0x1) << TWIS_ERRORSRC_DNACK_Pos;
pub const TWIS_ERRORSRC_DNACK_NotReceived = @as(c_ulong, 0);
pub const TWIS_ERRORSRC_DNACK_Received = @as(c_ulong, 1);
pub const TWIS_ERRORSRC_OVERFLOW_Pos = @as(c_ulong, 0);
pub const TWIS_ERRORSRC_OVERFLOW_Msk = @as(c_ulong, 0x1) << TWIS_ERRORSRC_OVERFLOW_Pos;
pub const TWIS_ERRORSRC_OVERFLOW_NotDetected = @as(c_ulong, 0);
pub const TWIS_ERRORSRC_OVERFLOW_Detected = @as(c_ulong, 1);
pub const TWIS_MATCH_MATCH_Pos = @as(c_ulong, 0);
pub const TWIS_MATCH_MATCH_Msk = @as(c_ulong, 0x1) << TWIS_MATCH_MATCH_Pos;
pub const TWIS_ENABLE_ENABLE_Pos = @as(c_ulong, 0);
pub const TWIS_ENABLE_ENABLE_Msk = @as(c_ulong, 0xF) << TWIS_ENABLE_ENABLE_Pos;
pub const TWIS_ENABLE_ENABLE_Disabled = @as(c_ulong, 0);
pub const TWIS_ENABLE_ENABLE_Enabled = @as(c_ulong, 9);
pub const TWIS_PSEL_SCL_CONNECT_Pos = @as(c_ulong, 31);
pub const TWIS_PSEL_SCL_CONNECT_Msk = @as(c_ulong, 0x1) << TWIS_PSEL_SCL_CONNECT_Pos;
pub const TWIS_PSEL_SCL_CONNECT_Connected = @as(c_ulong, 0);
pub const TWIS_PSEL_SCL_CONNECT_Disconnected = @as(c_ulong, 1);
pub const TWIS_PSEL_SCL_PORT_Pos = @as(c_ulong, 5);
pub const TWIS_PSEL_SCL_PORT_Msk = @as(c_ulong, 0x1) << TWIS_PSEL_SCL_PORT_Pos;
pub const TWIS_PSEL_SCL_PIN_Pos = @as(c_ulong, 0);
pub const TWIS_PSEL_SCL_PIN_Msk = @as(c_ulong, 0x1F) << TWIS_PSEL_SCL_PIN_Pos;
pub const TWIS_PSEL_SDA_CONNECT_Pos = @as(c_ulong, 31);
pub const TWIS_PSEL_SDA_CONNECT_Msk = @as(c_ulong, 0x1) << TWIS_PSEL_SDA_CONNECT_Pos;
pub const TWIS_PSEL_SDA_CONNECT_Connected = @as(c_ulong, 0);
pub const TWIS_PSEL_SDA_CONNECT_Disconnected = @as(c_ulong, 1);
pub const TWIS_PSEL_SDA_PORT_Pos = @as(c_ulong, 5);
pub const TWIS_PSEL_SDA_PORT_Msk = @as(c_ulong, 0x1) << TWIS_PSEL_SDA_PORT_Pos;
pub const TWIS_PSEL_SDA_PIN_Pos = @as(c_ulong, 0);
pub const TWIS_PSEL_SDA_PIN_Msk = @as(c_ulong, 0x1F) << TWIS_PSEL_SDA_PIN_Pos;
pub const TWIS_RXD_PTR_PTR_Pos = @as(c_ulong, 0);
pub const TWIS_RXD_PTR_PTR_Msk = @as(c_ulong, 0xFFFFFFFF) << TWIS_RXD_PTR_PTR_Pos;
pub const TWIS_RXD_MAXCNT_MAXCNT_Pos = @as(c_ulong, 0);
pub const TWIS_RXD_MAXCNT_MAXCNT_Msk = @as(c_ulong, 0xFFFF) << TWIS_RXD_MAXCNT_MAXCNT_Pos;
pub const TWIS_RXD_AMOUNT_AMOUNT_Pos = @as(c_ulong, 0);
pub const TWIS_RXD_AMOUNT_AMOUNT_Msk = @as(c_ulong, 0xFFFF) << TWIS_RXD_AMOUNT_AMOUNT_Pos;
pub const TWIS_RXD_LIST_LIST_Pos = @as(c_ulong, 0);
pub const TWIS_RXD_LIST_LIST_Msk = @as(c_ulong, 0x3) << TWIS_RXD_LIST_LIST_Pos;
pub const TWIS_RXD_LIST_LIST_Disabled = @as(c_ulong, 0);
pub const TWIS_RXD_LIST_LIST_ArrayList = @as(c_ulong, 1);
pub const TWIS_TXD_PTR_PTR_Pos = @as(c_ulong, 0);
pub const TWIS_TXD_PTR_PTR_Msk = @as(c_ulong, 0xFFFFFFFF) << TWIS_TXD_PTR_PTR_Pos;
pub const TWIS_TXD_MAXCNT_MAXCNT_Pos = @as(c_ulong, 0);
pub const TWIS_TXD_MAXCNT_MAXCNT_Msk = @as(c_ulong, 0xFFFF) << TWIS_TXD_MAXCNT_MAXCNT_Pos;
pub const TWIS_TXD_AMOUNT_AMOUNT_Pos = @as(c_ulong, 0);
pub const TWIS_TXD_AMOUNT_AMOUNT_Msk = @as(c_ulong, 0xFFFF) << TWIS_TXD_AMOUNT_AMOUNT_Pos;
pub const TWIS_TXD_LIST_LIST_Pos = @as(c_ulong, 0);
pub const TWIS_TXD_LIST_LIST_Msk = @as(c_ulong, 0x3) << TWIS_TXD_LIST_LIST_Pos;
pub const TWIS_TXD_LIST_LIST_Disabled = @as(c_ulong, 0);
pub const TWIS_TXD_LIST_LIST_ArrayList = @as(c_ulong, 1);
pub const TWIS_ADDRESS_ADDRESS_Pos = @as(c_ulong, 0);
pub const TWIS_ADDRESS_ADDRESS_Msk = @as(c_ulong, 0x7F) << TWIS_ADDRESS_ADDRESS_Pos;
pub const TWIS_CONFIG_ADDRESS1_Pos = @as(c_ulong, 1);
pub const TWIS_CONFIG_ADDRESS1_Msk = @as(c_ulong, 0x1) << TWIS_CONFIG_ADDRESS1_Pos;
pub const TWIS_CONFIG_ADDRESS1_Disabled = @as(c_ulong, 0);
pub const TWIS_CONFIG_ADDRESS1_Enabled = @as(c_ulong, 1);
pub const TWIS_CONFIG_ADDRESS0_Pos = @as(c_ulong, 0);
pub const TWIS_CONFIG_ADDRESS0_Msk = @as(c_ulong, 0x1) << TWIS_CONFIG_ADDRESS0_Pos;
pub const TWIS_CONFIG_ADDRESS0_Disabled = @as(c_ulong, 0);
pub const TWIS_CONFIG_ADDRESS0_Enabled = @as(c_ulong, 1);
pub const TWIS_ORC_ORC_Pos = @as(c_ulong, 0);
pub const TWIS_ORC_ORC_Msk = @as(c_ulong, 0xFF) << TWIS_ORC_ORC_Pos;
pub const UART_TASKS_STARTRX_TASKS_STARTRX_Pos = @as(c_ulong, 0);
pub const UART_TASKS_STARTRX_TASKS_STARTRX_Msk = @as(c_ulong, 0x1) << UART_TASKS_STARTRX_TASKS_STARTRX_Pos;
pub const UART_TASKS_STARTRX_TASKS_STARTRX_Trigger = @as(c_ulong, 1);
pub const UART_TASKS_STOPRX_TASKS_STOPRX_Pos = @as(c_ulong, 0);
pub const UART_TASKS_STOPRX_TASKS_STOPRX_Msk = @as(c_ulong, 0x1) << UART_TASKS_STOPRX_TASKS_STOPRX_Pos;
pub const UART_TASKS_STOPRX_TASKS_STOPRX_Trigger = @as(c_ulong, 1);
pub const UART_TASKS_STARTTX_TASKS_STARTTX_Pos = @as(c_ulong, 0);
pub const UART_TASKS_STARTTX_TASKS_STARTTX_Msk = @as(c_ulong, 0x1) << UART_TASKS_STARTTX_TASKS_STARTTX_Pos;
pub const UART_TASKS_STARTTX_TASKS_STARTTX_Trigger = @as(c_ulong, 1);
pub const UART_TASKS_STOPTX_TASKS_STOPTX_Pos = @as(c_ulong, 0);
pub const UART_TASKS_STOPTX_TASKS_STOPTX_Msk = @as(c_ulong, 0x1) << UART_TASKS_STOPTX_TASKS_STOPTX_Pos;
pub const UART_TASKS_STOPTX_TASKS_STOPTX_Trigger = @as(c_ulong, 1);
pub const UART_TASKS_SUSPEND_TASKS_SUSPEND_Pos = @as(c_ulong, 0);
pub const UART_TASKS_SUSPEND_TASKS_SUSPEND_Msk = @as(c_ulong, 0x1) << UART_TASKS_SUSPEND_TASKS_SUSPEND_Pos;
pub const UART_TASKS_SUSPEND_TASKS_SUSPEND_Trigger = @as(c_ulong, 1);
pub const UART_EVENTS_CTS_EVENTS_CTS_Pos = @as(c_ulong, 0);
pub const UART_EVENTS_CTS_EVENTS_CTS_Msk = @as(c_ulong, 0x1) << UART_EVENTS_CTS_EVENTS_CTS_Pos;
pub const UART_EVENTS_CTS_EVENTS_CTS_NotGenerated = @as(c_ulong, 0);
pub const UART_EVENTS_CTS_EVENTS_CTS_Generated = @as(c_ulong, 1);
pub const UART_EVENTS_NCTS_EVENTS_NCTS_Pos = @as(c_ulong, 0);
pub const UART_EVENTS_NCTS_EVENTS_NCTS_Msk = @as(c_ulong, 0x1) << UART_EVENTS_NCTS_EVENTS_NCTS_Pos;
pub const UART_EVENTS_NCTS_EVENTS_NCTS_NotGenerated = @as(c_ulong, 0);
pub const UART_EVENTS_NCTS_EVENTS_NCTS_Generated = @as(c_ulong, 1);
pub const UART_EVENTS_RXDRDY_EVENTS_RXDRDY_Pos = @as(c_ulong, 0);
pub const UART_EVENTS_RXDRDY_EVENTS_RXDRDY_Msk = @as(c_ulong, 0x1) << UART_EVENTS_RXDRDY_EVENTS_RXDRDY_Pos;
pub const UART_EVENTS_RXDRDY_EVENTS_RXDRDY_NotGenerated = @as(c_ulong, 0);
pub const UART_EVENTS_RXDRDY_EVENTS_RXDRDY_Generated = @as(c_ulong, 1);
pub const UART_EVENTS_TXDRDY_EVENTS_TXDRDY_Pos = @as(c_ulong, 0);
pub const UART_EVENTS_TXDRDY_EVENTS_TXDRDY_Msk = @as(c_ulong, 0x1) << UART_EVENTS_TXDRDY_EVENTS_TXDRDY_Pos;
pub const UART_EVENTS_TXDRDY_EVENTS_TXDRDY_NotGenerated = @as(c_ulong, 0);
pub const UART_EVENTS_TXDRDY_EVENTS_TXDRDY_Generated = @as(c_ulong, 1);
pub const UART_EVENTS_ERROR_EVENTS_ERROR_Pos = @as(c_ulong, 0);
pub const UART_EVENTS_ERROR_EVENTS_ERROR_Msk = @as(c_ulong, 0x1) << UART_EVENTS_ERROR_EVENTS_ERROR_Pos;
pub const UART_EVENTS_ERROR_EVENTS_ERROR_NotGenerated = @as(c_ulong, 0);
pub const UART_EVENTS_ERROR_EVENTS_ERROR_Generated = @as(c_ulong, 1);
pub const UART_EVENTS_RXTO_EVENTS_RXTO_Pos = @as(c_ulong, 0);
pub const UART_EVENTS_RXTO_EVENTS_RXTO_Msk = @as(c_ulong, 0x1) << UART_EVENTS_RXTO_EVENTS_RXTO_Pos;
pub const UART_EVENTS_RXTO_EVENTS_RXTO_NotGenerated = @as(c_ulong, 0);
pub const UART_EVENTS_RXTO_EVENTS_RXTO_Generated = @as(c_ulong, 1);
pub const UART_SHORTS_NCTS_STOPRX_Pos = @as(c_ulong, 4);
pub const UART_SHORTS_NCTS_STOPRX_Msk = @as(c_ulong, 0x1) << UART_SHORTS_NCTS_STOPRX_Pos;
pub const UART_SHORTS_NCTS_STOPRX_Disabled = @as(c_ulong, 0);
pub const UART_SHORTS_NCTS_STOPRX_Enabled = @as(c_ulong, 1);
pub const UART_SHORTS_CTS_STARTRX_Pos = @as(c_ulong, 3);
pub const UART_SHORTS_CTS_STARTRX_Msk = @as(c_ulong, 0x1) << UART_SHORTS_CTS_STARTRX_Pos;
pub const UART_SHORTS_CTS_STARTRX_Disabled = @as(c_ulong, 0);
pub const UART_SHORTS_CTS_STARTRX_Enabled = @as(c_ulong, 1);
pub const UART_INTENSET_RXTO_Pos = @as(c_ulong, 17);
pub const UART_INTENSET_RXTO_Msk = @as(c_ulong, 0x1) << UART_INTENSET_RXTO_Pos;
pub const UART_INTENSET_RXTO_Disabled = @as(c_ulong, 0);
pub const UART_INTENSET_RXTO_Enabled = @as(c_ulong, 1);
pub const UART_INTENSET_RXTO_Set = @as(c_ulong, 1);
pub const UART_INTENSET_ERROR_Pos = @as(c_ulong, 9);
pub const UART_INTENSET_ERROR_Msk = @as(c_ulong, 0x1) << UART_INTENSET_ERROR_Pos;
pub const UART_INTENSET_ERROR_Disabled = @as(c_ulong, 0);
pub const UART_INTENSET_ERROR_Enabled = @as(c_ulong, 1);
pub const UART_INTENSET_ERROR_Set = @as(c_ulong, 1);
pub const UART_INTENSET_TXDRDY_Pos = @as(c_ulong, 7);
pub const UART_INTENSET_TXDRDY_Msk = @as(c_ulong, 0x1) << UART_INTENSET_TXDRDY_Pos;
pub const UART_INTENSET_TXDRDY_Disabled = @as(c_ulong, 0);
pub const UART_INTENSET_TXDRDY_Enabled = @as(c_ulong, 1);
pub const UART_INTENSET_TXDRDY_Set = @as(c_ulong, 1);
pub const UART_INTENSET_RXDRDY_Pos = @as(c_ulong, 2);
pub const UART_INTENSET_RXDRDY_Msk = @as(c_ulong, 0x1) << UART_INTENSET_RXDRDY_Pos;
pub const UART_INTENSET_RXDRDY_Disabled = @as(c_ulong, 0);
pub const UART_INTENSET_RXDRDY_Enabled = @as(c_ulong, 1);
pub const UART_INTENSET_RXDRDY_Set = @as(c_ulong, 1);
pub const UART_INTENSET_NCTS_Pos = @as(c_ulong, 1);
pub const UART_INTENSET_NCTS_Msk = @as(c_ulong, 0x1) << UART_INTENSET_NCTS_Pos;
pub const UART_INTENSET_NCTS_Disabled = @as(c_ulong, 0);
pub const UART_INTENSET_NCTS_Enabled = @as(c_ulong, 1);
pub const UART_INTENSET_NCTS_Set = @as(c_ulong, 1);
pub const UART_INTENSET_CTS_Pos = @as(c_ulong, 0);
pub const UART_INTENSET_CTS_Msk = @as(c_ulong, 0x1) << UART_INTENSET_CTS_Pos;
pub const UART_INTENSET_CTS_Disabled = @as(c_ulong, 0);
pub const UART_INTENSET_CTS_Enabled = @as(c_ulong, 1);
pub const UART_INTENSET_CTS_Set = @as(c_ulong, 1);
pub const UART_INTENCLR_RXTO_Pos = @as(c_ulong, 17);
pub const UART_INTENCLR_RXTO_Msk = @as(c_ulong, 0x1) << UART_INTENCLR_RXTO_Pos;
pub const UART_INTENCLR_RXTO_Disabled = @as(c_ulong, 0);
pub const UART_INTENCLR_RXTO_Enabled = @as(c_ulong, 1);
pub const UART_INTENCLR_RXTO_Clear = @as(c_ulong, 1);
pub const UART_INTENCLR_ERROR_Pos = @as(c_ulong, 9);
pub const UART_INTENCLR_ERROR_Msk = @as(c_ulong, 0x1) << UART_INTENCLR_ERROR_Pos;
pub const UART_INTENCLR_ERROR_Disabled = @as(c_ulong, 0);
pub const UART_INTENCLR_ERROR_Enabled = @as(c_ulong, 1);
pub const UART_INTENCLR_ERROR_Clear = @as(c_ulong, 1);
pub const UART_INTENCLR_TXDRDY_Pos = @as(c_ulong, 7);
pub const UART_INTENCLR_TXDRDY_Msk = @as(c_ulong, 0x1) << UART_INTENCLR_TXDRDY_Pos;
pub const UART_INTENCLR_TXDRDY_Disabled = @as(c_ulong, 0);
pub const UART_INTENCLR_TXDRDY_Enabled = @as(c_ulong, 1);
pub const UART_INTENCLR_TXDRDY_Clear = @as(c_ulong, 1);
pub const UART_INTENCLR_RXDRDY_Pos = @as(c_ulong, 2);
pub const UART_INTENCLR_RXDRDY_Msk = @as(c_ulong, 0x1) << UART_INTENCLR_RXDRDY_Pos;
pub const UART_INTENCLR_RXDRDY_Disabled = @as(c_ulong, 0);
pub const UART_INTENCLR_RXDRDY_Enabled = @as(c_ulong, 1);
pub const UART_INTENCLR_RXDRDY_Clear = @as(c_ulong, 1);
pub const UART_INTENCLR_NCTS_Pos = @as(c_ulong, 1);
pub const UART_INTENCLR_NCTS_Msk = @as(c_ulong, 0x1) << UART_INTENCLR_NCTS_Pos;
pub const UART_INTENCLR_NCTS_Disabled = @as(c_ulong, 0);
pub const UART_INTENCLR_NCTS_Enabled = @as(c_ulong, 1);
pub const UART_INTENCLR_NCTS_Clear = @as(c_ulong, 1);
pub const UART_INTENCLR_CTS_Pos = @as(c_ulong, 0);
pub const UART_INTENCLR_CTS_Msk = @as(c_ulong, 0x1) << UART_INTENCLR_CTS_Pos;
pub const UART_INTENCLR_CTS_Disabled = @as(c_ulong, 0);
pub const UART_INTENCLR_CTS_Enabled = @as(c_ulong, 1);
pub const UART_INTENCLR_CTS_Clear = @as(c_ulong, 1);
pub const UART_ERRORSRC_BREAK_Pos = @as(c_ulong, 3);
pub const UART_ERRORSRC_BREAK_Msk = @as(c_ulong, 0x1) << UART_ERRORSRC_BREAK_Pos;
pub const UART_ERRORSRC_BREAK_NotPresent = @as(c_ulong, 0);
pub const UART_ERRORSRC_BREAK_Present = @as(c_ulong, 1);
pub const UART_ERRORSRC_FRAMING_Pos = @as(c_ulong, 2);
pub const UART_ERRORSRC_FRAMING_Msk = @as(c_ulong, 0x1) << UART_ERRORSRC_FRAMING_Pos;
pub const UART_ERRORSRC_FRAMING_NotPresent = @as(c_ulong, 0);
pub const UART_ERRORSRC_FRAMING_Present = @as(c_ulong, 1);
pub const UART_ERRORSRC_PARITY_Pos = @as(c_ulong, 1);
pub const UART_ERRORSRC_PARITY_Msk = @as(c_ulong, 0x1) << UART_ERRORSRC_PARITY_Pos;
pub const UART_ERRORSRC_PARITY_NotPresent = @as(c_ulong, 0);
pub const UART_ERRORSRC_PARITY_Present = @as(c_ulong, 1);
pub const UART_ERRORSRC_OVERRUN_Pos = @as(c_ulong, 0);
pub const UART_ERRORSRC_OVERRUN_Msk = @as(c_ulong, 0x1) << UART_ERRORSRC_OVERRUN_Pos;
pub const UART_ERRORSRC_OVERRUN_NotPresent = @as(c_ulong, 0);
pub const UART_ERRORSRC_OVERRUN_Present = @as(c_ulong, 1);
pub const UART_ENABLE_ENABLE_Pos = @as(c_ulong, 0);
pub const UART_ENABLE_ENABLE_Msk = @as(c_ulong, 0xF) << UART_ENABLE_ENABLE_Pos;
pub const UART_ENABLE_ENABLE_Disabled = @as(c_ulong, 0);
pub const UART_ENABLE_ENABLE_Enabled = @as(c_ulong, 4);
pub const UART_PSEL_RTS_CONNECT_Pos = @as(c_ulong, 31);
pub const UART_PSEL_RTS_CONNECT_Msk = @as(c_ulong, 0x1) << UART_PSEL_RTS_CONNECT_Pos;
pub const UART_PSEL_RTS_CONNECT_Connected = @as(c_ulong, 0);
pub const UART_PSEL_RTS_CONNECT_Disconnected = @as(c_ulong, 1);
pub const UART_PSEL_RTS_PORT_Pos = @as(c_ulong, 5);
pub const UART_PSEL_RTS_PORT_Msk = @as(c_ulong, 0x1) << UART_PSEL_RTS_PORT_Pos;
pub const UART_PSEL_RTS_PIN_Pos = @as(c_ulong, 0);
pub const UART_PSEL_RTS_PIN_Msk = @as(c_ulong, 0x1F) << UART_PSEL_RTS_PIN_Pos;
pub const UART_PSEL_TXD_CONNECT_Pos = @as(c_ulong, 31);
pub const UART_PSEL_TXD_CONNECT_Msk = @as(c_ulong, 0x1) << UART_PSEL_TXD_CONNECT_Pos;
pub const UART_PSEL_TXD_CONNECT_Connected = @as(c_ulong, 0);
pub const UART_PSEL_TXD_CONNECT_Disconnected = @as(c_ulong, 1);
pub const UART_PSEL_TXD_PORT_Pos = @as(c_ulong, 5);
pub const UART_PSEL_TXD_PORT_Msk = @as(c_ulong, 0x1) << UART_PSEL_TXD_PORT_Pos;
pub const UART_PSEL_TXD_PIN_Pos = @as(c_ulong, 0);
pub const UART_PSEL_TXD_PIN_Msk = @as(c_ulong, 0x1F) << UART_PSEL_TXD_PIN_Pos;
pub const UART_PSEL_CTS_CONNECT_Pos = @as(c_ulong, 31);
pub const UART_PSEL_CTS_CONNECT_Msk = @as(c_ulong, 0x1) << UART_PSEL_CTS_CONNECT_Pos;
pub const UART_PSEL_CTS_CONNECT_Connected = @as(c_ulong, 0);
pub const UART_PSEL_CTS_CONNECT_Disconnected = @as(c_ulong, 1);
pub const UART_PSEL_CTS_PORT_Pos = @as(c_ulong, 5);
pub const UART_PSEL_CTS_PORT_Msk = @as(c_ulong, 0x1) << UART_PSEL_CTS_PORT_Pos;
pub const UART_PSEL_CTS_PIN_Pos = @as(c_ulong, 0);
pub const UART_PSEL_CTS_PIN_Msk = @as(c_ulong, 0x1F) << UART_PSEL_CTS_PIN_Pos;
pub const UART_PSEL_RXD_CONNECT_Pos = @as(c_ulong, 31);
pub const UART_PSEL_RXD_CONNECT_Msk = @as(c_ulong, 0x1) << UART_PSEL_RXD_CONNECT_Pos;
pub const UART_PSEL_RXD_CONNECT_Connected = @as(c_ulong, 0);
pub const UART_PSEL_RXD_CONNECT_Disconnected = @as(c_ulong, 1);
pub const UART_PSEL_RXD_PORT_Pos = @as(c_ulong, 5);
pub const UART_PSEL_RXD_PORT_Msk = @as(c_ulong, 0x1) << UART_PSEL_RXD_PORT_Pos;
pub const UART_PSEL_RXD_PIN_Pos = @as(c_ulong, 0);
pub const UART_PSEL_RXD_PIN_Msk = @as(c_ulong, 0x1F) << UART_PSEL_RXD_PIN_Pos;
pub const UART_RXD_RXD_Pos = @as(c_ulong, 0);
pub const UART_RXD_RXD_Msk = @as(c_ulong, 0xFF) << UART_RXD_RXD_Pos;
pub const UART_TXD_TXD_Pos = @as(c_ulong, 0);
pub const UART_TXD_TXD_Msk = @as(c_ulong, 0xFF) << UART_TXD_TXD_Pos;
pub const UART_BAUDRATE_BAUDRATE_Pos = @as(c_ulong, 0);
pub const UART_BAUDRATE_BAUDRATE_Msk = @as(c_ulong, 0xFFFFFFFF) << UART_BAUDRATE_BAUDRATE_Pos;
pub const UART_BAUDRATE_BAUDRATE_Baud1200 = @as(c_ulong, 0x0004F000);
pub const UART_BAUDRATE_BAUDRATE_Baud2400 = @as(c_ulong, 0x0009D000);
pub const UART_BAUDRATE_BAUDRATE_Baud4800 = @as(c_ulong, 0x0013B000);
pub const UART_BAUDRATE_BAUDRATE_Baud9600 = @as(c_ulong, 0x00275000);
pub const UART_BAUDRATE_BAUDRATE_Baud14400 = @as(c_ulong, 0x003B0000);
pub const UART_BAUDRATE_BAUDRATE_Baud19200 = @as(c_ulong, 0x004EA000);
pub const UART_BAUDRATE_BAUDRATE_Baud28800 = @as(c_ulong, 0x0075F000);
pub const UART_BAUDRATE_BAUDRATE_Baud31250 = @as(c_ulong, 0x00800000);
pub const UART_BAUDRATE_BAUDRATE_Baud38400 = @as(c_ulong, 0x009D5000);
pub const UART_BAUDRATE_BAUDRATE_Baud56000 = @as(c_ulong, 0x00E50000);
pub const UART_BAUDRATE_BAUDRATE_Baud57600 = @as(c_ulong, 0x00EBF000);
pub const UART_BAUDRATE_BAUDRATE_Baud76800 = @as(c_ulong, 0x013A9000);
pub const UART_BAUDRATE_BAUDRATE_Baud115200 = @as(c_ulong, 0x01D7E000);
pub const UART_BAUDRATE_BAUDRATE_Baud230400 = @as(c_ulong, 0x03AFB000);
pub const UART_BAUDRATE_BAUDRATE_Baud250000 = @as(c_ulong, 0x04000000);
pub const UART_BAUDRATE_BAUDRATE_Baud460800 = @as(c_ulong, 0x075F7000);
pub const UART_BAUDRATE_BAUDRATE_Baud921600 = @as(c_ulong, 0x0EBED000);
pub const UART_BAUDRATE_BAUDRATE_Baud1M = @as(c_ulong, 0x10000000);
pub const UART_CONFIG_STOP_Pos = @as(c_ulong, 4);
pub const UART_CONFIG_STOP_Msk = @as(c_ulong, 0x1) << UART_CONFIG_STOP_Pos;
pub const UART_CONFIG_STOP_One = @as(c_ulong, 0);
pub const UART_CONFIG_STOP_Two = @as(c_ulong, 1);
pub const UART_CONFIG_PARITY_Pos = @as(c_ulong, 1);
pub const UART_CONFIG_PARITY_Msk = @as(c_ulong, 0x7) << UART_CONFIG_PARITY_Pos;
pub const UART_CONFIG_PARITY_Excluded = @as(c_ulong, 0x0);
pub const UART_CONFIG_PARITY_Included = @as(c_ulong, 0x7);
pub const UART_CONFIG_HWFC_Pos = @as(c_ulong, 0);
pub const UART_CONFIG_HWFC_Msk = @as(c_ulong, 0x1) << UART_CONFIG_HWFC_Pos;
pub const UART_CONFIG_HWFC_Disabled = @as(c_ulong, 0);
pub const UART_CONFIG_HWFC_Enabled = @as(c_ulong, 1);
pub const UARTE_TASKS_STARTRX_TASKS_STARTRX_Pos = @as(c_ulong, 0);
pub const UARTE_TASKS_STARTRX_TASKS_STARTRX_Msk = @as(c_ulong, 0x1) << UARTE_TASKS_STARTRX_TASKS_STARTRX_Pos;
pub const UARTE_TASKS_STARTRX_TASKS_STARTRX_Trigger = @as(c_ulong, 1);
pub const UARTE_TASKS_STOPRX_TASKS_STOPRX_Pos = @as(c_ulong, 0);
pub const UARTE_TASKS_STOPRX_TASKS_STOPRX_Msk = @as(c_ulong, 0x1) << UARTE_TASKS_STOPRX_TASKS_STOPRX_Pos;
pub const UARTE_TASKS_STOPRX_TASKS_STOPRX_Trigger = @as(c_ulong, 1);
pub const UARTE_TASKS_STARTTX_TASKS_STARTTX_Pos = @as(c_ulong, 0);
pub const UARTE_TASKS_STARTTX_TASKS_STARTTX_Msk = @as(c_ulong, 0x1) << UARTE_TASKS_STARTTX_TASKS_STARTTX_Pos;
pub const UARTE_TASKS_STARTTX_TASKS_STARTTX_Trigger = @as(c_ulong, 1);
pub const UARTE_TASKS_STOPTX_TASKS_STOPTX_Pos = @as(c_ulong, 0);
pub const UARTE_TASKS_STOPTX_TASKS_STOPTX_Msk = @as(c_ulong, 0x1) << UARTE_TASKS_STOPTX_TASKS_STOPTX_Pos;
pub const UARTE_TASKS_STOPTX_TASKS_STOPTX_Trigger = @as(c_ulong, 1);
pub const UARTE_TASKS_FLUSHRX_TASKS_FLUSHRX_Pos = @as(c_ulong, 0);
pub const UARTE_TASKS_FLUSHRX_TASKS_FLUSHRX_Msk = @as(c_ulong, 0x1) << UARTE_TASKS_FLUSHRX_TASKS_FLUSHRX_Pos;
pub const UARTE_TASKS_FLUSHRX_TASKS_FLUSHRX_Trigger = @as(c_ulong, 1);
pub const UARTE_EVENTS_CTS_EVENTS_CTS_Pos = @as(c_ulong, 0);
pub const UARTE_EVENTS_CTS_EVENTS_CTS_Msk = @as(c_ulong, 0x1) << UARTE_EVENTS_CTS_EVENTS_CTS_Pos;
pub const UARTE_EVENTS_CTS_EVENTS_CTS_NotGenerated = @as(c_ulong, 0);
pub const UARTE_EVENTS_CTS_EVENTS_CTS_Generated = @as(c_ulong, 1);
pub const UARTE_EVENTS_NCTS_EVENTS_NCTS_Pos = @as(c_ulong, 0);
pub const UARTE_EVENTS_NCTS_EVENTS_NCTS_Msk = @as(c_ulong, 0x1) << UARTE_EVENTS_NCTS_EVENTS_NCTS_Pos;
pub const UARTE_EVENTS_NCTS_EVENTS_NCTS_NotGenerated = @as(c_ulong, 0);
pub const UARTE_EVENTS_NCTS_EVENTS_NCTS_Generated = @as(c_ulong, 1);
pub const UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_Pos = @as(c_ulong, 0);
pub const UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_Msk = @as(c_ulong, 0x1) << UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_Pos;
pub const UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_NotGenerated = @as(c_ulong, 0);
pub const UARTE_EVENTS_RXDRDY_EVENTS_RXDRDY_Generated = @as(c_ulong, 1);
pub const UARTE_EVENTS_ENDRX_EVENTS_ENDRX_Pos = @as(c_ulong, 0);
pub const UARTE_EVENTS_ENDRX_EVENTS_ENDRX_Msk = @as(c_ulong, 0x1) << UARTE_EVENTS_ENDRX_EVENTS_ENDRX_Pos;
pub const UARTE_EVENTS_ENDRX_EVENTS_ENDRX_NotGenerated = @as(c_ulong, 0);
pub const UARTE_EVENTS_ENDRX_EVENTS_ENDRX_Generated = @as(c_ulong, 1);
pub const UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_Pos = @as(c_ulong, 0);
pub const UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_Msk = @as(c_ulong, 0x1) << UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_Pos;
pub const UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_NotGenerated = @as(c_ulong, 0);
pub const UARTE_EVENTS_TXDRDY_EVENTS_TXDRDY_Generated = @as(c_ulong, 1);
pub const UARTE_EVENTS_ENDTX_EVENTS_ENDTX_Pos = @as(c_ulong, 0);
pub const UARTE_EVENTS_ENDTX_EVENTS_ENDTX_Msk = @as(c_ulong, 0x1) << UARTE_EVENTS_ENDTX_EVENTS_ENDTX_Pos;
pub const UARTE_EVENTS_ENDTX_EVENTS_ENDTX_NotGenerated = @as(c_ulong, 0);
pub const UARTE_EVENTS_ENDTX_EVENTS_ENDTX_Generated = @as(c_ulong, 1);
pub const UARTE_EVENTS_ERROR_EVENTS_ERROR_Pos = @as(c_ulong, 0);
pub const UARTE_EVENTS_ERROR_EVENTS_ERROR_Msk = @as(c_ulong, 0x1) << UARTE_EVENTS_ERROR_EVENTS_ERROR_Pos;
pub const UARTE_EVENTS_ERROR_EVENTS_ERROR_NotGenerated = @as(c_ulong, 0);
pub const UARTE_EVENTS_ERROR_EVENTS_ERROR_Generated = @as(c_ulong, 1);
pub const UARTE_EVENTS_RXTO_EVENTS_RXTO_Pos = @as(c_ulong, 0);
pub const UARTE_EVENTS_RXTO_EVENTS_RXTO_Msk = @as(c_ulong, 0x1) << UARTE_EVENTS_RXTO_EVENTS_RXTO_Pos;
pub const UARTE_EVENTS_RXTO_EVENTS_RXTO_NotGenerated = @as(c_ulong, 0);
pub const UARTE_EVENTS_RXTO_EVENTS_RXTO_Generated = @as(c_ulong, 1);
pub const UARTE_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Pos = @as(c_ulong, 0);
pub const UARTE_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Msk = @as(c_ulong, 0x1) << UARTE_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Pos;
pub const UARTE_EVENTS_RXSTARTED_EVENTS_RXSTARTED_NotGenerated = @as(c_ulong, 0);
pub const UARTE_EVENTS_RXSTARTED_EVENTS_RXSTARTED_Generated = @as(c_ulong, 1);
pub const UARTE_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Pos = @as(c_ulong, 0);
pub const UARTE_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Msk = @as(c_ulong, 0x1) << UARTE_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Pos;
pub const UARTE_EVENTS_TXSTARTED_EVENTS_TXSTARTED_NotGenerated = @as(c_ulong, 0);
pub const UARTE_EVENTS_TXSTARTED_EVENTS_TXSTARTED_Generated = @as(c_ulong, 1);
pub const UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_Pos = @as(c_ulong, 0);
pub const UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_Msk = @as(c_ulong, 0x1) << UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_Pos;
pub const UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_NotGenerated = @as(c_ulong, 0);
pub const UARTE_EVENTS_TXSTOPPED_EVENTS_TXSTOPPED_Generated = @as(c_ulong, 1);
pub const UARTE_SHORTS_ENDRX_STOPRX_Pos = @as(c_ulong, 6);
pub const UARTE_SHORTS_ENDRX_STOPRX_Msk = @as(c_ulong, 0x1) << UARTE_SHORTS_ENDRX_STOPRX_Pos;
pub const UARTE_SHORTS_ENDRX_STOPRX_Disabled = @as(c_ulong, 0);
pub const UARTE_SHORTS_ENDRX_STOPRX_Enabled = @as(c_ulong, 1);
pub const UARTE_SHORTS_ENDRX_STARTRX_Pos = @as(c_ulong, 5);
pub const UARTE_SHORTS_ENDRX_STARTRX_Msk = @as(c_ulong, 0x1) << UARTE_SHORTS_ENDRX_STARTRX_Pos;
pub const UARTE_SHORTS_ENDRX_STARTRX_Disabled = @as(c_ulong, 0);
pub const UARTE_SHORTS_ENDRX_STARTRX_Enabled = @as(c_ulong, 1);
pub const UARTE_INTEN_TXSTOPPED_Pos = @as(c_ulong, 22);
pub const UARTE_INTEN_TXSTOPPED_Msk = @as(c_ulong, 0x1) << UARTE_INTEN_TXSTOPPED_Pos;
pub const UARTE_INTEN_TXSTOPPED_Disabled = @as(c_ulong, 0);
pub const UARTE_INTEN_TXSTOPPED_Enabled = @as(c_ulong, 1);
pub const UARTE_INTEN_TXSTARTED_Pos = @as(c_ulong, 20);
pub const UARTE_INTEN_TXSTARTED_Msk = @as(c_ulong, 0x1) << UARTE_INTEN_TXSTARTED_Pos;
pub const UARTE_INTEN_TXSTARTED_Disabled = @as(c_ulong, 0);
pub const UARTE_INTEN_TXSTARTED_Enabled = @as(c_ulong, 1);
pub const UARTE_INTEN_RXSTARTED_Pos = @as(c_ulong, 19);
pub const UARTE_INTEN_RXSTARTED_Msk = @as(c_ulong, 0x1) << UARTE_INTEN_RXSTARTED_Pos;
pub const UARTE_INTEN_RXSTARTED_Disabled = @as(c_ulong, 0);
pub const UARTE_INTEN_RXSTARTED_Enabled = @as(c_ulong, 1);
pub const UARTE_INTEN_RXTO_Pos = @as(c_ulong, 17);
pub const UARTE_INTEN_RXTO_Msk = @as(c_ulong, 0x1) << UARTE_INTEN_RXTO_Pos;
pub const UARTE_INTEN_RXTO_Disabled = @as(c_ulong, 0);
pub const UARTE_INTEN_RXTO_Enabled = @as(c_ulong, 1);
pub const UARTE_INTEN_ERROR_Pos = @as(c_ulong, 9);
pub const UARTE_INTEN_ERROR_Msk = @as(c_ulong, 0x1) << UARTE_INTEN_ERROR_Pos;
pub const UARTE_INTEN_ERROR_Disabled = @as(c_ulong, 0);
pub const UARTE_INTEN_ERROR_Enabled = @as(c_ulong, 1);
pub const UARTE_INTEN_ENDTX_Pos = @as(c_ulong, 8);
pub const UARTE_INTEN_ENDTX_Msk = @as(c_ulong, 0x1) << UARTE_INTEN_ENDTX_Pos;
pub const UARTE_INTEN_ENDTX_Disabled = @as(c_ulong, 0);
pub const UARTE_INTEN_ENDTX_Enabled = @as(c_ulong, 1);
pub const UARTE_INTEN_TXDRDY_Pos = @as(c_ulong, 7);
pub const UARTE_INTEN_TXDRDY_Msk = @as(c_ulong, 0x1) << UARTE_INTEN_TXDRDY_Pos;
pub const UARTE_INTEN_TXDRDY_Disabled = @as(c_ulong, 0);
pub const UARTE_INTEN_TXDRDY_Enabled = @as(c_ulong, 1);
pub const UARTE_INTEN_ENDRX_Pos = @as(c_ulong, 4);
pub const UARTE_INTEN_ENDRX_Msk = @as(c_ulong, 0x1) << UARTE_INTEN_ENDRX_Pos;
pub const UARTE_INTEN_ENDRX_Disabled = @as(c_ulong, 0);
pub const UARTE_INTEN_ENDRX_Enabled = @as(c_ulong, 1);
pub const UARTE_INTEN_RXDRDY_Pos = @as(c_ulong, 2);
pub const UARTE_INTEN_RXDRDY_Msk = @as(c_ulong, 0x1) << UARTE_INTEN_RXDRDY_Pos;
pub const UARTE_INTEN_RXDRDY_Disabled = @as(c_ulong, 0);
pub const UARTE_INTEN_RXDRDY_Enabled = @as(c_ulong, 1);
pub const UARTE_INTEN_NCTS_Pos = @as(c_ulong, 1);
pub const UARTE_INTEN_NCTS_Msk = @as(c_ulong, 0x1) << UARTE_INTEN_NCTS_Pos;
pub const UARTE_INTEN_NCTS_Disabled = @as(c_ulong, 0);
pub const UARTE_INTEN_NCTS_Enabled = @as(c_ulong, 1);
pub const UARTE_INTEN_CTS_Pos = @as(c_ulong, 0);
pub const UARTE_INTEN_CTS_Msk = @as(c_ulong, 0x1) << UARTE_INTEN_CTS_Pos;
pub const UARTE_INTEN_CTS_Disabled = @as(c_ulong, 0);
pub const UARTE_INTEN_CTS_Enabled = @as(c_ulong, 1);
pub const UARTE_INTENSET_TXSTOPPED_Pos = @as(c_ulong, 22);
pub const UARTE_INTENSET_TXSTOPPED_Msk = @as(c_ulong, 0x1) << UARTE_INTENSET_TXSTOPPED_Pos;
pub const UARTE_INTENSET_TXSTOPPED_Disabled = @as(c_ulong, 0);
pub const UARTE_INTENSET_TXSTOPPED_Enabled = @as(c_ulong, 1);
pub const UARTE_INTENSET_TXSTOPPED_Set = @as(c_ulong, 1);
pub const UARTE_INTENSET_TXSTARTED_Pos = @as(c_ulong, 20);
pub const UARTE_INTENSET_TXSTARTED_Msk = @as(c_ulong, 0x1) << UARTE_INTENSET_TXSTARTED_Pos;
pub const UARTE_INTENSET_TXSTARTED_Disabled = @as(c_ulong, 0);
pub const UARTE_INTENSET_TXSTARTED_Enabled = @as(c_ulong, 1);
pub const UARTE_INTENSET_TXSTARTED_Set = @as(c_ulong, 1);
pub const UARTE_INTENSET_RXSTARTED_Pos = @as(c_ulong, 19);
pub const UARTE_INTENSET_RXSTARTED_Msk = @as(c_ulong, 0x1) << UARTE_INTENSET_RXSTARTED_Pos;
pub const UARTE_INTENSET_RXSTARTED_Disabled = @as(c_ulong, 0);
pub const UARTE_INTENSET_RXSTARTED_Enabled = @as(c_ulong, 1);
pub const UARTE_INTENSET_RXSTARTED_Set = @as(c_ulong, 1);
pub const UARTE_INTENSET_RXTO_Pos = @as(c_ulong, 17);
pub const UARTE_INTENSET_RXTO_Msk = @as(c_ulong, 0x1) << UARTE_INTENSET_RXTO_Pos;
pub const UARTE_INTENSET_RXTO_Disabled = @as(c_ulong, 0);
pub const UARTE_INTENSET_RXTO_Enabled = @as(c_ulong, 1);
pub const UARTE_INTENSET_RXTO_Set = @as(c_ulong, 1);
pub const UARTE_INTENSET_ERROR_Pos = @as(c_ulong, 9);
pub const UARTE_INTENSET_ERROR_Msk = @as(c_ulong, 0x1) << UARTE_INTENSET_ERROR_Pos;
pub const UARTE_INTENSET_ERROR_Disabled = @as(c_ulong, 0);
pub const UARTE_INTENSET_ERROR_Enabled = @as(c_ulong, 1);
pub const UARTE_INTENSET_ERROR_Set = @as(c_ulong, 1);
pub const UARTE_INTENSET_ENDTX_Pos = @as(c_ulong, 8);
pub const UARTE_INTENSET_ENDTX_Msk = @as(c_ulong, 0x1) << UARTE_INTENSET_ENDTX_Pos;
pub const UARTE_INTENSET_ENDTX_Disabled = @as(c_ulong, 0);
pub const UARTE_INTENSET_ENDTX_Enabled = @as(c_ulong, 1);
pub const UARTE_INTENSET_ENDTX_Set = @as(c_ulong, 1);
pub const UARTE_INTENSET_TXDRDY_Pos = @as(c_ulong, 7);
pub const UARTE_INTENSET_TXDRDY_Msk = @as(c_ulong, 0x1) << UARTE_INTENSET_TXDRDY_Pos;
pub const UARTE_INTENSET_TXDRDY_Disabled = @as(c_ulong, 0);
pub const UARTE_INTENSET_TXDRDY_Enabled = @as(c_ulong, 1);
pub const UARTE_INTENSET_TXDRDY_Set = @as(c_ulong, 1);
pub const UARTE_INTENSET_ENDRX_Pos = @as(c_ulong, 4);
pub const UARTE_INTENSET_ENDRX_Msk = @as(c_ulong, 0x1) << UARTE_INTENSET_ENDRX_Pos;
pub const UARTE_INTENSET_ENDRX_Disabled = @as(c_ulong, 0);
pub const UARTE_INTENSET_ENDRX_Enabled = @as(c_ulong, 1);
pub const UARTE_INTENSET_ENDRX_Set = @as(c_ulong, 1);
pub const UARTE_INTENSET_RXDRDY_Pos = @as(c_ulong, 2);
pub const UARTE_INTENSET_RXDRDY_Msk = @as(c_ulong, 0x1) << UARTE_INTENSET_RXDRDY_Pos;
pub const UARTE_INTENSET_RXDRDY_Disabled = @as(c_ulong, 0);
pub const UARTE_INTENSET_RXDRDY_Enabled = @as(c_ulong, 1);
pub const UARTE_INTENSET_RXDRDY_Set = @as(c_ulong, 1);
pub const UARTE_INTENSET_NCTS_Pos = @as(c_ulong, 1);
pub const UARTE_INTENSET_NCTS_Msk = @as(c_ulong, 0x1) << UARTE_INTENSET_NCTS_Pos;
pub const UARTE_INTENSET_NCTS_Disabled = @as(c_ulong, 0);
pub const UARTE_INTENSET_NCTS_Enabled = @as(c_ulong, 1);
pub const UARTE_INTENSET_NCTS_Set = @as(c_ulong, 1);
pub const UARTE_INTENSET_CTS_Pos = @as(c_ulong, 0);
pub const UARTE_INTENSET_CTS_Msk = @as(c_ulong, 0x1) << UARTE_INTENSET_CTS_Pos;
pub const UARTE_INTENSET_CTS_Disabled = @as(c_ulong, 0);
pub const UARTE_INTENSET_CTS_Enabled = @as(c_ulong, 1);
pub const UARTE_INTENSET_CTS_Set = @as(c_ulong, 1);
pub const UARTE_INTENCLR_TXSTOPPED_Pos = @as(c_ulong, 22);
pub const UARTE_INTENCLR_TXSTOPPED_Msk = @as(c_ulong, 0x1) << UARTE_INTENCLR_TXSTOPPED_Pos;
pub const UARTE_INTENCLR_TXSTOPPED_Disabled = @as(c_ulong, 0);
pub const UARTE_INTENCLR_TXSTOPPED_Enabled = @as(c_ulong, 1);
pub const UARTE_INTENCLR_TXSTOPPED_Clear = @as(c_ulong, 1);
pub const UARTE_INTENCLR_TXSTARTED_Pos = @as(c_ulong, 20);
pub const UARTE_INTENCLR_TXSTARTED_Msk = @as(c_ulong, 0x1) << UARTE_INTENCLR_TXSTARTED_Pos;
pub const UARTE_INTENCLR_TXSTARTED_Disabled = @as(c_ulong, 0);
pub const UARTE_INTENCLR_TXSTARTED_Enabled = @as(c_ulong, 1);
pub const UARTE_INTENCLR_TXSTARTED_Clear = @as(c_ulong, 1);
pub const UARTE_INTENCLR_RXSTARTED_Pos = @as(c_ulong, 19);
pub const UARTE_INTENCLR_RXSTARTED_Msk = @as(c_ulong, 0x1) << UARTE_INTENCLR_RXSTARTED_Pos;
pub const UARTE_INTENCLR_RXSTARTED_Disabled = @as(c_ulong, 0);
pub const UARTE_INTENCLR_RXSTARTED_Enabled = @as(c_ulong, 1);
pub const UARTE_INTENCLR_RXSTARTED_Clear = @as(c_ulong, 1);
pub const UARTE_INTENCLR_RXTO_Pos = @as(c_ulong, 17);
pub const UARTE_INTENCLR_RXTO_Msk = @as(c_ulong, 0x1) << UARTE_INTENCLR_RXTO_Pos;
pub const UARTE_INTENCLR_RXTO_Disabled = @as(c_ulong, 0);
pub const UARTE_INTENCLR_RXTO_Enabled = @as(c_ulong, 1);
pub const UARTE_INTENCLR_RXTO_Clear = @as(c_ulong, 1);
pub const UARTE_INTENCLR_ERROR_Pos = @as(c_ulong, 9);
pub const UARTE_INTENCLR_ERROR_Msk = @as(c_ulong, 0x1) << UARTE_INTENCLR_ERROR_Pos;
pub const UARTE_INTENCLR_ERROR_Disabled = @as(c_ulong, 0);
pub const UARTE_INTENCLR_ERROR_Enabled = @as(c_ulong, 1);
pub const UARTE_INTENCLR_ERROR_Clear = @as(c_ulong, 1);
pub const UARTE_INTENCLR_ENDTX_Pos = @as(c_ulong, 8);
pub const UARTE_INTENCLR_ENDTX_Msk = @as(c_ulong, 0x1) << UARTE_INTENCLR_ENDTX_Pos;
pub const UARTE_INTENCLR_ENDTX_Disabled = @as(c_ulong, 0);
pub const UARTE_INTENCLR_ENDTX_Enabled = @as(c_ulong, 1);
pub const UARTE_INTENCLR_ENDTX_Clear = @as(c_ulong, 1);
pub const UARTE_INTENCLR_TXDRDY_Pos = @as(c_ulong, 7);
pub const UARTE_INTENCLR_TXDRDY_Msk = @as(c_ulong, 0x1) << UARTE_INTENCLR_TXDRDY_Pos;
pub const UARTE_INTENCLR_TXDRDY_Disabled = @as(c_ulong, 0);
pub const UARTE_INTENCLR_TXDRDY_Enabled = @as(c_ulong, 1);
pub const UARTE_INTENCLR_TXDRDY_Clear = @as(c_ulong, 1);
pub const UARTE_INTENCLR_ENDRX_Pos = @as(c_ulong, 4);
pub const UARTE_INTENCLR_ENDRX_Msk = @as(c_ulong, 0x1) << UARTE_INTENCLR_ENDRX_Pos;
pub const UARTE_INTENCLR_ENDRX_Disabled = @as(c_ulong, 0);
pub const UARTE_INTENCLR_ENDRX_Enabled = @as(c_ulong, 1);
pub const UARTE_INTENCLR_ENDRX_Clear = @as(c_ulong, 1);
pub const UARTE_INTENCLR_RXDRDY_Pos = @as(c_ulong, 2);
pub const UARTE_INTENCLR_RXDRDY_Msk = @as(c_ulong, 0x1) << UARTE_INTENCLR_RXDRDY_Pos;
pub const UARTE_INTENCLR_RXDRDY_Disabled = @as(c_ulong, 0);
pub const UARTE_INTENCLR_RXDRDY_Enabled = @as(c_ulong, 1);
pub const UARTE_INTENCLR_RXDRDY_Clear = @as(c_ulong, 1);
pub const UARTE_INTENCLR_NCTS_Pos = @as(c_ulong, 1);
pub const UARTE_INTENCLR_NCTS_Msk = @as(c_ulong, 0x1) << UARTE_INTENCLR_NCTS_Pos;
pub const UARTE_INTENCLR_NCTS_Disabled = @as(c_ulong, 0);
pub const UARTE_INTENCLR_NCTS_Enabled = @as(c_ulong, 1);
pub const UARTE_INTENCLR_NCTS_Clear = @as(c_ulong, 1);
pub const UARTE_INTENCLR_CTS_Pos = @as(c_ulong, 0);
pub const UARTE_INTENCLR_CTS_Msk = @as(c_ulong, 0x1) << UARTE_INTENCLR_CTS_Pos;
pub const UARTE_INTENCLR_CTS_Disabled = @as(c_ulong, 0);
pub const UARTE_INTENCLR_CTS_Enabled = @as(c_ulong, 1);
pub const UARTE_INTENCLR_CTS_Clear = @as(c_ulong, 1);
pub const UARTE_ERRORSRC_BREAK_Pos = @as(c_ulong, 3);
pub const UARTE_ERRORSRC_BREAK_Msk = @as(c_ulong, 0x1) << UARTE_ERRORSRC_BREAK_Pos;
pub const UARTE_ERRORSRC_BREAK_NotPresent = @as(c_ulong, 0);
pub const UARTE_ERRORSRC_BREAK_Present = @as(c_ulong, 1);
pub const UARTE_ERRORSRC_FRAMING_Pos = @as(c_ulong, 2);
pub const UARTE_ERRORSRC_FRAMING_Msk = @as(c_ulong, 0x1) << UARTE_ERRORSRC_FRAMING_Pos;
pub const UARTE_ERRORSRC_FRAMING_NotPresent = @as(c_ulong, 0);
pub const UARTE_ERRORSRC_FRAMING_Present = @as(c_ulong, 1);
pub const UARTE_ERRORSRC_PARITY_Pos = @as(c_ulong, 1);
pub const UARTE_ERRORSRC_PARITY_Msk = @as(c_ulong, 0x1) << UARTE_ERRORSRC_PARITY_Pos;
pub const UARTE_ERRORSRC_PARITY_NotPresent = @as(c_ulong, 0);
pub const UARTE_ERRORSRC_PARITY_Present = @as(c_ulong, 1);
pub const UARTE_ERRORSRC_OVERRUN_Pos = @as(c_ulong, 0);
pub const UARTE_ERRORSRC_OVERRUN_Msk = @as(c_ulong, 0x1) << UARTE_ERRORSRC_OVERRUN_Pos;
pub const UARTE_ERRORSRC_OVERRUN_NotPresent = @as(c_ulong, 0);
pub const UARTE_ERRORSRC_OVERRUN_Present = @as(c_ulong, 1);
pub const UARTE_ENABLE_ENABLE_Pos = @as(c_ulong, 0);
pub const UARTE_ENABLE_ENABLE_Msk = @as(c_ulong, 0xF) << UARTE_ENABLE_ENABLE_Pos;
pub const UARTE_ENABLE_ENABLE_Disabled = @as(c_ulong, 0);
pub const UARTE_ENABLE_ENABLE_Enabled = @as(c_ulong, 8);
pub const UARTE_PSEL_RTS_CONNECT_Pos = @as(c_ulong, 31);
pub const UARTE_PSEL_RTS_CONNECT_Msk = @as(c_ulong, 0x1) << UARTE_PSEL_RTS_CONNECT_Pos;
pub const UARTE_PSEL_RTS_CONNECT_Connected = @as(c_ulong, 0);
pub const UARTE_PSEL_RTS_CONNECT_Disconnected = @as(c_ulong, 1);
pub const UARTE_PSEL_RTS_PORT_Pos = @as(c_ulong, 5);
pub const UARTE_PSEL_RTS_PORT_Msk = @as(c_ulong, 0x1) << UARTE_PSEL_RTS_PORT_Pos;
pub const UARTE_PSEL_RTS_PIN_Pos = @as(c_ulong, 0);
pub const UARTE_PSEL_RTS_PIN_Msk = @as(c_ulong, 0x1F) << UARTE_PSEL_RTS_PIN_Pos;
pub const UARTE_PSEL_TXD_CONNECT_Pos = @as(c_ulong, 31);
pub const UARTE_PSEL_TXD_CONNECT_Msk = @as(c_ulong, 0x1) << UARTE_PSEL_TXD_CONNECT_Pos;
pub const UARTE_PSEL_TXD_CONNECT_Connected = @as(c_ulong, 0);
pub const UARTE_PSEL_TXD_CONNECT_Disconnected = @as(c_ulong, 1);
pub const UARTE_PSEL_TXD_PORT_Pos = @as(c_ulong, 5);
pub const UARTE_PSEL_TXD_PORT_Msk = @as(c_ulong, 0x1) << UARTE_PSEL_TXD_PORT_Pos;
pub const UARTE_PSEL_TXD_PIN_Pos = @as(c_ulong, 0);
pub const UARTE_PSEL_TXD_PIN_Msk = @as(c_ulong, 0x1F) << UARTE_PSEL_TXD_PIN_Pos;
pub const UARTE_PSEL_CTS_CONNECT_Pos = @as(c_ulong, 31);
pub const UARTE_PSEL_CTS_CONNECT_Msk = @as(c_ulong, 0x1) << UARTE_PSEL_CTS_CONNECT_Pos;
pub const UARTE_PSEL_CTS_CONNECT_Connected = @as(c_ulong, 0);
pub const UARTE_PSEL_CTS_CONNECT_Disconnected = @as(c_ulong, 1);
pub const UARTE_PSEL_CTS_PORT_Pos = @as(c_ulong, 5);
pub const UARTE_PSEL_CTS_PORT_Msk = @as(c_ulong, 0x1) << UARTE_PSEL_CTS_PORT_Pos;
pub const UARTE_PSEL_CTS_PIN_Pos = @as(c_ulong, 0);
pub const UARTE_PSEL_CTS_PIN_Msk = @as(c_ulong, 0x1F) << UARTE_PSEL_CTS_PIN_Pos;
pub const UARTE_PSEL_RXD_CONNECT_Pos = @as(c_ulong, 31);
pub const UARTE_PSEL_RXD_CONNECT_Msk = @as(c_ulong, 0x1) << UARTE_PSEL_RXD_CONNECT_Pos;
pub const UARTE_PSEL_RXD_CONNECT_Connected = @as(c_ulong, 0);
pub const UARTE_PSEL_RXD_CONNECT_Disconnected = @as(c_ulong, 1);
pub const UARTE_PSEL_RXD_PORT_Pos = @as(c_ulong, 5);
pub const UARTE_PSEL_RXD_PORT_Msk = @as(c_ulong, 0x1) << UARTE_PSEL_RXD_PORT_Pos;
pub const UARTE_PSEL_RXD_PIN_Pos = @as(c_ulong, 0);
pub const UARTE_PSEL_RXD_PIN_Msk = @as(c_ulong, 0x1F) << UARTE_PSEL_RXD_PIN_Pos;
pub const UARTE_BAUDRATE_BAUDRATE_Pos = @as(c_ulong, 0);
pub const UARTE_BAUDRATE_BAUDRATE_Msk = @as(c_ulong, 0xFFFFFFFF) << UARTE_BAUDRATE_BAUDRATE_Pos;
pub const UARTE_BAUDRATE_BAUDRATE_Baud1200 = @as(c_ulong, 0x0004F000);
pub const UARTE_BAUDRATE_BAUDRATE_Baud2400 = @as(c_ulong, 0x0009D000);
pub const UARTE_BAUDRATE_BAUDRATE_Baud4800 = @as(c_ulong, 0x0013B000);
pub const UARTE_BAUDRATE_BAUDRATE_Baud9600 = @as(c_ulong, 0x00275000);
pub const UARTE_BAUDRATE_BAUDRATE_Baud14400 = @as(c_ulong, 0x003AF000);
pub const UARTE_BAUDRATE_BAUDRATE_Baud19200 = @as(c_ulong, 0x004EA000);
pub const UARTE_BAUDRATE_BAUDRATE_Baud28800 = @as(c_ulong, 0x0075C000);
pub const UARTE_BAUDRATE_BAUDRATE_Baud31250 = @as(c_ulong, 0x00800000);
pub const UARTE_BAUDRATE_BAUDRATE_Baud38400 = @as(c_ulong, 0x009D0000);
pub const UARTE_BAUDRATE_BAUDRATE_Baud56000 = @as(c_ulong, 0x00E50000);
pub const UARTE_BAUDRATE_BAUDRATE_Baud57600 = @as(c_ulong, 0x00EB0000);
pub const UARTE_BAUDRATE_BAUDRATE_Baud76800 = @as(c_ulong, 0x013A9000);
pub const UARTE_BAUDRATE_BAUDRATE_Baud115200 = @as(c_ulong, 0x01D60000);
pub const UARTE_BAUDRATE_BAUDRATE_Baud230400 = @as(c_ulong, 0x03B00000);
pub const UARTE_BAUDRATE_BAUDRATE_Baud250000 = @as(c_ulong, 0x04000000);
pub const UARTE_BAUDRATE_BAUDRATE_Baud460800 = @as(c_ulong, 0x07400000);
pub const UARTE_BAUDRATE_BAUDRATE_Baud921600 = @as(c_ulong, 0x0F000000);
pub const UARTE_BAUDRATE_BAUDRATE_Baud1M = @as(c_ulong, 0x10000000);
pub const UARTE_RXD_PTR_PTR_Pos = @as(c_ulong, 0);
pub const UARTE_RXD_PTR_PTR_Msk = @as(c_ulong, 0xFFFFFFFF) << UARTE_RXD_PTR_PTR_Pos;
pub const UARTE_RXD_MAXCNT_MAXCNT_Pos = @as(c_ulong, 0);
pub const UARTE_RXD_MAXCNT_MAXCNT_Msk = @as(c_ulong, 0xFFFF) << UARTE_RXD_MAXCNT_MAXCNT_Pos;
pub const UARTE_RXD_AMOUNT_AMOUNT_Pos = @as(c_ulong, 0);
pub const UARTE_RXD_AMOUNT_AMOUNT_Msk = @as(c_ulong, 0xFFFF) << UARTE_RXD_AMOUNT_AMOUNT_Pos;
pub const UARTE_TXD_PTR_PTR_Pos = @as(c_ulong, 0);
pub const UARTE_TXD_PTR_PTR_Msk = @as(c_ulong, 0xFFFFFFFF) << UARTE_TXD_PTR_PTR_Pos;
pub const UARTE_TXD_MAXCNT_MAXCNT_Pos = @as(c_ulong, 0);
pub const UARTE_TXD_MAXCNT_MAXCNT_Msk = @as(c_ulong, 0xFFFF) << UARTE_TXD_MAXCNT_MAXCNT_Pos;
pub const UARTE_TXD_AMOUNT_AMOUNT_Pos = @as(c_ulong, 0);
pub const UARTE_TXD_AMOUNT_AMOUNT_Msk = @as(c_ulong, 0xFFFF) << UARTE_TXD_AMOUNT_AMOUNT_Pos;
pub const UARTE_CONFIG_STOP_Pos = @as(c_ulong, 4);
pub const UARTE_CONFIG_STOP_Msk = @as(c_ulong, 0x1) << UARTE_CONFIG_STOP_Pos;
pub const UARTE_CONFIG_STOP_One = @as(c_ulong, 0);
pub const UARTE_CONFIG_STOP_Two = @as(c_ulong, 1);
pub const UARTE_CONFIG_PARITY_Pos = @as(c_ulong, 1);
pub const UARTE_CONFIG_PARITY_Msk = @as(c_ulong, 0x7) << UARTE_CONFIG_PARITY_Pos;
pub const UARTE_CONFIG_PARITY_Excluded = @as(c_ulong, 0x0);
pub const UARTE_CONFIG_PARITY_Included = @as(c_ulong, 0x7);
pub const UARTE_CONFIG_HWFC_Pos = @as(c_ulong, 0);
pub const UARTE_CONFIG_HWFC_Msk = @as(c_ulong, 0x1) << UARTE_CONFIG_HWFC_Pos;
pub const UARTE_CONFIG_HWFC_Disabled = @as(c_ulong, 0);
pub const UARTE_CONFIG_HWFC_Enabled = @as(c_ulong, 1);
pub const UICR_NRFFW_NRFFW_Pos = @as(c_ulong, 0);
pub const UICR_NRFFW_NRFFW_Msk = @as(c_ulong, 0xFFFFFFFF) << UICR_NRFFW_NRFFW_Pos;
pub const UICR_NRFHW_NRFHW_Pos = @as(c_ulong, 0);
pub const UICR_NRFHW_NRFHW_Msk = @as(c_ulong, 0xFFFFFFFF) << UICR_NRFHW_NRFHW_Pos;
pub const UICR_CUSTOMER_CUSTOMER_Pos = @as(c_ulong, 0);
pub const UICR_CUSTOMER_CUSTOMER_Msk = @as(c_ulong, 0xFFFFFFFF) << UICR_CUSTOMER_CUSTOMER_Pos;
pub const UICR_PSELRESET_CONNECT_Pos = @as(c_ulong, 31);
pub const UICR_PSELRESET_CONNECT_Msk = @as(c_ulong, 0x1) << UICR_PSELRESET_CONNECT_Pos;
pub const UICR_PSELRESET_CONNECT_Connected = @as(c_ulong, 0);
pub const UICR_PSELRESET_CONNECT_Disconnected = @as(c_ulong, 1);
pub const UICR_PSELRESET_PORT_Pos = @as(c_ulong, 5);
pub const UICR_PSELRESET_PORT_Msk = @as(c_ulong, 0x1) << UICR_PSELRESET_PORT_Pos;
pub const UICR_PSELRESET_PIN_Pos = @as(c_ulong, 0);
pub const UICR_PSELRESET_PIN_Msk = @as(c_ulong, 0x1F) << UICR_PSELRESET_PIN_Pos;
pub const UICR_APPROTECT_PALL_Pos = @as(c_ulong, 0);
pub const UICR_APPROTECT_PALL_Msk = @as(c_ulong, 0xFF) << UICR_APPROTECT_PALL_Pos;
pub const UICR_APPROTECT_PALL_Enabled = @as(c_ulong, 0x00);
pub const UICR_APPROTECT_PALL_Disabled = @as(c_ulong, 0xFF);
pub const UICR_NFCPINS_PROTECT_Pos = @as(c_ulong, 0);
pub const UICR_NFCPINS_PROTECT_Msk = @as(c_ulong, 0x1) << UICR_NFCPINS_PROTECT_Pos;
pub const UICR_NFCPINS_PROTECT_Disabled = @as(c_ulong, 0);
pub const UICR_NFCPINS_PROTECT_NFC = @as(c_ulong, 1);
pub const UICR_DEBUGCTRL_CPUFPBEN_Pos = @as(c_ulong, 8);
pub const UICR_DEBUGCTRL_CPUFPBEN_Msk = @as(c_ulong, 0xFF) << UICR_DEBUGCTRL_CPUFPBEN_Pos;
pub const UICR_DEBUGCTRL_CPUFPBEN_Disabled = @as(c_ulong, 0x00);
pub const UICR_DEBUGCTRL_CPUFPBEN_Enabled = @as(c_ulong, 0xFF);
pub const UICR_DEBUGCTRL_CPUNIDEN_Pos = @as(c_ulong, 0);
pub const UICR_DEBUGCTRL_CPUNIDEN_Msk = @as(c_ulong, 0xFF) << UICR_DEBUGCTRL_CPUNIDEN_Pos;
pub const UICR_DEBUGCTRL_CPUNIDEN_Disabled = @as(c_ulong, 0x00);
pub const UICR_DEBUGCTRL_CPUNIDEN_Enabled = @as(c_ulong, 0xFF);
pub const UICR_REGOUT0_VOUT_Pos = @as(c_ulong, 0);
pub const UICR_REGOUT0_VOUT_Msk = @as(c_ulong, 0x7) << UICR_REGOUT0_VOUT_Pos;
pub const UICR_REGOUT0_VOUT_1V8 = @as(c_ulong, 0);
pub const UICR_REGOUT0_VOUT_2V1 = @as(c_ulong, 1);
pub const UICR_REGOUT0_VOUT_2V4 = @as(c_ulong, 2);
pub const UICR_REGOUT0_VOUT_2V7 = @as(c_ulong, 3);
pub const UICR_REGOUT0_VOUT_3V0 = @as(c_ulong, 4);
pub const UICR_REGOUT0_VOUT_3V3 = @as(c_ulong, 5);
pub const UICR_REGOUT0_VOUT_DEFAULT = @as(c_ulong, 7);
pub const USBD_TASKS_STARTEPIN_TASKS_STARTEPIN_Pos = @as(c_ulong, 0);
pub const USBD_TASKS_STARTEPIN_TASKS_STARTEPIN_Msk = @as(c_ulong, 0x1) << USBD_TASKS_STARTEPIN_TASKS_STARTEPIN_Pos;
pub const USBD_TASKS_STARTEPIN_TASKS_STARTEPIN_Trigger = @as(c_ulong, 1);
pub const USBD_TASKS_STARTISOIN_TASKS_STARTISOIN_Pos = @as(c_ulong, 0);
pub const USBD_TASKS_STARTISOIN_TASKS_STARTISOIN_Msk = @as(c_ulong, 0x1) << USBD_TASKS_STARTISOIN_TASKS_STARTISOIN_Pos;
pub const USBD_TASKS_STARTISOIN_TASKS_STARTISOIN_Trigger = @as(c_ulong, 1);
pub const USBD_TASKS_STARTEPOUT_TASKS_STARTEPOUT_Pos = @as(c_ulong, 0);
pub const USBD_TASKS_STARTEPOUT_TASKS_STARTEPOUT_Msk = @as(c_ulong, 0x1) << USBD_TASKS_STARTEPOUT_TASKS_STARTEPOUT_Pos;
pub const USBD_TASKS_STARTEPOUT_TASKS_STARTEPOUT_Trigger = @as(c_ulong, 1);
pub const USBD_TASKS_STARTISOOUT_TASKS_STARTISOOUT_Pos = @as(c_ulong, 0);
pub const USBD_TASKS_STARTISOOUT_TASKS_STARTISOOUT_Msk = @as(c_ulong, 0x1) << USBD_TASKS_STARTISOOUT_TASKS_STARTISOOUT_Pos;
pub const USBD_TASKS_STARTISOOUT_TASKS_STARTISOOUT_Trigger = @as(c_ulong, 1);
pub const USBD_TASKS_EP0RCVOUT_TASKS_EP0RCVOUT_Pos = @as(c_ulong, 0);
pub const USBD_TASKS_EP0RCVOUT_TASKS_EP0RCVOUT_Msk = @as(c_ulong, 0x1) << USBD_TASKS_EP0RCVOUT_TASKS_EP0RCVOUT_Pos;
pub const USBD_TASKS_EP0RCVOUT_TASKS_EP0RCVOUT_Trigger = @as(c_ulong, 1);
pub const USBD_TASKS_EP0STATUS_TASKS_EP0STATUS_Pos = @as(c_ulong, 0);
pub const USBD_TASKS_EP0STATUS_TASKS_EP0STATUS_Msk = @as(c_ulong, 0x1) << USBD_TASKS_EP0STATUS_TASKS_EP0STATUS_Pos;
pub const USBD_TASKS_EP0STATUS_TASKS_EP0STATUS_Trigger = @as(c_ulong, 1);
pub const USBD_TASKS_EP0STALL_TASKS_EP0STALL_Pos = @as(c_ulong, 0);
pub const USBD_TASKS_EP0STALL_TASKS_EP0STALL_Msk = @as(c_ulong, 0x1) << USBD_TASKS_EP0STALL_TASKS_EP0STALL_Pos;
pub const USBD_TASKS_EP0STALL_TASKS_EP0STALL_Trigger = @as(c_ulong, 1);
pub const USBD_TASKS_DPDMDRIVE_TASKS_DPDMDRIVE_Pos = @as(c_ulong, 0);
pub const USBD_TASKS_DPDMDRIVE_TASKS_DPDMDRIVE_Msk = @as(c_ulong, 0x1) << USBD_TASKS_DPDMDRIVE_TASKS_DPDMDRIVE_Pos;
pub const USBD_TASKS_DPDMDRIVE_TASKS_DPDMDRIVE_Trigger = @as(c_ulong, 1);
pub const USBD_TASKS_DPDMNODRIVE_TASKS_DPDMNODRIVE_Pos = @as(c_ulong, 0);
pub const USBD_TASKS_DPDMNODRIVE_TASKS_DPDMNODRIVE_Msk = @as(c_ulong, 0x1) << USBD_TASKS_DPDMNODRIVE_TASKS_DPDMNODRIVE_Pos;
pub const USBD_TASKS_DPDMNODRIVE_TASKS_DPDMNODRIVE_Trigger = @as(c_ulong, 1);
pub const USBD_EVENTS_USBRESET_EVENTS_USBRESET_Pos = @as(c_ulong, 0);
pub const USBD_EVENTS_USBRESET_EVENTS_USBRESET_Msk = @as(c_ulong, 0x1) << USBD_EVENTS_USBRESET_EVENTS_USBRESET_Pos;
pub const USBD_EVENTS_USBRESET_EVENTS_USBRESET_NotGenerated = @as(c_ulong, 0);
pub const USBD_EVENTS_USBRESET_EVENTS_USBRESET_Generated = @as(c_ulong, 1);
pub const USBD_EVENTS_STARTED_EVENTS_STARTED_Pos = @as(c_ulong, 0);
pub const USBD_EVENTS_STARTED_EVENTS_STARTED_Msk = @as(c_ulong, 0x1) << USBD_EVENTS_STARTED_EVENTS_STARTED_Pos;
pub const USBD_EVENTS_STARTED_EVENTS_STARTED_NotGenerated = @as(c_ulong, 0);
pub const USBD_EVENTS_STARTED_EVENTS_STARTED_Generated = @as(c_ulong, 1);
pub const USBD_EVENTS_ENDEPIN_EVENTS_ENDEPIN_Pos = @as(c_ulong, 0);
pub const USBD_EVENTS_ENDEPIN_EVENTS_ENDEPIN_Msk = @as(c_ulong, 0x1) << USBD_EVENTS_ENDEPIN_EVENTS_ENDEPIN_Pos;
pub const USBD_EVENTS_ENDEPIN_EVENTS_ENDEPIN_NotGenerated = @as(c_ulong, 0);
pub const USBD_EVENTS_ENDEPIN_EVENTS_ENDEPIN_Generated = @as(c_ulong, 1);
pub const USBD_EVENTS_EP0DATADONE_EVENTS_EP0DATADONE_Pos = @as(c_ulong, 0);
pub const USBD_EVENTS_EP0DATADONE_EVENTS_EP0DATADONE_Msk = @as(c_ulong, 0x1) << USBD_EVENTS_EP0DATADONE_EVENTS_EP0DATADONE_Pos;
pub const USBD_EVENTS_EP0DATADONE_EVENTS_EP0DATADONE_NotGenerated = @as(c_ulong, 0);
pub const USBD_EVENTS_EP0DATADONE_EVENTS_EP0DATADONE_Generated = @as(c_ulong, 1);
pub const USBD_EVENTS_ENDISOIN_EVENTS_ENDISOIN_Pos = @as(c_ulong, 0);
pub const USBD_EVENTS_ENDISOIN_EVENTS_ENDISOIN_Msk = @as(c_ulong, 0x1) << USBD_EVENTS_ENDISOIN_EVENTS_ENDISOIN_Pos;
pub const USBD_EVENTS_ENDISOIN_EVENTS_ENDISOIN_NotGenerated = @as(c_ulong, 0);
pub const USBD_EVENTS_ENDISOIN_EVENTS_ENDISOIN_Generated = @as(c_ulong, 1);
pub const USBD_EVENTS_ENDEPOUT_EVENTS_ENDEPOUT_Pos = @as(c_ulong, 0);
pub const USBD_EVENTS_ENDEPOUT_EVENTS_ENDEPOUT_Msk = @as(c_ulong, 0x1) << USBD_EVENTS_ENDEPOUT_EVENTS_ENDEPOUT_Pos;
pub const USBD_EVENTS_ENDEPOUT_EVENTS_ENDEPOUT_NotGenerated = @as(c_ulong, 0);
pub const USBD_EVENTS_ENDEPOUT_EVENTS_ENDEPOUT_Generated = @as(c_ulong, 1);
pub const USBD_EVENTS_ENDISOOUT_EVENTS_ENDISOOUT_Pos = @as(c_ulong, 0);
pub const USBD_EVENTS_ENDISOOUT_EVENTS_ENDISOOUT_Msk = @as(c_ulong, 0x1) << USBD_EVENTS_ENDISOOUT_EVENTS_ENDISOOUT_Pos;
pub const USBD_EVENTS_ENDISOOUT_EVENTS_ENDISOOUT_NotGenerated = @as(c_ulong, 0);
pub const USBD_EVENTS_ENDISOOUT_EVENTS_ENDISOOUT_Generated = @as(c_ulong, 1);
pub const USBD_EVENTS_SOF_EVENTS_SOF_Pos = @as(c_ulong, 0);
pub const USBD_EVENTS_SOF_EVENTS_SOF_Msk = @as(c_ulong, 0x1) << USBD_EVENTS_SOF_EVENTS_SOF_Pos;
pub const USBD_EVENTS_SOF_EVENTS_SOF_NotGenerated = @as(c_ulong, 0);
pub const USBD_EVENTS_SOF_EVENTS_SOF_Generated = @as(c_ulong, 1);
pub const USBD_EVENTS_USBEVENT_EVENTS_USBEVENT_Pos = @as(c_ulong, 0);
pub const USBD_EVENTS_USBEVENT_EVENTS_USBEVENT_Msk = @as(c_ulong, 0x1) << USBD_EVENTS_USBEVENT_EVENTS_USBEVENT_Pos;
pub const USBD_EVENTS_USBEVENT_EVENTS_USBEVENT_NotGenerated = @as(c_ulong, 0);
pub const USBD_EVENTS_USBEVENT_EVENTS_USBEVENT_Generated = @as(c_ulong, 1);
pub const USBD_EVENTS_EP0SETUP_EVENTS_EP0SETUP_Pos = @as(c_ulong, 0);
pub const USBD_EVENTS_EP0SETUP_EVENTS_EP0SETUP_Msk = @as(c_ulong, 0x1) << USBD_EVENTS_EP0SETUP_EVENTS_EP0SETUP_Pos;
pub const USBD_EVENTS_EP0SETUP_EVENTS_EP0SETUP_NotGenerated = @as(c_ulong, 0);
pub const USBD_EVENTS_EP0SETUP_EVENTS_EP0SETUP_Generated = @as(c_ulong, 1);
pub const USBD_EVENTS_EPDATA_EVENTS_EPDATA_Pos = @as(c_ulong, 0);
pub const USBD_EVENTS_EPDATA_EVENTS_EPDATA_Msk = @as(c_ulong, 0x1) << USBD_EVENTS_EPDATA_EVENTS_EPDATA_Pos;
pub const USBD_EVENTS_EPDATA_EVENTS_EPDATA_NotGenerated = @as(c_ulong, 0);
pub const USBD_EVENTS_EPDATA_EVENTS_EPDATA_Generated = @as(c_ulong, 1);
pub const USBD_SHORTS_ENDEPOUT0_EP0RCVOUT_Pos = @as(c_ulong, 4);
pub const USBD_SHORTS_ENDEPOUT0_EP0RCVOUT_Msk = @as(c_ulong, 0x1) << USBD_SHORTS_ENDEPOUT0_EP0RCVOUT_Pos;
pub const USBD_SHORTS_ENDEPOUT0_EP0RCVOUT_Disabled = @as(c_ulong, 0);
pub const USBD_SHORTS_ENDEPOUT0_EP0RCVOUT_Enabled = @as(c_ulong, 1);
pub const USBD_SHORTS_ENDEPOUT0_EP0STATUS_Pos = @as(c_ulong, 3);
pub const USBD_SHORTS_ENDEPOUT0_EP0STATUS_Msk = @as(c_ulong, 0x1) << USBD_SHORTS_ENDEPOUT0_EP0STATUS_Pos;
pub const USBD_SHORTS_ENDEPOUT0_EP0STATUS_Disabled = @as(c_ulong, 0);
pub const USBD_SHORTS_ENDEPOUT0_EP0STATUS_Enabled = @as(c_ulong, 1);
pub const USBD_SHORTS_EP0DATADONE_EP0STATUS_Pos = @as(c_ulong, 2);
pub const USBD_SHORTS_EP0DATADONE_EP0STATUS_Msk = @as(c_ulong, 0x1) << USBD_SHORTS_EP0DATADONE_EP0STATUS_Pos;
pub const USBD_SHORTS_EP0DATADONE_EP0STATUS_Disabled = @as(c_ulong, 0);
pub const USBD_SHORTS_EP0DATADONE_EP0STATUS_Enabled = @as(c_ulong, 1);
pub const USBD_SHORTS_EP0DATADONE_STARTEPOUT0_Pos = @as(c_ulong, 1);
pub const USBD_SHORTS_EP0DATADONE_STARTEPOUT0_Msk = @as(c_ulong, 0x1) << USBD_SHORTS_EP0DATADONE_STARTEPOUT0_Pos;
pub const USBD_SHORTS_EP0DATADONE_STARTEPOUT0_Disabled = @as(c_ulong, 0);
pub const USBD_SHORTS_EP0DATADONE_STARTEPOUT0_Enabled = @as(c_ulong, 1);
pub const USBD_SHORTS_EP0DATADONE_STARTEPIN0_Pos = @as(c_ulong, 0);
pub const USBD_SHORTS_EP0DATADONE_STARTEPIN0_Msk = @as(c_ulong, 0x1) << USBD_SHORTS_EP0DATADONE_STARTEPIN0_Pos;
pub const USBD_SHORTS_EP0DATADONE_STARTEPIN0_Disabled = @as(c_ulong, 0);
pub const USBD_SHORTS_EP0DATADONE_STARTEPIN0_Enabled = @as(c_ulong, 1);
pub const USBD_INTEN_EPDATA_Pos = @as(c_ulong, 24);
pub const USBD_INTEN_EPDATA_Msk = @as(c_ulong, 0x1) << USBD_INTEN_EPDATA_Pos;
pub const USBD_INTEN_EPDATA_Disabled = @as(c_ulong, 0);
pub const USBD_INTEN_EPDATA_Enabled = @as(c_ulong, 1);
pub const USBD_INTEN_EP0SETUP_Pos = @as(c_ulong, 23);
pub const USBD_INTEN_EP0SETUP_Msk = @as(c_ulong, 0x1) << USBD_INTEN_EP0SETUP_Pos;
pub const USBD_INTEN_EP0SETUP_Disabled = @as(c_ulong, 0);
pub const USBD_INTEN_EP0SETUP_Enabled = @as(c_ulong, 1);
pub const USBD_INTEN_USBEVENT_Pos = @as(c_ulong, 22);
pub const USBD_INTEN_USBEVENT_Msk = @as(c_ulong, 0x1) << USBD_INTEN_USBEVENT_Pos;
pub const USBD_INTEN_USBEVENT_Disabled = @as(c_ulong, 0);
pub const USBD_INTEN_USBEVENT_Enabled = @as(c_ulong, 1);
pub const USBD_INTEN_SOF_Pos = @as(c_ulong, 21);
pub const USBD_INTEN_SOF_Msk = @as(c_ulong, 0x1) << USBD_INTEN_SOF_Pos;
pub const USBD_INTEN_SOF_Disabled = @as(c_ulong, 0);
pub const USBD_INTEN_SOF_Enabled = @as(c_ulong, 1);
pub const USBD_INTEN_ENDISOOUT_Pos = @as(c_ulong, 20);
pub const USBD_INTEN_ENDISOOUT_Msk = @as(c_ulong, 0x1) << USBD_INTEN_ENDISOOUT_Pos;
pub const USBD_INTEN_ENDISOOUT_Disabled = @as(c_ulong, 0);
pub const USBD_INTEN_ENDISOOUT_Enabled = @as(c_ulong, 1);
pub const USBD_INTEN_ENDEPOUT7_Pos = @as(c_ulong, 19);
pub const USBD_INTEN_ENDEPOUT7_Msk = @as(c_ulong, 0x1) << USBD_INTEN_ENDEPOUT7_Pos;
pub const USBD_INTEN_ENDEPOUT7_Disabled = @as(c_ulong, 0);
pub const USBD_INTEN_ENDEPOUT7_Enabled = @as(c_ulong, 1);
pub const USBD_INTEN_ENDEPOUT6_Pos = @as(c_ulong, 18);
pub const USBD_INTEN_ENDEPOUT6_Msk = @as(c_ulong, 0x1) << USBD_INTEN_ENDEPOUT6_Pos;
pub const USBD_INTEN_ENDEPOUT6_Disabled = @as(c_ulong, 0);
pub const USBD_INTEN_ENDEPOUT6_Enabled = @as(c_ulong, 1);
pub const USBD_INTEN_ENDEPOUT5_Pos = @as(c_ulong, 17);
pub const USBD_INTEN_ENDEPOUT5_Msk = @as(c_ulong, 0x1) << USBD_INTEN_ENDEPOUT5_Pos;
pub const USBD_INTEN_ENDEPOUT5_Disabled = @as(c_ulong, 0);
pub const USBD_INTEN_ENDEPOUT5_Enabled = @as(c_ulong, 1);
pub const USBD_INTEN_ENDEPOUT4_Pos = @as(c_ulong, 16);
pub const USBD_INTEN_ENDEPOUT4_Msk = @as(c_ulong, 0x1) << USBD_INTEN_ENDEPOUT4_Pos;
pub const USBD_INTEN_ENDEPOUT4_Disabled = @as(c_ulong, 0);
pub const USBD_INTEN_ENDEPOUT4_Enabled = @as(c_ulong, 1);
pub const USBD_INTEN_ENDEPOUT3_Pos = @as(c_ulong, 15);
pub const USBD_INTEN_ENDEPOUT3_Msk = @as(c_ulong, 0x1) << USBD_INTEN_ENDEPOUT3_Pos;
pub const USBD_INTEN_ENDEPOUT3_Disabled = @as(c_ulong, 0);
pub const USBD_INTEN_ENDEPOUT3_Enabled = @as(c_ulong, 1);
pub const USBD_INTEN_ENDEPOUT2_Pos = @as(c_ulong, 14);
pub const USBD_INTEN_ENDEPOUT2_Msk = @as(c_ulong, 0x1) << USBD_INTEN_ENDEPOUT2_Pos;
pub const USBD_INTEN_ENDEPOUT2_Disabled = @as(c_ulong, 0);
pub const USBD_INTEN_ENDEPOUT2_Enabled = @as(c_ulong, 1);
pub const USBD_INTEN_ENDEPOUT1_Pos = @as(c_ulong, 13);
pub const USBD_INTEN_ENDEPOUT1_Msk = @as(c_ulong, 0x1) << USBD_INTEN_ENDEPOUT1_Pos;
pub const USBD_INTEN_ENDEPOUT1_Disabled = @as(c_ulong, 0);
pub const USBD_INTEN_ENDEPOUT1_Enabled = @as(c_ulong, 1);
pub const USBD_INTEN_ENDEPOUT0_Pos = @as(c_ulong, 12);
pub const USBD_INTEN_ENDEPOUT0_Msk = @as(c_ulong, 0x1) << USBD_INTEN_ENDEPOUT0_Pos;
pub const USBD_INTEN_ENDEPOUT0_Disabled = @as(c_ulong, 0);
pub const USBD_INTEN_ENDEPOUT0_Enabled = @as(c_ulong, 1);
pub const USBD_INTEN_ENDISOIN_Pos = @as(c_ulong, 11);
pub const USBD_INTEN_ENDISOIN_Msk = @as(c_ulong, 0x1) << USBD_INTEN_ENDISOIN_Pos;
pub const USBD_INTEN_ENDISOIN_Disabled = @as(c_ulong, 0);
pub const USBD_INTEN_ENDISOIN_Enabled = @as(c_ulong, 1);
pub const USBD_INTEN_EP0DATADONE_Pos = @as(c_ulong, 10);
pub const USBD_INTEN_EP0DATADONE_Msk = @as(c_ulong, 0x1) << USBD_INTEN_EP0DATADONE_Pos;
pub const USBD_INTEN_EP0DATADONE_Disabled = @as(c_ulong, 0);
pub const USBD_INTEN_EP0DATADONE_Enabled = @as(c_ulong, 1);
pub const USBD_INTEN_ENDEPIN7_Pos = @as(c_ulong, 9);
pub const USBD_INTEN_ENDEPIN7_Msk = @as(c_ulong, 0x1) << USBD_INTEN_ENDEPIN7_Pos;
pub const USBD_INTEN_ENDEPIN7_Disabled = @as(c_ulong, 0);
pub const USBD_INTEN_ENDEPIN7_Enabled = @as(c_ulong, 1);
pub const USBD_INTEN_ENDEPIN6_Pos = @as(c_ulong, 8);
pub const USBD_INTEN_ENDEPIN6_Msk = @as(c_ulong, 0x1) << USBD_INTEN_ENDEPIN6_Pos;
pub const USBD_INTEN_ENDEPIN6_Disabled = @as(c_ulong, 0);
pub const USBD_INTEN_ENDEPIN6_Enabled = @as(c_ulong, 1);
pub const USBD_INTEN_ENDEPIN5_Pos = @as(c_ulong, 7);
pub const USBD_INTEN_ENDEPIN5_Msk = @as(c_ulong, 0x1) << USBD_INTEN_ENDEPIN5_Pos;
pub const USBD_INTEN_ENDEPIN5_Disabled = @as(c_ulong, 0);
pub const USBD_INTEN_ENDEPIN5_Enabled = @as(c_ulong, 1);
pub const USBD_INTEN_ENDEPIN4_Pos = @as(c_ulong, 6);
pub const USBD_INTEN_ENDEPIN4_Msk = @as(c_ulong, 0x1) << USBD_INTEN_ENDEPIN4_Pos;
pub const USBD_INTEN_ENDEPIN4_Disabled = @as(c_ulong, 0);
pub const USBD_INTEN_ENDEPIN4_Enabled = @as(c_ulong, 1);
pub const USBD_INTEN_ENDEPIN3_Pos = @as(c_ulong, 5);
pub const USBD_INTEN_ENDEPIN3_Msk = @as(c_ulong, 0x1) << USBD_INTEN_ENDEPIN3_Pos;
pub const USBD_INTEN_ENDEPIN3_Disabled = @as(c_ulong, 0);
pub const USBD_INTEN_ENDEPIN3_Enabled = @as(c_ulong, 1);
pub const USBD_INTEN_ENDEPIN2_Pos = @as(c_ulong, 4);
pub const USBD_INTEN_ENDEPIN2_Msk = @as(c_ulong, 0x1) << USBD_INTEN_ENDEPIN2_Pos;
pub const USBD_INTEN_ENDEPIN2_Disabled = @as(c_ulong, 0);
pub const USBD_INTEN_ENDEPIN2_Enabled = @as(c_ulong, 1);
pub const USBD_INTEN_ENDEPIN1_Pos = @as(c_ulong, 3);
pub const USBD_INTEN_ENDEPIN1_Msk = @as(c_ulong, 0x1) << USBD_INTEN_ENDEPIN1_Pos;
pub const USBD_INTEN_ENDEPIN1_Disabled = @as(c_ulong, 0);
pub const USBD_INTEN_ENDEPIN1_Enabled = @as(c_ulong, 1);
pub const USBD_INTEN_ENDEPIN0_Pos = @as(c_ulong, 2);
pub const USBD_INTEN_ENDEPIN0_Msk = @as(c_ulong, 0x1) << USBD_INTEN_ENDEPIN0_Pos;
pub const USBD_INTEN_ENDEPIN0_Disabled = @as(c_ulong, 0);
pub const USBD_INTEN_ENDEPIN0_Enabled = @as(c_ulong, 1);
pub const USBD_INTEN_STARTED_Pos = @as(c_ulong, 1);
pub const USBD_INTEN_STARTED_Msk = @as(c_ulong, 0x1) << USBD_INTEN_STARTED_Pos;
pub const USBD_INTEN_STARTED_Disabled = @as(c_ulong, 0);
pub const USBD_INTEN_STARTED_Enabled = @as(c_ulong, 1);
pub const USBD_INTEN_USBRESET_Pos = @as(c_ulong, 0);
pub const USBD_INTEN_USBRESET_Msk = @as(c_ulong, 0x1) << USBD_INTEN_USBRESET_Pos;
pub const USBD_INTEN_USBRESET_Disabled = @as(c_ulong, 0);
pub const USBD_INTEN_USBRESET_Enabled = @as(c_ulong, 1);
pub const USBD_INTENSET_EPDATA_Pos = @as(c_ulong, 24);
pub const USBD_INTENSET_EPDATA_Msk = @as(c_ulong, 0x1) << USBD_INTENSET_EPDATA_Pos;
pub const USBD_INTENSET_EPDATA_Disabled = @as(c_ulong, 0);
pub const USBD_INTENSET_EPDATA_Enabled = @as(c_ulong, 1);
pub const USBD_INTENSET_EPDATA_Set = @as(c_ulong, 1);
pub const USBD_INTENSET_EP0SETUP_Pos = @as(c_ulong, 23);
pub const USBD_INTENSET_EP0SETUP_Msk = @as(c_ulong, 0x1) << USBD_INTENSET_EP0SETUP_Pos;
pub const USBD_INTENSET_EP0SETUP_Disabled = @as(c_ulong, 0);
pub const USBD_INTENSET_EP0SETUP_Enabled = @as(c_ulong, 1);
pub const USBD_INTENSET_EP0SETUP_Set = @as(c_ulong, 1);
pub const USBD_INTENSET_USBEVENT_Pos = @as(c_ulong, 22);
pub const USBD_INTENSET_USBEVENT_Msk = @as(c_ulong, 0x1) << USBD_INTENSET_USBEVENT_Pos;
pub const USBD_INTENSET_USBEVENT_Disabled = @as(c_ulong, 0);
pub const USBD_INTENSET_USBEVENT_Enabled = @as(c_ulong, 1);
pub const USBD_INTENSET_USBEVENT_Set = @as(c_ulong, 1);
pub const USBD_INTENSET_SOF_Pos = @as(c_ulong, 21);
pub const USBD_INTENSET_SOF_Msk = @as(c_ulong, 0x1) << USBD_INTENSET_SOF_Pos;
pub const USBD_INTENSET_SOF_Disabled = @as(c_ulong, 0);
pub const USBD_INTENSET_SOF_Enabled = @as(c_ulong, 1);
pub const USBD_INTENSET_SOF_Set = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDISOOUT_Pos = @as(c_ulong, 20);
pub const USBD_INTENSET_ENDISOOUT_Msk = @as(c_ulong, 0x1) << USBD_INTENSET_ENDISOOUT_Pos;
pub const USBD_INTENSET_ENDISOOUT_Disabled = @as(c_ulong, 0);
pub const USBD_INTENSET_ENDISOOUT_Enabled = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDISOOUT_Set = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPOUT7_Pos = @as(c_ulong, 19);
pub const USBD_INTENSET_ENDEPOUT7_Msk = @as(c_ulong, 0x1) << USBD_INTENSET_ENDEPOUT7_Pos;
pub const USBD_INTENSET_ENDEPOUT7_Disabled = @as(c_ulong, 0);
pub const USBD_INTENSET_ENDEPOUT7_Enabled = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPOUT7_Set = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPOUT6_Pos = @as(c_ulong, 18);
pub const USBD_INTENSET_ENDEPOUT6_Msk = @as(c_ulong, 0x1) << USBD_INTENSET_ENDEPOUT6_Pos;
pub const USBD_INTENSET_ENDEPOUT6_Disabled = @as(c_ulong, 0);
pub const USBD_INTENSET_ENDEPOUT6_Enabled = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPOUT6_Set = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPOUT5_Pos = @as(c_ulong, 17);
pub const USBD_INTENSET_ENDEPOUT5_Msk = @as(c_ulong, 0x1) << USBD_INTENSET_ENDEPOUT5_Pos;
pub const USBD_INTENSET_ENDEPOUT5_Disabled = @as(c_ulong, 0);
pub const USBD_INTENSET_ENDEPOUT5_Enabled = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPOUT5_Set = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPOUT4_Pos = @as(c_ulong, 16);
pub const USBD_INTENSET_ENDEPOUT4_Msk = @as(c_ulong, 0x1) << USBD_INTENSET_ENDEPOUT4_Pos;
pub const USBD_INTENSET_ENDEPOUT4_Disabled = @as(c_ulong, 0);
pub const USBD_INTENSET_ENDEPOUT4_Enabled = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPOUT4_Set = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPOUT3_Pos = @as(c_ulong, 15);
pub const USBD_INTENSET_ENDEPOUT3_Msk = @as(c_ulong, 0x1) << USBD_INTENSET_ENDEPOUT3_Pos;
pub const USBD_INTENSET_ENDEPOUT3_Disabled = @as(c_ulong, 0);
pub const USBD_INTENSET_ENDEPOUT3_Enabled = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPOUT3_Set = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPOUT2_Pos = @as(c_ulong, 14);
pub const USBD_INTENSET_ENDEPOUT2_Msk = @as(c_ulong, 0x1) << USBD_INTENSET_ENDEPOUT2_Pos;
pub const USBD_INTENSET_ENDEPOUT2_Disabled = @as(c_ulong, 0);
pub const USBD_INTENSET_ENDEPOUT2_Enabled = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPOUT2_Set = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPOUT1_Pos = @as(c_ulong, 13);
pub const USBD_INTENSET_ENDEPOUT1_Msk = @as(c_ulong, 0x1) << USBD_INTENSET_ENDEPOUT1_Pos;
pub const USBD_INTENSET_ENDEPOUT1_Disabled = @as(c_ulong, 0);
pub const USBD_INTENSET_ENDEPOUT1_Enabled = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPOUT1_Set = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPOUT0_Pos = @as(c_ulong, 12);
pub const USBD_INTENSET_ENDEPOUT0_Msk = @as(c_ulong, 0x1) << USBD_INTENSET_ENDEPOUT0_Pos;
pub const USBD_INTENSET_ENDEPOUT0_Disabled = @as(c_ulong, 0);
pub const USBD_INTENSET_ENDEPOUT0_Enabled = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPOUT0_Set = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDISOIN_Pos = @as(c_ulong, 11);
pub const USBD_INTENSET_ENDISOIN_Msk = @as(c_ulong, 0x1) << USBD_INTENSET_ENDISOIN_Pos;
pub const USBD_INTENSET_ENDISOIN_Disabled = @as(c_ulong, 0);
pub const USBD_INTENSET_ENDISOIN_Enabled = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDISOIN_Set = @as(c_ulong, 1);
pub const USBD_INTENSET_EP0DATADONE_Pos = @as(c_ulong, 10);
pub const USBD_INTENSET_EP0DATADONE_Msk = @as(c_ulong, 0x1) << USBD_INTENSET_EP0DATADONE_Pos;
pub const USBD_INTENSET_EP0DATADONE_Disabled = @as(c_ulong, 0);
pub const USBD_INTENSET_EP0DATADONE_Enabled = @as(c_ulong, 1);
pub const USBD_INTENSET_EP0DATADONE_Set = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPIN7_Pos = @as(c_ulong, 9);
pub const USBD_INTENSET_ENDEPIN7_Msk = @as(c_ulong, 0x1) << USBD_INTENSET_ENDEPIN7_Pos;
pub const USBD_INTENSET_ENDEPIN7_Disabled = @as(c_ulong, 0);
pub const USBD_INTENSET_ENDEPIN7_Enabled = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPIN7_Set = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPIN6_Pos = @as(c_ulong, 8);
pub const USBD_INTENSET_ENDEPIN6_Msk = @as(c_ulong, 0x1) << USBD_INTENSET_ENDEPIN6_Pos;
pub const USBD_INTENSET_ENDEPIN6_Disabled = @as(c_ulong, 0);
pub const USBD_INTENSET_ENDEPIN6_Enabled = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPIN6_Set = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPIN5_Pos = @as(c_ulong, 7);
pub const USBD_INTENSET_ENDEPIN5_Msk = @as(c_ulong, 0x1) << USBD_INTENSET_ENDEPIN5_Pos;
pub const USBD_INTENSET_ENDEPIN5_Disabled = @as(c_ulong, 0);
pub const USBD_INTENSET_ENDEPIN5_Enabled = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPIN5_Set = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPIN4_Pos = @as(c_ulong, 6);
pub const USBD_INTENSET_ENDEPIN4_Msk = @as(c_ulong, 0x1) << USBD_INTENSET_ENDEPIN4_Pos;
pub const USBD_INTENSET_ENDEPIN4_Disabled = @as(c_ulong, 0);
pub const USBD_INTENSET_ENDEPIN4_Enabled = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPIN4_Set = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPIN3_Pos = @as(c_ulong, 5);
pub const USBD_INTENSET_ENDEPIN3_Msk = @as(c_ulong, 0x1) << USBD_INTENSET_ENDEPIN3_Pos;
pub const USBD_INTENSET_ENDEPIN3_Disabled = @as(c_ulong, 0);
pub const USBD_INTENSET_ENDEPIN3_Enabled = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPIN3_Set = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPIN2_Pos = @as(c_ulong, 4);
pub const USBD_INTENSET_ENDEPIN2_Msk = @as(c_ulong, 0x1) << USBD_INTENSET_ENDEPIN2_Pos;
pub const USBD_INTENSET_ENDEPIN2_Disabled = @as(c_ulong, 0);
pub const USBD_INTENSET_ENDEPIN2_Enabled = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPIN2_Set = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPIN1_Pos = @as(c_ulong, 3);
pub const USBD_INTENSET_ENDEPIN1_Msk = @as(c_ulong, 0x1) << USBD_INTENSET_ENDEPIN1_Pos;
pub const USBD_INTENSET_ENDEPIN1_Disabled = @as(c_ulong, 0);
pub const USBD_INTENSET_ENDEPIN1_Enabled = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPIN1_Set = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPIN0_Pos = @as(c_ulong, 2);
pub const USBD_INTENSET_ENDEPIN0_Msk = @as(c_ulong, 0x1) << USBD_INTENSET_ENDEPIN0_Pos;
pub const USBD_INTENSET_ENDEPIN0_Disabled = @as(c_ulong, 0);
pub const USBD_INTENSET_ENDEPIN0_Enabled = @as(c_ulong, 1);
pub const USBD_INTENSET_ENDEPIN0_Set = @as(c_ulong, 1);
pub const USBD_INTENSET_STARTED_Pos = @as(c_ulong, 1);
pub const USBD_INTENSET_STARTED_Msk = @as(c_ulong, 0x1) << USBD_INTENSET_STARTED_Pos;
pub const USBD_INTENSET_STARTED_Disabled = @as(c_ulong, 0);
pub const USBD_INTENSET_STARTED_Enabled = @as(c_ulong, 1);
pub const USBD_INTENSET_STARTED_Set = @as(c_ulong, 1);
pub const USBD_INTENSET_USBRESET_Pos = @as(c_ulong, 0);
pub const USBD_INTENSET_USBRESET_Msk = @as(c_ulong, 0x1) << USBD_INTENSET_USBRESET_Pos;
pub const USBD_INTENSET_USBRESET_Disabled = @as(c_ulong, 0);
pub const USBD_INTENSET_USBRESET_Enabled = @as(c_ulong, 1);
pub const USBD_INTENSET_USBRESET_Set = @as(c_ulong, 1);
pub const USBD_INTENCLR_EPDATA_Pos = @as(c_ulong, 24);
pub const USBD_INTENCLR_EPDATA_Msk = @as(c_ulong, 0x1) << USBD_INTENCLR_EPDATA_Pos;
pub const USBD_INTENCLR_EPDATA_Disabled = @as(c_ulong, 0);
pub const USBD_INTENCLR_EPDATA_Enabled = @as(c_ulong, 1);
pub const USBD_INTENCLR_EPDATA_Clear = @as(c_ulong, 1);
pub const USBD_INTENCLR_EP0SETUP_Pos = @as(c_ulong, 23);
pub const USBD_INTENCLR_EP0SETUP_Msk = @as(c_ulong, 0x1) << USBD_INTENCLR_EP0SETUP_Pos;
pub const USBD_INTENCLR_EP0SETUP_Disabled = @as(c_ulong, 0);
pub const USBD_INTENCLR_EP0SETUP_Enabled = @as(c_ulong, 1);
pub const USBD_INTENCLR_EP0SETUP_Clear = @as(c_ulong, 1);
pub const USBD_INTENCLR_USBEVENT_Pos = @as(c_ulong, 22);
pub const USBD_INTENCLR_USBEVENT_Msk = @as(c_ulong, 0x1) << USBD_INTENCLR_USBEVENT_Pos;
pub const USBD_INTENCLR_USBEVENT_Disabled = @as(c_ulong, 0);
pub const USBD_INTENCLR_USBEVENT_Enabled = @as(c_ulong, 1);
pub const USBD_INTENCLR_USBEVENT_Clear = @as(c_ulong, 1);
pub const USBD_INTENCLR_SOF_Pos = @as(c_ulong, 21);
pub const USBD_INTENCLR_SOF_Msk = @as(c_ulong, 0x1) << USBD_INTENCLR_SOF_Pos;
pub const USBD_INTENCLR_SOF_Disabled = @as(c_ulong, 0);
pub const USBD_INTENCLR_SOF_Enabled = @as(c_ulong, 1);
pub const USBD_INTENCLR_SOF_Clear = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDISOOUT_Pos = @as(c_ulong, 20);
pub const USBD_INTENCLR_ENDISOOUT_Msk = @as(c_ulong, 0x1) << USBD_INTENCLR_ENDISOOUT_Pos;
pub const USBD_INTENCLR_ENDISOOUT_Disabled = @as(c_ulong, 0);
pub const USBD_INTENCLR_ENDISOOUT_Enabled = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDISOOUT_Clear = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPOUT7_Pos = @as(c_ulong, 19);
pub const USBD_INTENCLR_ENDEPOUT7_Msk = @as(c_ulong, 0x1) << USBD_INTENCLR_ENDEPOUT7_Pos;
pub const USBD_INTENCLR_ENDEPOUT7_Disabled = @as(c_ulong, 0);
pub const USBD_INTENCLR_ENDEPOUT7_Enabled = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPOUT7_Clear = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPOUT6_Pos = @as(c_ulong, 18);
pub const USBD_INTENCLR_ENDEPOUT6_Msk = @as(c_ulong, 0x1) << USBD_INTENCLR_ENDEPOUT6_Pos;
pub const USBD_INTENCLR_ENDEPOUT6_Disabled = @as(c_ulong, 0);
pub const USBD_INTENCLR_ENDEPOUT6_Enabled = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPOUT6_Clear = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPOUT5_Pos = @as(c_ulong, 17);
pub const USBD_INTENCLR_ENDEPOUT5_Msk = @as(c_ulong, 0x1) << USBD_INTENCLR_ENDEPOUT5_Pos;
pub const USBD_INTENCLR_ENDEPOUT5_Disabled = @as(c_ulong, 0);
pub const USBD_INTENCLR_ENDEPOUT5_Enabled = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPOUT5_Clear = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPOUT4_Pos = @as(c_ulong, 16);
pub const USBD_INTENCLR_ENDEPOUT4_Msk = @as(c_ulong, 0x1) << USBD_INTENCLR_ENDEPOUT4_Pos;
pub const USBD_INTENCLR_ENDEPOUT4_Disabled = @as(c_ulong, 0);
pub const USBD_INTENCLR_ENDEPOUT4_Enabled = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPOUT4_Clear = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPOUT3_Pos = @as(c_ulong, 15);
pub const USBD_INTENCLR_ENDEPOUT3_Msk = @as(c_ulong, 0x1) << USBD_INTENCLR_ENDEPOUT3_Pos;
pub const USBD_INTENCLR_ENDEPOUT3_Disabled = @as(c_ulong, 0);
pub const USBD_INTENCLR_ENDEPOUT3_Enabled = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPOUT3_Clear = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPOUT2_Pos = @as(c_ulong, 14);
pub const USBD_INTENCLR_ENDEPOUT2_Msk = @as(c_ulong, 0x1) << USBD_INTENCLR_ENDEPOUT2_Pos;
pub const USBD_INTENCLR_ENDEPOUT2_Disabled = @as(c_ulong, 0);
pub const USBD_INTENCLR_ENDEPOUT2_Enabled = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPOUT2_Clear = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPOUT1_Pos = @as(c_ulong, 13);
pub const USBD_INTENCLR_ENDEPOUT1_Msk = @as(c_ulong, 0x1) << USBD_INTENCLR_ENDEPOUT1_Pos;
pub const USBD_INTENCLR_ENDEPOUT1_Disabled = @as(c_ulong, 0);
pub const USBD_INTENCLR_ENDEPOUT1_Enabled = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPOUT1_Clear = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPOUT0_Pos = @as(c_ulong, 12);
pub const USBD_INTENCLR_ENDEPOUT0_Msk = @as(c_ulong, 0x1) << USBD_INTENCLR_ENDEPOUT0_Pos;
pub const USBD_INTENCLR_ENDEPOUT0_Disabled = @as(c_ulong, 0);
pub const USBD_INTENCLR_ENDEPOUT0_Enabled = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPOUT0_Clear = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDISOIN_Pos = @as(c_ulong, 11);
pub const USBD_INTENCLR_ENDISOIN_Msk = @as(c_ulong, 0x1) << USBD_INTENCLR_ENDISOIN_Pos;
pub const USBD_INTENCLR_ENDISOIN_Disabled = @as(c_ulong, 0);
pub const USBD_INTENCLR_ENDISOIN_Enabled = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDISOIN_Clear = @as(c_ulong, 1);
pub const USBD_INTENCLR_EP0DATADONE_Pos = @as(c_ulong, 10);
pub const USBD_INTENCLR_EP0DATADONE_Msk = @as(c_ulong, 0x1) << USBD_INTENCLR_EP0DATADONE_Pos;
pub const USBD_INTENCLR_EP0DATADONE_Disabled = @as(c_ulong, 0);
pub const USBD_INTENCLR_EP0DATADONE_Enabled = @as(c_ulong, 1);
pub const USBD_INTENCLR_EP0DATADONE_Clear = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPIN7_Pos = @as(c_ulong, 9);
pub const USBD_INTENCLR_ENDEPIN7_Msk = @as(c_ulong, 0x1) << USBD_INTENCLR_ENDEPIN7_Pos;
pub const USBD_INTENCLR_ENDEPIN7_Disabled = @as(c_ulong, 0);
pub const USBD_INTENCLR_ENDEPIN7_Enabled = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPIN7_Clear = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPIN6_Pos = @as(c_ulong, 8);
pub const USBD_INTENCLR_ENDEPIN6_Msk = @as(c_ulong, 0x1) << USBD_INTENCLR_ENDEPIN6_Pos;
pub const USBD_INTENCLR_ENDEPIN6_Disabled = @as(c_ulong, 0);
pub const USBD_INTENCLR_ENDEPIN6_Enabled = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPIN6_Clear = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPIN5_Pos = @as(c_ulong, 7);
pub const USBD_INTENCLR_ENDEPIN5_Msk = @as(c_ulong, 0x1) << USBD_INTENCLR_ENDEPIN5_Pos;
pub const USBD_INTENCLR_ENDEPIN5_Disabled = @as(c_ulong, 0);
pub const USBD_INTENCLR_ENDEPIN5_Enabled = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPIN5_Clear = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPIN4_Pos = @as(c_ulong, 6);
pub const USBD_INTENCLR_ENDEPIN4_Msk = @as(c_ulong, 0x1) << USBD_INTENCLR_ENDEPIN4_Pos;
pub const USBD_INTENCLR_ENDEPIN4_Disabled = @as(c_ulong, 0);
pub const USBD_INTENCLR_ENDEPIN4_Enabled = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPIN4_Clear = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPIN3_Pos = @as(c_ulong, 5);
pub const USBD_INTENCLR_ENDEPIN3_Msk = @as(c_ulong, 0x1) << USBD_INTENCLR_ENDEPIN3_Pos;
pub const USBD_INTENCLR_ENDEPIN3_Disabled = @as(c_ulong, 0);
pub const USBD_INTENCLR_ENDEPIN3_Enabled = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPIN3_Clear = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPIN2_Pos = @as(c_ulong, 4);
pub const USBD_INTENCLR_ENDEPIN2_Msk = @as(c_ulong, 0x1) << USBD_INTENCLR_ENDEPIN2_Pos;
pub const USBD_INTENCLR_ENDEPIN2_Disabled = @as(c_ulong, 0);
pub const USBD_INTENCLR_ENDEPIN2_Enabled = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPIN2_Clear = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPIN1_Pos = @as(c_ulong, 3);
pub const USBD_INTENCLR_ENDEPIN1_Msk = @as(c_ulong, 0x1) << USBD_INTENCLR_ENDEPIN1_Pos;
pub const USBD_INTENCLR_ENDEPIN1_Disabled = @as(c_ulong, 0);
pub const USBD_INTENCLR_ENDEPIN1_Enabled = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPIN1_Clear = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPIN0_Pos = @as(c_ulong, 2);
pub const USBD_INTENCLR_ENDEPIN0_Msk = @as(c_ulong, 0x1) << USBD_INTENCLR_ENDEPIN0_Pos;
pub const USBD_INTENCLR_ENDEPIN0_Disabled = @as(c_ulong, 0);
pub const USBD_INTENCLR_ENDEPIN0_Enabled = @as(c_ulong, 1);
pub const USBD_INTENCLR_ENDEPIN0_Clear = @as(c_ulong, 1);
pub const USBD_INTENCLR_STARTED_Pos = @as(c_ulong, 1);
pub const USBD_INTENCLR_STARTED_Msk = @as(c_ulong, 0x1) << USBD_INTENCLR_STARTED_Pos;
pub const USBD_INTENCLR_STARTED_Disabled = @as(c_ulong, 0);
pub const USBD_INTENCLR_STARTED_Enabled = @as(c_ulong, 1);
pub const USBD_INTENCLR_STARTED_Clear = @as(c_ulong, 1);
pub const USBD_INTENCLR_USBRESET_Pos = @as(c_ulong, 0);
pub const USBD_INTENCLR_USBRESET_Msk = @as(c_ulong, 0x1) << USBD_INTENCLR_USBRESET_Pos;
pub const USBD_INTENCLR_USBRESET_Disabled = @as(c_ulong, 0);
pub const USBD_INTENCLR_USBRESET_Enabled = @as(c_ulong, 1);
pub const USBD_INTENCLR_USBRESET_Clear = @as(c_ulong, 1);
pub const USBD_EVENTCAUSE_READY_Pos = @as(c_ulong, 11);
pub const USBD_EVENTCAUSE_READY_Msk = @as(c_ulong, 0x1) << USBD_EVENTCAUSE_READY_Pos;
pub const USBD_EVENTCAUSE_READY_NotDetected = @as(c_ulong, 0);
pub const USBD_EVENTCAUSE_READY_Ready = @as(c_ulong, 1);
pub const USBD_EVENTCAUSE_USBWUALLOWED_Pos = @as(c_ulong, 10);
pub const USBD_EVENTCAUSE_USBWUALLOWED_Msk = @as(c_ulong, 0x1) << USBD_EVENTCAUSE_USBWUALLOWED_Pos;
pub const USBD_EVENTCAUSE_USBWUALLOWED_NotAllowed = @as(c_ulong, 0);
pub const USBD_EVENTCAUSE_USBWUALLOWED_Allowed = @as(c_ulong, 1);
pub const USBD_EVENTCAUSE_RESUME_Pos = @as(c_ulong, 9);
pub const USBD_EVENTCAUSE_RESUME_Msk = @as(c_ulong, 0x1) << USBD_EVENTCAUSE_RESUME_Pos;
pub const USBD_EVENTCAUSE_RESUME_NotDetected = @as(c_ulong, 0);
pub const USBD_EVENTCAUSE_RESUME_Detected = @as(c_ulong, 1);
pub const USBD_EVENTCAUSE_SUSPEND_Pos = @as(c_ulong, 8);
pub const USBD_EVENTCAUSE_SUSPEND_Msk = @as(c_ulong, 0x1) << USBD_EVENTCAUSE_SUSPEND_Pos;
pub const USBD_EVENTCAUSE_SUSPEND_NotDetected = @as(c_ulong, 0);
pub const USBD_EVENTCAUSE_SUSPEND_Detected = @as(c_ulong, 1);
pub const USBD_EVENTCAUSE_ISOOUTCRC_Pos = @as(c_ulong, 0);
pub const USBD_EVENTCAUSE_ISOOUTCRC_Msk = @as(c_ulong, 0x1) << USBD_EVENTCAUSE_ISOOUTCRC_Pos;
pub const USBD_EVENTCAUSE_ISOOUTCRC_NotDetected = @as(c_ulong, 0);
pub const USBD_EVENTCAUSE_ISOOUTCRC_Detected = @as(c_ulong, 1);
pub const USBD_HALTED_EPIN_GETSTATUS_Pos = @as(c_ulong, 0);
pub const USBD_HALTED_EPIN_GETSTATUS_Msk = @as(c_ulong, 0xFFFF) << USBD_HALTED_EPIN_GETSTATUS_Pos;
pub const USBD_HALTED_EPIN_GETSTATUS_NotHalted = @as(c_ulong, 0);
pub const USBD_HALTED_EPIN_GETSTATUS_Halted = @as(c_ulong, 1);
pub const USBD_HALTED_EPOUT_GETSTATUS_Pos = @as(c_ulong, 0);
pub const USBD_HALTED_EPOUT_GETSTATUS_Msk = @as(c_ulong, 0xFFFF) << USBD_HALTED_EPOUT_GETSTATUS_Pos;
pub const USBD_HALTED_EPOUT_GETSTATUS_NotHalted = @as(c_ulong, 0);
pub const USBD_HALTED_EPOUT_GETSTATUS_Halted = @as(c_ulong, 1);
pub const USBD_EPSTATUS_EPOUT8_Pos = @as(c_ulong, 24);
pub const USBD_EPSTATUS_EPOUT8_Msk = @as(c_ulong, 0x1) << USBD_EPSTATUS_EPOUT8_Pos;
pub const USBD_EPSTATUS_EPOUT8_NoData = @as(c_ulong, 0);
pub const USBD_EPSTATUS_EPOUT8_DataDone = @as(c_ulong, 1);
pub const USBD_EPSTATUS_EPOUT7_Pos = @as(c_ulong, 23);
pub const USBD_EPSTATUS_EPOUT7_Msk = @as(c_ulong, 0x1) << USBD_EPSTATUS_EPOUT7_Pos;
pub const USBD_EPSTATUS_EPOUT7_NoData = @as(c_ulong, 0);
pub const USBD_EPSTATUS_EPOUT7_DataDone = @as(c_ulong, 1);
pub const USBD_EPSTATUS_EPOUT6_Pos = @as(c_ulong, 22);
pub const USBD_EPSTATUS_EPOUT6_Msk = @as(c_ulong, 0x1) << USBD_EPSTATUS_EPOUT6_Pos;
pub const USBD_EPSTATUS_EPOUT6_NoData = @as(c_ulong, 0);
pub const USBD_EPSTATUS_EPOUT6_DataDone = @as(c_ulong, 1);
pub const USBD_EPSTATUS_EPOUT5_Pos = @as(c_ulong, 21);
pub const USBD_EPSTATUS_EPOUT5_Msk = @as(c_ulong, 0x1) << USBD_EPSTATUS_EPOUT5_Pos;
pub const USBD_EPSTATUS_EPOUT5_NoData = @as(c_ulong, 0);
pub const USBD_EPSTATUS_EPOUT5_DataDone = @as(c_ulong, 1);
pub const USBD_EPSTATUS_EPOUT4_Pos = @as(c_ulong, 20);
pub const USBD_EPSTATUS_EPOUT4_Msk = @as(c_ulong, 0x1) << USBD_EPSTATUS_EPOUT4_Pos;
pub const USBD_EPSTATUS_EPOUT4_NoData = @as(c_ulong, 0);
pub const USBD_EPSTATUS_EPOUT4_DataDone = @as(c_ulong, 1);
pub const USBD_EPSTATUS_EPOUT3_Pos = @as(c_ulong, 19);
pub const USBD_EPSTATUS_EPOUT3_Msk = @as(c_ulong, 0x1) << USBD_EPSTATUS_EPOUT3_Pos;
pub const USBD_EPSTATUS_EPOUT3_NoData = @as(c_ulong, 0);
pub const USBD_EPSTATUS_EPOUT3_DataDone = @as(c_ulong, 1);
pub const USBD_EPSTATUS_EPOUT2_Pos = @as(c_ulong, 18);
pub const USBD_EPSTATUS_EPOUT2_Msk = @as(c_ulong, 0x1) << USBD_EPSTATUS_EPOUT2_Pos;
pub const USBD_EPSTATUS_EPOUT2_NoData = @as(c_ulong, 0);
pub const USBD_EPSTATUS_EPOUT2_DataDone = @as(c_ulong, 1);
pub const USBD_EPSTATUS_EPOUT1_Pos = @as(c_ulong, 17);
pub const USBD_EPSTATUS_EPOUT1_Msk = @as(c_ulong, 0x1) << USBD_EPSTATUS_EPOUT1_Pos;
pub const USBD_EPSTATUS_EPOUT1_NoData = @as(c_ulong, 0);
pub const USBD_EPSTATUS_EPOUT1_DataDone = @as(c_ulong, 1);
pub const USBD_EPSTATUS_EPOUT0_Pos = @as(c_ulong, 16);
pub const USBD_EPSTATUS_EPOUT0_Msk = @as(c_ulong, 0x1) << USBD_EPSTATUS_EPOUT0_Pos;
pub const USBD_EPSTATUS_EPOUT0_NoData = @as(c_ulong, 0);
pub const USBD_EPSTATUS_EPOUT0_DataDone = @as(c_ulong, 1);
pub const USBD_EPSTATUS_EPIN8_Pos = @as(c_ulong, 8);
pub const USBD_EPSTATUS_EPIN8_Msk = @as(c_ulong, 0x1) << USBD_EPSTATUS_EPIN8_Pos;
pub const USBD_EPSTATUS_EPIN8_NoData = @as(c_ulong, 0);
pub const USBD_EPSTATUS_EPIN8_DataDone = @as(c_ulong, 1);
pub const USBD_EPSTATUS_EPIN7_Pos = @as(c_ulong, 7);
pub const USBD_EPSTATUS_EPIN7_Msk = @as(c_ulong, 0x1) << USBD_EPSTATUS_EPIN7_Pos;
pub const USBD_EPSTATUS_EPIN7_NoData = @as(c_ulong, 0);
pub const USBD_EPSTATUS_EPIN7_DataDone = @as(c_ulong, 1);
pub const USBD_EPSTATUS_EPIN6_Pos = @as(c_ulong, 6);
pub const USBD_EPSTATUS_EPIN6_Msk = @as(c_ulong, 0x1) << USBD_EPSTATUS_EPIN6_Pos;
pub const USBD_EPSTATUS_EPIN6_NoData = @as(c_ulong, 0);
pub const USBD_EPSTATUS_EPIN6_DataDone = @as(c_ulong, 1);
pub const USBD_EPSTATUS_EPIN5_Pos = @as(c_ulong, 5);
pub const USBD_EPSTATUS_EPIN5_Msk = @as(c_ulong, 0x1) << USBD_EPSTATUS_EPIN5_Pos;
pub const USBD_EPSTATUS_EPIN5_NoData = @as(c_ulong, 0);
pub const USBD_EPSTATUS_EPIN5_DataDone = @as(c_ulong, 1);
pub const USBD_EPSTATUS_EPIN4_Pos = @as(c_ulong, 4);
pub const USBD_EPSTATUS_EPIN4_Msk = @as(c_ulong, 0x1) << USBD_EPSTATUS_EPIN4_Pos;
pub const USBD_EPSTATUS_EPIN4_NoData = @as(c_ulong, 0);
pub const USBD_EPSTATUS_EPIN4_DataDone = @as(c_ulong, 1);
pub const USBD_EPSTATUS_EPIN3_Pos = @as(c_ulong, 3);
pub const USBD_EPSTATUS_EPIN3_Msk = @as(c_ulong, 0x1) << USBD_EPSTATUS_EPIN3_Pos;
pub const USBD_EPSTATUS_EPIN3_NoData = @as(c_ulong, 0);
pub const USBD_EPSTATUS_EPIN3_DataDone = @as(c_ulong, 1);
pub const USBD_EPSTATUS_EPIN2_Pos = @as(c_ulong, 2);
pub const USBD_EPSTATUS_EPIN2_Msk = @as(c_ulong, 0x1) << USBD_EPSTATUS_EPIN2_Pos;
pub const USBD_EPSTATUS_EPIN2_NoData = @as(c_ulong, 0);
pub const USBD_EPSTATUS_EPIN2_DataDone = @as(c_ulong, 1);
pub const USBD_EPSTATUS_EPIN1_Pos = @as(c_ulong, 1);
pub const USBD_EPSTATUS_EPIN1_Msk = @as(c_ulong, 0x1) << USBD_EPSTATUS_EPIN1_Pos;
pub const USBD_EPSTATUS_EPIN1_NoData = @as(c_ulong, 0);
pub const USBD_EPSTATUS_EPIN1_DataDone = @as(c_ulong, 1);
pub const USBD_EPSTATUS_EPIN0_Pos = @as(c_ulong, 0);
pub const USBD_EPSTATUS_EPIN0_Msk = @as(c_ulong, 0x1) << USBD_EPSTATUS_EPIN0_Pos;
pub const USBD_EPSTATUS_EPIN0_NoData = @as(c_ulong, 0);
pub const USBD_EPSTATUS_EPIN0_DataDone = @as(c_ulong, 1);
pub const USBD_EPDATASTATUS_EPOUT7_Pos = @as(c_ulong, 23);
pub const USBD_EPDATASTATUS_EPOUT7_Msk = @as(c_ulong, 0x1) << USBD_EPDATASTATUS_EPOUT7_Pos;
pub const USBD_EPDATASTATUS_EPOUT7_NotStarted = @as(c_ulong, 0);
pub const USBD_EPDATASTATUS_EPOUT7_Started = @as(c_ulong, 1);
pub const USBD_EPDATASTATUS_EPOUT6_Pos = @as(c_ulong, 22);
pub const USBD_EPDATASTATUS_EPOUT6_Msk = @as(c_ulong, 0x1) << USBD_EPDATASTATUS_EPOUT6_Pos;
pub const USBD_EPDATASTATUS_EPOUT6_NotStarted = @as(c_ulong, 0);
pub const USBD_EPDATASTATUS_EPOUT6_Started = @as(c_ulong, 1);
pub const USBD_EPDATASTATUS_EPOUT5_Pos = @as(c_ulong, 21);
pub const USBD_EPDATASTATUS_EPOUT5_Msk = @as(c_ulong, 0x1) << USBD_EPDATASTATUS_EPOUT5_Pos;
pub const USBD_EPDATASTATUS_EPOUT5_NotStarted = @as(c_ulong, 0);
pub const USBD_EPDATASTATUS_EPOUT5_Started = @as(c_ulong, 1);
pub const USBD_EPDATASTATUS_EPOUT4_Pos = @as(c_ulong, 20);
pub const USBD_EPDATASTATUS_EPOUT4_Msk = @as(c_ulong, 0x1) << USBD_EPDATASTATUS_EPOUT4_Pos;
pub const USBD_EPDATASTATUS_EPOUT4_NotStarted = @as(c_ulong, 0);
pub const USBD_EPDATASTATUS_EPOUT4_Started = @as(c_ulong, 1);
pub const USBD_EPDATASTATUS_EPOUT3_Pos = @as(c_ulong, 19);
pub const USBD_EPDATASTATUS_EPOUT3_Msk = @as(c_ulong, 0x1) << USBD_EPDATASTATUS_EPOUT3_Pos;
pub const USBD_EPDATASTATUS_EPOUT3_NotStarted = @as(c_ulong, 0);
pub const USBD_EPDATASTATUS_EPOUT3_Started = @as(c_ulong, 1);
pub const USBD_EPDATASTATUS_EPOUT2_Pos = @as(c_ulong, 18);
pub const USBD_EPDATASTATUS_EPOUT2_Msk = @as(c_ulong, 0x1) << USBD_EPDATASTATUS_EPOUT2_Pos;
pub const USBD_EPDATASTATUS_EPOUT2_NotStarted = @as(c_ulong, 0);
pub const USBD_EPDATASTATUS_EPOUT2_Started = @as(c_ulong, 1);
pub const USBD_EPDATASTATUS_EPOUT1_Pos = @as(c_ulong, 17);
pub const USBD_EPDATASTATUS_EPOUT1_Msk = @as(c_ulong, 0x1) << USBD_EPDATASTATUS_EPOUT1_Pos;
pub const USBD_EPDATASTATUS_EPOUT1_NotStarted = @as(c_ulong, 0);
pub const USBD_EPDATASTATUS_EPOUT1_Started = @as(c_ulong, 1);
pub const USBD_EPDATASTATUS_EPIN7_Pos = @as(c_ulong, 7);
pub const USBD_EPDATASTATUS_EPIN7_Msk = @as(c_ulong, 0x1) << USBD_EPDATASTATUS_EPIN7_Pos;
pub const USBD_EPDATASTATUS_EPIN7_NotDone = @as(c_ulong, 0);
pub const USBD_EPDATASTATUS_EPIN7_DataDone = @as(c_ulong, 1);
pub const USBD_EPDATASTATUS_EPIN6_Pos = @as(c_ulong, 6);
pub const USBD_EPDATASTATUS_EPIN6_Msk = @as(c_ulong, 0x1) << USBD_EPDATASTATUS_EPIN6_Pos;
pub const USBD_EPDATASTATUS_EPIN6_NotDone = @as(c_ulong, 0);
pub const USBD_EPDATASTATUS_EPIN6_DataDone = @as(c_ulong, 1);
pub const USBD_EPDATASTATUS_EPIN5_Pos = @as(c_ulong, 5);
pub const USBD_EPDATASTATUS_EPIN5_Msk = @as(c_ulong, 0x1) << USBD_EPDATASTATUS_EPIN5_Pos;
pub const USBD_EPDATASTATUS_EPIN5_NotDone = @as(c_ulong, 0);
pub const USBD_EPDATASTATUS_EPIN5_DataDone = @as(c_ulong, 1);
pub const USBD_EPDATASTATUS_EPIN4_Pos = @as(c_ulong, 4);
pub const USBD_EPDATASTATUS_EPIN4_Msk = @as(c_ulong, 0x1) << USBD_EPDATASTATUS_EPIN4_Pos;
pub const USBD_EPDATASTATUS_EPIN4_NotDone = @as(c_ulong, 0);
pub const USBD_EPDATASTATUS_EPIN4_DataDone = @as(c_ulong, 1);
pub const USBD_EPDATASTATUS_EPIN3_Pos = @as(c_ulong, 3);
pub const USBD_EPDATASTATUS_EPIN3_Msk = @as(c_ulong, 0x1) << USBD_EPDATASTATUS_EPIN3_Pos;
pub const USBD_EPDATASTATUS_EPIN3_NotDone = @as(c_ulong, 0);
pub const USBD_EPDATASTATUS_EPIN3_DataDone = @as(c_ulong, 1);
pub const USBD_EPDATASTATUS_EPIN2_Pos = @as(c_ulong, 2);
pub const USBD_EPDATASTATUS_EPIN2_Msk = @as(c_ulong, 0x1) << USBD_EPDATASTATUS_EPIN2_Pos;
pub const USBD_EPDATASTATUS_EPIN2_NotDone = @as(c_ulong, 0);
pub const USBD_EPDATASTATUS_EPIN2_DataDone = @as(c_ulong, 1);
pub const USBD_EPDATASTATUS_EPIN1_Pos = @as(c_ulong, 1);
pub const USBD_EPDATASTATUS_EPIN1_Msk = @as(c_ulong, 0x1) << USBD_EPDATASTATUS_EPIN1_Pos;
pub const USBD_EPDATASTATUS_EPIN1_NotDone = @as(c_ulong, 0);
pub const USBD_EPDATASTATUS_EPIN1_DataDone = @as(c_ulong, 1);
pub const USBD_USBADDR_ADDR_Pos = @as(c_ulong, 0);
pub const USBD_USBADDR_ADDR_Msk = @as(c_ulong, 0x7F) << USBD_USBADDR_ADDR_Pos;
pub const USBD_BMREQUESTTYPE_DIRECTION_Pos = @as(c_ulong, 7);
pub const USBD_BMREQUESTTYPE_DIRECTION_Msk = @as(c_ulong, 0x1) << USBD_BMREQUESTTYPE_DIRECTION_Pos;
pub const USBD_BMREQUESTTYPE_DIRECTION_HostToDevice = @as(c_ulong, 0);
pub const USBD_BMREQUESTTYPE_DIRECTION_DeviceToHost = @as(c_ulong, 1);
pub const USBD_BMREQUESTTYPE_TYPE_Pos = @as(c_ulong, 5);
pub const USBD_BMREQUESTTYPE_TYPE_Msk = @as(c_ulong, 0x3) << USBD_BMREQUESTTYPE_TYPE_Pos;
pub const USBD_BMREQUESTTYPE_TYPE_Standard = @as(c_ulong, 0);
pub const USBD_BMREQUESTTYPE_TYPE_Class = @as(c_ulong, 1);
pub const USBD_BMREQUESTTYPE_TYPE_Vendor = @as(c_ulong, 2);
pub const USBD_BMREQUESTTYPE_RECIPIENT_Pos = @as(c_ulong, 0);
pub const USBD_BMREQUESTTYPE_RECIPIENT_Msk = @as(c_ulong, 0x1F) << USBD_BMREQUESTTYPE_RECIPIENT_Pos;
pub const USBD_BMREQUESTTYPE_RECIPIENT_Device = @as(c_ulong, 0);
pub const USBD_BMREQUESTTYPE_RECIPIENT_Interface = @as(c_ulong, 1);
pub const USBD_BMREQUESTTYPE_RECIPIENT_Endpoint = @as(c_ulong, 2);
pub const USBD_BMREQUESTTYPE_RECIPIENT_Other = @as(c_ulong, 3);
pub const USBD_BREQUEST_BREQUEST_Pos = @as(c_ulong, 0);
pub const USBD_BREQUEST_BREQUEST_Msk = @as(c_ulong, 0xFF) << USBD_BREQUEST_BREQUEST_Pos;
pub const USBD_BREQUEST_BREQUEST_STD_GET_STATUS = @as(c_ulong, 0);
pub const USBD_BREQUEST_BREQUEST_STD_CLEAR_FEATURE = @as(c_ulong, 1);
pub const USBD_BREQUEST_BREQUEST_STD_SET_FEATURE = @as(c_ulong, 3);
pub const USBD_BREQUEST_BREQUEST_STD_SET_ADDRESS = @as(c_ulong, 5);
pub const USBD_BREQUEST_BREQUEST_STD_GET_DESCRIPTOR = @as(c_ulong, 6);
pub const USBD_BREQUEST_BREQUEST_STD_SET_DESCRIPTOR = @as(c_ulong, 7);
pub const USBD_BREQUEST_BREQUEST_STD_GET_CONFIGURATION = @as(c_ulong, 8);
pub const USBD_BREQUEST_BREQUEST_STD_SET_CONFIGURATION = @as(c_ulong, 9);
pub const USBD_BREQUEST_BREQUEST_STD_GET_INTERFACE = @as(c_ulong, 10);
pub const USBD_BREQUEST_BREQUEST_STD_SET_INTERFACE = @as(c_ulong, 11);
pub const USBD_BREQUEST_BREQUEST_STD_SYNCH_FRAME = @as(c_ulong, 12);
pub const USBD_WVALUEL_WVALUEL_Pos = @as(c_ulong, 0);
pub const USBD_WVALUEL_WVALUEL_Msk = @as(c_ulong, 0xFF) << USBD_WVALUEL_WVALUEL_Pos;
pub const USBD_WVALUEH_WVALUEH_Pos = @as(c_ulong, 0);
pub const USBD_WVALUEH_WVALUEH_Msk = @as(c_ulong, 0xFF) << USBD_WVALUEH_WVALUEH_Pos;
pub const USBD_WINDEXL_WINDEXL_Pos = @as(c_ulong, 0);
pub const USBD_WINDEXL_WINDEXL_Msk = @as(c_ulong, 0xFF) << USBD_WINDEXL_WINDEXL_Pos;
pub const USBD_WINDEXH_WINDEXH_Pos = @as(c_ulong, 0);
pub const USBD_WINDEXH_WINDEXH_Msk = @as(c_ulong, 0xFF) << USBD_WINDEXH_WINDEXH_Pos;
pub const USBD_WLENGTHL_WLENGTHL_Pos = @as(c_ulong, 0);
pub const USBD_WLENGTHL_WLENGTHL_Msk = @as(c_ulong, 0xFF) << USBD_WLENGTHL_WLENGTHL_Pos;
pub const USBD_WLENGTHH_WLENGTHH_Pos = @as(c_ulong, 0);
pub const USBD_WLENGTHH_WLENGTHH_Msk = @as(c_ulong, 0xFF) << USBD_WLENGTHH_WLENGTHH_Pos;
pub const USBD_SIZE_EPOUT_SIZE_Pos = @as(c_ulong, 0);
pub const USBD_SIZE_EPOUT_SIZE_Msk = @as(c_ulong, 0x7F) << USBD_SIZE_EPOUT_SIZE_Pos;
pub const USBD_SIZE_ISOOUT_ZERO_Pos = @as(c_ulong, 16);
pub const USBD_SIZE_ISOOUT_ZERO_Msk = @as(c_ulong, 0x1) << USBD_SIZE_ISOOUT_ZERO_Pos;
pub const USBD_SIZE_ISOOUT_ZERO_Normal = @as(c_ulong, 0);
pub const USBD_SIZE_ISOOUT_ZERO_ZeroData = @as(c_ulong, 1);
pub const USBD_SIZE_ISOOUT_SIZE_Pos = @as(c_ulong, 0);
pub const USBD_SIZE_ISOOUT_SIZE_Msk = @as(c_ulong, 0x3FF) << USBD_SIZE_ISOOUT_SIZE_Pos;
pub const USBD_ENABLE_ENABLE_Pos = @as(c_ulong, 0);
pub const USBD_ENABLE_ENABLE_Msk = @as(c_ulong, 0x1) << USBD_ENABLE_ENABLE_Pos;
pub const USBD_ENABLE_ENABLE_Disabled = @as(c_ulong, 0);
pub const USBD_ENABLE_ENABLE_Enabled = @as(c_ulong, 1);
pub const USBD_USBPULLUP_CONNECT_Pos = @as(c_ulong, 0);
pub const USBD_USBPULLUP_CONNECT_Msk = @as(c_ulong, 0x1) << USBD_USBPULLUP_CONNECT_Pos;
pub const USBD_USBPULLUP_CONNECT_Disabled = @as(c_ulong, 0);
pub const USBD_USBPULLUP_CONNECT_Enabled = @as(c_ulong, 1);
pub const USBD_DPDMVALUE_STATE_Pos = @as(c_ulong, 0);
pub const USBD_DPDMVALUE_STATE_Msk = @as(c_ulong, 0x1F) << USBD_DPDMVALUE_STATE_Pos;
pub const USBD_DPDMVALUE_STATE_Resume = @as(c_ulong, 1);
pub const USBD_DPDMVALUE_STATE_J = @as(c_ulong, 2);
pub const USBD_DPDMVALUE_STATE_K = @as(c_ulong, 4);
pub const USBD_DTOGGLE_VALUE_Pos = @as(c_ulong, 8);
pub const USBD_DTOGGLE_VALUE_Msk = @as(c_ulong, 0x3) << USBD_DTOGGLE_VALUE_Pos;
pub const USBD_DTOGGLE_VALUE_Nop = @as(c_ulong, 0);
pub const USBD_DTOGGLE_VALUE_Data0 = @as(c_ulong, 1);
pub const USBD_DTOGGLE_VALUE_Data1 = @as(c_ulong, 2);
pub const USBD_DTOGGLE_IO_Pos = @as(c_ulong, 7);
pub const USBD_DTOGGLE_IO_Msk = @as(c_ulong, 0x1) << USBD_DTOGGLE_IO_Pos;
pub const USBD_DTOGGLE_IO_Out = @as(c_ulong, 0);
pub const USBD_DTOGGLE_IO_In = @as(c_ulong, 1);
pub const USBD_DTOGGLE_EP_Pos = @as(c_ulong, 0);
pub const USBD_DTOGGLE_EP_Msk = @as(c_ulong, 0x7) << USBD_DTOGGLE_EP_Pos;
pub const USBD_EPINEN_ISOIN_Pos = @as(c_ulong, 8);
pub const USBD_EPINEN_ISOIN_Msk = @as(c_ulong, 0x1) << USBD_EPINEN_ISOIN_Pos;
pub const USBD_EPINEN_ISOIN_Disable = @as(c_ulong, 0);
pub const USBD_EPINEN_ISOIN_Enable = @as(c_ulong, 1);
pub const USBD_EPINEN_IN7_Pos = @as(c_ulong, 7);
pub const USBD_EPINEN_IN7_Msk = @as(c_ulong, 0x1) << USBD_EPINEN_IN7_Pos;
pub const USBD_EPINEN_IN7_Disable = @as(c_ulong, 0);
pub const USBD_EPINEN_IN7_Enable = @as(c_ulong, 1);
pub const USBD_EPINEN_IN6_Pos = @as(c_ulong, 6);
pub const USBD_EPINEN_IN6_Msk = @as(c_ulong, 0x1) << USBD_EPINEN_IN6_Pos;
pub const USBD_EPINEN_IN6_Disable = @as(c_ulong, 0);
pub const USBD_EPINEN_IN6_Enable = @as(c_ulong, 1);
pub const USBD_EPINEN_IN5_Pos = @as(c_ulong, 5);
pub const USBD_EPINEN_IN5_Msk = @as(c_ulong, 0x1) << USBD_EPINEN_IN5_Pos;
pub const USBD_EPINEN_IN5_Disable = @as(c_ulong, 0);
pub const USBD_EPINEN_IN5_Enable = @as(c_ulong, 1);
pub const USBD_EPINEN_IN4_Pos = @as(c_ulong, 4);
pub const USBD_EPINEN_IN4_Msk = @as(c_ulong, 0x1) << USBD_EPINEN_IN4_Pos;
pub const USBD_EPINEN_IN4_Disable = @as(c_ulong, 0);
pub const USBD_EPINEN_IN4_Enable = @as(c_ulong, 1);
pub const USBD_EPINEN_IN3_Pos = @as(c_ulong, 3);
pub const USBD_EPINEN_IN3_Msk = @as(c_ulong, 0x1) << USBD_EPINEN_IN3_Pos;
pub const USBD_EPINEN_IN3_Disable = @as(c_ulong, 0);
pub const USBD_EPINEN_IN3_Enable = @as(c_ulong, 1);
pub const USBD_EPINEN_IN2_Pos = @as(c_ulong, 2);
pub const USBD_EPINEN_IN2_Msk = @as(c_ulong, 0x1) << USBD_EPINEN_IN2_Pos;
pub const USBD_EPINEN_IN2_Disable = @as(c_ulong, 0);
pub const USBD_EPINEN_IN2_Enable = @as(c_ulong, 1);
pub const USBD_EPINEN_IN1_Pos = @as(c_ulong, 1);
pub const USBD_EPINEN_IN1_Msk = @as(c_ulong, 0x1) << USBD_EPINEN_IN1_Pos;
pub const USBD_EPINEN_IN1_Disable = @as(c_ulong, 0);
pub const USBD_EPINEN_IN1_Enable = @as(c_ulong, 1);
pub const USBD_EPINEN_IN0_Pos = @as(c_ulong, 0);
pub const USBD_EPINEN_IN0_Msk = @as(c_ulong, 0x1) << USBD_EPINEN_IN0_Pos;
pub const USBD_EPINEN_IN0_Disable = @as(c_ulong, 0);
pub const USBD_EPINEN_IN0_Enable = @as(c_ulong, 1);
pub const USBD_EPOUTEN_ISOOUT_Pos = @as(c_ulong, 8);
pub const USBD_EPOUTEN_ISOOUT_Msk = @as(c_ulong, 0x1) << USBD_EPOUTEN_ISOOUT_Pos;
pub const USBD_EPOUTEN_ISOOUT_Disable = @as(c_ulong, 0);
pub const USBD_EPOUTEN_ISOOUT_Enable = @as(c_ulong, 1);
pub const USBD_EPOUTEN_OUT7_Pos = @as(c_ulong, 7);
pub const USBD_EPOUTEN_OUT7_Msk = @as(c_ulong, 0x1) << USBD_EPOUTEN_OUT7_Pos;
pub const USBD_EPOUTEN_OUT7_Disable = @as(c_ulong, 0);
pub const USBD_EPOUTEN_OUT7_Enable = @as(c_ulong, 1);
pub const USBD_EPOUTEN_OUT6_Pos = @as(c_ulong, 6);
pub const USBD_EPOUTEN_OUT6_Msk = @as(c_ulong, 0x1) << USBD_EPOUTEN_OUT6_Pos;
pub const USBD_EPOUTEN_OUT6_Disable = @as(c_ulong, 0);
pub const USBD_EPOUTEN_OUT6_Enable = @as(c_ulong, 1);
pub const USBD_EPOUTEN_OUT5_Pos = @as(c_ulong, 5);
pub const USBD_EPOUTEN_OUT5_Msk = @as(c_ulong, 0x1) << USBD_EPOUTEN_OUT5_Pos;
pub const USBD_EPOUTEN_OUT5_Disable = @as(c_ulong, 0);
pub const USBD_EPOUTEN_OUT5_Enable = @as(c_ulong, 1);
pub const USBD_EPOUTEN_OUT4_Pos = @as(c_ulong, 4);
pub const USBD_EPOUTEN_OUT4_Msk = @as(c_ulong, 0x1) << USBD_EPOUTEN_OUT4_Pos;
pub const USBD_EPOUTEN_OUT4_Disable = @as(c_ulong, 0);
pub const USBD_EPOUTEN_OUT4_Enable = @as(c_ulong, 1);
pub const USBD_EPOUTEN_OUT3_Pos = @as(c_ulong, 3);
pub const USBD_EPOUTEN_OUT3_Msk = @as(c_ulong, 0x1) << USBD_EPOUTEN_OUT3_Pos;
pub const USBD_EPOUTEN_OUT3_Disable = @as(c_ulong, 0);
pub const USBD_EPOUTEN_OUT3_Enable = @as(c_ulong, 1);
pub const USBD_EPOUTEN_OUT2_Pos = @as(c_ulong, 2);
pub const USBD_EPOUTEN_OUT2_Msk = @as(c_ulong, 0x1) << USBD_EPOUTEN_OUT2_Pos;
pub const USBD_EPOUTEN_OUT2_Disable = @as(c_ulong, 0);
pub const USBD_EPOUTEN_OUT2_Enable = @as(c_ulong, 1);
pub const USBD_EPOUTEN_OUT1_Pos = @as(c_ulong, 1);
pub const USBD_EPOUTEN_OUT1_Msk = @as(c_ulong, 0x1) << USBD_EPOUTEN_OUT1_Pos;
pub const USBD_EPOUTEN_OUT1_Disable = @as(c_ulong, 0);
pub const USBD_EPOUTEN_OUT1_Enable = @as(c_ulong, 1);
pub const USBD_EPOUTEN_OUT0_Pos = @as(c_ulong, 0);
pub const USBD_EPOUTEN_OUT0_Msk = @as(c_ulong, 0x1) << USBD_EPOUTEN_OUT0_Pos;
pub const USBD_EPOUTEN_OUT0_Disable = @as(c_ulong, 0);
pub const USBD_EPOUTEN_OUT0_Enable = @as(c_ulong, 1);
pub const USBD_EPSTALL_STALL_Pos = @as(c_ulong, 8);
pub const USBD_EPSTALL_STALL_Msk = @as(c_ulong, 0x1) << USBD_EPSTALL_STALL_Pos;
pub const USBD_EPSTALL_STALL_UnStall = @as(c_ulong, 0);
pub const USBD_EPSTALL_STALL_Stall = @as(c_ulong, 1);
pub const USBD_EPSTALL_IO_Pos = @as(c_ulong, 7);
pub const USBD_EPSTALL_IO_Msk = @as(c_ulong, 0x1) << USBD_EPSTALL_IO_Pos;
pub const USBD_EPSTALL_IO_Out = @as(c_ulong, 0);
pub const USBD_EPSTALL_IO_In = @as(c_ulong, 1);
pub const USBD_EPSTALL_EP_Pos = @as(c_ulong, 0);
pub const USBD_EPSTALL_EP_Msk = @as(c_ulong, 0x7) << USBD_EPSTALL_EP_Pos;
pub const USBD_ISOSPLIT_SPLIT_Pos = @as(c_ulong, 0);
pub const USBD_ISOSPLIT_SPLIT_Msk = @as(c_ulong, 0xFFFF) << USBD_ISOSPLIT_SPLIT_Pos;
pub const USBD_ISOSPLIT_SPLIT_OneDir = @as(c_ulong, 0x0000);
pub const USBD_ISOSPLIT_SPLIT_HalfIN = @as(c_ulong, 0x0080);
pub const USBD_FRAMECNTR_FRAMECNTR_Pos = @as(c_ulong, 0);
pub const USBD_FRAMECNTR_FRAMECNTR_Msk = @as(c_ulong, 0x7FF) << USBD_FRAMECNTR_FRAMECNTR_Pos;
pub const USBD_LOWPOWER_LOWPOWER_Pos = @as(c_ulong, 0);
pub const USBD_LOWPOWER_LOWPOWER_Msk = @as(c_ulong, 0x1) << USBD_LOWPOWER_LOWPOWER_Pos;
pub const USBD_LOWPOWER_LOWPOWER_ForceNormal = @as(c_ulong, 0);
pub const USBD_LOWPOWER_LOWPOWER_LowPower = @as(c_ulong, 1);
pub const USBD_ISOINCONFIG_RESPONSE_Pos = @as(c_ulong, 0);
pub const USBD_ISOINCONFIG_RESPONSE_Msk = @as(c_ulong, 0x1) << USBD_ISOINCONFIG_RESPONSE_Pos;
pub const USBD_ISOINCONFIG_RESPONSE_NoResp = @as(c_ulong, 0);
pub const USBD_ISOINCONFIG_RESPONSE_ZeroData = @as(c_ulong, 1);
pub const USBD_EPIN_PTR_PTR_Pos = @as(c_ulong, 0);
pub const USBD_EPIN_PTR_PTR_Msk = @as(c_ulong, 0xFFFFFFFF) << USBD_EPIN_PTR_PTR_Pos;
pub const USBD_EPIN_MAXCNT_MAXCNT_Pos = @as(c_ulong, 0);
pub const USBD_EPIN_MAXCNT_MAXCNT_Msk = @as(c_ulong, 0x7F) << USBD_EPIN_MAXCNT_MAXCNT_Pos;
pub const USBD_EPIN_AMOUNT_AMOUNT_Pos = @as(c_ulong, 0);
pub const USBD_EPIN_AMOUNT_AMOUNT_Msk = @as(c_ulong, 0x7F) << USBD_EPIN_AMOUNT_AMOUNT_Pos;
pub const USBD_ISOIN_PTR_PTR_Pos = @as(c_ulong, 0);
pub const USBD_ISOIN_PTR_PTR_Msk = @as(c_ulong, 0xFFFFFFFF) << USBD_ISOIN_PTR_PTR_Pos;
pub const USBD_ISOIN_MAXCNT_MAXCNT_Pos = @as(c_ulong, 0);
pub const USBD_ISOIN_MAXCNT_MAXCNT_Msk = @as(c_ulong, 0x3FF) << USBD_ISOIN_MAXCNT_MAXCNT_Pos;
pub const USBD_ISOIN_AMOUNT_AMOUNT_Pos = @as(c_ulong, 0);
pub const USBD_ISOIN_AMOUNT_AMOUNT_Msk = @as(c_ulong, 0x3FF) << USBD_ISOIN_AMOUNT_AMOUNT_Pos;
pub const USBD_EPOUT_PTR_PTR_Pos = @as(c_ulong, 0);
pub const USBD_EPOUT_PTR_PTR_Msk = @as(c_ulong, 0xFFFFFFFF) << USBD_EPOUT_PTR_PTR_Pos;
pub const USBD_EPOUT_MAXCNT_MAXCNT_Pos = @as(c_ulong, 0);
pub const USBD_EPOUT_MAXCNT_MAXCNT_Msk = @as(c_ulong, 0x7F) << USBD_EPOUT_MAXCNT_MAXCNT_Pos;
pub const USBD_EPOUT_AMOUNT_AMOUNT_Pos = @as(c_ulong, 0);
pub const USBD_EPOUT_AMOUNT_AMOUNT_Msk = @as(c_ulong, 0x7F) << USBD_EPOUT_AMOUNT_AMOUNT_Pos;
pub const USBD_ISOOUT_PTR_PTR_Pos = @as(c_ulong, 0);
pub const USBD_ISOOUT_PTR_PTR_Msk = @as(c_ulong, 0xFFFFFFFF) << USBD_ISOOUT_PTR_PTR_Pos;
pub const USBD_ISOOUT_MAXCNT_MAXCNT_Pos = @as(c_ulong, 0);
pub const USBD_ISOOUT_MAXCNT_MAXCNT_Msk = @as(c_ulong, 0x3FF) << USBD_ISOOUT_MAXCNT_MAXCNT_Pos;
pub const USBD_ISOOUT_AMOUNT_AMOUNT_Pos = @as(c_ulong, 0);
pub const USBD_ISOOUT_AMOUNT_AMOUNT_Msk = @as(c_ulong, 0x3FF) << USBD_ISOOUT_AMOUNT_AMOUNT_Pos;
pub const WDT_TASKS_START_TASKS_START_Pos = @as(c_ulong, 0);
pub const WDT_TASKS_START_TASKS_START_Msk = @as(c_ulong, 0x1) << WDT_TASKS_START_TASKS_START_Pos;
pub const WDT_TASKS_START_TASKS_START_Trigger = @as(c_ulong, 1);
pub const WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_Pos = @as(c_ulong, 0);
pub const WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_Msk = @as(c_ulong, 0x1) << WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_Pos;
pub const WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_NotGenerated = @as(c_ulong, 0);
pub const WDT_EVENTS_TIMEOUT_EVENTS_TIMEOUT_Generated = @as(c_ulong, 1);
pub const WDT_INTENSET_TIMEOUT_Pos = @as(c_ulong, 0);
pub const WDT_INTENSET_TIMEOUT_Msk = @as(c_ulong, 0x1) << WDT_INTENSET_TIMEOUT_Pos;
pub const WDT_INTENSET_TIMEOUT_Disabled = @as(c_ulong, 0);
pub const WDT_INTENSET_TIMEOUT_Enabled = @as(c_ulong, 1);
pub const WDT_INTENSET_TIMEOUT_Set = @as(c_ulong, 1);
pub const WDT_INTENCLR_TIMEOUT_Pos = @as(c_ulong, 0);
pub const WDT_INTENCLR_TIMEOUT_Msk = @as(c_ulong, 0x1) << WDT_INTENCLR_TIMEOUT_Pos;
pub const WDT_INTENCLR_TIMEOUT_Disabled = @as(c_ulong, 0);
pub const WDT_INTENCLR_TIMEOUT_Enabled = @as(c_ulong, 1);
pub const WDT_INTENCLR_TIMEOUT_Clear = @as(c_ulong, 1);
pub const WDT_RUNSTATUS_RUNSTATUS_Pos = @as(c_ulong, 0);
pub const WDT_RUNSTATUS_RUNSTATUS_Msk = @as(c_ulong, 0x1) << WDT_RUNSTATUS_RUNSTATUS_Pos;
pub const WDT_RUNSTATUS_RUNSTATUS_NotRunning = @as(c_ulong, 0);
pub const WDT_RUNSTATUS_RUNSTATUS_Running = @as(c_ulong, 1);
pub const WDT_REQSTATUS_RR7_Pos = @as(c_ulong, 7);
pub const WDT_REQSTATUS_RR7_Msk = @as(c_ulong, 0x1) << WDT_REQSTATUS_RR7_Pos;
pub const WDT_REQSTATUS_RR7_DisabledOrRequested = @as(c_ulong, 0);
pub const WDT_REQSTATUS_RR7_EnabledAndUnrequested = @as(c_ulong, 1);
pub const WDT_REQSTATUS_RR6_Pos = @as(c_ulong, 6);
pub const WDT_REQSTATUS_RR6_Msk = @as(c_ulong, 0x1) << WDT_REQSTATUS_RR6_Pos;
pub const WDT_REQSTATUS_RR6_DisabledOrRequested = @as(c_ulong, 0);
pub const WDT_REQSTATUS_RR6_EnabledAndUnrequested = @as(c_ulong, 1);
pub const WDT_REQSTATUS_RR5_Pos = @as(c_ulong, 5);
pub const WDT_REQSTATUS_RR5_Msk = @as(c_ulong, 0x1) << WDT_REQSTATUS_RR5_Pos;
pub const WDT_REQSTATUS_RR5_DisabledOrRequested = @as(c_ulong, 0);
pub const WDT_REQSTATUS_RR5_EnabledAndUnrequested = @as(c_ulong, 1);
pub const WDT_REQSTATUS_RR4_Pos = @as(c_ulong, 4);
pub const WDT_REQSTATUS_RR4_Msk = @as(c_ulong, 0x1) << WDT_REQSTATUS_RR4_Pos;
pub const WDT_REQSTATUS_RR4_DisabledOrRequested = @as(c_ulong, 0);
pub const WDT_REQSTATUS_RR4_EnabledAndUnrequested = @as(c_ulong, 1);
pub const WDT_REQSTATUS_RR3_Pos = @as(c_ulong, 3);
pub const WDT_REQSTATUS_RR3_Msk = @as(c_ulong, 0x1) << WDT_REQSTATUS_RR3_Pos;
pub const WDT_REQSTATUS_RR3_DisabledOrRequested = @as(c_ulong, 0);
pub const WDT_REQSTATUS_RR3_EnabledAndUnrequested = @as(c_ulong, 1);
pub const WDT_REQSTATUS_RR2_Pos = @as(c_ulong, 2);
pub const WDT_REQSTATUS_RR2_Msk = @as(c_ulong, 0x1) << WDT_REQSTATUS_RR2_Pos;
pub const WDT_REQSTATUS_RR2_DisabledOrRequested = @as(c_ulong, 0);
pub const WDT_REQSTATUS_RR2_EnabledAndUnrequested = @as(c_ulong, 1);
pub const WDT_REQSTATUS_RR1_Pos = @as(c_ulong, 1);
pub const WDT_REQSTATUS_RR1_Msk = @as(c_ulong, 0x1) << WDT_REQSTATUS_RR1_Pos;
pub const WDT_REQSTATUS_RR1_DisabledOrRequested = @as(c_ulong, 0);
pub const WDT_REQSTATUS_RR1_EnabledAndUnrequested = @as(c_ulong, 1);
pub const WDT_REQSTATUS_RR0_Pos = @as(c_ulong, 0);
pub const WDT_REQSTATUS_RR0_Msk = @as(c_ulong, 0x1) << WDT_REQSTATUS_RR0_Pos;
pub const WDT_REQSTATUS_RR0_DisabledOrRequested = @as(c_ulong, 0);
pub const WDT_REQSTATUS_RR0_EnabledAndUnrequested = @as(c_ulong, 1);
pub const WDT_CRV_CRV_Pos = @as(c_ulong, 0);
pub const WDT_CRV_CRV_Msk = @as(c_ulong, 0xFFFFFFFF) << WDT_CRV_CRV_Pos;
pub const WDT_RREN_RR7_Pos = @as(c_ulong, 7);
pub const WDT_RREN_RR7_Msk = @as(c_ulong, 0x1) << WDT_RREN_RR7_Pos;
pub const WDT_RREN_RR7_Disabled = @as(c_ulong, 0);
pub const WDT_RREN_RR7_Enabled = @as(c_ulong, 1);
pub const WDT_RREN_RR6_Pos = @as(c_ulong, 6);
pub const WDT_RREN_RR6_Msk = @as(c_ulong, 0x1) << WDT_RREN_RR6_Pos;
pub const WDT_RREN_RR6_Disabled = @as(c_ulong, 0);
pub const WDT_RREN_RR6_Enabled = @as(c_ulong, 1);
pub const WDT_RREN_RR5_Pos = @as(c_ulong, 5);
pub const WDT_RREN_RR5_Msk = @as(c_ulong, 0x1) << WDT_RREN_RR5_Pos;
pub const WDT_RREN_RR5_Disabled = @as(c_ulong, 0);
pub const WDT_RREN_RR5_Enabled = @as(c_ulong, 1);
pub const WDT_RREN_RR4_Pos = @as(c_ulong, 4);
pub const WDT_RREN_RR4_Msk = @as(c_ulong, 0x1) << WDT_RREN_RR4_Pos;
pub const WDT_RREN_RR4_Disabled = @as(c_ulong, 0);
pub const WDT_RREN_RR4_Enabled = @as(c_ulong, 1);
pub const WDT_RREN_RR3_Pos = @as(c_ulong, 3);
pub const WDT_RREN_RR3_Msk = @as(c_ulong, 0x1) << WDT_RREN_RR3_Pos;
pub const WDT_RREN_RR3_Disabled = @as(c_ulong, 0);
pub const WDT_RREN_RR3_Enabled = @as(c_ulong, 1);
pub const WDT_RREN_RR2_Pos = @as(c_ulong, 2);
pub const WDT_RREN_RR2_Msk = @as(c_ulong, 0x1) << WDT_RREN_RR2_Pos;
pub const WDT_RREN_RR2_Disabled = @as(c_ulong, 0);
pub const WDT_RREN_RR2_Enabled = @as(c_ulong, 1);
pub const WDT_RREN_RR1_Pos = @as(c_ulong, 1);
pub const WDT_RREN_RR1_Msk = @as(c_ulong, 0x1) << WDT_RREN_RR1_Pos;
pub const WDT_RREN_RR1_Disabled = @as(c_ulong, 0);
pub const WDT_RREN_RR1_Enabled = @as(c_ulong, 1);
pub const WDT_RREN_RR0_Pos = @as(c_ulong, 0);
pub const WDT_RREN_RR0_Msk = @as(c_ulong, 0x1) << WDT_RREN_RR0_Pos;
pub const WDT_RREN_RR0_Disabled = @as(c_ulong, 0);
pub const WDT_RREN_RR0_Enabled = @as(c_ulong, 1);
pub const WDT_CONFIG_HALT_Pos = @as(c_ulong, 3);
pub const WDT_CONFIG_HALT_Msk = @as(c_ulong, 0x1) << WDT_CONFIG_HALT_Pos;
pub const WDT_CONFIG_HALT_Pause = @as(c_ulong, 0);
pub const WDT_CONFIG_HALT_Run = @as(c_ulong, 1);
pub const WDT_CONFIG_SLEEP_Pos = @as(c_ulong, 0);
pub const WDT_CONFIG_SLEEP_Msk = @as(c_ulong, 0x1) << WDT_CONFIG_SLEEP_Pos;
pub const WDT_CONFIG_SLEEP_Pause = @as(c_ulong, 0);
pub const WDT_CONFIG_SLEEP_Run = @as(c_ulong, 1);
pub const WDT_RR_RR_Pos = @as(c_ulong, 0);
pub const WDT_RR_RR_Msk = @as(c_ulong, 0xFFFFFFFF) << WDT_RR_RR_Pos;
pub const WDT_RR_RR_Reload = @as(c_ulong, 0x6E524635);
pub const UART0_IRQHandler = UARTE0_UART0_IRQHandler;
pub const SPI0_TWI0_IRQHandler = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler;
pub const SPI1_TWI1_IRQHandler = SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler;
pub const ADC_IRQHandler = SAADC_IRQHandler;
pub const LPCOMP_IRQHandler = COMP_LPCOMP_IRQHandler;
pub const SWI0_IRQHandler = SWI0_EGU0_IRQHandler;
pub const SWI1_IRQHandler = SWI1_EGU1_IRQHandler;
pub const SWI2_IRQHandler = SWI2_EGU2_IRQHandler;
pub const SWI3_IRQHandler = SWI3_EGU3_IRQHandler;
pub const SWI4_IRQHandler = SWI4_EGU4_IRQHandler;
pub const SWI5_IRQHandler = SWI5_EGU5_IRQHandler;
pub const UART0_IRQn = UARTE0_UART0_IRQn;
pub const SPI0_TWI0_IRQn = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
pub const SPI1_TWI1_IRQn = SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQn;
pub const ADC_IRQn = SAADC_IRQn;
pub const LPCOMP_IRQn = COMP_LPCOMP_IRQn;
pub const SWI0_IRQn = SWI0_EGU0_IRQn;
pub const SWI1_IRQn = SWI1_EGU1_IRQn;
pub const SWI2_IRQn = SWI2_EGU2_IRQn;
pub const SWI3_IRQn = SWI3_EGU3_IRQn;
pub const SWI4_IRQn = SWI4_EGU4_IRQn;
pub const SWI5_IRQn = SWI5_EGU5_IRQn;
pub const RBPCONF = APPROTECT;
pub const UICR_RBPCONF_PALL_Pos = UICR_APPROTECT_PALL_Pos;
pub const UICR_RBPCONF_PALL_Msk = UICR_APPROTECT_PALL_Msk;
pub const UICR_RBPCONF_PALL_Enabled = UICR_APPROTECT_PALL_Enabled;
pub const UICR_RBPCONF_PALL_Disabled = UICR_APPROTECT_PALL_Disabled;
pub const NRF_GPIO = NRF_P0;
pub const NRF_GPIO_BASE = NRF_P0_BASE;
pub const PSELLED = PSEL.LED;
pub const PSELA = PSEL.A;
pub const PSELB = PSEL.B;
pub const PSELSCK = PSEL.SCK;
pub const PSELMISO = PSEL.MISO;
pub const PSELMOSI = PSEL.MOSI;
pub const PSELCSN = PSEL.CSN;
pub const RXDPTR = RXD.PTR;
pub const MAXRX = RXD.MAXCNT;
pub const AMOUNTRX = RXD.AMOUNT;
pub const SPIS_MAXRX_MAXRX_Pos = SPIS_RXD_MAXCNT_MAXCNT_Pos;
pub const SPIS_MAXRX_MAXRX_Msk = SPIS_RXD_MAXCNT_MAXCNT_Msk;
pub const SPIS_AMOUNTRX_AMOUNTRX_Pos = SPIS_RXD_AMOUNT_AMOUNT_Pos;
pub const SPIS_AMOUNTRX_AMOUNTRX_Msk = SPIS_RXD_AMOUNT_AMOUNT_Msk;
pub const TXDPTR = TXD.PTR;
pub const MAXTX = TXD.MAXCNT;
pub const AMOUNTTX = TXD.AMOUNT;
pub const SPIS_MAXTX_MAXTX_Pos = SPIS_TXD_MAXCNT_MAXCNT_Pos;
pub const SPIS_MAXTX_MAXTX_Msk = SPIS_TXD_MAXCNT_MAXCNT_Msk;
pub const SPIS_AMOUNTTX_AMOUNTTX_Pos = SPIS_TXD_AMOUNT_AMOUNT_Pos;
pub const SPIS_AMOUNTTX_AMOUNTTX_Msk = SPIS_TXD_AMOUNT_AMOUNT_Msk;
pub const PSELRTS = PSEL.RTS;
pub const PSELTXD = PSEL.TXD;
pub const PSELCTS = PSEL.CTS;
pub const PSELRXD = PSEL.RXD;
pub const PSELSCL = PSEL.SCL;
pub const PSELSDA = PSEL.SDA;
pub const ERASEPROTECTEDPAGE = ERASEPCR0;
pub const LPCOMP_COMP_IRQHandler = COMP_LPCOMP_IRQHandler;
pub const LPCOMP_COMP_IRQn = COMP_LPCOMP_IRQn;
pub const LPCOMP_REFSEL_REFSEL_SupplyOneEighthPrescaling = LPCOMP_REFSEL_REFSEL_Ref1_8Vdd;
pub const LPCOMP_REFSEL_REFSEL_SupplyTwoEighthsPrescaling = LPCOMP_REFSEL_REFSEL_Ref2_8Vdd;
pub const LPCOMP_REFSEL_REFSEL_SupplyThreeEighthsPrescaling = LPCOMP_REFSEL_REFSEL_Ref3_8Vdd;
pub const LPCOMP_REFSEL_REFSEL_SupplyFourEighthsPrescaling = LPCOMP_REFSEL_REFSEL_Ref4_8Vdd;
pub const LPCOMP_REFSEL_REFSEL_SupplyFiveEighthsPrescaling = LPCOMP_REFSEL_REFSEL_Ref5_8Vdd;
pub const LPCOMP_REFSEL_REFSEL_SupplySixEighthsPrescaling = LPCOMP_REFSEL_REFSEL_Ref6_8Vdd;
pub const LPCOMP_REFSEL_REFSEL_SupplySevenEighthsPrescaling = LPCOMP_REFSEL_REFSEL_Ref7_8Vdd;
pub const RADIO_CRCCNF_SKIP_ADDR_Pos = RADIO_CRCCNF_SKIPADDR_Pos;
pub const RADIO_CRCCNF_SKIP_ADDR_Msk = RADIO_CRCCNF_SKIPADDR_Msk;
pub const RADIO_CRCCNF_SKIP_ADDR_Include = RADIO_CRCCNF_SKIPADDR_Include;
pub const RADIO_CRCCNF_SKIP_ADDR_Skip = RADIO_CRCCNF_SKIPADDR_Skip;
pub const DEVICEID0 = DEVICEID[0];
pub const DEVICEID1 = DEVICEID[1];
pub const ER0 = ER[0];
pub const ER1 = ER[1];
pub const ER2 = ER[2];
pub const ER3 = ER[3];
pub const IR0 = IR[0];
pub const IR1 = IR[1];
pub const IR2 = IR[2];
pub const IR3 = IR[3];
pub const DEVICEADDR0 = DEVICEADDR[0];
pub const DEVICEADDR1 = DEVICEADDR[1];
pub const TASKS_CHG0EN = TASKS_CHG[0].EN;
pub const TASKS_CHG0DIS = TASKS_CHG[0].DIS;
pub const TASKS_CHG1EN = TASKS_CHG[1].EN;
pub const TASKS_CHG1DIS = TASKS_CHG[1].DIS;
pub const TASKS_CHG2EN = TASKS_CHG[2].EN;
pub const TASKS_CHG2DIS = TASKS_CHG[2].DIS;
pub const TASKS_CHG3EN = TASKS_CHG[3].EN;
pub const TASKS_CHG3DIS = TASKS_CHG[3].DIS;
pub const CH0_EEP = CH[0].EEP;
pub const CH0_TEP = CH[0].TEP;
pub const CH1_EEP = CH[1].EEP;
pub const CH1_TEP = CH[1].TEP;
pub const CH2_EEP = CH[2].EEP;
pub const CH2_TEP = CH[2].TEP;
pub const CH3_EEP = CH[3].EEP;
pub const CH3_TEP = CH[3].TEP;
pub const CH4_EEP = CH[4].EEP;
pub const CH4_TEP = CH[4].TEP;
pub const CH5_EEP = CH[5].EEP;
pub const CH5_TEP = CH[5].TEP;
pub const CH6_EEP = CH[6].EEP;
pub const CH6_TEP = CH[6].TEP;
pub const CH7_EEP = CH[7].EEP;
pub const CH7_TEP = CH[7].TEP;
pub const CH8_EEP = CH[8].EEP;
pub const CH8_TEP = CH[8].TEP;
pub const CH9_EEP = CH[9].EEP;
pub const CH9_TEP = CH[9].TEP;
pub const CH10_EEP = CH[10].EEP;
pub const CH10_TEP = CH[10].TEP;
pub const CH11_EEP = CH[11].EEP;
pub const CH11_TEP = CH[11].TEP;
pub const CH12_EEP = CH[12].EEP;
pub const CH12_TEP = CH[12].TEP;
pub const CH13_EEP = CH[13].EEP;
pub const CH13_TEP = CH[13].TEP;
pub const CH14_EEP = CH[14].EEP;
pub const CH14_TEP = CH[14].TEP;
pub const CH15_EEP = CH[15].EEP;
pub const CH15_TEP = CH[15].TEP;
pub const CHG0 = CHG[0];
pub const CHG1 = CHG[1];
pub const CHG2 = CHG[2];
pub const CHG3 = CHG[3];
pub const PPI_CHG0_CH15_Pos = PPI_CHG_CH15_Pos;
pub const PPI_CHG0_CH15_Msk = PPI_CHG_CH15_Msk;
pub const PPI_CHG0_CH15_Excluded = PPI_CHG_CH15_Excluded;
pub const PPI_CHG0_CH15_Included = PPI_CHG_CH15_Included;
pub const PPI_CHG0_CH14_Pos = PPI_CHG_CH14_Pos;
pub const PPI_CHG0_CH14_Msk = PPI_CHG_CH14_Msk;
pub const PPI_CHG0_CH14_Excluded = PPI_CHG_CH14_Excluded;
pub const PPI_CHG0_CH14_Included = PPI_CHG_CH14_Included;
pub const PPI_CHG0_CH13_Pos = PPI_CHG_CH13_Pos;
pub const PPI_CHG0_CH13_Msk = PPI_CHG_CH13_Msk;
pub const PPI_CHG0_CH13_Excluded = PPI_CHG_CH13_Excluded;
pub const PPI_CHG0_CH13_Included = PPI_CHG_CH13_Included;
pub const PPI_CHG0_CH12_Pos = PPI_CHG_CH12_Pos;
pub const PPI_CHG0_CH12_Msk = PPI_CHG_CH12_Msk;
pub const PPI_CHG0_CH12_Excluded = PPI_CHG_CH12_Excluded;
pub const PPI_CHG0_CH12_Included = PPI_CHG_CH12_Included;
pub const PPI_CHG0_CH11_Pos = PPI_CHG_CH11_Pos;
pub const PPI_CHG0_CH11_Msk = PPI_CHG_CH11_Msk;
pub const PPI_CHG0_CH11_Excluded = PPI_CHG_CH11_Excluded;
pub const PPI_CHG0_CH11_Included = PPI_CHG_CH11_Included;
pub const PPI_CHG0_CH10_Pos = PPI_CHG_CH10_Pos;
pub const PPI_CHG0_CH10_Msk = PPI_CHG_CH10_Msk;
pub const PPI_CHG0_CH10_Excluded = PPI_CHG_CH10_Excluded;
pub const PPI_CHG0_CH10_Included = PPI_CHG_CH10_Included;
pub const PPI_CHG0_CH9_Pos = PPI_CHG_CH9_Pos;
pub const PPI_CHG0_CH9_Msk = PPI_CHG_CH9_Msk;
pub const PPI_CHG0_CH9_Excluded = PPI_CHG_CH9_Excluded;
pub const PPI_CHG0_CH9_Included = PPI_CHG_CH9_Included;
pub const PPI_CHG0_CH8_Pos = PPI_CHG_CH8_Pos;
pub const PPI_CHG0_CH8_Msk = PPI_CHG_CH8_Msk;
pub const PPI_CHG0_CH8_Excluded = PPI_CHG_CH8_Excluded;
pub const PPI_CHG0_CH8_Included = PPI_CHG_CH8_Included;
pub const PPI_CHG0_CH7_Pos = PPI_CHG_CH7_Pos;
pub const PPI_CHG0_CH7_Msk = PPI_CHG_CH7_Msk;
pub const PPI_CHG0_CH7_Excluded = PPI_CHG_CH7_Excluded;
pub const PPI_CHG0_CH7_Included = PPI_CHG_CH7_Included;
pub const PPI_CHG0_CH6_Pos = PPI_CHG_CH6_Pos;
pub const PPI_CHG0_CH6_Msk = PPI_CHG_CH6_Msk;
pub const PPI_CHG0_CH6_Excluded = PPI_CHG_CH6_Excluded;
pub const PPI_CHG0_CH6_Included = PPI_CHG_CH6_Included;
pub const PPI_CHG0_CH5_Pos = PPI_CHG_CH5_Pos;
pub const PPI_CHG0_CH5_Msk = PPI_CHG_CH5_Msk;
pub const PPI_CHG0_CH5_Excluded = PPI_CHG_CH5_Excluded;
pub const PPI_CHG0_CH5_Included = PPI_CHG_CH5_Included;
pub const PPI_CHG0_CH4_Pos = PPI_CHG_CH4_Pos;
pub const PPI_CHG0_CH4_Msk = PPI_CHG_CH4_Msk;
pub const PPI_CHG0_CH4_Excluded = PPI_CHG_CH4_Excluded;
pub const PPI_CHG0_CH4_Included = PPI_CHG_CH4_Included;
pub const PPI_CHG0_CH3_Pos = PPI_CHG_CH3_Pos;
pub const PPI_CHG0_CH3_Msk = PPI_CHG_CH3_Msk;
pub const PPI_CHG0_CH3_Excluded = PPI_CHG_CH3_Excluded;
pub const PPI_CHG0_CH3_Included = PPI_CHG_CH3_Included;
pub const PPI_CHG0_CH2_Pos = PPI_CHG_CH2_Pos;
pub const PPI_CHG0_CH2_Msk = PPI_CHG_CH2_Msk;
pub const PPI_CHG0_CH2_Excluded = PPI_CHG_CH2_Excluded;
pub const PPI_CHG0_CH2_Included = PPI_CHG_CH2_Included;
pub const PPI_CHG0_CH1_Pos = PPI_CHG_CH1_Pos;
pub const PPI_CHG0_CH1_Msk = PPI_CHG_CH1_Msk;
pub const PPI_CHG0_CH1_Excluded = PPI_CHG_CH1_Excluded;
pub const PPI_CHG0_CH1_Included = PPI_CHG_CH1_Included;
pub const PPI_CHG0_CH0_Pos = PPI_CHG_CH0_Pos;
pub const PPI_CHG0_CH0_Msk = PPI_CHG_CH0_Msk;
pub const PPI_CHG0_CH0_Excluded = PPI_CHG_CH0_Excluded;
pub const PPI_CHG0_CH0_Included = PPI_CHG_CH0_Included;
pub const PPI_CHG1_CH15_Pos = PPI_CHG_CH15_Pos;
pub const PPI_CHG1_CH15_Msk = PPI_CHG_CH15_Msk;
pub const PPI_CHG1_CH15_Excluded = PPI_CHG_CH15_Excluded;
pub const PPI_CHG1_CH15_Included = PPI_CHG_CH15_Included;
pub const PPI_CHG1_CH14_Pos = PPI_CHG_CH14_Pos;
pub const PPI_CHG1_CH14_Msk = PPI_CHG_CH14_Msk;
pub const PPI_CHG1_CH14_Excluded = PPI_CHG_CH14_Excluded;
pub const PPI_CHG1_CH14_Included = PPI_CHG_CH14_Included;
pub const PPI_CHG1_CH13_Pos = PPI_CHG_CH13_Pos;
pub const PPI_CHG1_CH13_Msk = PPI_CHG_CH13_Msk;
pub const PPI_CHG1_CH13_Excluded = PPI_CHG_CH13_Excluded;
pub const PPI_CHG1_CH13_Included = PPI_CHG_CH13_Included;
pub const PPI_CHG1_CH12_Pos = PPI_CHG_CH12_Pos;
pub const PPI_CHG1_CH12_Msk = PPI_CHG_CH12_Msk;
pub const PPI_CHG1_CH12_Excluded = PPI_CHG_CH12_Excluded;
pub const PPI_CHG1_CH12_Included = PPI_CHG_CH12_Included;
pub const PPI_CHG1_CH11_Pos = PPI_CHG_CH11_Pos;
pub const PPI_CHG1_CH11_Msk = PPI_CHG_CH11_Msk;
pub const PPI_CHG1_CH11_Excluded = PPI_CHG_CH11_Excluded;
pub const PPI_CHG1_CH11_Included = PPI_CHG_CH11_Included;
pub const PPI_CHG1_CH10_Pos = PPI_CHG_CH10_Pos;
pub const PPI_CHG1_CH10_Msk = PPI_CHG_CH10_Msk;
pub const PPI_CHG1_CH10_Excluded = PPI_CHG_CH10_Excluded;
pub const PPI_CHG1_CH10_Included = PPI_CHG_CH10_Included;
pub const PPI_CHG1_CH9_Pos = PPI_CHG_CH9_Pos;
pub const PPI_CHG1_CH9_Msk = PPI_CHG_CH9_Msk;
pub const PPI_CHG1_CH9_Excluded = PPI_CHG_CH9_Excluded;
pub const PPI_CHG1_CH9_Included = PPI_CHG_CH9_Included;
pub const PPI_CHG1_CH8_Pos = PPI_CHG_CH8_Pos;
pub const PPI_CHG1_CH8_Msk = PPI_CHG_CH8_Msk;
pub const PPI_CHG1_CH8_Excluded = PPI_CHG_CH8_Excluded;
pub const PPI_CHG1_CH8_Included = PPI_CHG_CH8_Included;
pub const PPI_CHG1_CH7_Pos = PPI_CHG_CH7_Pos;
pub const PPI_CHG1_CH7_Msk = PPI_CHG_CH7_Msk;
pub const PPI_CHG1_CH7_Excluded = PPI_CHG_CH7_Excluded;
pub const PPI_CHG1_CH7_Included = PPI_CHG_CH7_Included;
pub const PPI_CHG1_CH6_Pos = PPI_CHG_CH6_Pos;
pub const PPI_CHG1_CH6_Msk = PPI_CHG_CH6_Msk;
pub const PPI_CHG1_CH6_Excluded = PPI_CHG_CH6_Excluded;
pub const PPI_CHG1_CH6_Included = PPI_CHG_CH6_Included;
pub const PPI_CHG1_CH5_Pos = PPI_CHG_CH5_Pos;
pub const PPI_CHG1_CH5_Msk = PPI_CHG_CH5_Msk;
pub const PPI_CHG1_CH5_Excluded = PPI_CHG_CH5_Excluded;
pub const PPI_CHG1_CH5_Included = PPI_CHG_CH5_Included;
pub const PPI_CHG1_CH4_Pos = PPI_CHG_CH4_Pos;
pub const PPI_CHG1_CH4_Msk = PPI_CHG_CH4_Msk;
pub const PPI_CHG1_CH4_Excluded = PPI_CHG_CH4_Excluded;
pub const PPI_CHG1_CH4_Included = PPI_CHG_CH4_Included;
pub const PPI_CHG1_CH3_Pos = PPI_CHG_CH3_Pos;
pub const PPI_CHG1_CH3_Msk = PPI_CHG_CH3_Msk;
pub const PPI_CHG1_CH3_Excluded = PPI_CHG_CH3_Excluded;
pub const PPI_CHG1_CH3_Included = PPI_CHG_CH3_Included;
pub const PPI_CHG1_CH2_Pos = PPI_CHG_CH2_Pos;
pub const PPI_CHG1_CH2_Msk = PPI_CHG_CH2_Msk;
pub const PPI_CHG1_CH2_Excluded = PPI_CHG_CH2_Excluded;
pub const PPI_CHG1_CH2_Included = PPI_CHG_CH2_Included;
pub const PPI_CHG1_CH1_Pos = PPI_CHG_CH1_Pos;
pub const PPI_CHG1_CH1_Msk = PPI_CHG_CH1_Msk;
pub const PPI_CHG1_CH1_Excluded = PPI_CHG_CH1_Excluded;
pub const PPI_CHG1_CH1_Included = PPI_CHG_CH1_Included;
pub const PPI_CHG1_CH0_Pos = PPI_CHG_CH0_Pos;
pub const PPI_CHG1_CH0_Msk = PPI_CHG_CH0_Msk;
pub const PPI_CHG1_CH0_Excluded = PPI_CHG_CH0_Excluded;
pub const PPI_CHG1_CH0_Included = PPI_CHG_CH0_Included;
pub const PPI_CHG2_CH15_Pos = PPI_CHG_CH15_Pos;
pub const PPI_CHG2_CH15_Msk = PPI_CHG_CH15_Msk;
pub const PPI_CHG2_CH15_Excluded = PPI_CHG_CH15_Excluded;
pub const PPI_CHG2_CH15_Included = PPI_CHG_CH15_Included;
pub const PPI_CHG2_CH14_Pos = PPI_CHG_CH14_Pos;
pub const PPI_CHG2_CH14_Msk = PPI_CHG_CH14_Msk;
pub const PPI_CHG2_CH14_Excluded = PPI_CHG_CH14_Excluded;
pub const PPI_CHG2_CH14_Included = PPI_CHG_CH14_Included;
pub const PPI_CHG2_CH13_Pos = PPI_CHG_CH13_Pos;
pub const PPI_CHG2_CH13_Msk = PPI_CHG_CH13_Msk;
pub const PPI_CHG2_CH13_Excluded = PPI_CHG_CH13_Excluded;
pub const PPI_CHG2_CH13_Included = PPI_CHG_CH13_Included;
pub const PPI_CHG2_CH12_Pos = PPI_CHG_CH12_Pos;
pub const PPI_CHG2_CH12_Msk = PPI_CHG_CH12_Msk;
pub const PPI_CHG2_CH12_Excluded = PPI_CHG_CH12_Excluded;
pub const PPI_CHG2_CH12_Included = PPI_CHG_CH12_Included;
pub const PPI_CHG2_CH11_Pos = PPI_CHG_CH11_Pos;
pub const PPI_CHG2_CH11_Msk = PPI_CHG_CH11_Msk;
pub const PPI_CHG2_CH11_Excluded = PPI_CHG_CH11_Excluded;
pub const PPI_CHG2_CH11_Included = PPI_CHG_CH11_Included;
pub const PPI_CHG2_CH10_Pos = PPI_CHG_CH10_Pos;
pub const PPI_CHG2_CH10_Msk = PPI_CHG_CH10_Msk;
pub const PPI_CHG2_CH10_Excluded = PPI_CHG_CH10_Excluded;
pub const PPI_CHG2_CH10_Included = PPI_CHG_CH10_Included;
pub const PPI_CHG2_CH9_Pos = PPI_CHG_CH9_Pos;
pub const PPI_CHG2_CH9_Msk = PPI_CHG_CH9_Msk;
pub const PPI_CHG2_CH9_Excluded = PPI_CHG_CH9_Excluded;
pub const PPI_CHG2_CH9_Included = PPI_CHG_CH9_Included;
pub const PPI_CHG2_CH8_Pos = PPI_CHG_CH8_Pos;
pub const PPI_CHG2_CH8_Msk = PPI_CHG_CH8_Msk;
pub const PPI_CHG2_CH8_Excluded = PPI_CHG_CH8_Excluded;
pub const PPI_CHG2_CH8_Included = PPI_CHG_CH8_Included;
pub const PPI_CHG2_CH7_Pos = PPI_CHG_CH7_Pos;
pub const PPI_CHG2_CH7_Msk = PPI_CHG_CH7_Msk;
pub const PPI_CHG2_CH7_Excluded = PPI_CHG_CH7_Excluded;
pub const PPI_CHG2_CH7_Included = PPI_CHG_CH7_Included;
pub const PPI_CHG2_CH6_Pos = PPI_CHG_CH6_Pos;
pub const PPI_CHG2_CH6_Msk = PPI_CHG_CH6_Msk;
pub const PPI_CHG2_CH6_Excluded = PPI_CHG_CH6_Excluded;
pub const PPI_CHG2_CH6_Included = PPI_CHG_CH6_Included;
pub const PPI_CHG2_CH5_Pos = PPI_CHG_CH5_Pos;
pub const PPI_CHG2_CH5_Msk = PPI_CHG_CH5_Msk;
pub const PPI_CHG2_CH5_Excluded = PPI_CHG_CH5_Excluded;
pub const PPI_CHG2_CH5_Included = PPI_CHG_CH5_Included;
pub const PPI_CHG2_CH4_Pos = PPI_CHG_CH4_Pos;
pub const PPI_CHG2_CH4_Msk = PPI_CHG_CH4_Msk;
pub const PPI_CHG2_CH4_Excluded = PPI_CHG_CH4_Excluded;
pub const PPI_CHG2_CH4_Included = PPI_CHG_CH4_Included;
pub const PPI_CHG2_CH3_Pos = PPI_CHG_CH3_Pos;
pub const PPI_CHG2_CH3_Msk = PPI_CHG_CH3_Msk;
pub const PPI_CHG2_CH3_Excluded = PPI_CHG_CH3_Excluded;
pub const PPI_CHG2_CH3_Included = PPI_CHG_CH3_Included;
pub const PPI_CHG2_CH2_Pos = PPI_CHG_CH2_Pos;
pub const PPI_CHG2_CH2_Msk = PPI_CHG_CH2_Msk;
pub const PPI_CHG2_CH2_Excluded = PPI_CHG_CH2_Excluded;
pub const PPI_CHG2_CH2_Included = PPI_CHG_CH2_Included;
pub const PPI_CHG2_CH1_Pos = PPI_CHG_CH1_Pos;
pub const PPI_CHG2_CH1_Msk = PPI_CHG_CH1_Msk;
pub const PPI_CHG2_CH1_Excluded = PPI_CHG_CH1_Excluded;
pub const PPI_CHG2_CH1_Included = PPI_CHG_CH1_Included;
pub const PPI_CHG2_CH0_Pos = PPI_CHG_CH0_Pos;
pub const PPI_CHG2_CH0_Msk = PPI_CHG_CH0_Msk;
pub const PPI_CHG2_CH0_Excluded = PPI_CHG_CH0_Excluded;
pub const PPI_CHG2_CH0_Included = PPI_CHG_CH0_Included;
pub const PPI_CHG3_CH15_Pos = PPI_CHG_CH15_Pos;
pub const PPI_CHG3_CH15_Msk = PPI_CHG_CH15_Msk;
pub const PPI_CHG3_CH15_Excluded = PPI_CHG_CH15_Excluded;
pub const PPI_CHG3_CH15_Included = PPI_CHG_CH15_Included;
pub const PPI_CHG3_CH14_Pos = PPI_CHG_CH14_Pos;
pub const PPI_CHG3_CH14_Msk = PPI_CHG_CH14_Msk;
pub const PPI_CHG3_CH14_Excluded = PPI_CHG_CH14_Excluded;
pub const PPI_CHG3_CH14_Included = PPI_CHG_CH14_Included;
pub const PPI_CHG3_CH13_Pos = PPI_CHG_CH13_Pos;
pub const PPI_CHG3_CH13_Msk = PPI_CHG_CH13_Msk;
pub const PPI_CHG3_CH13_Excluded = PPI_CHG_CH13_Excluded;
pub const PPI_CHG3_CH13_Included = PPI_CHG_CH13_Included;
pub const PPI_CHG3_CH12_Pos = PPI_CHG_CH12_Pos;
pub const PPI_CHG3_CH12_Msk = PPI_CHG_CH12_Msk;
pub const PPI_CHG3_CH12_Excluded = PPI_CHG_CH12_Excluded;
pub const PPI_CHG3_CH12_Included = PPI_CHG_CH12_Included;
pub const PPI_CHG3_CH11_Pos = PPI_CHG_CH11_Pos;
pub const PPI_CHG3_CH11_Msk = PPI_CHG_CH11_Msk;
pub const PPI_CHG3_CH11_Excluded = PPI_CHG_CH11_Excluded;
pub const PPI_CHG3_CH11_Included = PPI_CHG_CH11_Included;
pub const PPI_CHG3_CH10_Pos = PPI_CHG_CH10_Pos;
pub const PPI_CHG3_CH10_Msk = PPI_CHG_CH10_Msk;
pub const PPI_CHG3_CH10_Excluded = PPI_CHG_CH10_Excluded;
pub const PPI_CHG3_CH10_Included = PPI_CHG_CH10_Included;
pub const PPI_CHG3_CH9_Pos = PPI_CHG_CH9_Pos;
pub const PPI_CHG3_CH9_Msk = PPI_CHG_CH9_Msk;
pub const PPI_CHG3_CH9_Excluded = PPI_CHG_CH9_Excluded;
pub const PPI_CHG3_CH9_Included = PPI_CHG_CH9_Included;
pub const PPI_CHG3_CH8_Pos = PPI_CHG_CH8_Pos;
pub const PPI_CHG3_CH8_Msk = PPI_CHG_CH8_Msk;
pub const PPI_CHG3_CH8_Excluded = PPI_CHG_CH8_Excluded;
pub const PPI_CHG3_CH8_Included = PPI_CHG_CH8_Included;
pub const PPI_CHG3_CH7_Pos = PPI_CHG_CH7_Pos;
pub const PPI_CHG3_CH7_Msk = PPI_CHG_CH7_Msk;
pub const PPI_CHG3_CH7_Excluded = PPI_CHG_CH7_Excluded;
pub const PPI_CHG3_CH7_Included = PPI_CHG_CH7_Included;
pub const PPI_CHG3_CH6_Pos = PPI_CHG_CH6_Pos;
pub const PPI_CHG3_CH6_Msk = PPI_CHG_CH6_Msk;
pub const PPI_CHG3_CH6_Excluded = PPI_CHG_CH6_Excluded;
pub const PPI_CHG3_CH6_Included = PPI_CHG_CH6_Included;
pub const PPI_CHG3_CH5_Pos = PPI_CHG_CH5_Pos;
pub const PPI_CHG3_CH5_Msk = PPI_CHG_CH5_Msk;
pub const PPI_CHG3_CH5_Excluded = PPI_CHG_CH5_Excluded;
pub const PPI_CHG3_CH5_Included = PPI_CHG_CH5_Included;
pub const PPI_CHG3_CH4_Pos = PPI_CHG_CH4_Pos;
pub const PPI_CHG3_CH4_Msk = PPI_CHG_CH4_Msk;
pub const PPI_CHG3_CH4_Excluded = PPI_CHG_CH4_Excluded;
pub const PPI_CHG3_CH4_Included = PPI_CHG_CH4_Included;
pub const PPI_CHG3_CH3_Pos = PPI_CHG_CH3_Pos;
pub const PPI_CHG3_CH3_Msk = PPI_CHG_CH3_Msk;
pub const PPI_CHG3_CH3_Excluded = PPI_CHG_CH3_Excluded;
pub const PPI_CHG3_CH3_Included = PPI_CHG_CH3_Included;
pub const PPI_CHG3_CH2_Pos = PPI_CHG_CH2_Pos;
pub const PPI_CHG3_CH2_Msk = PPI_CHG_CH2_Msk;
pub const PPI_CHG3_CH2_Excluded = PPI_CHG_CH2_Excluded;
pub const PPI_CHG3_CH2_Included = PPI_CHG_CH2_Included;
pub const PPI_CHG3_CH1_Pos = PPI_CHG_CH1_Pos;
pub const PPI_CHG3_CH1_Msk = PPI_CHG_CH1_Msk;
pub const PPI_CHG3_CH1_Excluded = PPI_CHG_CH1_Excluded;
pub const PPI_CHG3_CH1_Included = PPI_CHG_CH1_Included;
pub const PPI_CHG3_CH0_Pos = PPI_CHG_CH0_Pos;
pub const PPI_CHG3_CH0_Msk = PPI_CHG_CH0_Msk;
pub const PPI_CHG3_CH0_Excluded = PPI_CHG_CH0_Excluded;
pub const PPI_CHG3_CH0_Included = PPI_CHG_CH0_Included;
pub const LPCOMP_HYST_HYST_NoHyst = LPCOMP_HYST_HYST_Disabled;
pub const LPCOMP_HYST_HYST_Hyst50mV = LPCOMP_HYST_HYST_Enabled;
pub const I2S_ENABLE_ENABLE_DISABLE = I2S_ENABLE_ENABLE_Disabled;
pub const I2S_ENABLE_ENABLE_ENABLE = I2S_ENABLE_ENABLE_Enabled;
pub const I2S_CONFIG_MODE_MODE_MASTER = I2S_CONFIG_MODE_MODE_Master;
pub const I2S_CONFIG_MODE_MODE_SLAVE = I2S_CONFIG_MODE_MODE_Slave;
pub const I2S_CONFIG_RXEN_RXEN_DISABLE = I2S_CONFIG_RXEN_RXEN_Disabled;
pub const I2S_CONFIG_RXEN_RXEN_ENABLE = I2S_CONFIG_RXEN_RXEN_Enabled;
pub const I2S_CONFIG_TXEN_TXEN_DISABLE = I2S_CONFIG_TXEN_TXEN_Disabled;
pub const I2S_CONFIG_TXEN_TXEN_ENABLE = I2S_CONFIG_TXEN_TXEN_Enabled;
pub const I2S_CONFIG_MCKEN_MCKEN_DISABLE = I2S_CONFIG_MCKEN_MCKEN_Disabled;
pub const I2S_CONFIG_MCKEN_MCKEN_ENABLE = I2S_CONFIG_MCKEN_MCKEN_Enabled;
pub const I2S_CONFIG_SWIDTH_SWIDTH_8BIT = I2S_CONFIG_SWIDTH_SWIDTH_8Bit;
pub const I2S_CONFIG_SWIDTH_SWIDTH_16BIT = I2S_CONFIG_SWIDTH_SWIDTH_16Bit;
pub const I2S_CONFIG_SWIDTH_SWIDTH_24BIT = I2S_CONFIG_SWIDTH_SWIDTH_24Bit;
pub const I2S_CONFIG_ALIGN_ALIGN_LEFT = I2S_CONFIG_ALIGN_ALIGN_Left;
pub const I2S_CONFIG_ALIGN_ALIGN_RIGHT = I2S_CONFIG_ALIGN_ALIGN_Right;
pub const I2S_CONFIG_FORMAT_FORMAT_ALIGNED = I2S_CONFIG_FORMAT_FORMAT_Aligned;
pub const I2S_CONFIG_CHANNELS_CHANNELS_STEREO = I2S_CONFIG_CHANNELS_CHANNELS_Stereo;
pub const I2S_CONFIG_CHANNELS_CHANNELS_LEFT = I2S_CONFIG_CHANNELS_CHANNELS_Left;
pub const I2S_CONFIG_CHANNELS_CHANNELS_RIGHT = I2S_CONFIG_CHANNELS_CHANNELS_Right;
pub const LPCOMP_RESULT_RESULT_Bellow = LPCOMP_RESULT_RESULT_Below;
pub inline fn __ALIGN(n: anytype) @TypeOf(__attribute__(aligned(n))) {
    return __attribute__(aligned(n));
}
pub const __UNUSED = __attribute__(unused);
pub const CLOCK_COUNT = 1;
pub const POWER_COUNT = 1;
pub const POWER_FEATURE_RAM_REGISTERS_COUNT = 9;
pub const NVMC_COUNT = 1;
pub const FPU_COUNT = 1;
pub const SYSTICK_COUNT = 1;
pub const SWI_COUNT = 6;
pub const MWU_COUNT = 1;
pub const GPIO_COUNT = 2;
pub const P0_PIN_NUM = 32;
pub const P1_PIN_NUM = 16;
pub const P0_FEATURE_PINS_PRESENT = @as(c_ulong, 0xFFFFFFFF);
pub const P1_FEATURE_PINS_PRESENT = @as(c_ulong, 0x0000FFFF);
pub const ACL_REGIONS_COUNT = 8;
pub const RADIO_COUNT = 1;
pub const RADIO_EASYDMA_MAXCNT_SIZE = 8;
pub const AAR_COUNT = 1;
pub const AAR_MAX_IRK_NUM = 16;
pub const ECB_COUNT = 1;
pub const CCM_COUNT = 1;
pub const NFCT_COUNT = 1;
pub const NFCT_EASYDMA_MAXCNT_SIZE = 9;
pub const PPI_COUNT = 1;
pub const PPI_CH_NUM = 20;
pub const PPI_FIXED_CH_NUM = 12;
pub const PPI_GROUP_NUM = 6;
pub const EGU_COUNT = 6;
pub const EGU0_CH_NUM = 16;
pub const EGU1_CH_NUM = 16;
pub const EGU2_CH_NUM = 16;
pub const EGU3_CH_NUM = 16;
pub const EGU4_CH_NUM = 16;
pub const EGU5_CH_NUM = 16;
pub const TIMER_COUNT = 5;
pub const TIMER0_MAX_SIZE = 32;
pub const TIMER1_MAX_SIZE = 32;
pub const TIMER2_MAX_SIZE = 32;
pub const TIMER3_MAX_SIZE = 32;
pub const TIMER4_MAX_SIZE = 32;
pub const TIMER0_CC_NUM = 4;
pub const TIMER1_CC_NUM = 4;
pub const TIMER2_CC_NUM = 4;
pub const TIMER3_CC_NUM = 6;
pub const TIMER4_CC_NUM = 6;
pub const RTC_COUNT = 3;
pub const RTC0_CC_NUM = 3;
pub const RTC1_CC_NUM = 4;
pub const RTC2_CC_NUM = 4;
pub const RNG_COUNT = 1;
pub const WDT_COUNT = 1;
pub const TEMP_COUNT = 1;
pub const SPI_COUNT = 3;
pub const SPIM_COUNT = 4;
pub const SPIM0_MAX_DATARATE = 8;
pub const SPIM1_MAX_DATARATE = 8;
pub const SPIM2_MAX_DATARATE = 8;
pub const SPIM3_MAX_DATARATE = 32;
pub const SPIM0_FEATURE_HARDWARE_CSN_PRESENT = 0;
pub const SPIM1_FEATURE_HARDWARE_CSN_PRESENT = 0;
pub const SPIM2_FEATURE_HARDWARE_CSN_PRESENT = 0;
pub const SPIM3_FEATURE_HARDWARE_CSN_PRESENT = 1;
pub const SPIM0_FEATURE_DCX_PRESENT = 0;
pub const SPIM1_FEATURE_DCX_PRESENT = 0;
pub const SPIM2_FEATURE_DCX_PRESENT = 0;
pub const SPIM3_FEATURE_DCX_PRESENT = 1;
pub const SPIM0_FEATURE_RXDELAY_PRESENT = 0;
pub const SPIM1_FEATURE_RXDELAY_PRESENT = 0;
pub const SPIM2_FEATURE_RXDELAY_PRESENT = 0;
pub const SPIM3_FEATURE_RXDELAY_PRESENT = 1;
pub const SPIM0_EASYDMA_MAXCNT_SIZE = 16;
pub const SPIM1_EASYDMA_MAXCNT_SIZE = 16;
pub const SPIM2_EASYDMA_MAXCNT_SIZE = 16;
pub const SPIM3_EASYDMA_MAXCNT_SIZE = 16;
pub const SPIS_COUNT = 3;
pub const SPIS0_EASYDMA_MAXCNT_SIZE = 16;
pub const SPIS1_EASYDMA_MAXCNT_SIZE = 16;
pub const SPIS2_EASYDMA_MAXCNT_SIZE = 16;
pub const TWI_COUNT = 2;
pub const TWIM_COUNT = 2;
pub const TWIM0_EASYDMA_MAXCNT_SIZE = 16;
pub const TWIM1_EASYDMA_MAXCNT_SIZE = 16;
pub const TWIS_COUNT = 2;
pub const TWIS0_EASYDMA_MAXCNT_SIZE = 16;
pub const TWIS1_EASYDMA_MAXCNT_SIZE = 16;
pub const UART_COUNT = 1;
pub const UARTE_COUNT = 2;
pub const UARTE0_EASYDMA_MAXCNT_SIZE = 16;
pub const UARTE1_EASYDMA_MAXCNT_SIZE = 16;
pub const QDEC_COUNT = 1;
pub const SAADC_COUNT = 1;
pub const SAADC_EASYDMA_MAXCNT_SIZE = 15;
pub const SAADC_CH_NUM = 8;
pub const GPIOTE_COUNT = 1;
pub const GPIOTE_CH_NUM = 8;
pub const LPCOMP_COUNT = 1;
pub const LPCOMP_REFSEL_RESOLUTION = 16;
pub const COMP_COUNT = 1;
pub const PWM_COUNT = 4;
pub const PWM0_CH_NUM = 4;
pub const PWM1_CH_NUM = 4;
pub const PWM2_CH_NUM = 4;
pub const PWM3_CH_NUM = 4;
pub const PWM0_EASYDMA_MAXCNT_SIZE = 15;
pub const PWM1_EASYDMA_MAXCNT_SIZE = 15;
pub const PWM2_EASYDMA_MAXCNT_SIZE = 15;
pub const PWM3_EASYDMA_MAXCNT_SIZE = 15;
pub const PDM_COUNT = 1;
pub const PDM_EASYDMA_MAXCNT_SIZE = 15;
pub const I2S_COUNT = 1;
pub const I2S_EASYDMA_MAXCNT_SIZE = 14;
pub const USBD_COUNT = 1;
pub const USBD_EASYDMA_MAXCNT_SIZE = 7;
pub const CRYPTOCELL_COUNT = 1;
pub const QSPI_COUNT = 1;
pub const QSPI_EASYDMA_MAXCNT_SIZE = 20;
pub inline fn NRFX_CHECK(module_enabled: anytype) @TypeOf(module_enabled) {
    return module_enabled;
}
pub inline fn NRFX_CONCAT_2(p1: anytype, p2: anytype) @TypeOf(NRFX_CONCAT_2_(p1, p2)) {
    return NRFX_CONCAT_2_(p1, p2);
}
pub inline fn NRFX_CONCAT_3(p1: anytype, p2: anytype, p3: anytype) @TypeOf(NRFX_CONCAT_3_(p1, p2, p3)) {
    return NRFX_CONCAT_3_(p1, p2, p3);
}
pub inline fn NRFX_ROUNDED_DIV(a: anytype, b: anytype) @TypeOf((a + (b / 2)) / b) {
    return (a + (b / 2)) / b;
}
pub inline fn NRFX_CEIL_DIV(a: anytype, b: anytype) @TypeOf(((a - 1) / b) + 1) {
    return ((a - 1) / b) + 1;
}
pub inline fn NRFX_ARRAY_SIZE(array: anytype) @TypeOf(@import("std").meta.sizeof(array) / @import("std").meta.sizeof(array[0])) {
    return @import("std").meta.sizeof(array) / @import("std").meta.sizeof(array[0]);
}
pub inline fn NRFX_OFFSETOF(type_1: anytype, member: anytype) @TypeOf(usize & ((@import("std").meta.cast([*c]type_1, 0)).*.member)) {
    return usize & ((@import("std").meta.cast([*c]type_1, 0)).*.member);
}
pub inline fn NRFX_EASYDMA_LENGTH_VALIDATE(peripheral: anytype, length1: anytype, length2: anytype) @TypeOf((length1 < (@as(c_uint, 1) << NRFX_CONCAT_2(peripheral, _EASYDMA_MAXCNT_SIZE))) and (length2 < (@as(c_uint, 1) << NRFX_CONCAT_2(peripheral, _EASYDMA_MAXCNT_SIZE)))) {
    return (length1 < (@as(c_uint, 1) << NRFX_CONCAT_2(peripheral, _EASYDMA_MAXCNT_SIZE))) and (length2 < (@as(c_uint, 1) << NRFX_CONCAT_2(peripheral, _EASYDMA_MAXCNT_SIZE)));
}
pub inline fn NRFX_PERIPHERAL_ID_GET(base_addr: anytype) @TypeOf((@import("std").meta.cast(u8, (@import("std").meta.cast(u32, base_addr)) >> 12))) {
    return (@import("std").meta.cast(u8, (@import("std").meta.cast(u32, base_addr)) >> 12));
}
pub inline fn NRFX_IRQ_NUMBER_GET(base_addr: anytype) @TypeOf(NRFX_PERIPHERAL_ID_GET(base_addr)) {
    return NRFX_PERIPHERAL_ID_GET(base_addr);
}
pub const TWI_ONLY = (defined(TWI_PRESENT) != 0) and !(defined(TWIM_PRESENT) != 0);
pub const TWIM_ONLY = !(defined(TWI_PRESENT) != 0) and (defined(TWIM_PRESENT) != 0);
pub const TWI_AND_TWIM = (defined(TWI_PRESENT) != 0) and (defined(TWIM_PRESENT) != 0);
pub const nrfx_power_clock_irq_handler = POWER_CLOCK_IRQHandler;
pub const nrfx_uarte_0_irq_handler = UARTE0_UART0_IRQHandler;
pub const nrfx_uart_0_irq_handler = UARTE0_UART0_IRQHandler;
pub const nrfx_spim_0_irq_handler = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler;
pub const nrfx_spis_0_irq_handler = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler;
pub const nrfx_twim_0_irq_handler = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler;
pub const nrfx_twis_0_irq_handler = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler;
pub const nrfx_spi_0_irq_handler = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler;
pub const nrfx_twi_0_irq_handler = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler;
pub const nrfx_spim_1_irq_handler = SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler;
pub const nrfx_spis_1_irq_handler = SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler;
pub const nrfx_twim_1_irq_handler = SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler;
pub const nrfx_twis_1_irq_handler = SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler;
pub const nrfx_spi_1_irq_handler = SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler;
pub const nrfx_twi_1_irq_handler = SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler;
pub const nrfx_nfct_irq_handler = NFCT_IRQHandler;
pub const nrfx_gpiote_irq_handler = GPIOTE_IRQHandler;
pub const nrfx_saadc_irq_handler = SAADC_IRQHandler;
pub const nrfx_timer_0_irq_handler = TIMER0_IRQHandler;
pub const nrfx_timer_1_irq_handler = TIMER1_IRQHandler;
pub const nrfx_timer_2_irq_handler = TIMER2_IRQHandler;
pub const nrfx_rtc_0_irq_handler = RTC0_IRQHandler;
pub const nrfx_temp_irq_handler = TEMP_IRQHandler;
pub const nrfx_rng_irq_handler = RNG_IRQHandler;
pub const nrfx_wdt_irq_handler = WDT_IRQHandler;
pub const nrfx_rtc_1_irq_handler = RTC1_IRQHandler;
pub const nrfx_qdec_irq_handler = QDEC_IRQHandler;
pub const nrfx_comp_irq_handler = COMP_LPCOMP_IRQHandler;
pub const nrfx_lpcomp_irq_handler = COMP_LPCOMP_IRQHandler;
pub const nrfx_swi_0_irq_handler = SWI0_EGU0_IRQHandler;
pub const nrfx_swi_1_irq_handler = SWI1_EGU1_IRQHandler;
pub const nrfx_swi_2_irq_handler = SWI2_EGU2_IRQHandler;
pub const nrfx_swi_3_irq_handler = SWI3_EGU3_IRQHandler;
pub const nrfx_swi_4_irq_handler = SWI4_EGU4_IRQHandler;
pub const nrfx_swi_5_irq_handler = SWI5_EGU5_IRQHandler;
pub const nrfx_timer_3_irq_handler = TIMER3_IRQHandler;
pub const nrfx_timer_4_irq_handler = TIMER4_IRQHandler;
pub const nrfx_pwm_0_irq_handler = PWM0_IRQHandler;
pub const nrfx_pdm_irq_handler = PDM_IRQHandler;
pub const nrfx_pwm_1_irq_handler = PWM1_IRQHandler;
pub const nrfx_pwm_2_irq_handler = PWM2_IRQHandler;
pub const nrfx_spim_2_irq_handler = SPIM2_SPIS2_SPI2_IRQHandler;
pub const nrfx_spis_2_irq_handler = SPIM2_SPIS2_SPI2_IRQHandler;
pub const nrfx_spi_2_irq_handler = SPIM2_SPIS2_SPI2_IRQHandler;
pub const nrfx_rtc_2_irq_handler = RTC2_IRQHandler;
pub const nrfx_i2s_irq_handler = I2S_IRQHandler;
pub const nrfx_usbd_irq_handler = USBD_IRQHandler;
pub const nrfx_uarte_1_irq_handler = UARTE1_IRQHandler;
pub const nrfx_qspi_irq_handler = QSPI_IRQHandler;
pub const nrfx_pwm_3_irq_handler = PWM3_IRQHandler;
pub const nrfx_spim_3_irq_handler = SPIM3_IRQHandler;
pub const NRF_ASSERT_PRESENT = 0;
pub inline fn NRFX_ASSERT(expression: anytype) @TypeOf(ASSERT(expression)) {
    return ASSERT(expression);
}
pub inline fn MSB_32(a: anytype) @TypeOf((a & 0xFF000000) >> 24) {
    return (a & 0xFF000000) >> 24;
}
pub inline fn LSB_32(a: anytype) @TypeOf(a & 0x000000FF) {
    return a & 0x000000FF;
}
pub inline fn MSB_16(a: anytype) @TypeOf((a & 0xFF00) >> 8) {
    return (a & 0xFF00) >> 8;
}
pub inline fn LSB_16(a: anytype) @TypeOf(a & 0x00FF) {
    return a & 0x00FF;
}
pub inline fn MIN(a: anytype, b: anytype) @TypeOf(if (a < b) a else b) {
    return if (a < b) a else b;
}
pub inline fn MAX(a: anytype, b: anytype) @TypeOf(if (a < b) b else a) {
    return if (a < b) b else a;
}
pub inline fn CONCAT_2(p1: anytype, p2: anytype) @TypeOf(CONCAT_2_(p1, p2)) {
    return CONCAT_2_(p1, p2);
}
pub inline fn CONCAT_3(p1: anytype, p2: anytype, p3: anytype) @TypeOf(CONCAT_3_(p1, p2, p3)) {
    return CONCAT_3_(p1, p2, p3);
}
pub inline fn STRINGIFY(val: anytype) @TypeOf(STRINGIFY_(val)) {
    return STRINGIFY_(val);
}
pub inline fn ARRAY_SIZE(arr: anytype) @TypeOf(@import("std").meta.sizeof(arr) / @import("std").meta.sizeof(arr[0])) {
    return @import("std").meta.sizeof(arr) / @import("std").meta.sizeof(arr[0]);
}
pub inline fn IS_SET(W: anytype, B: anytype) @TypeOf((W >> B) & 1) {
    return (W >> B) & 1;
}
pub const BIT_0 = 0x01;
pub const BIT_1 = 0x02;
pub const BIT_2 = 0x04;
pub const BIT_3 = 0x08;
pub const BIT_4 = 0x10;
pub const BIT_5 = 0x20;
pub const BIT_6 = 0x40;
pub const BIT_7 = 0x80;
pub const BIT_8 = 0x0100;
pub const BIT_9 = 0x0200;
pub const BIT_10 = 0x0400;
pub const BIT_11 = 0x0800;
pub const BIT_12 = 0x1000;
pub const BIT_13 = 0x2000;
pub const BIT_14 = 0x4000;
pub const BIT_15 = 0x8000;
pub const BIT_16 = 0x00010000;
pub const BIT_17 = 0x00020000;
pub const BIT_18 = 0x00040000;
pub const BIT_19 = 0x00080000;
pub const BIT_20 = 0x00100000;
pub const BIT_21 = 0x00200000;
pub const BIT_22 = 0x00400000;
pub const BIT_23 = 0x00800000;
pub const BIT_24 = 0x01000000;
pub const BIT_25 = 0x02000000;
pub const BIT_26 = 0x04000000;
pub const BIT_27 = 0x08000000;
pub const BIT_28 = 0x10000000;
pub const BIT_29 = 0x20000000;
pub const BIT_30 = 0x40000000;
pub const BIT_31 = 0x80000000;
pub inline fn UNUSED_VARIABLE(X: anytype) @TypeOf((@import("std").meta.cast(c_void, X))) {
    return (@import("std").meta.cast(c_void, X));
}
pub inline fn UNUSED_PARAMETER(X: anytype) @TypeOf(UNUSED_VARIABLE(X)) {
    return UNUSED_VARIABLE(X);
}
pub inline fn UNUSED_RETURN_VALUE(X: anytype) @TypeOf(UNUSED_VARIABLE(X)) {
    return UNUSED_VARIABLE(X);
}
pub const STACK_BASE = &__StackLimit;
pub const STACK_TOP = &__StackTop;
pub const CODE_START = u32 & __isr_vector;
pub const CODE_END = u32 & __etext;
pub const CODE_SIZE = CODE_END - CODE_START;
pub const BOOTLOADER_ADDRESS = NRF_UICR.*.NRFFW[0];
pub const MBR_PARAMS_PAGE_ADDRESS = NRF_UICR.*.NRFFW[1];
pub inline fn VBITS(val: anytype) @TypeOf(VBITS_32(val)) {
    return VBITS_32(val);
}
pub inline fn VBITS_1(v: anytype) @TypeOf(if ((v & (@as(c_uint, 0x0001) << 0)) != 0) @as(c_uint, 1) else @as(c_uint, 0)) {
    return if ((v & (@as(c_uint, 0x0001) << 0)) != 0) @as(c_uint, 1) else @as(c_uint, 0);
}
pub inline fn VBITS_2(v: anytype) @TypeOf(if ((v & (@as(c_uint, 0x0001) << 1)) != 0) VBITS_1(v >> 1) + 1 else VBITS_1(v)) {
    return if ((v & (@as(c_uint, 0x0001) << 1)) != 0) VBITS_1(v >> 1) + 1 else VBITS_1(v);
}
pub inline fn VBITS_4(v: anytype) @TypeOf(if ((v & (@as(c_uint, 0x0003) << 2)) != 0) VBITS_2(v >> 2) + 2 else VBITS_2(v)) {
    return if ((v & (@as(c_uint, 0x0003) << 2)) != 0) VBITS_2(v >> 2) + 2 else VBITS_2(v);
}
pub inline fn VBITS_8(v: anytype) @TypeOf(if ((v & (@as(c_uint, 0x000f) << 4)) != 0) VBITS_4(v >> 4) + 4 else VBITS_4(v)) {
    return if ((v & (@as(c_uint, 0x000f) << 4)) != 0) VBITS_4(v >> 4) + 4 else VBITS_4(v);
}
pub inline fn VBITS_16(v: anytype) @TypeOf(if ((v & (@as(c_uint, 0x00ff) << 8)) != 0) VBITS_8(v >> 8) + 8 else VBITS_8(v)) {
    return if ((v & (@as(c_uint, 0x00ff) << 8)) != 0) VBITS_8(v >> 8) + 8 else VBITS_8(v);
}
pub inline fn VBITS_32(v: anytype) @TypeOf(if ((v & (@as(c_uint, 0xffff) << 16)) != 0) VBITS_16(v >> 16) + 16 else VBITS_16(v)) {
    return if ((v & (@as(c_uint, 0xffff) << 16)) != 0) VBITS_16(v >> 16) + 16 else VBITS_16(v);
}
pub inline fn STRING_CONCATENATE(lhs: anytype, rhs: anytype) @TypeOf(STRING_CONCATENATE_IMPL(lhs, rhs)) {
    return STRING_CONCATENATE_IMPL(lhs, rhs);
}
pub inline fn ROUNDED_DIV(A: anytype, B: anytype) @TypeOf((A + (B / 2)) / B) {
    return (A + (B / 2)) / B;
}
pub inline fn IS_POWER_OF_TWO(A: anytype) @TypeOf((A != 0) and (((A - 1) & A) == 0)) {
    return (A != 0) and (((A - 1) & A) == 0);
}
pub inline fn MSEC_TO_UNITS(TIME: anytype, RESOLUTION: anytype) @TypeOf((TIME * 1000) / RESOLUTION) {
    return (TIME * 1000) / RESOLUTION;
}
pub inline fn CEIL_DIV(A: anytype, B: anytype) @TypeOf(((A + B) - 1) / B) {
    return ((A + B) - 1) / B;
}
pub inline fn BYTES_TO_WORDS(n_bytes: anytype) @TypeOf((n_bytes + 3) >> 2) {
    return (n_bytes + 3) >> 2;
}
pub const BYTES_PER_WORD = 4;
pub inline fn ALIGN_NUM(alignment: anytype, number: anytype) @TypeOf(((number - 1) + alignment) - ((number - 1) % alignment)) {
    return ((number - 1) + alignment) - ((number - 1) % alignment);
}
pub inline fn GET_ARG_1(a1: anytype, a2: anytype) @TypeOf(a1) {
    return a1;
}
pub inline fn GET_ARG_2(a1: anytype, a2: anytype) @TypeOf(a2) {
    return a2;
}
pub inline fn CONTAINER_OF(ptr: anytype, type_1: anytype, member: anytype) @TypeOf((@import("std").meta.cast([*c]type_1, (@import("std").meta.cast([*c]u8, ptr - offsetof(type_1, member)))))) {
    return (@import("std").meta.cast([*c]type_1, (@import("std").meta.cast([*c]u8, ptr - offsetof(type_1, member)))));
}
pub inline fn BF_MASK(bcnt: anytype, boff: anytype) @TypeOf(((@as(c_uint, 1) << bcnt) - @as(c_uint, 1)) << boff) {
    return ((@as(c_uint, 1) << bcnt) - @as(c_uint, 1)) << boff;
}
pub inline fn BF_GET(val: anytype, bcnt: anytype, boff: anytype) @TypeOf((val & BF_MASK(bcnt, boff)) >> boff) {
    return (val & BF_MASK(bcnt, boff)) >> boff;
}
pub inline fn BF_VAL(val: anytype, bcnt: anytype, boff: anytype) @TypeOf(((@import("std").meta.cast(u32, val)) << boff) & BF_MASK(bcnt, boff)) {
    return ((@import("std").meta.cast(u32, val)) << boff) & BF_MASK(bcnt, boff);
}
pub const BF_CX_BCNT_POS = @as(c_uint, 0);
pub const BF_CX_BCNT_MASK = @as(c_uint, 0xff) << BF_CX_BCNT_POS;
pub const BF_CX_BOFF_POS = @as(c_uint, 8);
pub const BF_CX_BOFF_MASK = @as(c_uint, 0xff) << BF_CX_BOFF_POS;
pub inline fn BF_CX(bcnt: anytype, boff: anytype) @TypeOf((((@import("std").meta.cast(u32, bcnt)) << BF_CX_BCNT_POS) & BF_CX_BCNT_MASK) | (((@import("std").meta.cast(u32, boff)) << BF_CX_BOFF_POS) & BF_CX_BOFF_MASK)) {
    return (((@import("std").meta.cast(u32, bcnt)) << BF_CX_BCNT_POS) & BF_CX_BCNT_MASK) | (((@import("std").meta.cast(u32, boff)) << BF_CX_BOFF_POS) & BF_CX_BOFF_MASK);
}
pub inline fn BF_CX_BCNT(bf_cx: anytype) @TypeOf((bf_cx & BF_CX_BCNT_MASK) >> BF_CX_BCNT_POS) {
    return (bf_cx & BF_CX_BCNT_MASK) >> BF_CX_BCNT_POS;
}
pub inline fn BF_CX_BOFF(bf_cx: anytype) @TypeOf((bf_cx & BF_CX_BOFF_MASK) >> BF_CX_BOFF_POS) {
    return (bf_cx & BF_CX_BOFF_MASK) >> BF_CX_BOFF_POS;
}
pub inline fn BF_CX_MASK(bf_cx: anytype) @TypeOf(BF_MASK(BF_CX_BCNT(bf_cx), BF_CX_BOFF(bf_cx))) {
    return BF_MASK(BF_CX_BCNT(bf_cx), BF_CX_BOFF(bf_cx));
}
pub inline fn BF_CX_GET(val: anytype, bf_cx: anytype) @TypeOf(BF_GET(val, BF_CX_BCNT(bf_cx), BF_CX_BOFF(bf_cx))) {
    return BF_GET(val, BF_CX_BCNT(bf_cx), BF_CX_BOFF(bf_cx));
}
pub inline fn BF_CX_VAL(val: anytype, bf_cx: anytype) @TypeOf(BF_VAL(val, BF_CX_BCNT(bf_cx), BF_CX_BOFF(bf_cx))) {
    return BF_VAL(val, BF_CX_BCNT(bf_cx), BF_CX_BOFF(bf_cx));
}
pub inline fn BRACKET_EXTRACT(a: anytype) @TypeOf(BRACKET_EXTRACT_(a)) {
    return BRACKET_EXTRACT_(a);
}
pub inline fn BRACKET_EXTRACT_(a: anytype) @TypeOf(BRACKET_EXTRACT__ ++ a) {
    return BRACKET_EXTRACT__ ++ a;
}
pub inline fn NUM_IS_MORE_THAN_1(N: anytype) @TypeOf(NUM_IS_MORE_THAN_1_(N)) {
    return NUM_IS_MORE_THAN_1_(N);
}
pub inline fn FIELD_ARRAY_SIZE(struct_type: anytype, field: anytype) @TypeOf(FIELD_SIZE(struct_type, field) / FIELD_SIZE(struct_type, field[0])) {
    return FIELD_SIZE(struct_type, field) / FIELD_SIZE(struct_type, field[0]);
}
pub const MACRO_MAP_FOR_N_LIST = blk: {
    _ = 0;
    _ = 1;
    _ = 2;
    _ = 3;
    _ = 4;
    _ = 5;
    _ = 6;
    _ = 7;
    _ = 8;
    _ = 9;
    _ = 10;
    _ = 11;
    _ = 12;
    _ = 13;
    _ = 14;
    _ = 15;
    _ = 16;
    _ = 17;
    _ = 18;
    _ = 19;
    _ = 20;
    _ = 21;
    _ = 22;
    _ = 23;
    _ = 24;
    _ = 25;
    _ = 26;
    _ = 27;
    _ = 28;
    _ = 29;
    _ = 30;
    _ = 31;
    break :blk 32;
};
pub inline fn NRFX_STATIC_ASSERT(expression: anytype) @TypeOf(STATIC_ASSERT(expression)) {
    return STATIC_ASSERT(expression);
}
pub inline fn INTERRUPT_PRIORITY_IS_VALID(pri: anytype) @TypeOf(pri < 8) {
    return pri < 8;
}
pub inline fn NRFX_IRQ_PRIORITY_SET(irq_number: anytype, priority: anytype) @TypeOf(_NRFX_IRQ_PRIORITY_SET(irq_number, priority)) {
    return _NRFX_IRQ_PRIORITY_SET(irq_number, priority);
}
pub inline fn NRFX_IRQ_ENABLE(irq_number: anytype) @TypeOf(_NRFX_IRQ_ENABLE(irq_number)) {
    return _NRFX_IRQ_ENABLE(irq_number);
}
pub inline fn NRFX_IRQ_IS_ENABLED(irq_number: anytype) @TypeOf(_NRFX_IRQ_IS_ENABLED(irq_number)) {
    return _NRFX_IRQ_IS_ENABLED(irq_number);
}
pub inline fn NRFX_IRQ_DISABLE(irq_number: anytype) @TypeOf(_NRFX_IRQ_DISABLE(irq_number)) {
    return _NRFX_IRQ_DISABLE(irq_number);
}
pub inline fn NRFX_IRQ_PENDING_SET(irq_number: anytype) @TypeOf(_NRFX_IRQ_PENDING_SET(irq_number)) {
    return _NRFX_IRQ_PENDING_SET(irq_number);
}
pub inline fn NRFX_IRQ_PENDING_CLEAR(irq_number: anytype) @TypeOf(_NRFX_IRQ_PENDING_CLEAR(irq_number)) {
    return _NRFX_IRQ_PENDING_CLEAR(irq_number);
}
pub inline fn NRFX_IRQ_IS_PENDING(irq_number: anytype) @TypeOf(_NRFX_IRQ_IS_PENDING(irq_number)) {
    return _NRFX_IRQ_IS_PENDING(irq_number);
}
pub const __NEWLIB_H__ = 1;
pub const _WANT_IO_C99_FORMATS = 1;
pub const _WANT_IO_LONG_LONG = 1;
pub const _WANT_REGISTER_FINI = 1;
pub const _REENT_CHECK_VERIFY = 1;
pub const _MB_LEN_MAX = 1;
pub const HAVE_INITFINI_ARRAY = 1;
pub const _ATEXIT_DYNAMIC_ALLOC = 1;
pub const _HAVE_LONG_DOUBLE = 1;
pub const _HAVE_CC_INHIBIT_LOOP_TO_LIBCALL = 1;
pub const _LDBL_EQ_DBL = 1;
pub const _FVWRITE_IN_STREAMIO = 1;
pub const _FSEEK_OPTIMIZATION = 1;
pub const _WIDE_ORIENT = 1;
pub const _UNBUF_STREAM_OPT = 1;
pub const _RETARGETABLE_LOCKING = 1;
pub const __OBSOLETE_MATH_DEFAULT = 1;
pub const __OBSOLETE_MATH = __OBSOLETE_MATH_DEFAULT;
pub const _POINTER_INT = c_long;
pub const __RAND_MAX = 0x7fffffff;
pub const _READ_WRITE_RETURN_TYPE = c_int;
pub const _READ_WRITE_BUFSIZE_TYPE = c_int;
pub inline fn _ATTRIBUTE(attrs: anytype) @TypeOf(__attribute__(attrs)) {
    return __attribute__(attrs);
}
pub const _NOINLINE = __attribute__(__noinline__);
pub inline fn __PMT(args: anytype) @TypeOf(args) {
    return args;
}
pub const __GNUCLIKE_ASM = 3;
pub const __GNUCLIKE___TYPEOF = 1;
pub const __GNUCLIKE___OFFSETOF = 1;
pub const __GNUCLIKE___SECTION = 1;
pub const __GNUCLIKE_CTOR_SECTION_HANDLING = 1;
pub const __GNUCLIKE_BUILTIN_CONSTANT_P = 1;
pub const __GNUCLIKE_BUILTIN_VARARGS = 1;
pub const __GNUCLIKE_BUILTIN_STDARG = 1;
pub const __GNUCLIKE_BUILTIN_VAALIST = 1;
pub const __GNUC_VA_LIST_COMPATIBILITY = 1;
pub const __GNUCLIKE_BUILTIN_NEXT_ARG = 1;
pub const __GNUCLIKE_BUILTIN_MEMCPY = 1;
pub const __CC_SUPPORTS_INLINE = 1;
pub const __CC_SUPPORTS___INLINE = 1;
pub const __CC_SUPPORTS___INLINE__ = 1;
pub const __CC_SUPPORTS___FUNC__ = 1;
pub const __CC_SUPPORTS_WARNING = 1;
pub const __CC_SUPPORTS_VARADIC_XXX = 1;
pub const __CC_SUPPORTS_DYNAMIC_ARRAY_INIT = 1;
pub inline fn __P(protos: anytype) @TypeOf(protos) {
    return protos;
}
pub inline fn __CONCAT(x: anytype, y: anytype) @TypeOf(__CONCAT1(x, y)) {
    return __CONCAT1(x, y);
}
pub inline fn __XSTRING(x: anytype) @TypeOf(__STRING(x)) {
    return __STRING(x);
}
pub const __signed = c_int;
pub const __weak_symbol = __attribute__(__weak__);
pub const __dead2 = __attribute__(__noreturn__);
pub const __pure2 = __attribute__(__const__);
pub const __unused = __attribute__(__unused__);
pub const __used = __attribute__(__used__);
pub const __packed = __attribute__(__packed__);
pub inline fn __aligned(x: anytype) @TypeOf(__attribute__(__aligned__(x))) {
    return __attribute__(__aligned__(x));
}
pub inline fn __section(x: anytype) @TypeOf(__attribute__(__section__(x))) {
    return __attribute__(__section__(x));
}
pub inline fn __alloc_size(x: anytype) @TypeOf(__attribute__(__alloc_size__(x))) {
    return __attribute__(__alloc_size__(x));
}
pub inline fn __alloc_size2(n: anytype, x: anytype) @TypeOf(__attribute__(__alloc_size__(n, x))) {
    return __attribute__(__alloc_size__(n, x));
}
pub inline fn __alloc_align(x: anytype) @TypeOf(__attribute__(__alloc_align__(x))) {
    return __attribute__(__alloc_align__(x));
}
pub const __malloc_like = __attribute__(__malloc__);
pub const __pure = __attribute__(__pure__);
pub const __always_inline = __inline__ ++ __attribute__(__always_inline__);
pub const __noinline = __attribute__(__noinline__);
pub inline fn __nonnull(x: anytype) @TypeOf(__attribute__(__nonnull__ ++ x)) {
    return __attribute__(__nonnull__ ++ x);
}
pub const __nonnull_all = __attribute__(__nonnull__);
pub const __fastcall = __attribute__(__fastcall__);
pub const __result_use_check = __attribute__(__warn_unused_result__);
pub const __returns_twice = __attribute__(__returns_twice__);
pub inline fn __predict_true(exp: anytype) @TypeOf(__builtin_expect(exp, 1)) {
    return __builtin_expect(exp, 1);
}
pub inline fn __predict_false(exp: anytype) @TypeOf(__builtin_expect(exp, 0)) {
    return __builtin_expect(exp, 0);
}
pub const __null_sentinel = __attribute__(__sentinel__);
pub const __exported = __attribute__(__visibility__("default"));
pub const __hidden = __attribute__(__visibility__("hidden"));
pub inline fn __offsetof(type_1: anytype, field: anytype) @TypeOf(offsetof(type_1, field)) {
    return offsetof(type_1, field);
}
pub inline fn __rangeof(type_1: anytype, start: anytype, end: anytype) @TypeOf(__offsetof(type_1, end) - __offsetof(type_1, start)) {
    return __offsetof(type_1, end) - __offsetof(type_1, start);
}
pub inline fn __printflike(fmtarg: anytype, firstvararg: anytype) @TypeOf(__attribute__(__format__(__printf__, fmtarg, firstvararg))) {
    return __attribute__(__format__(__printf__, fmtarg, firstvararg));
}
pub inline fn __scanflike(fmtarg: anytype, firstvararg: anytype) @TypeOf(__attribute__(__format__(__scanf__, fmtarg, firstvararg))) {
    return __attribute__(__format__(__scanf__, fmtarg, firstvararg));
}
pub inline fn __format_arg(fmtarg: anytype) @TypeOf(__attribute__(__format_arg__(fmtarg))) {
    return __attribute__(__format_arg__(fmtarg));
}
pub inline fn __strfmonlike(fmtarg: anytype, firstvararg: anytype) @TypeOf(__attribute__(__format__(__strfmon__, fmtarg, firstvararg))) {
    return __attribute__(__format__(__strfmon__, fmtarg, firstvararg));
}
pub inline fn __strftimelike(fmtarg: anytype, firstvararg: anytype) @TypeOf(__attribute__(__format__(__strftime__, fmtarg, firstvararg))) {
    return __attribute__(__format__(__strftime__, fmtarg, firstvararg));
}
pub const __NULLABILITY_PRAGMA_POP = _Pragma("clang diagnostic pop");
pub inline fn __arg_type_tag(arg_kind: anytype, arg_idx: anytype, type_tag_idx: anytype) @TypeOf(__attribute__(__argument_with_type_tag__(arg_kind, arg_idx, type_tag_idx))) {
    return __attribute__(__argument_with_type_tag__(arg_kind, arg_idx, type_tag_idx));
}
pub inline fn __datatype_type_tag(kind: anytype, type_1: anytype) @TypeOf(__attribute__(__type_tag_for_datatype__(kind, type_1))) {
    return __attribute__(__type_tag_for_datatype__(kind, type_1));
}
pub inline fn __lock_annotate(x: anytype) @TypeOf(__attribute__(x)) {
    return __attribute__(x);
}
pub const __lockable = __lock_annotate(lockable);
pub const __no_lock_analysis = __lock_annotate(no_thread_safety_analysis);
pub inline fn __guarded_by(x: anytype) @TypeOf(__lock_annotate(guarded_by(x))) {
    return __lock_annotate(guarded_by(x));
}
pub inline fn __pt_guarded_by(x: anytype) @TypeOf(__lock_annotate(pt_guarded_by(x))) {
    return __lock_annotate(pt_guarded_by(x));
}
pub inline fn va_start(ap: anytype, param: anytype) @TypeOf(__builtin_va_start(ap, param)) {
    return __builtin_va_start(ap, param);
}
pub inline fn va_end(ap: anytype) @TypeOf(__builtin_va_end(ap)) {
    return __builtin_va_end(ap);
}
pub inline fn va_arg(ap: anytype, type_1: anytype) @TypeOf(__builtin_va_arg(ap, type_1)) {
    return __builtin_va_arg(ap, type_1);
}
pub inline fn __va_copy(d: anytype, s: anytype) @TypeOf(__builtin_va_copy(d, s)) {
    return __builtin_va_copy(d, s);
}
pub inline fn va_copy(dest: anytype, src: anytype) @TypeOf(__builtin_va_copy(dest, src)) {
    return __builtin_va_copy(dest, src);
}
pub const __GNUC_VA_LIST = 1;
pub const _CLOCK_T_ = c_ulong;
pub const _TIME_T_ = __int_least64_t;
pub const _CLOCKID_T_ = c_ulong;
pub const _TIMER_T_ = c_ulong;
pub const _NULL = 0;
pub const __Long = c_long;
pub const _LOCK_RECURSIVE_T = _LOCK_T;
pub inline fn __LOCK_INIT_RECURSIVE(class: anytype, lock: anytype) @TypeOf(__LOCK_INIT(class, lock)) {
    return __LOCK_INIT(class, lock);
}
pub inline fn __lock_init(lock: anytype) @TypeOf(__retarget_lock_init(&lock)) {
    return __retarget_lock_init(&lock);
}
pub inline fn __lock_init_recursive(lock: anytype) @TypeOf(__retarget_lock_init_recursive(&lock)) {
    return __retarget_lock_init_recursive(&lock);
}
pub inline fn __lock_close(lock: anytype) @TypeOf(__retarget_lock_close(lock)) {
    return __retarget_lock_close(lock);
}
pub inline fn __lock_close_recursive(lock: anytype) @TypeOf(__retarget_lock_close_recursive(lock)) {
    return __retarget_lock_close_recursive(lock);
}
pub inline fn __lock_acquire(lock: anytype) @TypeOf(__retarget_lock_acquire(lock)) {
    return __retarget_lock_acquire(lock);
}
pub inline fn __lock_acquire_recursive(lock: anytype) @TypeOf(__retarget_lock_acquire_recursive(lock)) {
    return __retarget_lock_acquire_recursive(lock);
}
pub inline fn __lock_try_acquire(lock: anytype) @TypeOf(__retarget_lock_try_acquire(lock)) {
    return __retarget_lock_try_acquire(lock);
}
pub inline fn __lock_try_acquire_recursive(lock: anytype) @TypeOf(__retarget_lock_try_acquire_recursive(lock)) {
    return __retarget_lock_try_acquire_recursive(lock);
}
pub inline fn __lock_release(lock: anytype) @TypeOf(__retarget_lock_release(lock)) {
    return __retarget_lock_release(lock);
}
pub inline fn __lock_release_recursive(lock: anytype) @TypeOf(__retarget_lock_release_recursive(lock)) {
    return __retarget_lock_release_recursive(lock);
}
pub const _ATEXIT_SIZE = 32;
pub const _RAND48_SEED_0 = 0x330e;
pub const _RAND48_SEED_1 = 0xabcd;
pub const _RAND48_SEED_2 = 0x1234;
pub const _RAND48_MULT_0 = 0xe66d;
pub const _RAND48_MULT_1 = 0xdeec;
pub const _RAND48_MULT_2 = 0x0005;
pub const _RAND48_ADD = 0x000b;
pub const _REENT_EMERGENCY_SIZE = 25;
pub const _REENT_ASCTIME_SIZE = 26;
pub const _REENT_SIGNAL_SIZE = 24;
pub const _N_LISTS = 30;
pub inline fn _REENT_STDIO_STREAM(@"var": anytype, index_1: anytype) @TypeOf(&@"var".*.__sf[index_1]) {
    return &@"var".*.__sf[index_1];
}
pub inline fn _REENT_SIGNGAM(ptr: anytype) @TypeOf(ptr.*._new._reent._gamma_signgam) {
    return ptr.*._new._reent._gamma_signgam;
}
pub inline fn _REENT_RAND_NEXT(ptr: anytype) @TypeOf(ptr.*._new._reent._rand_next) {
    return ptr.*._new._reent._rand_next;
}
pub inline fn _REENT_RAND48_SEED(ptr: anytype) @TypeOf(ptr.*._new._reent._r48._seed) {
    return ptr.*._new._reent._r48._seed;
}
pub inline fn _REENT_RAND48_MULT(ptr: anytype) @TypeOf(ptr.*._new._reent._r48._mult) {
    return ptr.*._new._reent._r48._mult;
}
pub inline fn _REENT_RAND48_ADD(ptr: anytype) @TypeOf(ptr.*._new._reent._r48._add) {
    return ptr.*._new._reent._r48._add;
}
pub inline fn _REENT_MP_RESULT(ptr: anytype) @TypeOf(ptr.*._result) {
    return ptr.*._result;
}
pub inline fn _REENT_MP_RESULT_K(ptr: anytype) @TypeOf(ptr.*._result_k) {
    return ptr.*._result_k;
}
pub inline fn _REENT_MP_P5S(ptr: anytype) @TypeOf(ptr.*._p5s) {
    return ptr.*._p5s;
}
pub inline fn _REENT_MP_FREELIST(ptr: anytype) @TypeOf(ptr.*._freelist) {
    return ptr.*._freelist;
}
pub inline fn _REENT_ASCTIME_BUF(ptr: anytype) @TypeOf(ptr.*._new._reent._asctime_buf) {
    return ptr.*._new._reent._asctime_buf;
}
pub inline fn _REENT_TM(ptr: anytype) @TypeOf(&(ptr.*._new._reent._localtime_buf)) {
    return &(ptr.*._new._reent._localtime_buf);
}
pub inline fn _REENT_EMERGENCY(ptr: anytype) @TypeOf(ptr.*._emergency) {
    return ptr.*._emergency;
}
pub inline fn _REENT_STRTOK_LAST(ptr: anytype) @TypeOf(ptr.*._new._reent._strtok_last) {
    return ptr.*._new._reent._strtok_last;
}
pub inline fn _REENT_MBLEN_STATE(ptr: anytype) @TypeOf(ptr.*._new._reent._mblen_state) {
    return ptr.*._new._reent._mblen_state;
}
pub inline fn _REENT_MBTOWC_STATE(ptr: anytype) @TypeOf(ptr.*._new._reent._mbtowc_state) {
    return ptr.*._new._reent._mbtowc_state;
}
pub inline fn _REENT_WCTOMB_STATE(ptr: anytype) @TypeOf(ptr.*._new._reent._wctomb_state) {
    return ptr.*._new._reent._wctomb_state;
}
pub inline fn _REENT_MBRLEN_STATE(ptr: anytype) @TypeOf(ptr.*._new._reent._mbrlen_state) {
    return ptr.*._new._reent._mbrlen_state;
}
pub inline fn _REENT_MBRTOWC_STATE(ptr: anytype) @TypeOf(ptr.*._new._reent._mbrtowc_state) {
    return ptr.*._new._reent._mbrtowc_state;
}
pub inline fn _REENT_MBSRTOWCS_STATE(ptr: anytype) @TypeOf(ptr.*._new._reent._mbsrtowcs_state) {
    return ptr.*._new._reent._mbsrtowcs_state;
}
pub inline fn _REENT_WCRTOMB_STATE(ptr: anytype) @TypeOf(ptr.*._new._reent._wcrtomb_state) {
    return ptr.*._new._reent._wcrtomb_state;
}
pub inline fn _REENT_WCSRTOMBS_STATE(ptr: anytype) @TypeOf(ptr.*._new._reent._wcsrtombs_state) {
    return ptr.*._new._reent._wcsrtombs_state;
}
pub inline fn _REENT_L64A_BUF(ptr: anytype) @TypeOf(ptr.*._new._reent._l64a_buf) {
    return ptr.*._new._reent._l64a_buf;
}
pub inline fn _REENT_SIGNAL_BUF(ptr: anytype) @TypeOf(ptr.*._new._reent._signal_buf) {
    return ptr.*._new._reent._signal_buf;
}
pub inline fn _REENT_GETDATE_ERR_P(ptr: anytype) @TypeOf(&(ptr.*._new._reent._getdate_err)) {
    return &(ptr.*._new._reent._getdate_err);
}
pub const _Kmax = @import("std").meta.sizeof(usize) << 3;
pub const _REENT = _impure_ptr;
pub const _GLOBAL_REENT = _global_impure_ptr;
pub const _GLOBAL_ATEXIT = _GLOBAL_REENT.*._atexit;
pub const __BIT_TYPES_DEFINED__ = 1;
pub const _LITTLE_ENDIAN = 1234;
pub const _BIG_ENDIAN = 4321;
pub const _PDP_ENDIAN = 3412;
pub const _BYTE_ORDER = _LITTLE_ENDIAN;
pub const _QUAD_HIGHWORD = 1;
pub const _QUAD_LOWWORD = 0;
pub const LITTLE_ENDIAN = _LITTLE_ENDIAN;
pub const BIG_ENDIAN = _BIG_ENDIAN;
pub const PDP_ENDIAN = _PDP_ENDIAN;
pub const BYTE_ORDER = _BYTE_ORDER;
pub inline fn __bswap16(_x: anytype) @TypeOf(__builtin_bswap16(_x)) {
    return __builtin_bswap16(_x);
}
pub inline fn __bswap32(_x: anytype) @TypeOf(__builtin_bswap32(_x)) {
    return __builtin_bswap32(_x);
}
pub inline fn __bswap64(_x: anytype) @TypeOf(__builtin_bswap64(_x)) {
    return __builtin_bswap64(_x);
}
pub inline fn __htonl(_x: anytype) @TypeOf(__bswap32(_x)) {
    return __bswap32(_x);
}
pub inline fn __htons(_x: anytype) @TypeOf(__bswap16(_x)) {
    return __bswap16(_x);
}
pub inline fn __ntohl(_x: anytype) @TypeOf(__bswap32(_x)) {
    return __bswap32(_x);
}
pub inline fn __ntohs(_x: anytype) @TypeOf(__bswap16(_x)) {
    return __bswap16(_x);
}
pub const FD_SETSIZE = 64;
pub const NFDBITS = @import("std").meta.sizeof(fd_mask) * 8;
pub inline fn _howmany(x: anytype, y: anytype) @TypeOf((x + (y - 1)) / y) {
    return (x + (y - 1)) / y;
}
pub const fd_set = _types_fd_set;
pub inline fn FD_ISSET(n: anytype, p: anytype) @TypeOf(p.*.fds_bits[n / NFDBITS] & (@as(c_long, 1) << (n % NFDBITS))) {
    return p.*.fds_bits[n / NFDBITS] & (@as(c_long, 1) << (n % NFDBITS));
}
pub const physadr = physadr_t;
pub const quad = quad_t;
pub const SCHED_OTHER = 0;
pub const SCHED_FIFO = 1;
pub const SCHED_RR = 2;
pub const PTHREAD_SCOPE_PROCESS = 0;
pub const PTHREAD_SCOPE_SYSTEM = 1;
pub const PTHREAD_INHERIT_SCHED = 1;
pub const PTHREAD_EXPLICIT_SCHED = 2;
pub const PTHREAD_CREATE_DETACHED = 0;
pub const PTHREAD_CREATE_JOINABLE = 1;
pub const _PTHREAD_MUTEX_INITIALIZER = (@import("std").meta.cast(pthread_mutex_t, 0xFFFFFFFF));
pub const _PTHREAD_COND_INITIALIZER = (@import("std").meta.cast(pthread_cond_t, 0xFFFFFFFF));
pub inline fn _flockfile(fp: anytype) @TypeOf(if ((fp.*._flags) & __SSTR) 0 else __lock_acquire_recursive(fp.*._lock)) {
    return if ((fp.*._flags) & __SSTR) 0 else __lock_acquire_recursive(fp.*._lock);
}
pub inline fn _funlockfile(fp: anytype) @TypeOf(if ((fp.*._flags) & __SSTR) 0 else __lock_release_recursive(fp.*._lock)) {
    return if ((fp.*._flags) & __SSTR) 0 else __lock_release_recursive(fp.*._lock);
}
pub const __SLBF = 0x0001;
pub const __SNBF = 0x0002;
pub const __SRD = 0x0004;
pub const __SWR = 0x0008;
pub const __SRW = 0x0010;
pub const __SEOF = 0x0020;
pub const __SERR = 0x0040;
pub const __SMBF = 0x0080;
pub const __SAPP = 0x0100;
pub const __SSTR = 0x0200;
pub const __SOPT = 0x0400;
pub const __SNPT = 0x0800;
pub const __SOFF = 0x1000;
pub const __SORD = 0x2000;
pub const __SL64 = 0x8000;
pub const __SNLK = 0x0001;
pub const __SWID = 0x2000;
pub const _IOFBF = 0;
pub const _IOLBF = 1;
pub const _IONBF = 2;
pub const EOF = -1;
pub const BUFSIZ = 1024;
pub const FOPEN_MAX = 20;
pub const FILENAME_MAX = 1024;
pub const L_tmpnam = FILENAME_MAX;
pub const P_tmpdir = "/tmp";
pub const SEEK_SET = 0;
pub const SEEK_CUR = 1;
pub const SEEK_END = 2;
pub const TMP_MAX = 26;
pub const stdin = _REENT.*._stdin;
pub const stdout = _REENT.*._stdout;
pub const stderr = _REENT.*._stderr;
pub inline fn _stdin_r(x: anytype) @TypeOf(x.*._stdin) {
    return x.*._stdin;
}
pub inline fn _stdout_r(x: anytype) @TypeOf(x.*._stdout) {
    return x.*._stdout;
}
pub inline fn _stderr_r(x: anytype) @TypeOf(x.*._stderr) {
    return x.*._stderr;
}
pub const __VALIST = __gnuc_va_list;
pub inline fn __sgetc_r(__ptr: anytype, __p: anytype) @TypeOf(__sgetc_raw_r(__ptr, __p)) {
    return __sgetc_raw_r(__ptr, __p);
}
pub inline fn __sfeof(p: anytype) @TypeOf((@import("std").meta.cast(c_int, ((p.*._flags) & __SEOF) != 0))) {
    return (@import("std").meta.cast(c_int, ((p.*._flags) & __SEOF) != 0));
}
pub inline fn __sferror(p: anytype) @TypeOf((@import("std").meta.cast(c_int, ((p.*._flags) & __SERR) != 0))) {
    return (@import("std").meta.cast(c_int, ((p.*._flags) & __SERR) != 0));
}
pub inline fn __sfileno(p: anytype) @TypeOf(p.*._file) {
    return p.*._file;
}
pub const L_ctermid = 16;
pub const NRF_ERROR_BASE_NUM = 0x0;
pub const NRF_ERROR_SDM_BASE_NUM = 0x1000;
pub const NRF_ERROR_SOC_BASE_NUM = 0x2000;
pub const NRF_ERROR_STK_BASE_NUM = 0x3000;
pub const NRF_SUCCESS = NRF_ERROR_BASE_NUM + 0;
pub const NRF_ERROR_SVC_HANDLER_MISSING = NRF_ERROR_BASE_NUM + 1;
pub const NRF_ERROR_SOFTDEVICE_NOT_ENABLED = NRF_ERROR_BASE_NUM + 2;
pub const NRF_ERROR_INTERNAL = NRF_ERROR_BASE_NUM + 3;
pub const NRF_ERROR_NO_MEM = NRF_ERROR_BASE_NUM + 4;
pub const NRF_ERROR_NOT_FOUND = NRF_ERROR_BASE_NUM + 5;
pub const NRF_ERROR_NOT_SUPPORTED = NRF_ERROR_BASE_NUM + 6;
pub const NRF_ERROR_INVALID_PARAM = NRF_ERROR_BASE_NUM + 7;
pub const NRF_ERROR_INVALID_STATE = NRF_ERROR_BASE_NUM + 8;
pub const NRF_ERROR_INVALID_LENGTH = NRF_ERROR_BASE_NUM + 9;
pub const NRF_ERROR_INVALID_FLAGS = NRF_ERROR_BASE_NUM + 10;
pub const NRF_ERROR_INVALID_DATA = NRF_ERROR_BASE_NUM + 11;
pub const NRF_ERROR_DATA_SIZE = NRF_ERROR_BASE_NUM + 12;
pub const NRF_ERROR_TIMEOUT = NRF_ERROR_BASE_NUM + 13;
pub const NRF_ERROR_NULL = NRF_ERROR_BASE_NUM + 14;
pub const NRF_ERROR_FORBIDDEN = NRF_ERROR_BASE_NUM + 15;
pub const NRF_ERROR_INVALID_ADDR = NRF_ERROR_BASE_NUM + 16;
pub const NRF_ERROR_BUSY = NRF_ERROR_BASE_NUM + 17;
pub const NRF_ERROR_CONN_COUNT = NRF_ERROR_BASE_NUM + 18;
pub const NRF_ERROR_RESOURCES = NRF_ERROR_BASE_NUM + 19;
pub const NRF_ERROR_SDK_ERROR_BASE = NRF_ERROR_BASE_NUM + 0x8000;
pub const NRF_ERROR_SDK_COMMON_ERROR_BASE = NRF_ERROR_BASE_NUM + 0x0080;
pub const NRF_ERROR_MEMORY_MANAGER_ERR_BASE = 0x8100;
pub const NRF_ERROR_PERIPH_DRIVERS_ERR_BASE = 0x8200;
pub const NRF_ERROR_GAZELLE_ERR_BASE = 0x8300;
pub const NRF_ERROR_BLE_IPSP_ERR_BASE = 0x8400;
pub const NRF_ERROR_CRYPTO_ERR_BASE = 0x8500;
pub const NRF_ERROR_FDS_ERR_BASE = 0x8600;
pub const NRF_ERROR_IOT_ERR_BASE_START = 0xA000;
pub const NRF_ERROR_IOT_ERR_BASE_STOP = 0xAFFF;
pub const NRF_ERROR_MODULE_NOT_INITIALIZED = NRF_ERROR_SDK_COMMON_ERROR_BASE + 0x0000;
pub const NRF_ERROR_MUTEX_INIT_FAILED = NRF_ERROR_SDK_COMMON_ERROR_BASE + 0x0001;
pub const NRF_ERROR_MUTEX_LOCK_FAILED = NRF_ERROR_SDK_COMMON_ERROR_BASE + 0x0002;
pub const NRF_ERROR_MUTEX_UNLOCK_FAILED = NRF_ERROR_SDK_COMMON_ERROR_BASE + 0x0003;
pub const NRF_ERROR_MUTEX_COND_INIT_FAILED = NRF_ERROR_SDK_COMMON_ERROR_BASE + 0x0004;
pub const NRF_ERROR_MODULE_ALREADY_INITIALIZED = NRF_ERROR_SDK_COMMON_ERROR_BASE + 0x0005;
pub const NRF_ERROR_STORAGE_FULL = NRF_ERROR_SDK_COMMON_ERROR_BASE + 0x0006;
pub const NRF_ERROR_API_NOT_IMPLEMENTED = NRF_ERROR_SDK_COMMON_ERROR_BASE + 0x0010;
pub const NRF_ERROR_FEATURE_NOT_ENABLED = NRF_ERROR_SDK_COMMON_ERROR_BASE + 0x0011;
pub const NRF_ERROR_IO_PENDING = NRF_ERROR_SDK_COMMON_ERROR_BASE + 0x0012;
pub const NRF_ERROR_DRV_TWI_ERR_OVERRUN = NRF_ERROR_PERIPH_DRIVERS_ERR_BASE + 0x0000;
pub const NRF_ERROR_DRV_TWI_ERR_ANACK = NRF_ERROR_PERIPH_DRIVERS_ERR_BASE + 0x0001;
pub const NRF_ERROR_DRV_TWI_ERR_DNACK = NRF_ERROR_PERIPH_DRIVERS_ERR_BASE + 0x0002;
pub const NRF_ERROR_BLE_IPSP_RX_PKT_TRUNCATED = NRF_ERROR_BLE_IPSP_ERR_BASE + 0x0000;
pub const NRF_ERROR_BLE_IPSP_CHANNEL_ALREADY_EXISTS = NRF_ERROR_BLE_IPSP_ERR_BASE + 0x0001;
pub const NRF_ERROR_BLE_IPSP_LINK_DISCONNECTED = NRF_ERROR_BLE_IPSP_ERR_BASE + 0x0002;
pub const NRF_ERROR_BLE_IPSP_PEER_REJECTED = NRF_ERROR_BLE_IPSP_ERR_BASE + 0x0003;
pub const NRF_FAULT_ID_SDK_RANGE_START = 0x00004000;
pub const NRF_FAULT_ID_SDK_ERROR = NRF_FAULT_ID_SDK_RANGE_START + 1;
pub const NRF_FAULT_ID_SDK_ASSERT = NRF_FAULT_ID_SDK_RANGE_START + 2;
pub const APP_ERROR_ERROR_INFO_OFFSET_LINE_NUM = offsetof(error_info_t, line_num);
pub const APP_ERROR_ERROR_INFO_OFFSET_P_FILE_NAME = offsetof(error_info_t, p_file_name);
pub const APP_ERROR_ERROR_INFO_OFFSET_ERR_CODE = offsetof(error_info_t, err_code);
pub const APP_ERROR_ERROR_INFO_SIZE = @import("std").meta.sizeof(error_info_t);
pub const APP_ERROR_ERROR_INFO_SIZE_ALIGNED_8BYTE = ALIGN_NUM(APP_ERROR_ERROR_INFO_SIZE, @import("std").meta.sizeof(u64));
pub const _PRIO_SD_HIGH = 0;
pub const _PRIO_SD_MID = 1;
pub const _PRIO_APP_HIGH = 2;
pub const _PRIO_APP_MID = 3;
pub const _PRIO_SD_LOW = 4;
pub const _PRIO_APP_LOW_MID = 5;
pub const _PRIO_APP_LOW = 6;
pub const _PRIO_APP_LOWEST = 7;
pub const _PRIO_THREAD = 15;
pub const EXTERNAL_INT_VECTOR_OFFSET = 16;
pub const PACKED = __attribute__(@"packed");
pub const PRAGMA_OPTIMIZATION_FORCE_END = _Pragma("GCC pop_options");
pub inline fn CRITICAL_REGION_ENTER() @TypeOf(app_util_critical_region_enter(NULL)) {
    return app_util_critical_region_enter(NULL);
}
pub inline fn CRITICAL_REGION_EXIT() @TypeOf(app_util_critical_region_exit(0)) {
    return app_util_critical_region_exit(0);
}
pub inline fn GCC_PRAGMA(v: anytype) @TypeOf(_Pragma(v)) {
    return _Pragma(v);
}
pub const NRFX_DELAY_DWT_BASED = 0;
pub const NRFX_DELAY_CPU_FREQ_MHZ = 64;
pub const NRFX_DELAY_DWT_PRESENT = 1;
pub const NRFX_COREDEP_DELAY_US_LOOP_CYCLES = 3;
pub inline fn NRFX_DELAY_US(us_time: anytype) @TypeOf(nrfx_coredep_delay_us(us_time)) {
    return nrfx_coredep_delay_us(us_time);
}
pub const nrfx_atomic_t = nrfx_atomic_u32_t;
pub inline fn NRFX_ATOMIC_FETCH_STORE(p_data: anytype, value: anytype) @TypeOf(nrfx_atomic_u32_fetch_store(p_data, value)) {
    return nrfx_atomic_u32_fetch_store(p_data, value);
}
pub inline fn NRFX_ATOMIC_FETCH_OR(p_data: anytype, value: anytype) @TypeOf(nrfx_atomic_u32_fetch_or(p_data, value)) {
    return nrfx_atomic_u32_fetch_or(p_data, value);
}
pub inline fn NRFX_ATOMIC_FETCH_AND(p_data: anytype, value: anytype) @TypeOf(nrfx_atomic_u32_fetch_and(p_data, value)) {
    return nrfx_atomic_u32_fetch_and(p_data, value);
}
pub inline fn NRFX_ATOMIC_FETCH_XOR(p_data: anytype, value: anytype) @TypeOf(nrfx_atomic_u32_fetch_xor(p_data, value)) {
    return nrfx_atomic_u32_fetch_xor(p_data, value);
}
pub inline fn NRFX_ATOMIC_FETCH_ADD(p_data: anytype, value: anytype) @TypeOf(nrfx_atomic_u32_fetch_add(p_data, value)) {
    return nrfx_atomic_u32_fetch_add(p_data, value);
}
pub inline fn NRFX_ATOMIC_FETCH_SUB(p_data: anytype, value: anytype) @TypeOf(nrfx_atomic_u32_fetch_sub(p_data, value)) {
    return nrfx_atomic_u32_fetch_sub(p_data, value);
}
pub const NRFX_CUSTOM_ERROR_CODES = 1;
pub const NRFX_SUCCESS = NRF_SUCCESS;
pub const NRFX_ERROR_INTERNAL = NRF_ERROR_INTERNAL;
pub const NRFX_ERROR_NO_MEM = NRF_ERROR_NO_MEM;
pub const NRFX_ERROR_NOT_SUPPORTED = NRF_ERROR_NOT_SUPPORTED;
pub const NRFX_ERROR_INVALID_PARAM = NRF_ERROR_INVALID_PARAM;
pub const NRFX_ERROR_INVALID_STATE = NRF_ERROR_INVALID_STATE;
pub const NRFX_ERROR_INVALID_LENGTH = NRF_ERROR_INVALID_LENGTH;
pub const NRFX_ERROR_TIMEOUT = NRF_ERROR_TIMEOUT;
pub const NRFX_ERROR_FORBIDDEN = NRF_ERROR_FORBIDDEN;
pub const NRFX_ERROR_NULL = NRF_ERROR_NULL;
pub const NRFX_ERROR_INVALID_ADDR = NRF_ERROR_INVALID_ADDR;
pub const NRFX_ERROR_BUSY = NRF_ERROR_BUSY;
pub const NRFX_ERROR_ALREADY_INITIALIZED = NRF_ERROR_MODULE_ALREADY_INITIALIZED;
pub const NRFX_ERROR_DRV_TWI_ERR_OVERRUN = NRF_ERROR_DRV_TWI_ERR_OVERRUN;
pub const NRFX_ERROR_DRV_TWI_ERR_ANACK = NRF_ERROR_DRV_TWI_ERR_ANACK;
pub const NRFX_ERROR_DRV_TWI_ERR_DNACK = NRF_ERROR_DRV_TWI_ERR_DNACK;
pub const SD_PPI_RESTRICTED = @as(c_ulong, 0);
pub const SD_PPI_CHANNELS_USED = @as(c_ulong, 0);
pub const SD_PPI_GROUPS_USED = @as(c_ulong, 0);
pub const SD_TIMERS_USED = @as(c_ulong, 0);
pub const SD_SWI_USED = @as(c_ulong, 0);
pub const GZLL_PPI_CHANNELS_USED = @as(c_ulong, 0);
pub const GZLL_TIMERS_USED = @as(c_ulong, 0);
pub const GZLL_SWI_USED = @as(c_ulong, 0);
pub const ESB_PPI_CHANNELS_USED = @as(c_ulong, 0);
pub const ESB_TIMERS_USED = @as(c_ulong, 0);
pub const ESB_SWI_USED = @as(c_ulong, 0);
pub const NRF_PPI_CHANNELS_USED = (SD_PPI_CHANNELS_USED | GZLL_PPI_CHANNELS_USED) | ESB_PPI_CHANNELS_USED;
pub const NRF_PPI_GROUPS_USED = SD_PPI_GROUPS_USED;
pub const NRF_SWI_USED = (SD_SWI_USED | GZLL_SWI_USED) | ESB_SWI_USED;
pub const NRF_TIMERS_USED = (SD_TIMERS_USED | GZLL_TIMERS_USED) | ESB_TIMERS_USED;
pub const NRFX_PPI_CHANNELS_USED = NRF_PPI_CHANNELS_USED;
pub const NRFX_PPI_GROUPS_USED = NRF_PPI_GROUPS_USED;
pub const NRFX_SWI_USED = NRF_SWI_USED;
pub const NRFX_TIMERS_USED = NRF_TIMERS_USED;
pub const NRF_UART_PSEL_DISCONNECTED = 0xFFFFFFFF;
pub const MPU9250_OK = 0;
pub const MPU9250_ILLEGAL_VALUE = -1;
pub const MPU9250_DRIVER_INIT_FAIL = -2;
pub const MPU9250_DRIVER_READWRITE_FAIL = -3;
pub const MPU9250_BUFFER_SIZE = -4;
pub const MPU9250_NULL_PTR = -5;
pub const MPU9250_BUSY = -6;
pub const MPU9250_REG_SELF_TEST_X_GYRO = 0;
pub const MPU9250_REG_SELF_TEST_Y_GYRO = 1;
pub const MPU9250_REG_SELF_TEST_Z_GYRO = 2;
pub const MPU9250_REG_SELF_TEST_X_ACCEL = 13;
pub const MPU9250_REG_SELF_TEST_Y_ACCEL = 14;
pub const MPU9250_REG_SELF_TEST_Z_ACCEL = 15;
pub const MPU9250_REG_XG_OFFSET_HL = 19;
pub const MPU9250_REG_YG_OFFSET_HL = 21;
pub const MPU9250_REG_ZG_OFFSET_HL = 23;
pub const MPU9250_REG_SMPLRT_DIV = 25;
pub const MPU9250_REG_CONFIG = 26;
pub const MPU9250_REG_GYRO_CONFIG = 27;
pub const MPU9250_REG_ACCEL_CONFIG = 28;
pub const MPU9250_REG_ACCEL_CONFIG2 = 29;
pub const MPU9250_REG_LP_ACCEL_ODR = 30;
pub const MPU9250_REG_WOM_THR = 31;
pub const MPU9250_REG_FIFO_EN = 35;
pub const MPU9250_REG_I2C_MST_CTRL = 36;
pub const MPU9250_REG_I2C_SLV0_ADDR = 37;
pub const MPU9250_REG_I2C_SLV0_REG = 38;
pub const MPU9250_REG_I2C_SLV0_CTRL = 39;
pub const MPU9250_REG_I2C_SLV1_ADDR = 40;
pub const MPU9250_REG_I2C_SLV1_REG = 41;
pub const MPU9250_REG_I2C_SLV1_CTRL = 42;
pub const MPU9250_REG_I2C_SLV2_ADDR = 43;
pub const MPU9250_REG_I2C_SLV2_REG = 44;
pub const MPU9250_REG_I2C_SLV2_CTRL = 45;
pub const MPU9250_REG_I2C_SLV3_ADDR = 46;
pub const MPU9250_REG_I2C_SLV3_REG = 47;
pub const MPU9250_REG_I2C_SLV3_CTRL = 48;
pub const MPU9250_REG_I2C_SLV4_ADDR = 49;
pub const MPU9250_REG_I2C_SLV4_REG = 50;
pub const MPU9250_REG_I2C_SLV4_DO = 51;
pub const MPU9250_REG_I2C_SLV4_CTRL = 52;
pub const MPU9250_REG_I2C_SLV4_DI = 53;
pub const MPU9250_REG_I2C_MST_STATUS = 54;
pub const MPU9250_REG_INT_PIN_CFG = 55;
pub const MPU9250_REG_INT_ENABLE = 56;
pub const MPU9250_REG_INT_STATUS = 58;
pub const MPU9250_REG_ACCEL_XOUT_HL = 59;
pub const MPU9250_REG_ACCEL_YOUT_HL = 61;
pub const MPU9250_REG_ACCEL_ZOUT_HL = 63;
pub const MPU9250_REG_TEMP_HL = 65;
pub const MPU9250_REG_GYRO_XOUT_HL = 67;
pub const MPU9250_REG_GYRO_YOUT_HL = 69;
pub const MPU9250_REG_GYRO_ZOUT_HL = 71;
pub const MPU9250_REG_EXT_SENS_DATA_00 = 73;
pub const MPU9250_REG_I2C_SLV0_DO = 99;
pub const MPU9250_REG_I2C_SLV1_DO = 100;
pub const MPU9250_REG_I2C_SLV2_DO = 101;
pub const MPU9250_REG_I2C_SLV3_DO = 102;
pub const MPU9250_REG_I2C_MST_DELAY_CTRL = 103;
pub const MPU9250_REG_SIGNAL_PATH_RESET = 104;
pub const MPU9250_REG_MOT_DETECT_CTRL = 105;
pub const MPU9250_REG_USER_CTRL = 106;
pub const MPU9250_REG_PWR_MGMT_1 = 107;
pub const MPU9250_REG_PWR_MGMT_2 = 108;
pub const MPU9250_REG_FIFO_COUNT_HL = 114;
pub const MPU9250_REG_FIFO_R_W = 116;
pub const MPU9250_REG_WHO_AM_I = 117;
pub const MPU9250_REG_XA_OFFSET_HL = 119;
pub const MPU9250_REG_YA_OFFSET_HL = 122;
pub const MPU9250_REG_ZA_OFFSET_HL = 125;
pub const AK8963_I2C_ADDR = 0x0c;
pub const AK8963_REG_WIA = 0x00;
pub const AK8963_REG_INFO = 0x01;
pub const AK8963_REG_ST1 = 0x02;
pub const AK8963_REG_HX_LH = 0x03;
pub const AK8963_REG_HY_LH = 0x05;
pub const AK8963_REG_HZ_LH = 0x07;
pub const AK8963_REG_ST2 = 0x09;
pub const AK8963_REG_CNTL1 = 0x0A;
pub const AK8963_REG_CNTL2 = 0x0B;
pub const AK8963_REG_ASTC = 0x0C;
pub const AK8963_REG_ASAX = 0x10;
pub const AK8963_REG_ASAY = 0x11;
pub const AK8963_REG_ASAZ = 0x12;
pub const T_UINT32 = struct_T_UINT32;
pub const T_UINT16_WRITE = struct_T_UINT16_WRITE;
pub const T_UINT16_READ = struct_T_UINT16_READ;
pub const T_UINT32_WRITE = struct_T_UINT32_WRITE;
pub const T_UINT32_READ = struct_T_UINT32_READ;
pub const __lock = struct___lock;
pub const __locale_t = struct___locale_t;
pub const _Bigint = struct__Bigint;
pub const __tm = struct___tm;
pub const _rand48 = struct__rand48;
pub const _on_exit_args = struct__on_exit_args;
pub const _atexit = struct__atexit;
pub const _glue = struct__glue;
pub const _reent = struct__reent;
pub const __sbuf = struct___sbuf;
pub const __sFILE = struct___sFILE;
pub const timeval = struct_timeval;
pub const timespec = struct_timespec;
pub const itimerspec = struct_itimerspec;
pub const sched_param = struct_sched_param;
